package hl7v28

import hl7 "hl7"

// NewCCRI17ClinicalHistoryObject creates an implementation of CCRI17ClinicalHistoryObject
func NewCCRI17ClinicalHistoryObject(input hl7.HL7Type) CCRI17ClinicalHistoryObject {
	v := CCRI17ClinicalHistoryObject{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.DietaryOrdersSupplementsAndPreferences = NewODS(input.Index(1))
	v.Procedures = NewPR1(input.Index(2))
	v.ReferralInformation = NewRF1(input.Index(3))
	v.PatientAllergyInformation = NewAL1(input.Index(4))
	v.PatientAdverseReactionInformation = NewIAM(input.Index(5))
	v.Accident = NewACC(input.Index(6))
	v.RiskManagementIncident = NewRMI(input.Index(7))
	v.Disability = NewDB1(input.Index(8))
	v.Diagnosis = NewDG1(input.Index(9))
	v.DiagnosisRelatedGroup = NewDRG(input.Index(10))
	return v
}

type CCRI17ClinicalHistoryObject struct {
	ObservationRequest                     OBR
	DietaryOrdersSupplementsAndPreferences ODS
	Procedures                             PR1
	ReferralInformation                    RF1
	PatientAllergyInformation              AL1
	PatientAdverseReactionInformation      IAM
	Accident                               ACC
	RiskManagementIncident                 RMI
	Disability                             DB1
	Diagnosis                              DG1
	DiagnosisRelatedGroup                  DRG
}

// NewCCRI17ClinicalHistoryObjectSlice will construct a slice of type CCRI17ClinicalHistoryObject
func NewCCRI17ClinicalHistoryObjectSlice(input hl7.HL7Type) []CCRI17ClinicalHistoryObject {
	values := make([]CCRI17ClinicalHistoryObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI17ClinicalHistoryObject(input.Index(i))
	}
	return values
}

// NewRSPK31Encoding creates an implementation of RSPK31Encoding
func NewRSPK31Encoding(input hl7.HL7Type) RSPK31Encoding {
	v := RSPK31Encoding{}
	v.PharmacyTreatmentEncodedOrder = NewRXE(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.TimingEncoded = NewRSPK31TimingEncodedSlice(input.Index(2))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(3))
	v.PharmacyTreatmentComponentOrder = NewRXCSlice(input.Index(4))
	return v
}

type RSPK31Encoding struct {
	PharmacyTreatmentEncodedOrder   RXE
	NotesAndComments                []NTE
	TimingEncoded                   []RSPK31TimingEncoded
	PharmacyTreatmentRoute          []RXR
	PharmacyTreatmentComponentOrder []RXC
}

// NewRSPK31EncodingSlice will construct a slice of type RSPK31Encoding
func NewRSPK31EncodingSlice(input hl7.HL7Type) []RSPK31Encoding {
	values := make([]RSPK31Encoding, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPK31Encoding(input.Index(i))
	}
	return values
}

// NewRPAI08Provider creates an implementation of RPAI08Provider
func NewRPAI08Provider(input hl7.HL7Type) RPAI08Provider {
	v := RPAI08Provider{}
	v.ProviderData = NewPRD(input.Index(0))
	v.ContactData = NewCTDSlice(input.Index(1))
	return v
}

type RPAI08Provider struct {
	ProviderData PRD
	ContactData  []CTD
}

// NewRPAI08ProviderSlice will construct a slice of type RPAI08Provider
func NewRPAI08ProviderSlice(input hl7.HL7Type) []RPAI08Provider {
	values := make([]RPAI08Provider, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRPAI08Provider(input.Index(i))
	}
	return values
}

// NewSRMS09PersonnelResource creates an implementation of SRMS09PersonnelResource
func NewSRMS09PersonnelResource(input hl7.HL7Type) SRMS09PersonnelResource {
	v := SRMS09PersonnelResource{}
	v.AppointmentInformationPersonnelResource = NewAIP(input.Index(0))
	v.AppointmentPreferences = NewAPR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type SRMS09PersonnelResource struct {
	AppointmentInformationPersonnelResource AIP
	AppointmentPreferences                  APR
	NotesAndComments                        []NTE
}

// NewSRMS09PersonnelResourceSlice will construct a slice of type SRMS09PersonnelResource
func NewSRMS09PersonnelResourceSlice(input hl7.HL7Type) []SRMS09PersonnelResource {
	values := make([]SRMS09PersonnelResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS09PersonnelResource(input.Index(i))
	}
	return values
}

// NewMFNM07MfClinStudySched creates an implementation of MFNM07MfClinStudySched
func NewMFNM07MfClinStudySched(input hl7.HL7Type) MFNM07MfClinStudySched {
	v := MFNM07MfClinStudySched{}
	v.MasterFileEntry = NewMFE(input.Index(0))
	v.ClinicalStudyMaster = NewCM0(input.Index(1))
	v.ClinicalStudyScheduleMaster = NewCM2Slice(input.Index(2))
	return v
}

type MFNM07MfClinStudySched struct {
	MasterFileEntry             MFE
	ClinicalStudyMaster         CM0
	ClinicalStudyScheduleMaster []CM2
}

// NewMFNM07MfClinStudySchedSlice will construct a slice of type MFNM07MfClinStudySched
func NewMFNM07MfClinStudySchedSlice(input hl7.HL7Type) []MFNM07MfClinStudySched {
	values := make([]MFNM07MfClinStudySched, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMFNM07MfClinStudySched(input.Index(i))
	}
	return values
}

// NewRDEO11PatientVisit creates an implementation of RDEO11PatientVisit
func NewRDEO11PatientVisit(input hl7.HL7Type) RDEO11PatientVisit {
	v := RDEO11PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.AccessRestriction = NewARVSlice(input.Index(3))
	return v
}

type RDEO11PatientVisit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ParticipationInformation          []PRT
	AccessRestriction                 []ARV
}

// NewRDEO11PatientVisitSlice will construct a slice of type RDEO11PatientVisit
func NewRDEO11PatientVisitSlice(input hl7.HL7Type) []RDEO11PatientVisit {
	values := make([]RDEO11PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRDEO11PatientVisit(input.Index(i))
	}
	return values
}

// NewCSUC11TimingQty creates an implementation of CSUC11TimingQty
func NewCSUC11TimingQty(input hl7.HL7Type) CSUC11TimingQty {
	v := CSUC11TimingQty{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type CSUC11TimingQty struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewCSUC11TimingQtySlice will construct a slice of type CSUC11TimingQty
func NewCSUC11TimingQtySlice(input hl7.HL7Type) []CSUC11TimingQty {
	values := make([]CSUC11TimingQty, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCSUC11TimingQty(input.Index(i))
	}
	return values
}

// NewCCRI17ClinicalHistoryObservation creates an implementation of CCRI17ClinicalHistoryObservation
func NewCCRI17ClinicalHistoryObservation(input hl7.HL7Type) CCRI17ClinicalHistoryObservation {
	v := CCRI17ClinicalHistoryObservation{}
	v.ObservationResult = NewOBXSlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CCRI17ClinicalHistoryObservation struct {
	ObservationResult        []OBX
	ParticipationInformation []PRT
}

// NewCCRI17ClinicalHistoryObservationSlice will construct a slice of type CCRI17ClinicalHistoryObservation
func NewCCRI17ClinicalHistoryObservationSlice(input hl7.HL7Type) []CCRI17ClinicalHistoryObservation {
	values := make([]CCRI17ClinicalHistoryObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI17ClinicalHistoryObservation(input.Index(i))
	}
	return values
}

// NewSIUS13Service creates an implementation of SIUS13Service
func NewSIUS13Service(input hl7.HL7Type) SIUS13Service {
	v := SIUS13Service{}
	v.AppointmentInformation = NewAIS(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS13Service struct {
	AppointmentInformation AIS
	NotesAndComments       []NTE
}

// NewSIUS13ServiceSlice will construct a slice of type SIUS13Service
func NewSIUS13ServiceSlice(input hl7.HL7Type) []SIUS13Service {
	values := make([]SIUS13Service, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS13Service(input.Index(i))
	}
	return values
}

// NewREFI12PatientVisit creates an implementation of REFI12PatientVisit
func NewREFI12PatientVisit(input hl7.HL7Type) REFI12PatientVisit {
	v := REFI12PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	return v
}

type REFI12PatientVisit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
}

// NewREFI12PatientVisitSlice will construct a slice of type REFI12PatientVisit
func NewREFI12PatientVisitSlice(input hl7.HL7Type) []REFI12PatientVisit {
	values := make([]REFI12PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewREFI12PatientVisit(input.Index(i))
	}
	return values
}

// NewMFNM12MfObsAttributes creates an implementation of MFNM12MfObsAttributes
func NewMFNM12MfObsAttributes(input hl7.HL7Type) MFNM12MfObsAttributes {
	v := MFNM12MfObsAttributes{}
	v.MasterFileEntry = NewMFE(input.Index(0))
	v.GeneralSegment = NewOM1(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.MfObsOtherAttributes = NewMFNM12MfObsOtherAttributes(input.Index(3))
	return v
}

type MFNM12MfObsAttributes struct {
	MasterFileEntry          MFE
	GeneralSegment           OM1
	ParticipationInformation []PRT
	MfObsOtherAttributes     MFNM12MfObsOtherAttributes
}

// NewMFNM12MfObsAttributesSlice will construct a slice of type MFNM12MfObsAttributes
func NewMFNM12MfObsAttributesSlice(input hl7.HL7Type) []MFNM12MfObsAttributes {
	values := make([]MFNM12MfObsAttributes, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMFNM12MfObsAttributes(input.Index(i))
	}
	return values
}

// NewSIUS27GeneralResource creates an implementation of SIUS27GeneralResource
func NewSIUS27GeneralResource(input hl7.HL7Type) SIUS27GeneralResource {
	v := SIUS27GeneralResource{}
	v.AppointmentInformationGeneralResource = NewAIG(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS27GeneralResource struct {
	AppointmentInformationGeneralResource AIG
	NotesAndComments                      []NTE
}

// NewSIUS27GeneralResourceSlice will construct a slice of type SIUS27GeneralResource
func NewSIUS27GeneralResourceSlice(input hl7.HL7Type) []SIUS27GeneralResource {
	values := make([]SIUS27GeneralResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS27GeneralResource(input.Index(i))
	}
	return values
}

// NewCCMI21MedicationEncodingObservation creates an implementation of CCMI21MedicationEncodingObservation
func NewCCMI21MedicationEncodingObservation(input hl7.HL7Type) CCMI21MedicationEncodingObservation {
	v := CCMI21MedicationEncodingObservation{}
	v.ObservationResult = NewOBXSlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CCMI21MedicationEncodingObservation struct {
	ObservationResult        []OBX
	ParticipationInformation []PRT
}

// NewCCMI21MedicationEncodingObservationSlice will construct a slice of type CCMI21MedicationEncodingObservation
func NewCCMI21MedicationEncodingObservationSlice(input hl7.HL7Type) []CCMI21MedicationEncodingObservation {
	values := make([]CCMI21MedicationEncodingObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCMI21MedicationEncodingObservation(input.Index(i))
	}
	return values
}

// NewOMGO19Observation creates an implementation of OMGO19Observation
func NewOMGO19Observation(input hl7.HL7Type) OMGO19Observation {
	v := OMGO19Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type OMGO19Observation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewOMGO19ObservationSlice will construct a slice of type OMGO19Observation
func NewOMGO19ObservationSlice(input hl7.HL7Type) []OMGO19Observation {
	values := make([]OMGO19Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMGO19Observation(input.Index(i))
	}
	return values
}

// NewCRMC05PatientVisit creates an implementation of CRMC05PatientVisit
func NewCRMC05PatientVisit(input hl7.HL7Type) CRMC05PatientVisit {
	v := CRMC05PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CRMC05PatientVisit struct {
	PatientVisit             PV1
	ParticipationInformation []PRT
}

// NewCRMC05PatientVisitSlice will construct a slice of type CRMC05PatientVisit
func NewCRMC05PatientVisitSlice(input hl7.HL7Type) []CRMC05PatientVisit {
	values := make([]CRMC05PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCRMC05PatientVisit(input.Index(i))
	}
	return values
}

// NewSRRS05Service creates an implementation of SRRS05Service
func NewSRRS05Service(input hl7.HL7Type) SRRS05Service {
	v := SRRS05Service{}
	v.AppointmentInformation = NewAIS(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SRRS05Service struct {
	AppointmentInformation AIS
	NotesAndComments       []NTE
}

// NewSRRS05ServiceSlice will construct a slice of type SRRS05Service
func NewSRRS05ServiceSlice(input hl7.HL7Type) []SRRS05Service {
	values := make([]SRRS05Service, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS05Service(input.Index(i))
	}
	return values
}

// NewOULR24CommonOrder creates an implementation of OULR24CommonOrder
func NewOULR24CommonOrder(input hl7.HL7Type) OULR24CommonOrder {
	v := OULR24CommonOrder{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.OrderDocument = NewOULR24OrderDocument(input.Index(2))
	return v
}

type OULR24CommonOrder struct {
	CommonOrder              ORC
	ParticipationInformation []PRT
	OrderDocument            OULR24OrderDocument
}

// NewOULR24CommonOrderSlice will construct a slice of type OULR24CommonOrder
func NewOULR24CommonOrderSlice(input hl7.HL7Type) []OULR24CommonOrder {
	values := make([]OULR24CommonOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOULR24CommonOrder(input.Index(i))
	}
	return values
}

// NewRPII04GuarantorInsurance creates an implementation of RPII04GuarantorInsurance
func NewRPII04GuarantorInsurance(input hl7.HL7Type) RPII04GuarantorInsurance {
	v := RPII04GuarantorInsurance{}
	v.Guarantor = NewGT1Slice(input.Index(0))
	v.Insurance = NewRPII04InsuranceSlice(input.Index(1))
	return v
}

type RPII04GuarantorInsurance struct {
	Guarantor []GT1
	Insurance []RPII04Insurance
}

// NewRPII04GuarantorInsuranceSlice will construct a slice of type RPII04GuarantorInsurance
func NewRPII04GuarantorInsuranceSlice(input hl7.HL7Type) []RPII04GuarantorInsurance {
	values := make([]RPII04GuarantorInsurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRPII04GuarantorInsurance(input.Index(i))
	}
	return values
}

// NewOMPO09Insurance creates an implementation of OMPO09Insurance
func NewOMPO09Insurance(input hl7.HL7Type) OMPO09Insurance {
	v := OMPO09Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3(input.Index(2))
	return v
}

type OMPO09Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification IN3
}

// NewOMPO09InsuranceSlice will construct a slice of type OMPO09Insurance
func NewOMPO09InsuranceSlice(input hl7.HL7Type) []OMPO09Insurance {
	values := make([]OMPO09Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMPO09Insurance(input.Index(i))
	}
	return values
}

// NewRRDO14Timing creates an implementation of RRDO14Timing
func NewRRDO14Timing(input hl7.HL7Type) RRDO14Timing {
	v := RRDO14Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type RRDO14Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewRRDO14TimingSlice will construct a slice of type RRDO14Timing
func NewRRDO14TimingSlice(input hl7.HL7Type) []RRDO14Timing {
	values := make([]RRDO14Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRRDO14Timing(input.Index(i))
	}
	return values
}

// NewCCMI21Insurance creates an implementation of CCMI21Insurance
func NewCCMI21Insurance(input hl7.HL7Type) CCMI21Insurance {
	v := CCMI21Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3(input.Index(2))
	return v
}

type CCMI21Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification IN3
}

// NewCCMI21InsuranceSlice will construct a slice of type CCMI21Insurance
func NewCCMI21InsuranceSlice(input hl7.HL7Type) []CCMI21Insurance {
	values := make([]CCMI21Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCMI21Insurance(input.Index(i))
	}
	return values
}

// NewCCRI16Pathway creates an implementation of CCRI16Pathway
func NewCCRI16Pathway(input hl7.HL7Type) CCRI16Pathway {
	v := CCRI16Pathway{}
	v.Pathway = NewPTH(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	v.RolePathway = NewCCRI16RolePathwaySlice(input.Index(2))
	v.PathwayObservation = NewCCRI16PathwayObservationSlice(input.Index(3))
	return v
}

type CCRI16Pathway struct {
	Pathway            PTH
	Variance           []VAR
	RolePathway        []CCRI16RolePathway
	PathwayObservation []CCRI16PathwayObservation
}

// NewCCRI16PathwaySlice will construct a slice of type CCRI16Pathway
func NewCCRI16PathwaySlice(input hl7.HL7Type) []CCRI16Pathway {
	values := make([]CCRI16Pathway, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI16Pathway(input.Index(i))
	}
	return values
}

// NewOSMR26Specimen creates an implementation of OSMR26Specimen
func NewOSMR26Specimen(input hl7.HL7Type) OSMR26Specimen {
	v := OSMR26Specimen{}
	v.Specimen = NewSPM(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.SpecimenObservation = NewOSMR26SpecimenObservationSlice(input.Index(2))
	v.Container = NewOSMR26ContainerSlice(input.Index(3))
	v.SubjectPersonAnimalIdentification = NewOSMR26SubjectPersonAnimalIdentification(input.Index(4))
	v.SubjectPopulationLocationIdentification = NewOSMR26SubjectPopulationLocationIdentification(input.Index(5))
	return v
}

type OSMR26Specimen struct {
	Specimen                                SPM
	ParticipationInformation                []PRT
	SpecimenObservation                     []OSMR26SpecimenObservation
	Container                               []OSMR26Container
	SubjectPersonAnimalIdentification       OSMR26SubjectPersonAnimalIdentification
	SubjectPopulationLocationIdentification OSMR26SubjectPopulationLocationIdentification
}

// NewOSMR26SpecimenSlice will construct a slice of type OSMR26Specimen
func NewOSMR26SpecimenSlice(input hl7.HL7Type) []OSMR26Specimen {
	values := make([]OSMR26Specimen, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOSMR26Specimen(input.Index(i))
	}
	return values
}

// NewCCII22RoleClinicalHistoryObject creates an implementation of CCII22RoleClinicalHistoryObject
func NewCCII22RoleClinicalHistoryObject(input hl7.HL7Type) CCII22RoleClinicalHistoryObject {
	v := CCII22RoleClinicalHistoryObject{}
	v.Role = NewROL(input.Index(0))
	v.ProviderData = NewPRD(input.Index(1))
	return v
}

type CCII22RoleClinicalHistoryObject struct {
	Role         ROL
	ProviderData PRD
}

// NewCCII22RoleClinicalHistoryObjectSlice will construct a slice of type CCII22RoleClinicalHistoryObject
func NewCCII22RoleClinicalHistoryObjectSlice(input hl7.HL7Type) []CCII22RoleClinicalHistoryObject {
	values := make([]CCII22RoleClinicalHistoryObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCII22RoleClinicalHistoryObject(input.Index(i))
	}
	return values
}

// NewCCUI20Problem creates an implementation of CCUI20Problem
func NewCCUI20Problem(input hl7.HL7Type) CCUI20Problem {
	v := CCUI20Problem{}
	v.ProblemDetails = NewPRB(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	v.RoleProblem = NewCCUI20RoleProblemSlice(input.Index(2))
	v.ProblemObservation = NewCCUI20ProblemObservationSlice(input.Index(3))
	return v
}

type CCUI20Problem struct {
	ProblemDetails     PRB
	Variance           []VAR
	RoleProblem        []CCUI20RoleProblem
	ProblemObservation []CCUI20ProblemObservation
}

// NewCCUI20ProblemSlice will construct a slice of type CCUI20Problem
func NewCCUI20ProblemSlice(input hl7.HL7Type) []CCUI20Problem {
	values := make([]CCUI20Problem, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCUI20Problem(input.Index(i))
	}
	return values
}

// NewMDMT01Timing creates an implementation of MDMT01Timing
func NewMDMT01Timing(input hl7.HL7Type) MDMT01Timing {
	v := MDMT01Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type MDMT01Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewMDMT01TimingSlice will construct a slice of type MDMT01Timing
func NewMDMT01TimingSlice(input hl7.HL7Type) []MDMT01Timing {
	values := make([]MDMT01Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMDMT01Timing(input.Index(i))
	}
	return values
}

// NewNMDN02ClockAndStatsWithNotes creates an implementation of NMDN02ClockAndStatsWithNotes
func NewNMDN02ClockAndStatsWithNotes(input hl7.HL7Type) NMDN02ClockAndStatsWithNotes {
	v := NMDN02ClockAndStatsWithNotes{}
	v.Clock = NewNMDN02Clock(input.Index(0))
	v.AppStats = NewNMDN02AppStats(input.Index(1))
	v.AppStatus = NewNMDN02AppStatus(input.Index(2))
	return v
}

type NMDN02ClockAndStatsWithNotes struct {
	Clock     NMDN02Clock
	AppStats  NMDN02AppStats
	AppStatus NMDN02AppStatus
}

// NewNMDN02ClockAndStatsWithNotesSlice will construct a slice of type NMDN02ClockAndStatsWithNotes
func NewNMDN02ClockAndStatsWithNotesSlice(input hl7.HL7Type) []NMDN02ClockAndStatsWithNotes {
	values := make([]NMDN02ClockAndStatsWithNotes, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewNMDN02ClockAndStatsWithNotes(input.Index(i))
	}
	return values
}

// NewSRMS01Observation creates an implementation of SRMS01Observation
func NewSRMS01Observation(input hl7.HL7Type) SRMS01Observation {
	v := SRMS01Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type SRMS01Observation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewSRMS01ObservationSlice will construct a slice of type SRMS01Observation
func NewSRMS01ObservationSlice(input hl7.HL7Type) []SRMS01Observation {
	values := make([]SRMS01Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS01Observation(input.Index(i))
	}
	return values
}

// NewOMLO35Observation creates an implementation of OMLO35Observation
func NewOMLO35Observation(input hl7.HL7Type) OMLO35Observation {
	v := OMLO35Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.TestCodeDetail = NewTCD(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	return v
}

type OMLO35Observation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	TestCodeDetail           TCD
	NotesAndComments         []NTE
}

// NewOMLO35ObservationSlice will construct a slice of type OMLO35Observation
func NewOMLO35ObservationSlice(input hl7.HL7Type) []OMLO35Observation {
	values := make([]OMLO35Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO35Observation(input.Index(i))
	}
	return values
}

// NewORUR32TimingQty creates an implementation of ORUR32TimingQty
func NewORUR32TimingQty(input hl7.HL7Type) ORUR32TimingQty {
	v := ORUR32TimingQty{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type ORUR32TimingQty struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewORUR32TimingQtySlice will construct a slice of type ORUR32TimingQty
func NewORUR32TimingQtySlice(input hl7.HL7Type) []ORUR32TimingQty {
	values := make([]ORUR32TimingQty, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORUR32TimingQty(input.Index(i))
	}
	return values
}

// NewCCRI17Patient creates an implementation of CCRI17Patient
func NewCCRI17Patient(input hl7.HL7Type) CCRI17Patient {
	v := CCRI17Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	return v
}

type CCRI17Patient struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
}

// NewCCRI17PatientSlice will construct a slice of type CCRI17Patient
func NewCCRI17PatientSlice(input hl7.HL7Type) []CCRI17Patient {
	values := make([]CCRI17Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI17Patient(input.Index(i))
	}
	return values
}

// NewCCII22Pathway creates an implementation of CCII22Pathway
func NewCCII22Pathway(input hl7.HL7Type) CCII22Pathway {
	v := CCII22Pathway{}
	v.Pathway = NewPTH(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	v.RolePathway = NewCCII22RolePathwaySlice(input.Index(2))
	v.ObservationResult = NewOBXSlice(input.Index(3))
	return v
}

type CCII22Pathway struct {
	Pathway           PTH
	Variance          []VAR
	RolePathway       []CCII22RolePathway
	ObservationResult []OBX
}

// NewCCII22PathwaySlice will construct a slice of type CCII22Pathway
func NewCCII22PathwaySlice(input hl7.HL7Type) []CCII22Pathway {
	values := make([]CCII22Pathway, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCII22Pathway(input.Index(i))
	}
	return values
}

// NewOMLO33ObservationPrior creates an implementation of OMLO33ObservationPrior
func NewOMLO33ObservationPrior(input hl7.HL7Type) OMLO33ObservationPrior {
	v := OMLO33ObservationPrior{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type OMLO33ObservationPrior struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewOMLO33ObservationPriorSlice will construct a slice of type OMLO33ObservationPrior
func NewOMLO33ObservationPriorSlice(input hl7.HL7Type) []OMLO33ObservationPrior {
	values := make([]OMLO33ObservationPrior, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO33ObservationPrior(input.Index(i))
	}
	return values
}

// NewRRII15Observation creates an implementation of RRII15Observation
func NewRRII15Observation(input hl7.HL7Type) RRII15Observation {
	v := RRII15Observation{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.ResultsNotes = NewRRII15ResultsNotesSlice(input.Index(2))
	return v
}

type RRII15Observation struct {
	ObservationRequest OBR
	NotesAndComments   []NTE
	ResultsNotes       []RRII15ResultsNotes
}

// NewRRII15ObservationSlice will construct a slice of type RRII15Observation
func NewRRII15ObservationSlice(input hl7.HL7Type) []RRII15Observation {
	values := make([]RRII15Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRRII15Observation(input.Index(i))
	}
	return values
}

// NewCCRI16ClinicalOrderTiming creates an implementation of CCRI16ClinicalOrderTiming
func NewCCRI16ClinicalOrderTiming(input hl7.HL7Type) CCRI16ClinicalOrderTiming {
	v := CCRI16ClinicalOrderTiming{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type CCRI16ClinicalOrderTiming struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewCCRI16ClinicalOrderTimingSlice will construct a slice of type CCRI16ClinicalOrderTiming
func NewCCRI16ClinicalOrderTimingSlice(input hl7.HL7Type) []CCRI16ClinicalOrderTiming {
	values := make([]CCRI16ClinicalOrderTiming, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI16ClinicalOrderTiming(input.Index(i))
	}
	return values
}

// NewCCUI20RolePathwayObject creates an implementation of CCUI20RolePathwayObject
func NewCCUI20RolePathwayObject(input hl7.HL7Type) CCUI20RolePathwayObject {
	v := CCUI20RolePathwayObject{}
	v.Role = NewROL(input.Index(0))
	v.ProviderData = NewPRD(input.Index(1))
	return v
}

type CCUI20RolePathwayObject struct {
	Role         ROL
	ProviderData PRD
}

// NewCCUI20RolePathwayObjectSlice will construct a slice of type CCUI20RolePathwayObject
func NewCCUI20RolePathwayObjectSlice(input hl7.HL7Type) []CCUI20RolePathwayObject {
	values := make([]CCUI20RolePathwayObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCUI20RolePathwayObject(input.Index(i))
	}
	return values
}

// NewSRMS03GeneralResource creates an implementation of SRMS03GeneralResource
func NewSRMS03GeneralResource(input hl7.HL7Type) SRMS03GeneralResource {
	v := SRMS03GeneralResource{}
	v.AppointmentInformationGeneralResource = NewAIG(input.Index(0))
	v.AppointmentPreferences = NewAPR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type SRMS03GeneralResource struct {
	AppointmentInformationGeneralResource AIG
	AppointmentPreferences                APR
	NotesAndComments                      []NTE
}

// NewSRMS03GeneralResourceSlice will construct a slice of type SRMS03GeneralResource
func NewSRMS03GeneralResourceSlice(input hl7.HL7Type) []SRMS03GeneralResource {
	values := make([]SRMS03GeneralResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS03GeneralResource(input.Index(i))
	}
	return values
}

// NewOMLO33TimingPrior creates an implementation of OMLO33TimingPrior
func NewOMLO33TimingPrior(input hl7.HL7Type) OMLO33TimingPrior {
	v := OMLO33TimingPrior{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type OMLO33TimingPrior struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewOMLO33TimingPriorSlice will construct a slice of type OMLO33TimingPrior
func NewOMLO33TimingPriorSlice(input hl7.HL7Type) []OMLO33TimingPrior {
	values := make([]OMLO33TimingPrior, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO33TimingPrior(input.Index(i))
	}
	return values
}

// NewPPRPC2OrderObservation creates an implementation of PPRPC2OrderObservation
func NewPPRPC2OrderObservation(input hl7.HL7Type) PPRPC2OrderObservation {
	v := PPRPC2OrderObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.Variance = NewVARSlice(input.Index(3))
	return v
}

type PPRPC2OrderObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
	Variance                 []VAR
}

// NewPPRPC2OrderObservationSlice will construct a slice of type PPRPC2OrderObservation
func NewPPRPC2OrderObservationSlice(input hl7.HL7Type) []PPRPC2OrderObservation {
	values := make([]PPRPC2OrderObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPRPC2OrderObservation(input.Index(i))
	}
	return values
}

// NewSRMS07Observation creates an implementation of SRMS07Observation
func NewSRMS07Observation(input hl7.HL7Type) SRMS07Observation {
	v := SRMS07Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type SRMS07Observation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewSRMS07ObservationSlice will construct a slice of type SRMS07Observation
func NewSRMS07ObservationSlice(input hl7.HL7Type) []SRMS07Observation {
	values := make([]SRMS07Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS07Observation(input.Index(i))
	}
	return values
}

// NewDEOO45Donnor creates an implementation of DEOO45Donnor
func NewDEOO45Donnor(input hl7.HL7Type) DEOO45Donnor {
	v := DEOO45Donnor{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.ObservationResult = NewOBXSlice(input.Index(1))
	v.AccessRestriction = NewARVSlice(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	v.DonorRegistration = NewDEOO45DonorRegistration(input.Index(4))
	return v
}

type DEOO45Donnor struct {
	PatientIdentification PID
	ObservationResult     []OBX
	AccessRestriction     []ARV
	NotesAndComments      []NTE
	DonorRegistration     DEOO45DonorRegistration
}

// NewDEOO45DonnorSlice will construct a slice of type DEOO45Donnor
func NewDEOO45DonnorSlice(input hl7.HL7Type) []DEOO45Donnor {
	values := make([]DEOO45Donnor, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewDEOO45Donnor(input.Index(i))
	}
	return values
}

// NewRRII13ProviderContact creates an implementation of RRII13ProviderContact
func NewRRII13ProviderContact(input hl7.HL7Type) RRII13ProviderContact {
	v := RRII13ProviderContact{}
	v.ProviderData = NewPRD(input.Index(0))
	v.ContactData = NewCTDSlice(input.Index(1))
	return v
}

type RRII13ProviderContact struct {
	ProviderData PRD
	ContactData  []CTD
}

// NewRRII13ProviderContactSlice will construct a slice of type RRII13ProviderContact
func NewRRII13ProviderContactSlice(input hl7.HL7Type) []RRII13ProviderContact {
	values := make([]RRII13ProviderContact, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRRII13ProviderContact(input.Index(i))
	}
	return values
}

// NewDFTP11TimingQuantity creates an implementation of DFTP11TimingQuantity
func NewDFTP11TimingQuantity(input hl7.HL7Type) DFTP11TimingQuantity {
	v := DFTP11TimingQuantity{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type DFTP11TimingQuantity struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewDFTP11TimingQuantitySlice will construct a slice of type DFTP11TimingQuantity
func NewDFTP11TimingQuantitySlice(input hl7.HL7Type) []DFTP11TimingQuantity {
	values := make([]DFTP11TimingQuantity, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewDFTP11TimingQuantity(input.Index(i))
	}
	return values
}

// NewCCRI16MedicationEncodingDetail creates an implementation of CCRI16MedicationEncodingDetail
func NewCCRI16MedicationEncodingDetail(input hl7.HL7Type) CCRI16MedicationEncodingDetail {
	v := CCRI16MedicationEncodingDetail{}
	v.PharmacyTreatmentEncodedOrder = NewRXE(input.Index(0))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(1))
	v.PharmacyTreatmentComponentOrder = NewRXCSlice(input.Index(2))
	v.MedicationEncodingObservation = NewCCRI16MedicationEncodingObservationSlice(input.Index(3))
	return v
}

type CCRI16MedicationEncodingDetail struct {
	PharmacyTreatmentEncodedOrder   RXE
	PharmacyTreatmentRoute          []RXR
	PharmacyTreatmentComponentOrder []RXC
	MedicationEncodingObservation   []CCRI16MedicationEncodingObservation
}

// NewCCRI16MedicationEncodingDetailSlice will construct a slice of type CCRI16MedicationEncodingDetail
func NewCCRI16MedicationEncodingDetailSlice(input hl7.HL7Type) []CCRI16MedicationEncodingDetail {
	values := make([]CCRI16MedicationEncodingDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI16MedicationEncodingDetail(input.Index(i))
	}
	return values
}

// NewMFNM14MfSiteDefined creates an implementation of MFNM14MfSiteDefined
func NewMFNM14MfSiteDefined(input hl7.HL7Type) MFNM14MfSiteDefined {
	v := MFNM14MfSiteDefined{}
	v.MasterFileEntry = NewMFE(input.Index(0))
	v.AnyHl7Segment = NewHxx(input.Index(1))
	return v
}

type MFNM14MfSiteDefined struct {
	MasterFileEntry MFE
	AnyHl7Segment   Hxx
}

// NewMFNM14MfSiteDefinedSlice will construct a slice of type MFNM14MfSiteDefined
func NewMFNM14MfSiteDefinedSlice(input hl7.HL7Type) []MFNM14MfSiteDefined {
	values := make([]MFNM14MfSiteDefined, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMFNM14MfSiteDefined(input.Index(i))
	}
	return values
}

// NewBRTO32Response creates an implementation of BRTO32Response
func NewBRTO32Response(input hl7.HL7Type) BRTO32Response {
	v := BRTO32Response{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.AccessRestriction = NewARVSlice(input.Index(1))
	v.Order = NewBRTO32OrderSlice(input.Index(2))
	return v
}

type BRTO32Response struct {
	PatientIdentification PID
	AccessRestriction     []ARV
	Order                 []BRTO32Order
}

// NewBRTO32ResponseSlice will construct a slice of type BRTO32Response
func NewBRTO32ResponseSlice(input hl7.HL7Type) []BRTO32Response {
	values := make([]BRTO32Response, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewBRTO32Response(input.Index(i))
	}
	return values
}

// NewRSPE22AuthorizationInfo creates an implementation of RSPE22AuthorizationInfo
func NewRSPE22AuthorizationInfo(input hl7.HL7Type) RSPE22AuthorizationInfo {
	v := RSPE22AuthorizationInfo{}
	v.InvoiceSegment = NewIVC(input.Index(0))
	v.ProductServiceGroup = NewPSG(input.Index(1))
	v.PslItemInfo = NewRSPE22PslItemInfoSlice(input.Index(2))
	return v
}

type RSPE22AuthorizationInfo struct {
	InvoiceSegment      IVC
	ProductServiceGroup PSG
	PslItemInfo         []RSPE22PslItemInfo
}

// NewRSPE22AuthorizationInfoSlice will construct a slice of type RSPE22AuthorizationInfo
func NewRSPE22AuthorizationInfoSlice(input hl7.HL7Type) []RSPE22AuthorizationInfo {
	values := make([]RSPE22AuthorizationInfo, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPE22AuthorizationInfo(input.Index(i))
	}
	return values
}

// NewMFNM06MfClinStudy creates an implementation of MFNM06MfClinStudy
func NewMFNM06MfClinStudy(input hl7.HL7Type) MFNM06MfClinStudy {
	v := MFNM06MfClinStudy{}
	v.MasterFileEntry = NewMFE(input.Index(0))
	v.ClinicalStudyMaster = NewCM0(input.Index(1))
	v.MfPhaseSchedDetail = NewMFNM06MfPhaseSchedDetailSlice(input.Index(2))
	return v
}

type MFNM06MfClinStudy struct {
	MasterFileEntry     MFE
	ClinicalStudyMaster CM0
	MfPhaseSchedDetail  []MFNM06MfPhaseSchedDetail
}

// NewMFNM06MfClinStudySlice will construct a slice of type MFNM06MfClinStudy
func NewMFNM06MfClinStudySlice(input hl7.HL7Type) []MFNM06MfClinStudy {
	values := make([]MFNM06MfClinStudy, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMFNM06MfClinStudy(input.Index(i))
	}
	return values
}

// NewSRRS10Resources creates an implementation of SRRS10Resources
func NewSRRS10Resources(input hl7.HL7Type) SRRS10Resources {
	v := SRRS10Resources{}
	v.ResourceGroup = NewRGS(input.Index(0))
	v.Service = NewSRRS10ServiceSlice(input.Index(1))
	v.GeneralResource = NewSRRS10GeneralResourceSlice(input.Index(2))
	v.LocationResource = NewSRRS10LocationResourceSlice(input.Index(3))
	v.PersonnelResource = NewSRRS10PersonnelResourceSlice(input.Index(4))
	return v
}

type SRRS10Resources struct {
	ResourceGroup     RGS
	Service           []SRRS10Service
	GeneralResource   []SRRS10GeneralResource
	LocationResource  []SRRS10LocationResource
	PersonnelResource []SRRS10PersonnelResource
}

// NewSRRS10ResourcesSlice will construct a slice of type SRRS10Resources
func NewSRRS10ResourcesSlice(input hl7.HL7Type) []SRRS10Resources {
	values := make([]SRRS10Resources, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS10Resources(input.Index(i))
	}
	return values
}

// NewEHCE04ProductServiceSection creates an implementation of EHCE04ProductServiceSection
func NewEHCE04ProductServiceSection(input hl7.HL7Type) EHCE04ProductServiceSection {
	v := EHCE04ProductServiceSection{}
	v.ProductServiceSection = NewPSS(input.Index(0))
	v.ProductServiceGroup = NewEHCE04ProductServiceGroupSlice(input.Index(1))
	return v
}

type EHCE04ProductServiceSection struct {
	ProductServiceSection PSS
	ProductServiceGroup   []EHCE04ProductServiceGroup
}

// NewEHCE04ProductServiceSectionSlice will construct a slice of type EHCE04ProductServiceSection
func NewEHCE04ProductServiceSectionSlice(input hl7.HL7Type) []EHCE04ProductServiceSection {
	values := make([]EHCE04ProductServiceSection, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewEHCE04ProductServiceSection(input.Index(i))
	}
	return values
}

// NewCCMI21Goal creates an implementation of CCMI21Goal
func NewCCMI21Goal(input hl7.HL7Type) CCMI21Goal {
	v := CCMI21Goal{}
	v.GoalDetail = NewGOL(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	v.RoleGoal = NewCCMI21RoleGoalSlice(input.Index(2))
	v.GoalObservation = NewCCMI21GoalObservationSlice(input.Index(3))
	return v
}

type CCMI21Goal struct {
	GoalDetail      GOL
	Variance        []VAR
	RoleGoal        []CCMI21RoleGoal
	GoalObservation []CCMI21GoalObservation
}

// NewCCMI21GoalSlice will construct a slice of type CCMI21Goal
func NewCCMI21GoalSlice(input hl7.HL7Type) []CCMI21Goal {
	values := make([]CCMI21Goal, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCMI21Goal(input.Index(i))
	}
	return values
}

// NewRPAI08Observation creates an implementation of RPAI08Observation
func NewRPAI08Observation(input hl7.HL7Type) RPAI08Observation {
	v := RPAI08Observation{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Results = NewRPAI08ResultsSlice(input.Index(2))
	return v
}

type RPAI08Observation struct {
	ObservationRequest OBR
	NotesAndComments   []NTE
	Results            []RPAI08Results
}

// NewRPAI08ObservationSlice will construct a slice of type RPAI08Observation
func NewRPAI08ObservationSlice(input hl7.HL7Type) []RPAI08Observation {
	values := make([]RPAI08Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRPAI08Observation(input.Index(i))
	}
	return values
}

// NewSRMS04Resources creates an implementation of SRMS04Resources
func NewSRMS04Resources(input hl7.HL7Type) SRMS04Resources {
	v := SRMS04Resources{}
	v.ResourceGroup = NewRGS(input.Index(0))
	v.Service = NewSRMS04ServiceSlice(input.Index(1))
	v.GeneralResource = NewSRMS04GeneralResourceSlice(input.Index(2))
	v.LocationResource = NewSRMS04LocationResourceSlice(input.Index(3))
	v.PersonnelResource = NewSRMS04PersonnelResourceSlice(input.Index(4))
	return v
}

type SRMS04Resources struct {
	ResourceGroup     RGS
	Service           []SRMS04Service
	GeneralResource   []SRMS04GeneralResource
	LocationResource  []SRMS04LocationResource
	PersonnelResource []SRMS04PersonnelResource
}

// NewSRMS04ResourcesSlice will construct a slice of type SRMS04Resources
func NewSRMS04ResourcesSlice(input hl7.HL7Type) []SRMS04Resources {
	values := make([]SRMS04Resources, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS04Resources(input.Index(i))
	}
	return values
}

// NewPPRPC3ProblemRole creates an implementation of PPRPC3ProblemRole
func NewPPRPC3ProblemRole(input hl7.HL7Type) PPRPC3ProblemRole {
	v := PPRPC3ProblemRole{}
	v.Role = NewROL(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type PPRPC3ProblemRole struct {
	Role     ROL
	Variance []VAR
}

// NewPPRPC3ProblemRoleSlice will construct a slice of type PPRPC3ProblemRole
func NewPPRPC3ProblemRoleSlice(input hl7.HL7Type) []PPRPC3ProblemRole {
	values := make([]PPRPC3ProblemRole, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPRPC3ProblemRole(input.Index(i))
	}
	return values
}

// NewSRMS05GeneralResource creates an implementation of SRMS05GeneralResource
func NewSRMS05GeneralResource(input hl7.HL7Type) SRMS05GeneralResource {
	v := SRMS05GeneralResource{}
	v.AppointmentInformationGeneralResource = NewAIG(input.Index(0))
	v.AppointmentPreferences = NewAPR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type SRMS05GeneralResource struct {
	AppointmentInformationGeneralResource AIG
	AppointmentPreferences                APR
	NotesAndComments                      []NTE
}

// NewSRMS05GeneralResourceSlice will construct a slice of type SRMS05GeneralResource
func NewSRMS05GeneralResourceSlice(input hl7.HL7Type) []SRMS05GeneralResource {
	values := make([]SRMS05GeneralResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS05GeneralResource(input.Index(i))
	}
	return values
}

// NewPPRPC1Goal creates an implementation of PPRPC1Goal
func NewPPRPC1Goal(input hl7.HL7Type) PPRPC1Goal {
	v := PPRPC1Goal{}
	v.GoalDetail = NewGOL(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Variance = NewVARSlice(input.Index(2))
	v.GoalRole = NewPPRPC1GoalRoleSlice(input.Index(3))
	v.GoalObservation = NewPPRPC1GoalObservationSlice(input.Index(4))
	return v
}

type PPRPC1Goal struct {
	GoalDetail       GOL
	NotesAndComments []NTE
	Variance         []VAR
	GoalRole         []PPRPC1GoalRole
	GoalObservation  []PPRPC1GoalObservation
}

// NewPPRPC1GoalSlice will construct a slice of type PPRPC1Goal
func NewPPRPC1GoalSlice(input hl7.HL7Type) []PPRPC1Goal {
	values := make([]PPRPC1Goal, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPRPC1Goal(input.Index(i))
	}
	return values
}

// NewOSMR26ShippingObservation creates an implementation of OSMR26ShippingObservation
func NewOSMR26ShippingObservation(input hl7.HL7Type) OSMR26ShippingObservation {
	v := OSMR26ShippingObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type OSMR26ShippingObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewOSMR26ShippingObservationSlice will construct a slice of type OSMR26ShippingObservation
func NewOSMR26ShippingObservationSlice(input hl7.HL7Type) []OSMR26ShippingObservation {
	values := make([]OSMR26ShippingObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOSMR26ShippingObservation(input.Index(i))
	}
	return values
}

// NewCCRI18ProblemObservation creates an implementation of CCRI18ProblemObservation
func NewCCRI18ProblemObservation(input hl7.HL7Type) CCRI18ProblemObservation {
	v := CCRI18ProblemObservation{}
	v.ObservationResult = NewOBXSlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CCRI18ProblemObservation struct {
	ObservationResult        []OBX
	ParticipationInformation []PRT
}

// NewCCRI18ProblemObservationSlice will construct a slice of type CCRI18ProblemObservation
func NewCCRI18ProblemObservationSlice(input hl7.HL7Type) []CCRI18ProblemObservation {
	values := make([]CCRI18ProblemObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI18ProblemObservation(input.Index(i))
	}
	return values
}

// NewORUR01OrderDocument creates an implementation of ORUR01OrderDocument
func NewORUR01OrderDocument(input hl7.HL7Type) ORUR01OrderDocument {
	v := ORUR01OrderDocument{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.TranscriptionDocumentHeader = NewTXA(input.Index(2))
	return v
}

type ORUR01OrderDocument struct {
	ObservationResult           OBX
	ParticipationInformation    []PRT
	TranscriptionDocumentHeader TXA
}

// NewORUR01OrderDocumentSlice will construct a slice of type ORUR01OrderDocument
func NewORUR01OrderDocumentSlice(input hl7.HL7Type) []ORUR01OrderDocument {
	values := make([]ORUR01OrderDocument, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORUR01OrderDocument(input.Index(i))
	}
	return values
}

// NewCCRI16Patient creates an implementation of CCRI16Patient
func NewCCRI16Patient(input hl7.HL7Type) CCRI16Patient {
	v := CCRI16Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	return v
}

type CCRI16Patient struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
}

// NewCCRI16PatientSlice will construct a slice of type CCRI16Patient
func NewCCRI16PatientSlice(input hl7.HL7Type) []CCRI16Patient {
	values := make([]CCRI16Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI16Patient(input.Index(i))
	}
	return values
}

// NewRASO17Components creates an implementation of RASO17Components
func NewRASO17Components(input hl7.HL7Type) RASO17Components {
	v := RASO17Components{}
	v.PharmacyTreatmentComponentOrder = NewRXC(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type RASO17Components struct {
	PharmacyTreatmentComponentOrder RXC
	NotesAndComments                []NTE
}

// NewRASO17ComponentsSlice will construct a slice of type RASO17Components
func NewRASO17ComponentsSlice(input hl7.HL7Type) []RASO17Components {
	values := make([]RASO17Components, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRASO17Components(input.Index(i))
	}
	return values
}

// NewCCII22MedicationEncodingDetail creates an implementation of CCII22MedicationEncodingDetail
func NewCCII22MedicationEncodingDetail(input hl7.HL7Type) CCII22MedicationEncodingDetail {
	v := CCII22MedicationEncodingDetail{}
	v.PharmacyTreatmentEncodedOrder = NewRXE(input.Index(0))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(1))
	v.PharmacyTreatmentComponentOrder = NewRXCSlice(input.Index(2))
	v.ObservationResult = NewOBXSlice(input.Index(3))
	return v
}

type CCII22MedicationEncodingDetail struct {
	PharmacyTreatmentEncodedOrder   RXE
	PharmacyTreatmentRoute          []RXR
	PharmacyTreatmentComponentOrder []RXC
	ObservationResult               []OBX
}

// NewCCII22MedicationEncodingDetailSlice will construct a slice of type CCII22MedicationEncodingDetail
func NewCCII22MedicationEncodingDetailSlice(input hl7.HL7Type) []CCII22MedicationEncodingDetail {
	values := make([]CCII22MedicationEncodingDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCII22MedicationEncodingDetail(input.Index(i))
	}
	return values
}

// NewRSPZ88Timing creates an implementation of RSPZ88Timing
func NewRSPZ88Timing(input hl7.HL7Type) RSPZ88Timing {
	v := RSPZ88Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type RSPZ88Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewRSPZ88TimingSlice will construct a slice of type RSPZ88Timing
func NewRSPZ88TimingSlice(input hl7.HL7Type) []RSPZ88Timing {
	values := make([]RSPZ88Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPZ88Timing(input.Index(i))
	}
	return values
}

// NewSRMS06Observation creates an implementation of SRMS06Observation
func NewSRMS06Observation(input hl7.HL7Type) SRMS06Observation {
	v := SRMS06Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type SRMS06Observation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewSRMS06ObservationSlice will construct a slice of type SRMS06Observation
func NewSRMS06ObservationSlice(input hl7.HL7Type) []SRMS06Observation {
	values := make([]SRMS06Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS06Observation(input.Index(i))
	}
	return values
}

// NewSRRS04GeneralResource creates an implementation of SRRS04GeneralResource
func NewSRRS04GeneralResource(input hl7.HL7Type) SRRS04GeneralResource {
	v := SRRS04GeneralResource{}
	v.AppointmentInformationGeneralResource = NewAIG(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SRRS04GeneralResource struct {
	AppointmentInformationGeneralResource AIG
	NotesAndComments                      []NTE
}

// NewSRRS04GeneralResourceSlice will construct a slice of type SRRS04GeneralResource
func NewSRRS04GeneralResourceSlice(input hl7.HL7Type) []SRRS04GeneralResource {
	values := make([]SRRS04GeneralResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS04GeneralResource(input.Index(i))
	}
	return values
}

// NewRRII12AuthorizationContact2 creates an implementation of RRII12AuthorizationContact2
func NewRRII12AuthorizationContact2(input hl7.HL7Type) RRII12AuthorizationContact2 {
	v := RRII12AuthorizationContact2{}
	v.AuthorizationInformation = NewAUT(input.Index(0))
	v.ContactData = NewCTD(input.Index(1))
	return v
}

type RRII12AuthorizationContact2 struct {
	AuthorizationInformation AUT
	ContactData              CTD
}

// NewRRII12AuthorizationContact2Slice will construct a slice of type RRII12AuthorizationContact2
func NewRRII12AuthorizationContact2Slice(input hl7.HL7Type) []RRII12AuthorizationContact2 {
	values := make([]RRII12AuthorizationContact2, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRRII12AuthorizationContact2(input.Index(i))
	}
	return values
}

// NewOMLO35ObservationPrior creates an implementation of OMLO35ObservationPrior
func NewOMLO35ObservationPrior(input hl7.HL7Type) OMLO35ObservationPrior {
	v := OMLO35ObservationPrior{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type OMLO35ObservationPrior struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewOMLO35ObservationPriorSlice will construct a slice of type OMLO35ObservationPrior
func NewOMLO35ObservationPriorSlice(input hl7.HL7Type) []OMLO35ObservationPrior {
	values := make([]OMLO35ObservationPrior, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO35ObservationPrior(input.Index(i))
	}
	return values
}

// NewPPGPCHOrderDetail creates an implementation of PPGPCHOrderDetail
func NewPPGPCHOrderDetail(input hl7.HL7Type) PPGPCHOrderDetail {
	v := PPGPCHOrderDetail{}
	v.Choice = NewPPGPCHChoice(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Variance = NewVARSlice(input.Index(2))
	v.OrderObservation = NewPPGPCHOrderObservationSlice(input.Index(3))
	return v
}

type PPGPCHOrderDetail struct {
	Choice           PPGPCHChoice
	NotesAndComments []NTE
	Variance         []VAR
	OrderObservation []PPGPCHOrderObservation
}

// NewPPGPCHOrderDetailSlice will construct a slice of type PPGPCHOrderDetail
func NewPPGPCHOrderDetailSlice(input hl7.HL7Type) []PPGPCHOrderDetail {
	values := make([]PPGPCHOrderDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPGPCHOrderDetail(input.Index(i))
	}
	return values
}

// NewCCMI21RoleGoal creates an implementation of CCMI21RoleGoal
func NewCCMI21RoleGoal(input hl7.HL7Type) CCMI21RoleGoal {
	v := CCMI21RoleGoal{}
	v.RoleGoalObject = NewCCMI21RoleGoalObject(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type CCMI21RoleGoal struct {
	RoleGoalObject CCMI21RoleGoalObject
	Variance       []VAR
}

// NewCCMI21RoleGoalSlice will construct a slice of type CCMI21RoleGoal
func NewCCMI21RoleGoalSlice(input hl7.HL7Type) []CCMI21RoleGoal {
	values := make([]CCMI21RoleGoal, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCMI21RoleGoal(input.Index(i))
	}
	return values
}

// NewCSUC12StudyPhase creates an implementation of CSUC12StudyPhase
func NewCSUC12StudyPhase(input hl7.HL7Type) CSUC12StudyPhase {
	v := CSUC12StudyPhase{}
	v.ClinicalStudyPhase = NewCSP(input.Index(0))
	v.StudySchedule = NewCSUC12StudyScheduleSlice(input.Index(1))
	return v
}

type CSUC12StudyPhase struct {
	ClinicalStudyPhase CSP
	StudySchedule      []CSUC12StudySchedule
}

// NewCSUC12StudyPhaseSlice will construct a slice of type CSUC12StudyPhase
func NewCSUC12StudyPhaseSlice(input hl7.HL7Type) []CSUC12StudyPhase {
	values := make([]CSUC12StudyPhase, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCSUC12StudyPhase(input.Index(i))
	}
	return values
}

// NewBPSO29Product creates an implementation of BPSO29Product
func NewBPSO29Product(input hl7.HL7Type) BPSO29Product {
	v := BPSO29Product{}
	v.BloodProductDispenseStatus = NewBPX(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type BPSO29Product struct {
	BloodProductDispenseStatus BPX
	NotesAndComments           []NTE
}

// NewBPSO29ProductSlice will construct a slice of type BPSO29Product
func NewBPSO29ProductSlice(input hl7.HL7Type) []BPSO29Product {
	values := make([]BPSO29Product, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewBPSO29Product(input.Index(i))
	}
	return values
}

// NewORUR40Specimen creates an implementation of ORUR40Specimen
func NewORUR40Specimen(input hl7.HL7Type) ORUR40Specimen {
	v := ORUR40Specimen{}
	v.Specimen = NewSPM(input.Index(0))
	v.SpecimenObservation = NewORUR40SpecimenObservationSlice(input.Index(1))
	return v
}

type ORUR40Specimen struct {
	Specimen            SPM
	SpecimenObservation []ORUR40SpecimenObservation
}

// NewORUR40SpecimenSlice will construct a slice of type ORUR40Specimen
func NewORUR40SpecimenSlice(input hl7.HL7Type) []ORUR40Specimen {
	values := make([]ORUR40Specimen, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORUR40Specimen(input.Index(i))
	}
	return values
}

// NewCSUC09StudyPharm creates an implementation of CSUC09StudyPharm
func NewCSUC09StudyPharm(input hl7.HL7Type) CSUC09StudyPharm {
	v := CSUC09StudyPharm{}
	v.CommonOrder = NewCSUC09CommonOrder(input.Index(0))
	v.RxAdmin = NewCSUC09RxAdminSlice(input.Index(1))
	return v
}

type CSUC09StudyPharm struct {
	CommonOrder CSUC09CommonOrder
	RxAdmin     []CSUC09RxAdmin
}

// NewCSUC09StudyPharmSlice will construct a slice of type CSUC09StudyPharm
func NewCSUC09StudyPharmSlice(input hl7.HL7Type) []CSUC09StudyPharm {
	values := make([]CSUC09StudyPharm, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCSUC09StudyPharm(input.Index(i))
	}
	return values
}

// NewRREO26TimingEncoded creates an implementation of RREO26TimingEncoded
func NewRREO26TimingEncoded(input hl7.HL7Type) RREO26TimingEncoded {
	v := RREO26TimingEncoded{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type RREO26TimingEncoded struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewRREO26TimingEncodedSlice will construct a slice of type RREO26TimingEncoded
func NewRREO26TimingEncodedSlice(input hl7.HL7Type) []RREO26TimingEncoded {
	values := make([]RREO26TimingEncoded, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRREO26TimingEncoded(input.Index(i))
	}
	return values
}

// NewRQAI10Insurance creates an implementation of RQAI10Insurance
func NewRQAI10Insurance(input hl7.HL7Type) RQAI10Insurance {
	v := RQAI10Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3(input.Index(2))
	return v
}

type RQAI10Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification IN3
}

// NewRQAI10InsuranceSlice will construct a slice of type RQAI10Insurance
func NewRQAI10InsuranceSlice(input hl7.HL7Type) []RQAI10Insurance {
	values := make([]RQAI10Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQAI10Insurance(input.Index(i))
	}
	return values
}

// NewCCUI20Resources creates an implementation of CCUI20Resources
func NewCCUI20Resources(input hl7.HL7Type) CCUI20Resources {
	v := CCUI20Resources{}
	v.ResourceGroup = NewRGS(input.Index(0))
	v.ResourceDetail = NewCCUI20ResourceDetailSlice(input.Index(1))
	return v
}

type CCUI20Resources struct {
	ResourceGroup  RGS
	ResourceDetail []CCUI20ResourceDetail
}

// NewCCUI20ResourcesSlice will construct a slice of type CCUI20Resources
func NewCCUI20ResourcesSlice(input hl7.HL7Type) []CCUI20Resources {
	values := make([]CCUI20Resources, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCUI20Resources(input.Index(i))
	}
	return values
}

// NewRPAI11Authorization1 creates an implementation of RPAI11Authorization1
func NewRPAI11Authorization1(input hl7.HL7Type) RPAI11Authorization1 {
	v := RPAI11Authorization1{}
	v.AuthorizationInformation = NewAUT(input.Index(0))
	v.ContactData = NewCTD(input.Index(1))
	return v
}

type RPAI11Authorization1 struct {
	AuthorizationInformation AUT
	ContactData              CTD
}

// NewRPAI11Authorization1Slice will construct a slice of type RPAI11Authorization1
func NewRPAI11Authorization1Slice(input hl7.HL7Type) []RPAI11Authorization1 {
	values := make([]RPAI11Authorization1, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRPAI11Authorization1(input.Index(i))
	}
	return values
}

// NewDFTP03Insurance creates an implementation of DFTP03Insurance
func NewDFTP03Insurance(input hl7.HL7Type) DFTP03Insurance {
	v := DFTP03Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3Slice(input.Index(2))
	v.ParticipationInformation = NewPRTSlice(input.Index(3))
	v.Role = NewROLSlice(input.Index(4))
	return v
}

type DFTP03Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification []IN3
	ParticipationInformation                    []PRT
	Role                                        []ROL
}

// NewDFTP03InsuranceSlice will construct a slice of type DFTP03Insurance
func NewDFTP03InsuranceSlice(input hl7.HL7Type) []DFTP03Insurance {
	values := make([]DFTP03Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewDFTP03Insurance(input.Index(i))
	}
	return values
}

// NewPGLPC7ProblemRole creates an implementation of PGLPC7ProblemRole
func NewPGLPC7ProblemRole(input hl7.HL7Type) PGLPC7ProblemRole {
	v := PGLPC7ProblemRole{}
	v.Role = NewROL(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type PGLPC7ProblemRole struct {
	Role     ROL
	Variance []VAR
}

// NewPGLPC7ProblemRoleSlice will construct a slice of type PGLPC7ProblemRole
func NewPGLPC7ProblemRoleSlice(input hl7.HL7Type) []PGLPC7ProblemRole {
	values := make([]PGLPC7ProblemRole, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPGLPC7ProblemRole(input.Index(i))
	}
	return values
}

// NewOPLO37PriorResult creates an implementation of OPLO37PriorResult
func NewOPLO37PriorResult(input hl7.HL7Type) OPLO37PriorResult {
	v := OPLO37PriorResult{}
	v.NextOfKinAssociatedParties = NewNK1Slice(input.Index(0))
	v.PatientPrior = NewOPLO37PatientPrior(input.Index(1))
	v.PatientVisitPrior = NewOPLO37PatientVisitPrior(input.Index(2))
	v.PatientAllergyInformation = NewAL1(input.Index(3))
	v.OrderPrior = NewOPLO37OrderPriorSlice(input.Index(4))
	return v
}

type OPLO37PriorResult struct {
	NextOfKinAssociatedParties []NK1
	PatientPrior               OPLO37PatientPrior
	PatientVisitPrior          OPLO37PatientVisitPrior
	PatientAllergyInformation  AL1
	OrderPrior                 []OPLO37OrderPrior
}

// NewOPLO37PriorResultSlice will construct a slice of type OPLO37PriorResult
func NewOPLO37PriorResultSlice(input hl7.HL7Type) []OPLO37PriorResult {
	values := make([]OPLO37PriorResult, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOPLO37PriorResult(input.Index(i))
	}
	return values
}

// NewORUR01TimingQty creates an implementation of ORUR01TimingQty
func NewORUR01TimingQty(input hl7.HL7Type) ORUR01TimingQty {
	v := ORUR01TimingQty{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type ORUR01TimingQty struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewORUR01TimingQtySlice will construct a slice of type ORUR01TimingQty
func NewORUR01TimingQtySlice(input hl7.HL7Type) []ORUR01TimingQty {
	values := make([]ORUR01TimingQty, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORUR01TimingQty(input.Index(i))
	}
	return values
}

// NewCCRI18ClinicalHistory creates an implementation of CCRI18ClinicalHistory
func NewCCRI18ClinicalHistory(input hl7.HL7Type) CCRI18ClinicalHistory {
	v := CCRI18ClinicalHistory{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ClinicalHistoryDetail = NewCCRI18ClinicalHistoryDetailSlice(input.Index(1))
	v.RoleClinicalHistory = NewCCRI18RoleClinicalHistorySlice(input.Index(2))
	v.ClinicalTrialIdentification = NewCTISlice(input.Index(3))
	return v
}

type CCRI18ClinicalHistory struct {
	CommonOrder                 ORC
	ClinicalHistoryDetail       []CCRI18ClinicalHistoryDetail
	RoleClinicalHistory         []CCRI18RoleClinicalHistory
	ClinicalTrialIdentification []CTI
}

// NewCCRI18ClinicalHistorySlice will construct a slice of type CCRI18ClinicalHistory
func NewCCRI18ClinicalHistorySlice(input hl7.HL7Type) []CCRI18ClinicalHistory {
	values := make([]CCRI18ClinicalHistory, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI18ClinicalHistory(input.Index(i))
	}
	return values
}

// NewORXO43Response creates an implementation of ORXO43Response
func NewORXO43Response(input hl7.HL7Type) ORXO43Response {
	v := ORXO43Response{}
	v.Patient = NewORXO43Patient(input.Index(0))
	v.Order = NewORXO43OrderSlice(input.Index(1))
	return v
}

type ORXO43Response struct {
	Patient ORXO43Patient
	Order   []ORXO43Order
}

// NewORXO43ResponseSlice will construct a slice of type ORXO43Response
func NewORXO43ResponseSlice(input hl7.HL7Type) []ORXO43Response {
	values := make([]ORXO43Response, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORXO43Response(input.Index(i))
	}
	return values
}

// NewSRMS04PersonnelResource creates an implementation of SRMS04PersonnelResource
func NewSRMS04PersonnelResource(input hl7.HL7Type) SRMS04PersonnelResource {
	v := SRMS04PersonnelResource{}
	v.AppointmentInformationPersonnelResource = NewAIP(input.Index(0))
	v.AppointmentPreferences = NewAPR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type SRMS04PersonnelResource struct {
	AppointmentInformationPersonnelResource AIP
	AppointmentPreferences                  APR
	NotesAndComments                        []NTE
}

// NewSRMS04PersonnelResourceSlice will construct a slice of type SRMS04PersonnelResource
func NewSRMS04PersonnelResourceSlice(input hl7.HL7Type) []SRMS04PersonnelResource {
	values := make([]SRMS04PersonnelResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS04PersonnelResource(input.Index(i))
	}
	return values
}

// NewPEXP08AssociatedRxAdmin creates an implementation of PEXP08AssociatedRxAdmin
func NewPEXP08AssociatedRxAdmin(input hl7.HL7Type) PEXP08AssociatedRxAdmin {
	v := PEXP08AssociatedRxAdmin{}
	v.PharmacyTreatmentAdministration = NewRXA(input.Index(0))
	v.PharmacyTreatmentRoute = NewRXR(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	return v
}

type PEXP08AssociatedRxAdmin struct {
	PharmacyTreatmentAdministration RXA
	PharmacyTreatmentRoute          RXR
	ParticipationInformation        []PRT
}

// NewPEXP08AssociatedRxAdminSlice will construct a slice of type PEXP08AssociatedRxAdmin
func NewPEXP08AssociatedRxAdminSlice(input hl7.HL7Type) []PEXP08AssociatedRxAdmin {
	values := make([]PEXP08AssociatedRxAdmin, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPEXP08AssociatedRxAdmin(input.Index(i))
	}
	return values
}

// NewOPLO37PatientPrior creates an implementation of OPLO37PatientPrior
func NewOPLO37PatientPrior(input hl7.HL7Type) OPLO37PatientPrior {
	v := OPLO37PatientPrior{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.AccessRestriction = NewARVSlice(input.Index(3))
	return v
}

type OPLO37PatientPrior struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	ParticipationInformation     []PRT
	AccessRestriction            []ARV
}

// NewOPLO37PatientPriorSlice will construct a slice of type OPLO37PatientPrior
func NewOPLO37PatientPriorSlice(input hl7.HL7Type) []OPLO37PatientPrior {
	values := make([]OPLO37PatientPrior, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOPLO37PatientPrior(input.Index(i))
	}
	return values
}

// NewOMLO35OrderPrior creates an implementation of OMLO35OrderPrior
func NewOMLO35OrderPrior(input hl7.HL7Type) OMLO35OrderPrior {
	v := OMLO35OrderPrior{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.ObservationRequest = NewOBR(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	v.AdditionalParticipationInformation = NewPRTSlice(input.Index(4))
	v.TimingPrior = NewOMLO35TimingPriorSlice(input.Index(5))
	v.ObservationPrior = NewOMLO35ObservationPriorSlice(input.Index(6))
	return v
}

type OMLO35OrderPrior struct {
	CommonOrder                        ORC
	ParticipationInformation           []PRT
	ObservationRequest                 OBR
	NotesAndComments                   []NTE
	AdditionalParticipationInformation []PRT
	TimingPrior                        []OMLO35TimingPrior
	ObservationPrior                   []OMLO35ObservationPrior
}

// NewOMLO35OrderPriorSlice will construct a slice of type OMLO35OrderPrior
func NewOMLO35OrderPriorSlice(input hl7.HL7Type) []OMLO35OrderPrior {
	values := make([]OMLO35OrderPrior, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO35OrderPrior(input.Index(i))
	}
	return values
}

// NewCQUI19RoleGoal creates an implementation of CQUI19RoleGoal
func NewCQUI19RoleGoal(input hl7.HL7Type) CQUI19RoleGoal {
	v := CQUI19RoleGoal{}
	v.RoleGoalObject = NewCQUI19RoleGoalObject(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type CQUI19RoleGoal struct {
	RoleGoalObject CQUI19RoleGoalObject
	Variance       []VAR
}

// NewCQUI19RoleGoalSlice will construct a slice of type CQUI19RoleGoal
func NewCQUI19RoleGoalSlice(input hl7.HL7Type) []CQUI19RoleGoal {
	values := make([]CQUI19RoleGoal, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCQUI19RoleGoal(input.Index(i))
	}
	return values
}

// NewEHCE13Response creates an implementation of EHCE13Response
func NewEHCE13Response(input hl7.HL7Type) EHCE13Response {
	v := EHCE13Response{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.NotesAndComments = NewNTE(input.Index(1))
	v.TranscriptionDocumentHeader = NewTXA(input.Index(2))
	return v
}

type EHCE13Response struct {
	ObservationResult           OBX
	NotesAndComments            NTE
	TranscriptionDocumentHeader TXA
}

// NewEHCE13ResponseSlice will construct a slice of type EHCE13Response
func NewEHCE13ResponseSlice(input hl7.HL7Type) []EHCE13Response {
	values := make([]EHCE13Response, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewEHCE13Response(input.Index(i))
	}
	return values
}

// NewOMLO39ContainerObservation creates an implementation of OMLO39ContainerObservation
func NewOMLO39ContainerObservation(input hl7.HL7Type) OMLO39ContainerObservation {
	v := OMLO39ContainerObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type OMLO39ContainerObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewOMLO39ContainerObservationSlice will construct a slice of type OMLO39ContainerObservation
func NewOMLO39ContainerObservationSlice(input hl7.HL7Type) []OMLO39ContainerObservation {
	values := make([]OMLO39ContainerObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO39ContainerObservation(input.Index(i))
	}
	return values
}

// NewOMIO23PatientVisit creates an implementation of OMIO23PatientVisit
func NewOMIO23PatientVisit(input hl7.HL7Type) OMIO23PatientVisit {
	v := OMIO23PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	return v
}

type OMIO23PatientVisit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ParticipationInformation          []PRT
}

// NewOMIO23PatientVisitSlice will construct a slice of type OMIO23PatientVisit
func NewOMIO23PatientVisitSlice(input hl7.HL7Type) []OMIO23PatientVisit {
	values := make([]OMIO23PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMIO23PatientVisit(input.Index(i))
	}
	return values
}

// NewSIUS20PersonnelResource creates an implementation of SIUS20PersonnelResource
func NewSIUS20PersonnelResource(input hl7.HL7Type) SIUS20PersonnelResource {
	v := SIUS20PersonnelResource{}
	v.AppointmentInformationPersonnelResource = NewAIP(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS20PersonnelResource struct {
	AppointmentInformationPersonnelResource AIP
	NotesAndComments                        []NTE
}

// NewSIUS20PersonnelResourceSlice will construct a slice of type SIUS20PersonnelResource
func NewSIUS20PersonnelResourceSlice(input hl7.HL7Type) []SIUS20PersonnelResource {
	values := make([]SIUS20PersonnelResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS20PersonnelResource(input.Index(i))
	}
	return values
}

// NewDFTP03TimingQuantity creates an implementation of DFTP03TimingQuantity
func NewDFTP03TimingQuantity(input hl7.HL7Type) DFTP03TimingQuantity {
	v := DFTP03TimingQuantity{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type DFTP03TimingQuantity struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewDFTP03TimingQuantitySlice will construct a slice of type DFTP03TimingQuantity
func NewDFTP03TimingQuantitySlice(input hl7.HL7Type) []DFTP03TimingQuantity {
	values := make([]DFTP03TimingQuantity, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewDFTP03TimingQuantity(input.Index(i))
	}
	return values
}

// NewCQUI19RoleClinicalHistory creates an implementation of CQUI19RoleClinicalHistory
func NewCQUI19RoleClinicalHistory(input hl7.HL7Type) CQUI19RoleClinicalHistory {
	v := CQUI19RoleClinicalHistory{}
	v.RoleClinicalHistoryObject = NewCQUI19RoleClinicalHistoryObject(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type CQUI19RoleClinicalHistory struct {
	RoleClinicalHistoryObject CQUI19RoleClinicalHistoryObject
	Variance                  []VAR
}

// NewCQUI19RoleClinicalHistorySlice will construct a slice of type CQUI19RoleClinicalHistory
func NewCQUI19RoleClinicalHistorySlice(input hl7.HL7Type) []CQUI19RoleClinicalHistory {
	values := make([]CQUI19RoleClinicalHistory, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCQUI19RoleClinicalHistory(input.Index(i))
	}
	return values
}

// NewORUR31TimingQty creates an implementation of ORUR31TimingQty
func NewORUR31TimingQty(input hl7.HL7Type) ORUR31TimingQty {
	v := ORUR31TimingQty{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type ORUR31TimingQty struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewORUR31TimingQtySlice will construct a slice of type ORUR31TimingQty
func NewORUR31TimingQtySlice(input hl7.HL7Type) []ORUR31TimingQty {
	values := make([]ORUR31TimingQty, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORUR31TimingQty(input.Index(i))
	}
	return values
}

// NewOMQO42OrderPrior creates an implementation of OMQO42OrderPrior
func NewOMQO42OrderPrior(input hl7.HL7Type) OMQO42OrderPrior {
	v := OMQO42OrderPrior{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.ObservationRequest = NewOBR(input.Index(2))
	v.TimingPrior = NewOMQO42TimingPriorSlice(input.Index(3))
	v.NotesAndComments = NewNTESlice(input.Index(4))
	v.AdditionalParticipationInformation = NewPRTSlice(input.Index(5))
	v.ContactData = NewCTD(input.Index(6))
	v.ObservationPrior = NewOMQO42ObservationPriorSlice(input.Index(7))
	return v
}

type OMQO42OrderPrior struct {
	CommonOrder                        ORC
	ParticipationInformation           []PRT
	ObservationRequest                 OBR
	TimingPrior                        []OMQO42TimingPrior
	NotesAndComments                   []NTE
	AdditionalParticipationInformation []PRT
	ContactData                        CTD
	ObservationPrior                   []OMQO42ObservationPrior
}

// NewOMQO42OrderPriorSlice will construct a slice of type OMQO42OrderPrior
func NewOMQO42OrderPriorSlice(input hl7.HL7Type) []OMQO42OrderPrior {
	values := make([]OMQO42OrderPrior, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMQO42OrderPrior(input.Index(i))
	}
	return values
}

// NewRQAI11Authorization creates an implementation of RQAI11Authorization
func NewRQAI11Authorization(input hl7.HL7Type) RQAI11Authorization {
	v := RQAI11Authorization{}
	v.AuthorizationInformation = NewAUT(input.Index(0))
	v.ContactData = NewCTD(input.Index(1))
	return v
}

type RQAI11Authorization struct {
	AuthorizationInformation AUT
	ContactData              CTD
}

// NewRQAI11AuthorizationSlice will construct a slice of type RQAI11Authorization
func NewRQAI11AuthorizationSlice(input hl7.HL7Type) []RQAI11Authorization {
	values := make([]RQAI11Authorization, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQAI11Authorization(input.Index(i))
	}
	return values
}

// NewBARP05Insurance creates an implementation of BARP05Insurance
func NewBARP05Insurance(input hl7.HL7Type) BARP05Insurance {
	v := BARP05Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3Slice(input.Index(2))
	v.ParticipationInformation = NewPRTSlice(input.Index(3))
	v.Role = NewROLSlice(input.Index(4))
	return v
}

type BARP05Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification []IN3
	ParticipationInformation                    []PRT
	Role                                        []ROL
}

// NewBARP05InsuranceSlice will construct a slice of type BARP05Insurance
func NewBARP05InsuranceSlice(input hl7.HL7Type) []BARP05Insurance {
	values := make([]BARP05Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewBARP05Insurance(input.Index(i))
	}
	return values
}

// NewORIO24Order creates an implementation of ORIO24Order
func NewORIO24Order(input hl7.HL7Type) ORIO24Order {
	v := ORIO24Order{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.Timing = NewORIO24TimingSlice(input.Index(2))
	v.ObservationRequest = NewOBR(input.Index(3))
	v.NotesAndComments = NewNTESlice(input.Index(4))
	v.AdditionalParticipationInformation = NewPRTSlice(input.Index(5))
	v.ImagingProcedureControlSegment = NewIPCSlice(input.Index(6))
	return v
}

type ORIO24Order struct {
	CommonOrder                        ORC
	ParticipationInformation           []PRT
	Timing                             []ORIO24Timing
	ObservationRequest                 OBR
	NotesAndComments                   []NTE
	AdditionalParticipationInformation []PRT
	ImagingProcedureControlSegment     []IPC
}

// NewORIO24OrderSlice will construct a slice of type ORIO24Order
func NewORIO24OrderSlice(input hl7.HL7Type) []ORIO24Order {
	values := make([]ORIO24Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORIO24Order(input.Index(i))
	}
	return values
}

// NewSRMS10Patient creates an implementation of SRMS10Patient
func NewSRMS10Patient(input hl7.HL7Type) SRMS10Patient {
	v := SRMS10Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientVisit = NewPV1(input.Index(1))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(2))
	v.Observation = NewSRMS10ObservationSlice(input.Index(3))
	v.Diagnosis = NewDG1Slice(input.Index(4))
	return v
}

type SRMS10Patient struct {
	PatientIdentification             PID
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	Observation                       []SRMS10Observation
	Diagnosis                         []DG1
}

// NewSRMS10PatientSlice will construct a slice of type SRMS10Patient
func NewSRMS10PatientSlice(input hl7.HL7Type) []SRMS10Patient {
	values := make([]SRMS10Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS10Patient(input.Index(i))
	}
	return values
}

// NewRREO26Patient creates an implementation of RREO26Patient
func NewRREO26Patient(input hl7.HL7Type) RREO26Patient {
	v := RREO26Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type RREO26Patient struct {
	PatientIdentification PID
	NotesAndComments      []NTE
}

// NewRREO26PatientSlice will construct a slice of type RREO26Patient
func NewRREO26PatientSlice(input hl7.HL7Type) []RREO26Patient {
	values := make([]RREO26Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRREO26Patient(input.Index(i))
	}
	return values
}

// NewPEXP07PexObservation creates an implementation of PEXP07PexObservation
func NewPEXP07PexObservation(input hl7.HL7Type) PEXP07PexObservation {
	v := PEXP07PexObservation{}
	v.ProductExperienceObservation = NewPEO(input.Index(0))
	v.PexCause = NewPEXP07PexCauseSlice(input.Index(1))
	return v
}

type PEXP07PexObservation struct {
	ProductExperienceObservation PEO
	PexCause                     []PEXP07PexCause
}

// NewPEXP07PexObservationSlice will construct a slice of type PEXP07PexObservation
func NewPEXP07PexObservationSlice(input hl7.HL7Type) []PEXP07PexObservation {
	values := make([]PEXP07PexObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPEXP07PexObservation(input.Index(i))
	}
	return values
}

// NewOMQO42Container creates an implementation of OMQO42Container
func NewOMQO42Container(input hl7.HL7Type) OMQO42Container {
	v := OMQO42Container{}
	v.SpecimenContainerDetail = NewSAC(input.Index(0))
	v.ContainerObservation = NewOMQO42ContainerObservationSlice(input.Index(1))
	return v
}

type OMQO42Container struct {
	SpecimenContainerDetail SAC
	ContainerObservation    []OMQO42ContainerObservation
}

// NewOMQO42ContainerSlice will construct a slice of type OMQO42Container
func NewOMQO42ContainerSlice(input hl7.HL7Type) []OMQO42Container {
	values := make([]OMQO42Container, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMQO42Container(input.Index(i))
	}
	return values
}

// NewMDMT08CommonOrder creates an implementation of MDMT08CommonOrder
func NewMDMT08CommonOrder(input hl7.HL7Type) MDMT08CommonOrder {
	v := MDMT08CommonOrder{}
	v.CommonOrder = NewORC(input.Index(0))
	v.Timing = NewMDMT08TimingSlice(input.Index(1))
	v.ObservationRequest = NewOBR(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	return v
}

type MDMT08CommonOrder struct {
	CommonOrder        ORC
	Timing             []MDMT08Timing
	ObservationRequest OBR
	NotesAndComments   []NTE
}

// NewMDMT08CommonOrderSlice will construct a slice of type MDMT08CommonOrder
func NewMDMT08CommonOrderSlice(input hl7.HL7Type) []MDMT08CommonOrder {
	values := make([]MDMT08CommonOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMDMT08CommonOrder(input.Index(i))
	}
	return values
}

// NewSRMS03Patient creates an implementation of SRMS03Patient
func NewSRMS03Patient(input hl7.HL7Type) SRMS03Patient {
	v := SRMS03Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientVisit = NewPV1(input.Index(1))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(2))
	v.Observation = NewSRMS03ObservationSlice(input.Index(3))
	v.Diagnosis = NewDG1Slice(input.Index(4))
	return v
}

type SRMS03Patient struct {
	PatientIdentification             PID
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	Observation                       []SRMS03Observation
	Diagnosis                         []DG1
}

// NewSRMS03PatientSlice will construct a slice of type SRMS03Patient
func NewSRMS03PatientSlice(input hl7.HL7Type) []SRMS03Patient {
	values := make([]SRMS03Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS03Patient(input.Index(i))
	}
	return values
}

// NewEHCE24AuthorizationResponseInfo creates an implementation of EHCE24AuthorizationResponseInfo
func NewEHCE24AuthorizationResponseInfo(input hl7.HL7Type) EHCE24AuthorizationResponseInfo {
	v := EHCE24AuthorizationResponseInfo{}
	v.InvoiceSegment = NewIVC(input.Index(0))
	v.PslItemInfo = NewEHCE24PslItemInfoSlice(input.Index(1))
	return v
}

type EHCE24AuthorizationResponseInfo struct {
	InvoiceSegment IVC
	PslItemInfo    []EHCE24PslItemInfo
}

// NewEHCE24AuthorizationResponseInfoSlice will construct a slice of type EHCE24AuthorizationResponseInfo
func NewEHCE24AuthorizationResponseInfoSlice(input hl7.HL7Type) []EHCE24AuthorizationResponseInfo {
	values := make([]EHCE24AuthorizationResponseInfo, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewEHCE24AuthorizationResponseInfo(input.Index(i))
	}
	return values
}

// NewOPRO38SpecimenObservation creates an implementation of OPRO38SpecimenObservation
func NewOPRO38SpecimenObservation(input hl7.HL7Type) OPRO38SpecimenObservation {
	v := OPRO38SpecimenObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type OPRO38SpecimenObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewOPRO38SpecimenObservationSlice will construct a slice of type OPRO38SpecimenObservation
func NewOPRO38SpecimenObservationSlice(input hl7.HL7Type) []OPRO38SpecimenObservation {
	values := make([]OPRO38SpecimenObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOPRO38SpecimenObservation(input.Index(i))
	}
	return values
}

// NewMDMT04Observation creates an implementation of MDMT04Observation
func NewMDMT04Observation(input hl7.HL7Type) MDMT04Observation {
	v := MDMT04Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type MDMT04Observation struct {
	ObservationResult OBX
	NotesAndComments  []NTE
}

// NewMDMT04ObservationSlice will construct a slice of type MDMT04Observation
func NewMDMT04ObservationSlice(input hl7.HL7Type) []MDMT04Observation {
	values := make([]MDMT04Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMDMT04Observation(input.Index(i))
	}
	return values
}

// NewCCRI16MedicationAdministrationObservation creates an implementation of CCRI16MedicationAdministrationObservation
func NewCCRI16MedicationAdministrationObservation(input hl7.HL7Type) CCRI16MedicationAdministrationObservation {
	v := CCRI16MedicationAdministrationObservation{}
	v.ObservationResult = NewOBXSlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CCRI16MedicationAdministrationObservation struct {
	ObservationResult        []OBX
	ParticipationInformation []PRT
}

// NewCCRI16MedicationAdministrationObservationSlice will construct a slice of type CCRI16MedicationAdministrationObservation
func NewCCRI16MedicationAdministrationObservationSlice(input hl7.HL7Type) []CCRI16MedicationAdministrationObservation {
	values := make([]CCRI16MedicationAdministrationObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI16MedicationAdministrationObservation(input.Index(i))
	}
	return values
}

// NewSRRS08Patient creates an implementation of SRRS08Patient
func NewSRRS08Patient(input hl7.HL7Type) SRRS08Patient {
	v := SRRS08Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientVisit = NewPV1(input.Index(1))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(2))
	v.Diagnosis = NewDG1Slice(input.Index(3))
	return v
}

type SRRS08Patient struct {
	PatientIdentification             PID
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	Diagnosis                         []DG1
}

// NewSRRS08PatientSlice will construct a slice of type SRRS08Patient
func NewSRRS08PatientSlice(input hl7.HL7Type) []SRRS08Patient {
	values := make([]SRRS08Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS08Patient(input.Index(i))
	}
	return values
}

// NewRSPZ90CommonOrder creates an implementation of RSPZ90CommonOrder
func NewRSPZ90CommonOrder(input hl7.HL7Type) RSPZ90CommonOrder {
	v := RSPZ90CommonOrder{}
	v.CommonOrder = NewORC(input.Index(0))
	v.Timing = NewRSPZ90TimingSlice(input.Index(1))
	v.ObservationRequest = NewOBR(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	v.ContactData = NewCTD(input.Index(4))
	v.Observation = NewRSPZ90ObservationSlice(input.Index(5))
	return v
}

type RSPZ90CommonOrder struct {
	CommonOrder        ORC
	Timing             []RSPZ90Timing
	ObservationRequest OBR
	NotesAndComments   []NTE
	ContactData        CTD
	Observation        []RSPZ90Observation
}

// NewRSPZ90CommonOrderSlice will construct a slice of type RSPZ90CommonOrder
func NewRSPZ90CommonOrderSlice(input hl7.HL7Type) []RSPZ90CommonOrder {
	values := make([]RSPZ90CommonOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPZ90CommonOrder(input.Index(i))
	}
	return values
}

// NewPEXP07PexCause creates an implementation of PEXP07PexCause
func NewPEXP07PexCause(input hl7.HL7Type) PEXP07PexCause {
	v := PEXP07PexCause{}
	v.PossibleCausalRelationship = NewPCR(input.Index(0))
	v.RxOrder = NewPEXP07RxOrder(input.Index(1))
	v.RxAdministration = NewPEXP07RxAdministrationSlice(input.Index(2))
	v.ProblemDetails = NewPRBSlice(input.Index(3))
	v.Observation = NewPEXP07ObservationSlice(input.Index(4))
	v.NotesAndComments = NewNTESlice(input.Index(5))
	v.AssociatedPerson = NewPEXP07AssociatedPerson(input.Index(6))
	v.Study = NewPEXP07StudySlice(input.Index(7))
	return v
}

type PEXP07PexCause struct {
	PossibleCausalRelationship PCR
	RxOrder                    PEXP07RxOrder
	RxAdministration           []PEXP07RxAdministration
	ProblemDetails             []PRB
	Observation                []PEXP07Observation
	NotesAndComments           []NTE
	AssociatedPerson           PEXP07AssociatedPerson
	Study                      []PEXP07Study
}

// NewPEXP07PexCauseSlice will construct a slice of type PEXP07PexCause
func NewPEXP07PexCauseSlice(input hl7.HL7Type) []PEXP07PexCause {
	values := make([]PEXP07PexCause, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPEXP07PexCause(input.Index(i))
	}
	return values
}

// NewRTBZ78RowDefinition creates an implementation of RTBZ78RowDefinition
func NewRTBZ78RowDefinition(input hl7.HL7Type) RTBZ78RowDefinition {
	v := RTBZ78RowDefinition{}
	v.TableRowDefinition = NewRDF(input.Index(0))
	v.TableRowData = NewRDTSlice(input.Index(1))
	return v
}

type RTBZ78RowDefinition struct {
	TableRowDefinition RDF
	TableRowData       []RDT
}

// NewRTBZ78RowDefinitionSlice will construct a slice of type RTBZ78RowDefinition
func NewRTBZ78RowDefinitionSlice(input hl7.HL7Type) []RTBZ78RowDefinition {
	values := make([]RTBZ78RowDefinition, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRTBZ78RowDefinition(input.Index(i))
	}
	return values
}

// NewSRRS02Service creates an implementation of SRRS02Service
func NewSRRS02Service(input hl7.HL7Type) SRRS02Service {
	v := SRRS02Service{}
	v.AppointmentInformation = NewAIS(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SRRS02Service struct {
	AppointmentInformation AIS
	NotesAndComments       []NTE
}

// NewSRRS02ServiceSlice will construct a slice of type SRRS02Service
func NewSRRS02ServiceSlice(input hl7.HL7Type) []SRRS02Service {
	values := make([]SRRS02Service, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS02Service(input.Index(i))
	}
	return values
}

// NewCRMC02Patient creates an implementation of CRMC02Patient
func NewCRMC02Patient(input hl7.HL7Type) CRMC02Patient {
	v := CRMC02Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.AccessRestriction = NewARVSlice(input.Index(2))
	v.PatientVisit = NewCRMC02PatientVisit(input.Index(3))
	v.ClinicalStudyRegistration = NewCSR(input.Index(4))
	v.ClinicalStudyPhase = NewCSPSlice(input.Index(5))
	return v
}

type CRMC02Patient struct {
	PatientIdentification     PID
	ParticipationInformation  []PRT
	AccessRestriction         []ARV
	PatientVisit              CRMC02PatientVisit
	ClinicalStudyRegistration CSR
	ClinicalStudyPhase        []CSP
}

// NewCRMC02PatientSlice will construct a slice of type CRMC02Patient
func NewCRMC02PatientSlice(input hl7.HL7Type) []CRMC02Patient {
	values := make([]CRMC02Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCRMC02Patient(input.Index(i))
	}
	return values
}

// NewSIUS18Patient creates an implementation of SIUS18Patient
func NewSIUS18Patient(input hl7.HL7Type) SIUS18Patient {
	v := SIUS18Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.PatientVisit = NewPV1(input.Index(2))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(3))
	v.ObservationResult = NewOBXSlice(input.Index(4))
	v.Diagnosis = NewDG1Slice(input.Index(5))
	return v
}

type SIUS18Patient struct {
	PatientIdentification             PID
	PatientAdditionalDemographic      PD1
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ObservationResult                 []OBX
	Diagnosis                         []DG1
}

// NewSIUS18PatientSlice will construct a slice of type SIUS18Patient
func NewSIUS18PatientSlice(input hl7.HL7Type) []SIUS18Patient {
	values := make([]SIUS18Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS18Patient(input.Index(i))
	}
	return values
}

// NewRDEO25Insurance creates an implementation of RDEO25Insurance
func NewRDEO25Insurance(input hl7.HL7Type) RDEO25Insurance {
	v := RDEO25Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3(input.Index(2))
	return v
}

type RDEO25Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification IN3
}

// NewRDEO25InsuranceSlice will construct a slice of type RDEO25Insurance
func NewRDEO25InsuranceSlice(input hl7.HL7Type) []RDEO25Insurance {
	values := make([]RDEO25Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRDEO25Insurance(input.Index(i))
	}
	return values
}

// NewRGVO15PatientVisit creates an implementation of RGVO15PatientVisit
func NewRGVO15PatientVisit(input hl7.HL7Type) RGVO15PatientVisit {
	v := RGVO15PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.AccessRestriction = NewARVSlice(input.Index(3))
	return v
}

type RGVO15PatientVisit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ParticipationInformation          []PRT
	AccessRestriction                 []ARV
}

// NewRGVO15PatientVisitSlice will construct a slice of type RGVO15PatientVisit
func NewRGVO15PatientVisitSlice(input hl7.HL7Type) []RGVO15PatientVisit {
	values := make([]RGVO15PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRGVO15PatientVisit(input.Index(i))
	}
	return values
}

// NewCSUC09Visit creates an implementation of CSUC09Visit
func NewCSUC09Visit(input hl7.HL7Type) CSUC09Visit {
	v := CSUC09Visit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	return v
}

type CSUC09Visit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ParticipationInformation          []PRT
}

// NewCSUC09VisitSlice will construct a slice of type CSUC09Visit
func NewCSUC09VisitSlice(input hl7.HL7Type) []CSUC09Visit {
	values := make([]CSUC09Visit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCSUC09Visit(input.Index(i))
	}
	return values
}

// NewSIUS27Resources creates an implementation of SIUS27Resources
func NewSIUS27Resources(input hl7.HL7Type) SIUS27Resources {
	v := SIUS27Resources{}
	v.ResourceGroup = NewRGS(input.Index(0))
	v.Service = NewSIUS27ServiceSlice(input.Index(1))
	v.GeneralResource = NewSIUS27GeneralResourceSlice(input.Index(2))
	v.LocationResource = NewSIUS27LocationResourceSlice(input.Index(3))
	v.PersonnelResource = NewSIUS27PersonnelResourceSlice(input.Index(4))
	return v
}

type SIUS27Resources struct {
	ResourceGroup     RGS
	Service           []SIUS27Service
	GeneralResource   []SIUS27GeneralResource
	LocationResource  []SIUS27LocationResource
	PersonnelResource []SIUS27PersonnelResource
}

// NewSIUS27ResourcesSlice will construct a slice of type SIUS27Resources
func NewSIUS27ResourcesSlice(input hl7.HL7Type) []SIUS27Resources {
	values := make([]SIUS27Resources, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS27Resources(input.Index(i))
	}
	return values
}

// NewRSPZ90Observation creates an implementation of RSPZ90Observation
func NewRSPZ90Observation(input hl7.HL7Type) RSPZ90Observation {
	v := RSPZ90Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type RSPZ90Observation struct {
	ObservationResult OBX
	NotesAndComments  []NTE
}

// NewRSPZ90ObservationSlice will construct a slice of type RSPZ90Observation
func NewRSPZ90ObservationSlice(input hl7.HL7Type) []RSPZ90Observation {
	values := make([]RSPZ90Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPZ90Observation(input.Index(i))
	}
	return values
}

// NewDEOO45DonnorOrder creates an implementation of DEOO45DonnorOrder
func NewDEOO45DonnorOrder(input hl7.HL7Type) DEOO45DonnorOrder {
	v := DEOO45DonnorOrder{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.DonationObservation = NewDEOO45DonationObservationSlice(input.Index(2))
	return v
}

type DEOO45DonnorOrder struct {
	ObservationRequest  OBR
	NotesAndComments    []NTE
	DonationObservation []DEOO45DonationObservation
}

// NewDEOO45DonnorOrderSlice will construct a slice of type DEOO45DonnorOrder
func NewDEOO45DonnorOrderSlice(input hl7.HL7Type) []DEOO45DonnorOrder {
	values := make([]DEOO45DonnorOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewDEOO45DonnorOrder(input.Index(i))
	}
	return values
}

// NewPPGPCJOrder creates an implementation of PPGPCJOrder
func NewPPGPCJOrder(input hl7.HL7Type) PPGPCJOrder {
	v := PPGPCJOrder{}
	v.CommonOrder = NewORC(input.Index(0))
	v.OrderDetail = NewPPGPCJOrderDetail(input.Index(1))
	return v
}

type PPGPCJOrder struct {
	CommonOrder ORC
	OrderDetail PPGPCJOrderDetail
}

// NewPPGPCJOrderSlice will construct a slice of type PPGPCJOrder
func NewPPGPCJOrderSlice(input hl7.HL7Type) []PPGPCJOrder {
	values := make([]PPGPCJOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPGPCJOrder(input.Index(i))
	}
	return values
}

// NewOMSO05Insurance creates an implementation of OMSO05Insurance
func NewOMSO05Insurance(input hl7.HL7Type) OMSO05Insurance {
	v := OMSO05Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3(input.Index(2))
	return v
}

type OMSO05Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification IN3
}

// NewOMSO05InsuranceSlice will construct a slice of type OMSO05Insurance
func NewOMSO05InsuranceSlice(input hl7.HL7Type) []OMSO05Insurance {
	values := make([]OMSO05Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMSO05Insurance(input.Index(i))
	}
	return values
}

// NewCCRI16ClinicalHistoryDetail creates an implementation of CCRI16ClinicalHistoryDetail
func NewCCRI16ClinicalHistoryDetail(input hl7.HL7Type) CCRI16ClinicalHistoryDetail {
	v := CCRI16ClinicalHistoryDetail{}
	v.ClinicalHistoryObject = NewCCRI16ClinicalHistoryObject(input.Index(0))
	v.ClinicalHistoryObservation = NewCCRI16ClinicalHistoryObservationSlice(input.Index(1))
	return v
}

type CCRI16ClinicalHistoryDetail struct {
	ClinicalHistoryObject      CCRI16ClinicalHistoryObject
	ClinicalHistoryObservation []CCRI16ClinicalHistoryObservation
}

// NewCCRI16ClinicalHistoryDetailSlice will construct a slice of type CCRI16ClinicalHistoryDetail
func NewCCRI16ClinicalHistoryDetailSlice(input hl7.HL7Type) []CCRI16ClinicalHistoryDetail {
	values := make([]CCRI16ClinicalHistoryDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI16ClinicalHistoryDetail(input.Index(i))
	}
	return values
}

// NewOULR23CommonOrder creates an implementation of OULR23CommonOrder
func NewOULR23CommonOrder(input hl7.HL7Type) OULR23CommonOrder {
	v := OULR23CommonOrder{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.OrderDocument = NewOULR23OrderDocument(input.Index(2))
	return v
}

type OULR23CommonOrder struct {
	CommonOrder              ORC
	ParticipationInformation []PRT
	OrderDocument            OULR23OrderDocument
}

// NewOULR23CommonOrderSlice will construct a slice of type OULR23CommonOrder
func NewOULR23CommonOrderSlice(input hl7.HL7Type) []OULR23CommonOrder {
	values := make([]OULR23CommonOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOULR23CommonOrder(input.Index(i))
	}
	return values
}

// NewSRRS03PersonnelResource creates an implementation of SRRS03PersonnelResource
func NewSRRS03PersonnelResource(input hl7.HL7Type) SRRS03PersonnelResource {
	v := SRRS03PersonnelResource{}
	v.AppointmentInformationPersonnelResource = NewAIP(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SRRS03PersonnelResource struct {
	AppointmentInformationPersonnelResource AIP
	NotesAndComments                        []NTE
}

// NewSRRS03PersonnelResourceSlice will construct a slice of type SRRS03PersonnelResource
func NewSRRS03PersonnelResourceSlice(input hl7.HL7Type) []SRRS03PersonnelResource {
	values := make([]SRRS03PersonnelResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS03PersonnelResource(input.Index(i))
	}
	return values
}

// NewPPRPC2ProblemObservation creates an implementation of PPRPC2ProblemObservation
func NewPPRPC2ProblemObservation(input hl7.HL7Type) PPRPC2ProblemObservation {
	v := PPRPC2ProblemObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type PPRPC2ProblemObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewPPRPC2ProblemObservationSlice will construct a slice of type PPRPC2ProblemObservation
func NewPPRPC2ProblemObservationSlice(input hl7.HL7Type) []PPRPC2ProblemObservation {
	values := make([]PPRPC2ProblemObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPRPC2ProblemObservation(input.Index(i))
	}
	return values
}

// NewCSUC09RxAdmin creates an implementation of CSUC09RxAdmin
func NewCSUC09RxAdmin(input hl7.HL7Type) CSUC09RxAdmin {
	v := CSUC09RxAdmin{}
	v.PharmacyTreatmentAdministration = NewRXA(input.Index(0))
	v.PharmacyTreatmentRoute = NewRXR(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	return v
}

type CSUC09RxAdmin struct {
	PharmacyTreatmentAdministration RXA
	PharmacyTreatmentRoute          RXR
	ParticipationInformation        []PRT
}

// NewCSUC09RxAdminSlice will construct a slice of type CSUC09RxAdmin
func NewCSUC09RxAdminSlice(input hl7.HL7Type) []CSUC09RxAdmin {
	values := make([]CSUC09RxAdmin, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCSUC09RxAdmin(input.Index(i))
	}
	return values
}

// NewCCRI16MedicationOrderDetail creates an implementation of CCRI16MedicationOrderDetail
func NewCCRI16MedicationOrderDetail(input hl7.HL7Type) CCRI16MedicationOrderDetail {
	v := CCRI16MedicationOrderDetail{}
	v.PharmacyTreatmentOrder = NewRXO(input.Index(0))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(1))
	v.PharmacyTreatmentComponentOrder = NewRXCSlice(input.Index(2))
	v.MedicationOrderObservation = NewCCRI16MedicationOrderObservationSlice(input.Index(3))
	return v
}

type CCRI16MedicationOrderDetail struct {
	PharmacyTreatmentOrder          RXO
	PharmacyTreatmentRoute          []RXR
	PharmacyTreatmentComponentOrder []RXC
	MedicationOrderObservation      []CCRI16MedicationOrderObservation
}

// NewCCRI16MedicationOrderDetailSlice will construct a slice of type CCRI16MedicationOrderDetail
func NewCCRI16MedicationOrderDetailSlice(input hl7.HL7Type) []CCRI16MedicationOrderDetail {
	values := make([]CCRI16MedicationOrderDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI16MedicationOrderDetail(input.Index(i))
	}
	return values
}

// NewCCRI17PatientVisits creates an implementation of CCRI17PatientVisits
func NewCCRI17PatientVisits(input hl7.HL7Type) CCRI17PatientVisits {
	v := CCRI17PatientVisits{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	return v
}

type CCRI17PatientVisits struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
}

// NewCCRI17PatientVisitsSlice will construct a slice of type CCRI17PatientVisits
func NewCCRI17PatientVisitsSlice(input hl7.HL7Type) []CCRI17PatientVisits {
	values := make([]CCRI17PatientVisits, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI17PatientVisits(input.Index(i))
	}
	return values
}

// NewCCRI18RoleProblemObject creates an implementation of CCRI18RoleProblemObject
func NewCCRI18RoleProblemObject(input hl7.HL7Type) CCRI18RoleProblemObject {
	v := CCRI18RoleProblemObject{}
	v.Role = NewROL(input.Index(0))
	v.ProviderData = NewPRD(input.Index(1))
	return v
}

type CCRI18RoleProblemObject struct {
	Role         ROL
	ProviderData PRD
}

// NewCCRI18RoleProblemObjectSlice will construct a slice of type CCRI18RoleProblemObject
func NewCCRI18RoleProblemObjectSlice(input hl7.HL7Type) []CCRI18RoleProblemObject {
	values := make([]CCRI18RoleProblemObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI18RoleProblemObject(input.Index(i))
	}
	return values
}

// NewORUR01PatientResult creates an implementation of ORUR01PatientResult
func NewORUR01PatientResult(input hl7.HL7Type) ORUR01PatientResult {
	v := ORUR01PatientResult{}
	v.Patient = NewORUR01Patient(input.Index(0))
	v.OrderObservation = NewORUR01OrderObservationSlice(input.Index(1))
	return v
}

type ORUR01PatientResult struct {
	Patient          ORUR01Patient
	OrderObservation []ORUR01OrderObservation
}

// NewORUR01PatientResultSlice will construct a slice of type ORUR01PatientResult
func NewORUR01PatientResultSlice(input hl7.HL7Type) []ORUR01PatientResult {
	values := make([]ORUR01PatientResult, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORUR01PatientResult(input.Index(i))
	}
	return values
}

// NewOMLO35Timing creates an implementation of OMLO35Timing
func NewOMLO35Timing(input hl7.HL7Type) OMLO35Timing {
	v := OMLO35Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type OMLO35Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewOMLO35TimingSlice will construct a slice of type OMLO35Timing
func NewOMLO35TimingSlice(input hl7.HL7Type) []OMLO35Timing {
	values := make([]OMLO35Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO35Timing(input.Index(i))
	}
	return values
}

// NewSRRS05PersonnelResource creates an implementation of SRRS05PersonnelResource
func NewSRRS05PersonnelResource(input hl7.HL7Type) SRRS05PersonnelResource {
	v := SRRS05PersonnelResource{}
	v.AppointmentInformationPersonnelResource = NewAIP(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SRRS05PersonnelResource struct {
	AppointmentInformationPersonnelResource AIP
	NotesAndComments                        []NTE
}

// NewSRRS05PersonnelResourceSlice will construct a slice of type SRRS05PersonnelResource
func NewSRRS05PersonnelResourceSlice(input hl7.HL7Type) []SRRS05PersonnelResource {
	values := make([]SRRS05PersonnelResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS05PersonnelResource(input.Index(i))
	}
	return values
}

// NewOMNO07Order creates an implementation of OMNO07Order
func NewOMNO07Order(input hl7.HL7Type) OMNO07Order {
	v := OMNO07Order{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.Timing = NewOMNO07TimingSlice(input.Index(2))
	v.RequisitionDetail = NewRQD(input.Index(3))
	v.RequisitionDetail1 = NewRQ1(input.Index(4))
	v.NotesAndComments = NewNTESlice(input.Index(5))
	v.Observation = NewOMNO07ObservationSlice(input.Index(6))
	v.Billing = NewBLG(input.Index(7))
	return v
}

type OMNO07Order struct {
	CommonOrder              ORC
	ParticipationInformation []PRT
	Timing                   []OMNO07Timing
	RequisitionDetail        RQD
	RequisitionDetail1       RQ1
	NotesAndComments         []NTE
	Observation              []OMNO07Observation
	Billing                  BLG
}

// NewOMNO07OrderSlice will construct a slice of type OMNO07Order
func NewOMNO07OrderSlice(input hl7.HL7Type) []OMNO07Order {
	values := make([]OMNO07Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMNO07Order(input.Index(i))
	}
	return values
}

// NewCCUI20RoleProblemObject creates an implementation of CCUI20RoleProblemObject
func NewCCUI20RoleProblemObject(input hl7.HL7Type) CCUI20RoleProblemObject {
	v := CCUI20RoleProblemObject{}
	v.Role = NewROL(input.Index(0))
	v.ProviderData = NewPRD(input.Index(1))
	return v
}

type CCUI20RoleProblemObject struct {
	Role         ROL
	ProviderData PRD
}

// NewCCUI20RoleProblemObjectSlice will construct a slice of type CCUI20RoleProblemObject
func NewCCUI20RoleProblemObjectSlice(input hl7.HL7Type) []CCUI20RoleProblemObject {
	values := make([]CCUI20RoleProblemObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCUI20RoleProblemObject(input.Index(i))
	}
	return values
}

// NewEHCE15ProductServiceGroup creates an implementation of EHCE15ProductServiceGroup
func NewEHCE15ProductServiceGroup(input hl7.HL7Type) EHCE15ProductServiceGroup {
	v := EHCE15ProductServiceGroup{}
	v.ProductServiceGroup = NewPSG(input.Index(0))
	v.PslItemInfo = NewEHCE15PslItemInfoSlice(input.Index(1))
	return v
}

type EHCE15ProductServiceGroup struct {
	ProductServiceGroup PSG
	PslItemInfo         []EHCE15PslItemInfo
}

// NewEHCE15ProductServiceGroupSlice will construct a slice of type EHCE15ProductServiceGroup
func NewEHCE15ProductServiceGroupSlice(input hl7.HL7Type) []EHCE15ProductServiceGroup {
	values := make([]EHCE15ProductServiceGroup, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewEHCE15ProductServiceGroup(input.Index(i))
	}
	return values
}

// NewSIUS24GeneralResource creates an implementation of SIUS24GeneralResource
func NewSIUS24GeneralResource(input hl7.HL7Type) SIUS24GeneralResource {
	v := SIUS24GeneralResource{}
	v.AppointmentInformationGeneralResource = NewAIG(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS24GeneralResource struct {
	AppointmentInformationGeneralResource AIG
	NotesAndComments                      []NTE
}

// NewSIUS24GeneralResourceSlice will construct a slice of type SIUS24GeneralResource
func NewSIUS24GeneralResourceSlice(input hl7.HL7Type) []SIUS24GeneralResource {
	values := make([]SIUS24GeneralResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS24GeneralResource(input.Index(i))
	}
	return values
}

// NewSRRS05LocationResource creates an implementation of SRRS05LocationResource
func NewSRRS05LocationResource(input hl7.HL7Type) SRRS05LocationResource {
	v := SRRS05LocationResource{}
	v.AppointmentInformationLocationResource = NewAIL(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SRRS05LocationResource struct {
	AppointmentInformationLocationResource AIL
	NotesAndComments                       []NTE
}

// NewSRRS05LocationResourceSlice will construct a slice of type SRRS05LocationResource
func NewSRRS05LocationResourceSlice(input hl7.HL7Type) []SRRS05LocationResource {
	values := make([]SRRS05LocationResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS05LocationResource(input.Index(i))
	}
	return values
}

// NewCCII22RoalGoalObject creates an implementation of CCII22RoalGoalObject
func NewCCII22RoalGoalObject(input hl7.HL7Type) CCII22RoalGoalObject {
	v := CCII22RoalGoalObject{}
	v.Role = NewROL(input.Index(0))
	v.ProviderData = NewPRD(input.Index(1))
	return v
}

type CCII22RoalGoalObject struct {
	Role         ROL
	ProviderData PRD
}

// NewCCII22RoalGoalObjectSlice will construct a slice of type CCII22RoalGoalObject
func NewCCII22RoalGoalObjectSlice(input hl7.HL7Type) []CCII22RoalGoalObject {
	values := make([]CCII22RoalGoalObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCII22RoalGoalObject(input.Index(i))
	}
	return values
}

// NewCCRI16ClinicalOrderObject creates an implementation of CCRI16ClinicalOrderObject
func NewCCRI16ClinicalOrderObject(input hl7.HL7Type) CCRI16ClinicalOrderObject {
	v := CCRI16ClinicalOrderObject{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.PharmacyTreatmentOrder = NewRXO(input.Index(1))
	v.DietaryOrdersSupplementsAndPreferences = NewODS(input.Index(2))
	v.Procedures = NewPR1(input.Index(3))
	return v
}

type CCRI16ClinicalOrderObject struct {
	ObservationRequest                     OBR
	PharmacyTreatmentOrder                 RXO
	DietaryOrdersSupplementsAndPreferences ODS
	Procedures                             PR1
}

// NewCCRI16ClinicalOrderObjectSlice will construct a slice of type CCRI16ClinicalOrderObject
func NewCCRI16ClinicalOrderObjectSlice(input hl7.HL7Type) []CCRI16ClinicalOrderObject {
	values := make([]CCRI16ClinicalOrderObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI16ClinicalOrderObject(input.Index(i))
	}
	return values
}

// NewRDEO25Order creates an implementation of RDEO25Order
func NewRDEO25Order(input hl7.HL7Type) RDEO25Order {
	v := RDEO25Order{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.Timing = NewRDEO25TimingSlice(input.Index(2))
	v.OrderDetail = NewRDEO25OrderDetail(input.Index(3))
	v.PharmacyTreatmentEncodedOrder = NewRXE(input.Index(4))
	v.AdditionalParticipationInformation = NewPRTSlice(input.Index(5))
	v.NotesAndComments = NewNTESlice(input.Index(6))
	v.TimingEncoded = NewRDEO25TimingEncodedSlice(input.Index(7))
	v.InfusionOrder = NewRDEO25InfusionOrderSlice(input.Index(8))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(9))
	v.PharmacyTreatmentComponentOrder = NewRXCSlice(input.Index(10))
	v.CumulativeDosage = NewCDOSlice(input.Index(11))
	v.Observation = NewRDEO25ObservationSlice(input.Index(12))
	v.FinancialTransaction = NewFT1Slice(input.Index(13))
	v.Billing = NewBLG(input.Index(14))
	v.ClinicalTrialIdentification = NewCTISlice(input.Index(15))
	return v
}

type RDEO25Order struct {
	CommonOrder                        ORC
	ParticipationInformation           []PRT
	Timing                             []RDEO25Timing
	OrderDetail                        RDEO25OrderDetail
	PharmacyTreatmentEncodedOrder      RXE
	AdditionalParticipationInformation []PRT
	NotesAndComments                   []NTE
	TimingEncoded                      []RDEO25TimingEncoded
	InfusionOrder                      []RDEO25InfusionOrder
	PharmacyTreatmentRoute             []RXR
	PharmacyTreatmentComponentOrder    []RXC
	CumulativeDosage                   []CDO
	Observation                        []RDEO25Observation
	FinancialTransaction               []FT1
	Billing                            BLG
	ClinicalTrialIdentification        []CTI
}

// NewRDEO25OrderSlice will construct a slice of type RDEO25Order
func NewRDEO25OrderSlice(input hl7.HL7Type) []RDEO25Order {
	values := make([]RDEO25Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRDEO25Order(input.Index(i))
	}
	return values
}

// NewOULR22SpecimenObservation creates an implementation of OULR22SpecimenObservation
func NewOULR22SpecimenObservation(input hl7.HL7Type) OULR22SpecimenObservation {
	v := OULR22SpecimenObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type OULR22SpecimenObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewOULR22SpecimenObservationSlice will construct a slice of type OULR22SpecimenObservation
func NewOULR22SpecimenObservationSlice(input hl7.HL7Type) []OULR22SpecimenObservation {
	values := make([]OULR22SpecimenObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOULR22SpecimenObservation(input.Index(i))
	}
	return values
}

// NewORLO22ObservationRequest creates an implementation of ORLO22ObservationRequest
func NewORLO22ObservationRequest(input hl7.HL7Type) ORLO22ObservationRequest {
	v := ORLO22ObservationRequest{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.Specimen = NewORLO22SpecimenSlice(input.Index(2))
	return v
}

type ORLO22ObservationRequest struct {
	ObservationRequest       OBR
	ParticipationInformation []PRT
	Specimen                 []ORLO22Specimen
}

// NewORLO22ObservationRequestSlice will construct a slice of type ORLO22ObservationRequest
func NewORLO22ObservationRequestSlice(input hl7.HL7Type) []ORLO22ObservationRequest {
	values := make([]ORLO22ObservationRequest, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORLO22ObservationRequest(input.Index(i))
	}
	return values
}

// NewMFNM05MfLocDept creates an implementation of MFNM05MfLocDept
func NewMFNM05MfLocDept(input hl7.HL7Type) MFNM05MfLocDept {
	v := MFNM05MfLocDept{}
	v.LocationDepartment = NewLDP(input.Index(0))
	v.LocationCharacteristic = NewLCHSlice(input.Index(1))
	v.LocationChargeCode = NewLCCSlice(input.Index(2))
	return v
}

type MFNM05MfLocDept struct {
	LocationDepartment     LDP
	LocationCharacteristic []LCH
	LocationChargeCode     []LCC
}

// NewMFNM05MfLocDeptSlice will construct a slice of type MFNM05MfLocDept
func NewMFNM05MfLocDeptSlice(input hl7.HL7Type) []MFNM05MfLocDept {
	values := make([]MFNM05MfLocDept, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMFNM05MfLocDept(input.Index(i))
	}
	return values
}

// NewQBPZ95Qbp creates an implementation of QBPZ95Qbp
func NewQBPZ95Qbp(input hl7.HL7Type) QBPZ95Qbp {
	v := QBPZ95Qbp{}
	v.AnyHl7Segment = NewHxx(input.Index(0))
	return v
}

type QBPZ95Qbp struct {
	AnyHl7Segment Hxx
}

// NewQBPZ95QbpSlice will construct a slice of type QBPZ95Qbp
func NewQBPZ95QbpSlice(input hl7.HL7Type) []QBPZ95Qbp {
	values := make([]QBPZ95Qbp, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewQBPZ95Qbp(input.Index(i))
	}
	return values
}

// NewRSPZ90Patient creates an implementation of RSPZ90Patient
func NewRSPZ90Patient(input hl7.HL7Type) RSPZ90Patient {
	v := RSPZ90Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.NextOfKinAssociatedParties = NewNK1Slice(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	v.Visit = NewRSPZ90Visit(input.Index(4))
	return v
}

type RSPZ90Patient struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	NextOfKinAssociatedParties   []NK1
	NotesAndComments             []NTE
	Visit                        RSPZ90Visit
}

// NewRSPZ90PatientSlice will construct a slice of type RSPZ90Patient
func NewRSPZ90PatientSlice(input hl7.HL7Type) []RSPZ90Patient {
	values := make([]RSPZ90Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPZ90Patient(input.Index(i))
	}
	return values
}

// NewSIUS17Resources creates an implementation of SIUS17Resources
func NewSIUS17Resources(input hl7.HL7Type) SIUS17Resources {
	v := SIUS17Resources{}
	v.ResourceGroup = NewRGS(input.Index(0))
	v.Service = NewSIUS17ServiceSlice(input.Index(1))
	v.GeneralResource = NewSIUS17GeneralResourceSlice(input.Index(2))
	v.LocationResource = NewSIUS17LocationResourceSlice(input.Index(3))
	v.PersonnelResource = NewSIUS17PersonnelResourceSlice(input.Index(4))
	return v
}

type SIUS17Resources struct {
	ResourceGroup     RGS
	Service           []SIUS17Service
	GeneralResource   []SIUS17GeneralResource
	LocationResource  []SIUS17LocationResource
	PersonnelResource []SIUS17PersonnelResource
}

// NewSIUS17ResourcesSlice will construct a slice of type SIUS17Resources
func NewSIUS17ResourcesSlice(input hl7.HL7Type) []SIUS17Resources {
	values := make([]SIUS17Resources, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS17Resources(input.Index(i))
	}
	return values
}

// NewRSPZ88OrderEncoded creates an implementation of RSPZ88OrderEncoded
func NewRSPZ88OrderEncoded(input hl7.HL7Type) RSPZ88OrderEncoded {
	v := RSPZ88OrderEncoded{}
	v.PharmacyTreatmentEncodedOrder = NewRXE(input.Index(0))
	v.TimingEncoded = NewRSPZ88TimingEncodedSlice(input.Index(1))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(2))
	v.PharmacyTreatmentComponentOrder = NewRXCSlice(input.Index(3))
	return v
}

type RSPZ88OrderEncoded struct {
	PharmacyTreatmentEncodedOrder   RXE
	TimingEncoded                   []RSPZ88TimingEncoded
	PharmacyTreatmentRoute          []RXR
	PharmacyTreatmentComponentOrder []RXC
}

// NewRSPZ88OrderEncodedSlice will construct a slice of type RSPZ88OrderEncoded
func NewRSPZ88OrderEncodedSlice(input hl7.HL7Type) []RSPZ88OrderEncoded {
	values := make([]RSPZ88OrderEncoded, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPZ88OrderEncoded(input.Index(i))
	}
	return values
}

// NewADTA08Insurance creates an implementation of ADTA08Insurance
func NewADTA08Insurance(input hl7.HL7Type) ADTA08Insurance {
	v := ADTA08Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3Slice(input.Index(2))
	v.Role = NewROLSlice(input.Index(3))
	v.AuthorizationInformation = NewAUTSlice(input.Index(4))
	v.ReferralInformation = NewRF1Slice(input.Index(5))
	return v
}

type ADTA08Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification []IN3
	Role                                        []ROL
	AuthorizationInformation                    []AUT
	ReferralInformation                         []RF1
}

// NewADTA08InsuranceSlice will construct a slice of type ADTA08Insurance
func NewADTA08InsuranceSlice(input hl7.HL7Type) []ADTA08Insurance {
	values := make([]ADTA08Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewADTA08Insurance(input.Index(i))
	}
	return values
}

// NewCCRI16Resources creates an implementation of CCRI16Resources
func NewCCRI16Resources(input hl7.HL7Type) CCRI16Resources {
	v := CCRI16Resources{}
	v.ResourceGroup = NewRGS(input.Index(0))
	v.ResourceDetail = NewCCRI16ResourceDetailSlice(input.Index(1))
	return v
}

type CCRI16Resources struct {
	ResourceGroup  RGS
	ResourceDetail []CCRI16ResourceDetail
}

// NewCCRI16ResourcesSlice will construct a slice of type CCRI16Resources
func NewCCRI16ResourcesSlice(input hl7.HL7Type) []CCRI16Resources {
	values := make([]CCRI16Resources, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI16Resources(input.Index(i))
	}
	return values
}

// NewSDRS31AntiMicrobialDeviceData creates an implementation of SDRS31AntiMicrobialDeviceData
func NewSDRS31AntiMicrobialDeviceData(input hl7.HL7Type) SDRS31AntiMicrobialDeviceData {
	v := SDRS31AntiMicrobialDeviceData{}
	v.SterilizationDeviceData = NewSDD(input.Index(0))
	v.AntiMicrobialCycleData = NewSCDSlice(input.Index(1))
	return v
}

type SDRS31AntiMicrobialDeviceData struct {
	SterilizationDeviceData SDD
	AntiMicrobialCycleData  []SCD
}

// NewSDRS31AntiMicrobialDeviceDataSlice will construct a slice of type SDRS31AntiMicrobialDeviceData
func NewSDRS31AntiMicrobialDeviceDataSlice(input hl7.HL7Type) []SDRS31AntiMicrobialDeviceData {
	values := make([]SDRS31AntiMicrobialDeviceData, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSDRS31AntiMicrobialDeviceData(input.Index(i))
	}
	return values
}

// NewOSMR26ContainerObservation creates an implementation of OSMR26ContainerObservation
func NewOSMR26ContainerObservation(input hl7.HL7Type) OSMR26ContainerObservation {
	v := OSMR26ContainerObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type OSMR26ContainerObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewOSMR26ContainerObservationSlice will construct a slice of type OSMR26ContainerObservation
func NewOSMR26ContainerObservationSlice(input hl7.HL7Type) []OSMR26ContainerObservation {
	values := make([]OSMR26ContainerObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOSMR26ContainerObservation(input.Index(i))
	}
	return values
}

// NewSRMS03PersonnelResource creates an implementation of SRMS03PersonnelResource
func NewSRMS03PersonnelResource(input hl7.HL7Type) SRMS03PersonnelResource {
	v := SRMS03PersonnelResource{}
	v.AppointmentInformationPersonnelResource = NewAIP(input.Index(0))
	v.AppointmentPreferences = NewAPR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type SRMS03PersonnelResource struct {
	AppointmentInformationPersonnelResource AIP
	AppointmentPreferences                  APR
	NotesAndComments                        []NTE
}

// NewSRMS03PersonnelResourceSlice will construct a slice of type SRMS03PersonnelResource
func NewSRMS03PersonnelResourceSlice(input hl7.HL7Type) []SRMS03PersonnelResource {
	values := make([]SRMS03PersonnelResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS03PersonnelResource(input.Index(i))
	}
	return values
}

// NewOPUR25SpecimenObservation creates an implementation of OPUR25SpecimenObservation
func NewOPUR25SpecimenObservation(input hl7.HL7Type) OPUR25SpecimenObservation {
	v := OPUR25SpecimenObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type OPUR25SpecimenObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewOPUR25SpecimenObservationSlice will construct a slice of type OPUR25SpecimenObservation
func NewOPUR25SpecimenObservationSlice(input hl7.HL7Type) []OPUR25SpecimenObservation {
	values := make([]OPUR25SpecimenObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOPUR25SpecimenObservation(input.Index(i))
	}
	return values
}

// NewOPUR25Order creates an implementation of OPUR25Order
func NewOPUR25Order(input hl7.HL7Type) OPUR25Order {
	v := OPUR25Order{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.CommonOrder = NewOPUR25CommonOrder(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	v.AdditionalParticipationInformation = NewPRTSlice(input.Index(4))
	v.TimingQty = NewOPUR25TimingQtySlice(input.Index(5))
	v.Result = NewOPUR25ResultSlice(input.Index(6))
	return v
}

type OPUR25Order struct {
	ObservationRequest                 OBR
	ParticipationInformation           []PRT
	CommonOrder                        OPUR25CommonOrder
	NotesAndComments                   []NTE
	AdditionalParticipationInformation []PRT
	TimingQty                          []OPUR25TimingQty
	Result                             []OPUR25Result
}

// NewOPUR25OrderSlice will construct a slice of type OPUR25Order
func NewOPUR25OrderSlice(input hl7.HL7Type) []OPUR25Order {
	values := make([]OPUR25Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOPUR25Order(input.Index(i))
	}
	return values
}

// NewORUR40OrderObservation creates an implementation of ORUR40OrderObservation
func NewORUR40OrderObservation(input hl7.HL7Type) ORUR40OrderObservation {
	v := ORUR40OrderObservation{}
	v.CommonOrder = NewORUR40CommonOrder(input.Index(0))
	v.ObservationRequest = NewOBR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.ParticipationInformation = NewPRTSlice(input.Index(3))
	v.TimingQty = NewORUR40TimingQtySlice(input.Index(4))
	v.ContactData = NewCTD(input.Index(5))
	v.Observation = NewORUR40ObservationSlice(input.Index(6))
	v.FinancialTransaction = NewFT1Slice(input.Index(7))
	v.ClinicalTrialIdentification = NewCTISlice(input.Index(8))
	v.Specimen = NewORUR40SpecimenSlice(input.Index(9))
	return v
}

type ORUR40OrderObservation struct {
	CommonOrder                 ORUR40CommonOrder
	ObservationRequest          OBR
	NotesAndComments            []NTE
	ParticipationInformation    []PRT
	TimingQty                   []ORUR40TimingQty
	ContactData                 CTD
	Observation                 []ORUR40Observation
	FinancialTransaction        []FT1
	ClinicalTrialIdentification []CTI
	Specimen                    []ORUR40Specimen
}

// NewORUR40OrderObservationSlice will construct a slice of type ORUR40OrderObservation
func NewORUR40OrderObservationSlice(input hl7.HL7Type) []ORUR40OrderObservation {
	values := make([]ORUR40OrderObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORUR40OrderObservation(input.Index(i))
	}
	return values
}

// NewOMLO33Specimen creates an implementation of OMLO33Specimen
func NewOMLO33Specimen(input hl7.HL7Type) OMLO33Specimen {
	v := OMLO33Specimen{}
	v.Specimen = NewSPM(input.Index(0))
	v.SpecimenObservation = NewOMLO33SpecimenObservationSlice(input.Index(1))
	v.SpecimenContainerDetail = NewSACSlice(input.Index(2))
	v.Order = NewOMLO33OrderSlice(input.Index(3))
	return v
}

type OMLO33Specimen struct {
	Specimen                SPM
	SpecimenObservation     []OMLO33SpecimenObservation
	SpecimenContainerDetail []SAC
	Order                   []OMLO33Order
}

// NewOMLO33SpecimenSlice will construct a slice of type OMLO33Specimen
func NewOMLO33SpecimenSlice(input hl7.HL7Type) []OMLO33Specimen {
	values := make([]OMLO33Specimen, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO33Specimen(input.Index(i))
	}
	return values
}

// NewOMDO03TimingDiet creates an implementation of OMDO03TimingDiet
func NewOMDO03TimingDiet(input hl7.HL7Type) OMDO03TimingDiet {
	v := OMDO03TimingDiet{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type OMDO03TimingDiet struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewOMDO03TimingDietSlice will construct a slice of type OMDO03TimingDiet
func NewOMDO03TimingDietSlice(input hl7.HL7Type) []OMDO03TimingDiet {
	values := make([]OMDO03TimingDiet, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMDO03TimingDiet(input.Index(i))
	}
	return values
}

// NewCCRI16RolePathwayObject creates an implementation of CCRI16RolePathwayObject
func NewCCRI16RolePathwayObject(input hl7.HL7Type) CCRI16RolePathwayObject {
	v := CCRI16RolePathwayObject{}
	v.Role = NewROL(input.Index(0))
	v.ProviderData = NewPRD(input.Index(1))
	return v
}

type CCRI16RolePathwayObject struct {
	Role         ROL
	ProviderData PRD
}

// NewCCRI16RolePathwayObjectSlice will construct a slice of type CCRI16RolePathwayObject
func NewCCRI16RolePathwayObjectSlice(input hl7.HL7Type) []CCRI16RolePathwayObject {
	values := make([]CCRI16RolePathwayObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI16RolePathwayObject(input.Index(i))
	}
	return values
}

// NewADTA43Patient creates an implementation of ADTA43Patient
func NewADTA43Patient(input hl7.HL7Type) ADTA43Patient {
	v := ADTA43Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.MergePatientInformation = NewMRG(input.Index(2))
	return v
}

type ADTA43Patient struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	MergePatientInformation      MRG
}

// NewADTA43PatientSlice will construct a slice of type ADTA43Patient
func NewADTA43PatientSlice(input hl7.HL7Type) []ADTA43Patient {
	values := make([]ADTA43Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewADTA43Patient(input.Index(i))
	}
	return values
}

// NewSIUS12Service creates an implementation of SIUS12Service
func NewSIUS12Service(input hl7.HL7Type) SIUS12Service {
	v := SIUS12Service{}
	v.AppointmentInformation = NewAIS(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS12Service struct {
	AppointmentInformation AIS
	NotesAndComments       []NTE
}

// NewSIUS12ServiceSlice will construct a slice of type SIUS12Service
func NewSIUS12ServiceSlice(input hl7.HL7Type) []SIUS12Service {
	values := make([]SIUS12Service, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS12Service(input.Index(i))
	}
	return values
}

// NewBARP12Procedure creates an implementation of BARP12Procedure
func NewBARP12Procedure(input hl7.HL7Type) BARP12Procedure {
	v := BARP12Procedure{}
	v.Procedures = NewPR1(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.Role = NewROLSlice(input.Index(2))
	return v
}

type BARP12Procedure struct {
	Procedures               PR1
	ParticipationInformation []PRT
	Role                     []ROL
}

// NewBARP12ProcedureSlice will construct a slice of type BARP12Procedure
func NewBARP12ProcedureSlice(input hl7.HL7Type) []BARP12Procedure {
	values := make([]BARP12Procedure, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewBARP12Procedure(input.Index(i))
	}
	return values
}

// NewPINI07Provider creates an implementation of PINI07Provider
func NewPINI07Provider(input hl7.HL7Type) PINI07Provider {
	v := PINI07Provider{}
	v.ProviderData = NewPRD(input.Index(0))
	v.ContactData = NewCTDSlice(input.Index(1))
	return v
}

type PINI07Provider struct {
	ProviderData PRD
	ContactData  []CTD
}

// NewPINI07ProviderSlice will construct a slice of type PINI07Provider
func NewPINI07ProviderSlice(input hl7.HL7Type) []PINI07Provider {
	values := make([]PINI07Provider, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPINI07Provider(input.Index(i))
	}
	return values
}

// NewPGLPC7Choice creates an implementation of PGLPC7Choice
func NewPGLPC7Choice(input hl7.HL7Type) PGLPC7Choice {
	v := PGLPC7Choice{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.AnyHl7Segment = NewHxx(input.Index(1))
	return v
}

type PGLPC7Choice struct {
	ObservationRequest OBR
	AnyHl7Segment      Hxx
}

// NewPGLPC7ChoiceSlice will construct a slice of type PGLPC7Choice
func NewPGLPC7ChoiceSlice(input hl7.HL7Type) []PGLPC7Choice {
	values := make([]PGLPC7Choice, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPGLPC7Choice(input.Index(i))
	}
	return values
}

// NewCCMI21MedicationOrderDetail creates an implementation of CCMI21MedicationOrderDetail
func NewCCMI21MedicationOrderDetail(input hl7.HL7Type) CCMI21MedicationOrderDetail {
	v := CCMI21MedicationOrderDetail{}
	v.PharmacyTreatmentOrder = NewRXO(input.Index(0))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(1))
	v.PharmacyTreatmentComponentOrder = NewRXCSlice(input.Index(2))
	v.MedicationOrderObservation = NewCCMI21MedicationOrderObservationSlice(input.Index(3))
	return v
}

type CCMI21MedicationOrderDetail struct {
	PharmacyTreatmentOrder          RXO
	PharmacyTreatmentRoute          []RXR
	PharmacyTreatmentComponentOrder []RXC
	MedicationOrderObservation      []CCMI21MedicationOrderObservation
}

// NewCCMI21MedicationOrderDetailSlice will construct a slice of type CCMI21MedicationOrderDetail
func NewCCMI21MedicationOrderDetailSlice(input hl7.HL7Type) []CCMI21MedicationOrderDetail {
	values := make([]CCMI21MedicationOrderDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCMI21MedicationOrderDetail(input.Index(i))
	}
	return values
}

// NewPEXP07AssociatedPerson creates an implementation of PEXP07AssociatedPerson
func NewPEXP07AssociatedPerson(input hl7.HL7Type) PEXP07AssociatedPerson {
	v := PEXP07AssociatedPerson{}
	v.NextOfKinAssociatedParties = NewNK1(input.Index(0))
	v.AssociatedRxOrder = NewPEXP07AssociatedRxOrder(input.Index(1))
	v.AssociatedRxAdmin = NewPEXP07AssociatedRxAdminSlice(input.Index(2))
	v.ProblemDetails = NewPRBSlice(input.Index(3))
	v.AssociatedObservation = NewPEXP07AssociatedObservationSlice(input.Index(4))
	return v
}

type PEXP07AssociatedPerson struct {
	NextOfKinAssociatedParties NK1
	AssociatedRxOrder          PEXP07AssociatedRxOrder
	AssociatedRxAdmin          []PEXP07AssociatedRxAdmin
	ProblemDetails             []PRB
	AssociatedObservation      []PEXP07AssociatedObservation
}

// NewPEXP07AssociatedPersonSlice will construct a slice of type PEXP07AssociatedPerson
func NewPEXP07AssociatedPersonSlice(input hl7.HL7Type) []PEXP07AssociatedPerson {
	values := make([]PEXP07AssociatedPerson, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPEXP07AssociatedPerson(input.Index(i))
	}
	return values
}

// NewMFNM10MfTestBattDetail creates an implementation of MFNM10MfTestBattDetail
func NewMFNM10MfTestBattDetail(input hl7.HL7Type) MFNM10MfTestBattDetail {
	v := MFNM10MfTestBattDetail{}
	v.ObservationBatteriessets = NewOM5(input.Index(0))
	v.ObservationsThatRequireSpecimens = NewOM4Slice(input.Index(1))
	return v
}

type MFNM10MfTestBattDetail struct {
	ObservationBatteriessets         OM5
	ObservationsThatRequireSpecimens []OM4
}

// NewMFNM10MfTestBattDetailSlice will construct a slice of type MFNM10MfTestBattDetail
func NewMFNM10MfTestBattDetailSlice(input hl7.HL7Type) []MFNM10MfTestBattDetail {
	values := make([]MFNM10MfTestBattDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMFNM10MfTestBattDetail(input.Index(i))
	}
	return values
}

// NewPPRPC1Pathway creates an implementation of PPRPC1Pathway
func NewPPRPC1Pathway(input hl7.HL7Type) PPRPC1Pathway {
	v := PPRPC1Pathway{}
	v.Pathway = NewPTH(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type PPRPC1Pathway struct {
	Pathway  PTH
	Variance []VAR
}

// NewPPRPC1PathwaySlice will construct a slice of type PPRPC1Pathway
func NewPPRPC1PathwaySlice(input hl7.HL7Type) []PPRPC1Pathway {
	values := make([]PPRPC1Pathway, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPRPC1Pathway(input.Index(i))
	}
	return values
}

// NewORLO36SpecimenContainer creates an implementation of ORLO36SpecimenContainer
func NewORLO36SpecimenContainer(input hl7.HL7Type) ORLO36SpecimenContainer {
	v := ORLO36SpecimenContainer{}
	v.SpecimenContainerDetail = NewSAC(input.Index(0))
	v.Order = NewORLO36OrderSlice(input.Index(1))
	return v
}

type ORLO36SpecimenContainer struct {
	SpecimenContainerDetail SAC
	Order                   []ORLO36Order
}

// NewORLO36SpecimenContainerSlice will construct a slice of type ORLO36SpecimenContainer
func NewORLO36SpecimenContainerSlice(input hl7.HL7Type) []ORLO36SpecimenContainer {
	values := make([]ORLO36SpecimenContainer, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORLO36SpecimenContainer(input.Index(i))
	}
	return values
}

// NewCSUC12StudySchedule creates an implementation of CSUC12StudySchedule
func NewCSUC12StudySchedule(input hl7.HL7Type) CSUC12StudySchedule {
	v := CSUC12StudySchedule{}
	v.ClinicalStudyDataScheduleSegment = NewCSS(input.Index(0))
	v.StudyObservation = NewCSUC12StudyObservationSlice(input.Index(1))
	v.StudyPharm = NewCSUC12StudyPharmSlice(input.Index(2))
	return v
}

type CSUC12StudySchedule struct {
	ClinicalStudyDataScheduleSegment CSS
	StudyObservation                 []CSUC12StudyObservation
	StudyPharm                       []CSUC12StudyPharm
}

// NewCSUC12StudyScheduleSlice will construct a slice of type CSUC12StudySchedule
func NewCSUC12StudyScheduleSlice(input hl7.HL7Type) []CSUC12StudySchedule {
	values := make([]CSUC12StudySchedule, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCSUC12StudySchedule(input.Index(i))
	}
	return values
}

// NewSRMS10Observation creates an implementation of SRMS10Observation
func NewSRMS10Observation(input hl7.HL7Type) SRMS10Observation {
	v := SRMS10Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type SRMS10Observation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewSRMS10ObservationSlice will construct a slice of type SRMS10Observation
func NewSRMS10ObservationSlice(input hl7.HL7Type) []SRMS10Observation {
	values := make([]SRMS10Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS10Observation(input.Index(i))
	}
	return values
}

// NewRPAI11Observation creates an implementation of RPAI11Observation
func NewRPAI11Observation(input hl7.HL7Type) RPAI11Observation {
	v := RPAI11Observation{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Results = NewRPAI11ResultsSlice(input.Index(2))
	return v
}

type RPAI11Observation struct {
	ObservationRequest OBR
	NotesAndComments   []NTE
	Results            []RPAI11Results
}

// NewRPAI11ObservationSlice will construct a slice of type RPAI11Observation
func NewRPAI11ObservationSlice(input hl7.HL7Type) []RPAI11Observation {
	values := make([]RPAI11Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRPAI11Observation(input.Index(i))
	}
	return values
}

// NewORGO20Patient creates an implementation of ORGO20Patient
func NewORGO20Patient(input hl7.HL7Type) ORGO20Patient {
	v := ORGO20Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.AccessRestriction = NewARVSlice(input.Index(3))
	return v
}

type ORGO20Patient struct {
	PatientIdentification    PID
	NotesAndComments         []NTE
	ParticipationInformation []PRT
	AccessRestriction        []ARV
}

// NewORGO20PatientSlice will construct a slice of type ORGO20Patient
func NewORGO20PatientSlice(input hl7.HL7Type) []ORGO20Patient {
	values := make([]ORGO20Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORGO20Patient(input.Index(i))
	}
	return values
}

// NewSRMS07PersonnelResource creates an implementation of SRMS07PersonnelResource
func NewSRMS07PersonnelResource(input hl7.HL7Type) SRMS07PersonnelResource {
	v := SRMS07PersonnelResource{}
	v.AppointmentInformationPersonnelResource = NewAIP(input.Index(0))
	v.AppointmentPreferences = NewAPR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type SRMS07PersonnelResource struct {
	AppointmentInformationPersonnelResource AIP
	AppointmentPreferences                  APR
	NotesAndComments                        []NTE
}

// NewSRMS07PersonnelResourceSlice will construct a slice of type SRMS07PersonnelResource
func NewSRMS07PersonnelResourceSlice(input hl7.HL7Type) []SRMS07PersonnelResource {
	values := make([]SRMS07PersonnelResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS07PersonnelResource(input.Index(i))
	}
	return values
}

// NewPPRPC1GoalObservation creates an implementation of PPRPC1GoalObservation
func NewPPRPC1GoalObservation(input hl7.HL7Type) PPRPC1GoalObservation {
	v := PPRPC1GoalObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type PPRPC1GoalObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewPPRPC1GoalObservationSlice will construct a slice of type PPRPC1GoalObservation
func NewPPRPC1GoalObservationSlice(input hl7.HL7Type) []PPRPC1GoalObservation {
	values := make([]PPRPC1GoalObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPRPC1GoalObservation(input.Index(i))
	}
	return values
}

// NewOPLO37Specimen creates an implementation of OPLO37Specimen
func NewOPLO37Specimen(input hl7.HL7Type) OPLO37Specimen {
	v := OPLO37Specimen{}
	v.Specimen = NewSPM(input.Index(0))
	v.SpecimenObservation = NewOPLO37SpecimenObservationSlice(input.Index(1))
	v.Container = NewOPLO37ContainerSlice(input.Index(2))
	v.ObservationRequest = NewOPLO37ObservationRequestSlice(input.Index(3))
	return v
}

type OPLO37Specimen struct {
	Specimen            SPM
	SpecimenObservation []OPLO37SpecimenObservation
	Container           []OPLO37Container
	ObservationRequest  []OPLO37ObservationRequest
}

// NewOPLO37SpecimenSlice will construct a slice of type OPLO37Specimen
func NewOPLO37SpecimenSlice(input hl7.HL7Type) []OPLO37Specimen {
	values := make([]OPLO37Specimen, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOPLO37Specimen(input.Index(i))
	}
	return values
}

// NewRREO12Response creates an implementation of RREO12Response
func NewRREO12Response(input hl7.HL7Type) RREO12Response {
	v := RREO12Response{}
	v.Patient = NewRREO12Patient(input.Index(0))
	v.Order = NewRREO12OrderSlice(input.Index(1))
	return v
}

type RREO12Response struct {
	Patient RREO12Patient
	Order   []RREO12Order
}

// NewRREO12ResponseSlice will construct a slice of type RREO12Response
func NewRREO12ResponseSlice(input hl7.HL7Type) []RREO12Response {
	values := make([]RREO12Response, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRREO12Response(input.Index(i))
	}
	return values
}

// NewOSMR26PatientObservation creates an implementation of OSMR26PatientObservation
func NewOSMR26PatientObservation(input hl7.HL7Type) OSMR26PatientObservation {
	v := OSMR26PatientObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type OSMR26PatientObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewOSMR26PatientObservationSlice will construct a slice of type OSMR26PatientObservation
func NewOSMR26PatientObservationSlice(input hl7.HL7Type) []OSMR26PatientObservation {
	values := make([]OSMR26PatientObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOSMR26PatientObservation(input.Index(i))
	}
	return values
}

// NewSRRS07LocationResource creates an implementation of SRRS07LocationResource
func NewSRRS07LocationResource(input hl7.HL7Type) SRRS07LocationResource {
	v := SRRS07LocationResource{}
	v.AppointmentInformationLocationResource = NewAIL(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SRRS07LocationResource struct {
	AppointmentInformationLocationResource AIL
	NotesAndComments                       []NTE
}

// NewSRRS07LocationResourceSlice will construct a slice of type SRRS07LocationResource
func NewSRRS07LocationResourceSlice(input hl7.HL7Type) []SRRS07LocationResource {
	values := make([]SRRS07LocationResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS07LocationResource(input.Index(i))
	}
	return values
}

// NewOPUR25TimingQty creates an implementation of OPUR25TimingQty
func NewOPUR25TimingQty(input hl7.HL7Type) OPUR25TimingQty {
	v := OPUR25TimingQty{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type OPUR25TimingQty struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewOPUR25TimingQtySlice will construct a slice of type OPUR25TimingQty
func NewOPUR25TimingQtySlice(input hl7.HL7Type) []OPUR25TimingQty {
	values := make([]OPUR25TimingQty, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOPUR25TimingQty(input.Index(i))
	}
	return values
}

// NewPPPPCBPathway creates an implementation of PPPPCBPathway
func NewPPPPCBPathway(input hl7.HL7Type) PPPPCBPathway {
	v := PPPPCBPathway{}
	v.Pathway = NewPTH(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Variance = NewVARSlice(input.Index(2))
	v.PathwayRole = NewPPPPCBPathwayRoleSlice(input.Index(3))
	v.Problem = NewPPPPCBProblemSlice(input.Index(4))
	return v
}

type PPPPCBPathway struct {
	Pathway          PTH
	NotesAndComments []NTE
	Variance         []VAR
	PathwayRole      []PPPPCBPathwayRole
	Problem          []PPPPCBProblem
}

// NewPPPPCBPathwaySlice will construct a slice of type PPPPCBPathway
func NewPPPPCBPathwaySlice(input hl7.HL7Type) []PPPPCBPathway {
	values := make([]PPPPCBPathway, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPPPCBPathway(input.Index(i))
	}
	return values
}

// NewRPAI10Results creates an implementation of RPAI10Results
func NewRPAI10Results(input hl7.HL7Type) RPAI10Results {
	v := RPAI10Results{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type RPAI10Results struct {
	ObservationResult OBX
	NotesAndComments  []NTE
}

// NewRPAI10ResultsSlice will construct a slice of type RPAI10Results
func NewRPAI10ResultsSlice(input hl7.HL7Type) []RPAI10Results {
	values := make([]RPAI10Results, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRPAI10Results(input.Index(i))
	}
	return values
}

// NewSRRS08Service creates an implementation of SRRS08Service
func NewSRRS08Service(input hl7.HL7Type) SRRS08Service {
	v := SRRS08Service{}
	v.AppointmentInformation = NewAIS(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SRRS08Service struct {
	AppointmentInformation AIS
	NotesAndComments       []NTE
}

// NewSRRS08ServiceSlice will construct a slice of type SRRS08Service
func NewSRRS08ServiceSlice(input hl7.HL7Type) []SRRS08Service {
	values := make([]SRRS08Service, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS08Service(input.Index(i))
	}
	return values
}

// NewREFI15Insurance creates an implementation of REFI15Insurance
func NewREFI15Insurance(input hl7.HL7Type) REFI15Insurance {
	v := REFI15Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3(input.Index(2))
	return v
}

type REFI15Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification IN3
}

// NewREFI15InsuranceSlice will construct a slice of type REFI15Insurance
func NewREFI15InsuranceSlice(input hl7.HL7Type) []REFI15Insurance {
	values := make([]REFI15Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewREFI15Insurance(input.Index(i))
	}
	return values
}

// NewRASO17Patient creates an implementation of RASO17Patient
func NewRASO17Patient(input hl7.HL7Type) RASO17Patient {
	v := RASO17Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.AdditionalDemographics = NewRASO17AdditionalDemographics(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.AccessRestriction = NewARVSlice(input.Index(3))
	v.PatientAllergyInformation = NewAL1Slice(input.Index(4))
	v.PatientVisit = NewRASO17PatientVisit(input.Index(5))
	return v
}

type RASO17Patient struct {
	PatientIdentification     PID
	AdditionalDemographics    RASO17AdditionalDemographics
	NotesAndComments          []NTE
	AccessRestriction         []ARV
	PatientAllergyInformation []AL1
	PatientVisit              RASO17PatientVisit
}

// NewRASO17PatientSlice will construct a slice of type RASO17Patient
func NewRASO17PatientSlice(input hl7.HL7Type) []RASO17Patient {
	values := make([]RASO17Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRASO17Patient(input.Index(i))
	}
	return values
}

// NewORLO40Response creates an implementation of ORLO40Response
func NewORLO40Response(input hl7.HL7Type) ORLO40Response {
	v := ORLO40Response{}
	v.Patient = NewORLO40Patient(input.Index(0))
	return v
}

type ORLO40Response struct {
	Patient ORLO40Patient
}

// NewORLO40ResponseSlice will construct a slice of type ORLO40Response
func NewORLO40ResponseSlice(input hl7.HL7Type) []ORLO40Response {
	values := make([]ORLO40Response, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORLO40Response(input.Index(i))
	}
	return values
}

// NewCCMI21ClinicalHistoryObservation creates an implementation of CCMI21ClinicalHistoryObservation
func NewCCMI21ClinicalHistoryObservation(input hl7.HL7Type) CCMI21ClinicalHistoryObservation {
	v := CCMI21ClinicalHistoryObservation{}
	v.ObservationResult = NewOBXSlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CCMI21ClinicalHistoryObservation struct {
	ObservationResult        []OBX
	ParticipationInformation []PRT
}

// NewCCMI21ClinicalHistoryObservationSlice will construct a slice of type CCMI21ClinicalHistoryObservation
func NewCCMI21ClinicalHistoryObservationSlice(input hl7.HL7Type) []CCMI21ClinicalHistoryObservation {
	values := make([]CCMI21ClinicalHistoryObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCMI21ClinicalHistoryObservation(input.Index(i))
	}
	return values
}

// NewOMLO33Insurance creates an implementation of OMLO33Insurance
func NewOMLO33Insurance(input hl7.HL7Type) OMLO33Insurance {
	v := OMLO33Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3(input.Index(2))
	return v
}

type OMLO33Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification IN3
}

// NewOMLO33InsuranceSlice will construct a slice of type OMLO33Insurance
func NewOMLO33InsuranceSlice(input hl7.HL7Type) []OMLO33Insurance {
	values := make([]OMLO33Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO33Insurance(input.Index(i))
	}
	return values
}

// NewPPPPCDProblemObservation creates an implementation of PPPPCDProblemObservation
func NewPPPPCDProblemObservation(input hl7.HL7Type) PPPPCDProblemObservation {
	v := PPPPCDProblemObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type PPPPCDProblemObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewPPPPCDProblemObservationSlice will construct a slice of type PPPPCDProblemObservation
func NewPPPPCDProblemObservationSlice(input hl7.HL7Type) []PPPPCDProblemObservation {
	values := make([]PPPPCDProblemObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPPPCDProblemObservation(input.Index(i))
	}
	return values
}

// NewADTA47Patient creates an implementation of ADTA47Patient
func NewADTA47Patient(input hl7.HL7Type) ADTA47Patient {
	v := ADTA47Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.AccessRestriction = NewARVSlice(input.Index(2))
	v.MergePatientInformation = NewMRG(input.Index(3))
	return v
}

type ADTA47Patient struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	AccessRestriction            []ARV
	MergePatientInformation      MRG
}

// NewADTA47PatientSlice will construct a slice of type ADTA47Patient
func NewADTA47PatientSlice(input hl7.HL7Type) []ADTA47Patient {
	values := make([]ADTA47Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewADTA47Patient(input.Index(i))
	}
	return values
}

// NewPPRPC3Problem creates an implementation of PPRPC3Problem
func NewPPRPC3Problem(input hl7.HL7Type) PPRPC3Problem {
	v := PPRPC3Problem{}
	v.ProblemDetails = NewPRB(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Variance = NewVARSlice(input.Index(2))
	v.ProblemRole = NewPPRPC3ProblemRoleSlice(input.Index(3))
	v.Pathway = NewPPRPC3PathwaySlice(input.Index(4))
	v.ProblemObservation = NewPPRPC3ProblemObservationSlice(input.Index(5))
	v.Goal = NewPPRPC3GoalSlice(input.Index(6))
	v.Order = NewPPRPC3OrderSlice(input.Index(7))
	return v
}

type PPRPC3Problem struct {
	ProblemDetails     PRB
	NotesAndComments   []NTE
	Variance           []VAR
	ProblemRole        []PPRPC3ProblemRole
	Pathway            []PPRPC3Pathway
	ProblemObservation []PPRPC3ProblemObservation
	Goal               []PPRPC3Goal
	Order              []PPRPC3Order
}

// NewPPRPC3ProblemSlice will construct a slice of type PPRPC3Problem
func NewPPRPC3ProblemSlice(input hl7.HL7Type) []PPRPC3Problem {
	values := make([]PPRPC3Problem, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPRPC3Problem(input.Index(i))
	}
	return values
}

// NewOULR23Order creates an implementation of OULR23Order
func NewOULR23Order(input hl7.HL7Type) OULR23Order {
	v := OULR23Order{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.CommonOrder = NewOULR23CommonOrder(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	v.AdditionalParticipationInformation = NewPRTSlice(input.Index(4))
	v.TimingQty = NewOULR23TimingQtySlice(input.Index(5))
	v.Result = NewOULR23ResultSlice(input.Index(6))
	v.ClinicalTrialIdentification = NewCTISlice(input.Index(7))
	return v
}

type OULR23Order struct {
	ObservationRequest                 OBR
	ParticipationInformation           []PRT
	CommonOrder                        OULR23CommonOrder
	NotesAndComments                   []NTE
	AdditionalParticipationInformation []PRT
	TimingQty                          []OULR23TimingQty
	Result                             []OULR23Result
	ClinicalTrialIdentification        []CTI
}

// NewOULR23OrderSlice will construct a slice of type OULR23Order
func NewOULR23OrderSlice(input hl7.HL7Type) []OULR23Order {
	values := make([]OULR23Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOULR23Order(input.Index(i))
	}
	return values
}

// NewCCII22RoleGoal creates an implementation of CCII22RoleGoal
func NewCCII22RoleGoal(input hl7.HL7Type) CCII22RoleGoal {
	v := CCII22RoleGoal{}
	v.RoalGoalObject = NewCCII22RoalGoalObject(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type CCII22RoleGoal struct {
	RoalGoalObject CCII22RoalGoalObject
	Variance       []VAR
}

// NewCCII22RoleGoalSlice will construct a slice of type CCII22RoleGoal
func NewCCII22RoleGoalSlice(input hl7.HL7Type) []CCII22RoleGoal {
	values := make([]CCII22RoleGoal, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCII22RoleGoal(input.Index(i))
	}
	return values
}

// NewMDMT08Timing creates an implementation of MDMT08Timing
func NewMDMT08Timing(input hl7.HL7Type) MDMT08Timing {
	v := MDMT08Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type MDMT08Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewMDMT08TimingSlice will construct a slice of type MDMT08Timing
func NewMDMT08TimingSlice(input hl7.HL7Type) []MDMT08Timing {
	values := make([]MDMT08Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMDMT08Timing(input.Index(i))
	}
	return values
}

// NewDELO46DonorRegistration creates an implementation of DELO46DonorRegistration
func NewDELO46DonorRegistration(input hl7.HL7Type) DELO46DonorRegistration {
	v := DELO46DonorRegistration{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type DELO46DonorRegistration struct {
	PatientVisit     PV1
	NotesAndComments []NTE
}

// NewDELO46DonorRegistrationSlice will construct a slice of type DELO46DonorRegistration
func NewDELO46DonorRegistrationSlice(input hl7.HL7Type) []DELO46DonorRegistration {
	values := make([]DELO46DonorRegistration, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewDELO46DonorRegistration(input.Index(i))
	}
	return values
}

// NewPPRPC2Problem creates an implementation of PPRPC2Problem
func NewPPRPC2Problem(input hl7.HL7Type) PPRPC2Problem {
	v := PPRPC2Problem{}
	v.ProblemDetails = NewPRB(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Variance = NewVARSlice(input.Index(2))
	v.ProblemRole = NewPPRPC2ProblemRoleSlice(input.Index(3))
	v.Pathway = NewPPRPC2PathwaySlice(input.Index(4))
	v.ProblemObservation = NewPPRPC2ProblemObservationSlice(input.Index(5))
	v.Goal = NewPPRPC2GoalSlice(input.Index(6))
	v.Order = NewPPRPC2OrderSlice(input.Index(7))
	return v
}

type PPRPC2Problem struct {
	ProblemDetails     PRB
	NotesAndComments   []NTE
	Variance           []VAR
	ProblemRole        []PPRPC2ProblemRole
	Pathway            []PPRPC2Pathway
	ProblemObservation []PPRPC2ProblemObservation
	Goal               []PPRPC2Goal
	Order              []PPRPC2Order
}

// NewPPRPC2ProblemSlice will construct a slice of type PPRPC2Problem
func NewPPRPC2ProblemSlice(input hl7.HL7Type) []PPRPC2Problem {
	values := make([]PPRPC2Problem, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPRPC2Problem(input.Index(i))
	}
	return values
}

// NewSRMS08Resources creates an implementation of SRMS08Resources
func NewSRMS08Resources(input hl7.HL7Type) SRMS08Resources {
	v := SRMS08Resources{}
	v.ResourceGroup = NewRGS(input.Index(0))
	v.Service = NewSRMS08ServiceSlice(input.Index(1))
	v.GeneralResource = NewSRMS08GeneralResourceSlice(input.Index(2))
	v.LocationResource = NewSRMS08LocationResourceSlice(input.Index(3))
	v.PersonnelResource = NewSRMS08PersonnelResourceSlice(input.Index(4))
	return v
}

type SRMS08Resources struct {
	ResourceGroup     RGS
	Service           []SRMS08Service
	GeneralResource   []SRMS08GeneralResource
	LocationResource  []SRMS08LocationResource
	PersonnelResource []SRMS08PersonnelResource
}

// NewSRMS08ResourcesSlice will construct a slice of type SRMS08Resources
func NewSRMS08ResourcesSlice(input hl7.HL7Type) []SRMS08Resources {
	values := make([]SRMS08Resources, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS08Resources(input.Index(i))
	}
	return values
}

// NewOMPO09Component creates an implementation of OMPO09Component
func NewOMPO09Component(input hl7.HL7Type) OMPO09Component {
	v := OMPO09Component{}
	v.PharmacyTreatmentComponentOrder = NewRXC(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type OMPO09Component struct {
	PharmacyTreatmentComponentOrder RXC
	NotesAndComments                []NTE
}

// NewOMPO09ComponentSlice will construct a slice of type OMPO09Component
func NewOMPO09ComponentSlice(input hl7.HL7Type) []OMPO09Component {
	values := make([]OMPO09Component, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMPO09Component(input.Index(i))
	}
	return values
}

// NewRRDO14Dispense creates an implementation of RRDO14Dispense
func NewRRDO14Dispense(input hl7.HL7Type) RRDO14Dispense {
	v := RRDO14Dispense{}
	v.PharmacyTreatmentDispense = NewRXD(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(2))
	v.PharmacyTreatmentComponentOrder = NewRXCSlice(input.Index(3))
	return v
}

type RRDO14Dispense struct {
	PharmacyTreatmentDispense       RXD
	NotesAndComments                []NTE
	PharmacyTreatmentRoute          []RXR
	PharmacyTreatmentComponentOrder []RXC
}

// NewRRDO14DispenseSlice will construct a slice of type RRDO14Dispense
func NewRRDO14DispenseSlice(input hl7.HL7Type) []RRDO14Dispense {
	values := make([]RRDO14Dispense, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRRDO14Dispense(input.Index(i))
	}
	return values
}

// NewRRII13PatientVisit creates an implementation of RRII13PatientVisit
func NewRRII13PatientVisit(input hl7.HL7Type) RRII13PatientVisit {
	v := RRII13PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	return v
}

type RRII13PatientVisit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
}

// NewRRII13PatientVisitSlice will construct a slice of type RRII13PatientVisit
func NewRRII13PatientVisitSlice(input hl7.HL7Type) []RRII13PatientVisit {
	values := make([]RRII13PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRRII13PatientVisit(input.Index(i))
	}
	return values
}

// NewPPGPCGGoal creates an implementation of PPGPCGGoal
func NewPPGPCGGoal(input hl7.HL7Type) PPGPCGGoal {
	v := PPGPCGGoal{}
	v.GoalDetail = NewGOL(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Variance = NewVARSlice(input.Index(2))
	v.GoalRole = NewPPGPCGGoalRoleSlice(input.Index(3))
	v.GoalObservation = NewPPGPCGGoalObservationSlice(input.Index(4))
	v.Problem = NewPPGPCGProblemSlice(input.Index(5))
	v.Order = NewPPGPCGOrderSlice(input.Index(6))
	return v
}

type PPGPCGGoal struct {
	GoalDetail       GOL
	NotesAndComments []NTE
	Variance         []VAR
	GoalRole         []PPGPCGGoalRole
	GoalObservation  []PPGPCGGoalObservation
	Problem          []PPGPCGProblem
	Order            []PPGPCGOrder
}

// NewPPGPCGGoalSlice will construct a slice of type PPGPCGGoal
func NewPPGPCGGoalSlice(input hl7.HL7Type) []PPGPCGGoal {
	values := make([]PPGPCGGoal, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPGPCGGoal(input.Index(i))
	}
	return values
}

// NewOMLO39SpecimenContainerInPackage creates an implementation of OMLO39SpecimenContainerInPackage
func NewOMLO39SpecimenContainerInPackage(input hl7.HL7Type) OMLO39SpecimenContainerInPackage {
	v := OMLO39SpecimenContainerInPackage{}
	v.SpecimenContainerDetail = NewSAC(input.Index(0))
	v.ContainerObservation = NewOMLO39ContainerObservationSlice(input.Index(1))
	return v
}

type OMLO39SpecimenContainerInPackage struct {
	SpecimenContainerDetail SAC
	ContainerObservation    []OMLO39ContainerObservation
}

// NewOMLO39SpecimenContainerInPackageSlice will construct a slice of type OMLO39SpecimenContainerInPackage
func NewOMLO39SpecimenContainerInPackageSlice(input hl7.HL7Type) []OMLO39SpecimenContainerInPackage {
	values := make([]OMLO39SpecimenContainerInPackage, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO39SpecimenContainerInPackage(input.Index(i))
	}
	return values
}

// NewRRGO16Timing creates an implementation of RRGO16Timing
func NewRRGO16Timing(input hl7.HL7Type) RRGO16Timing {
	v := RRGO16Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type RRGO16Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewRRGO16TimingSlice will construct a slice of type RRGO16Timing
func NewRRGO16TimingSlice(input hl7.HL7Type) []RRGO16Timing {
	values := make([]RRGO16Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRRGO16Timing(input.Index(i))
	}
	return values
}

// NewRPAI10Procedure creates an implementation of RPAI10Procedure
func NewRPAI10Procedure(input hl7.HL7Type) RPAI10Procedure {
	v := RPAI10Procedure{}
	v.Procedures = NewPR1(input.Index(0))
	v.Authorization2 = NewRPAI10Authorization2(input.Index(1))
	return v
}

type RPAI10Procedure struct {
	Procedures     PR1
	Authorization2 RPAI10Authorization2
}

// NewRPAI10ProcedureSlice will construct a slice of type RPAI10Procedure
func NewRPAI10ProcedureSlice(input hl7.HL7Type) []RPAI10Procedure {
	values := make([]RPAI10Procedure, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRPAI10Procedure(input.Index(i))
	}
	return values
}

// NewRDEO11Patient creates an implementation of RDEO11Patient
func NewRDEO11Patient(input hl7.HL7Type) RDEO11Patient {
	v := RDEO11Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	v.AccessRestriction = NewARVSlice(input.Index(4))
	v.PatientVisit = NewRDEO11PatientVisit(input.Index(5))
	v.Insurance = NewRDEO11InsuranceSlice(input.Index(6))
	v.Guarantor = NewGT1(input.Index(7))
	v.PatientAllergyInformation = NewAL1Slice(input.Index(8))
	return v
}

type RDEO11Patient struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	ParticipationInformation     []PRT
	NotesAndComments             []NTE
	AccessRestriction            []ARV
	PatientVisit                 RDEO11PatientVisit
	Insurance                    []RDEO11Insurance
	Guarantor                    GT1
	PatientAllergyInformation    []AL1
}

// NewRDEO11PatientSlice will construct a slice of type RDEO11Patient
func NewRDEO11PatientSlice(input hl7.HL7Type) []RDEO11Patient {
	values := make([]RDEO11Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRDEO11Patient(input.Index(i))
	}
	return values
}

// NewPGLPC6Choice creates an implementation of PGLPC6Choice
func NewPGLPC6Choice(input hl7.HL7Type) PGLPC6Choice {
	v := PGLPC6Choice{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.AnyHl7Segment = NewHxx(input.Index(1))
	return v
}

type PGLPC6Choice struct {
	ObservationRequest OBR
	AnyHl7Segment      Hxx
}

// NewPGLPC6ChoiceSlice will construct a slice of type PGLPC6Choice
func NewPGLPC6ChoiceSlice(input hl7.HL7Type) []PGLPC6Choice {
	values := make([]PGLPC6Choice, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPGLPC6Choice(input.Index(i))
	}
	return values
}

// NewPEXP08PexObservation creates an implementation of PEXP08PexObservation
func NewPEXP08PexObservation(input hl7.HL7Type) PEXP08PexObservation {
	v := PEXP08PexObservation{}
	v.ProductExperienceObservation = NewPEO(input.Index(0))
	v.PexCause = NewPEXP08PexCauseSlice(input.Index(1))
	return v
}

type PEXP08PexObservation struct {
	ProductExperienceObservation PEO
	PexCause                     []PEXP08PexCause
}

// NewPEXP08PexObservationSlice will construct a slice of type PEXP08PexObservation
func NewPEXP08PexObservationSlice(input hl7.HL7Type) []PEXP08PexObservation {
	values := make([]PEXP08PexObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPEXP08PexObservation(input.Index(i))
	}
	return values
}

// NewOULR23Visit creates an implementation of OULR23Visit
func NewOULR23Visit(input hl7.HL7Type) OULR23Visit {
	v := OULR23Visit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	return v
}

type OULR23Visit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ParticipationInformation          []PRT
}

// NewOULR23VisitSlice will construct a slice of type OULR23Visit
func NewOULR23VisitSlice(input hl7.HL7Type) []OULR23Visit {
	values := make([]OULR23Visit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOULR23Visit(input.Index(i))
	}
	return values
}

// NewCCRI16RoleProblemObject creates an implementation of CCRI16RoleProblemObject
func NewCCRI16RoleProblemObject(input hl7.HL7Type) CCRI16RoleProblemObject {
	v := CCRI16RoleProblemObject{}
	v.Role = NewROL(input.Index(0))
	v.ProviderData = NewPRD(input.Index(1))
	return v
}

type CCRI16RoleProblemObject struct {
	Role         ROL
	ProviderData PRD
}

// NewCCRI16RoleProblemObjectSlice will construct a slice of type CCRI16RoleProblemObject
func NewCCRI16RoleProblemObjectSlice(input hl7.HL7Type) []CCRI16RoleProblemObject {
	values := make([]CCRI16RoleProblemObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI16RoleProblemObject(input.Index(i))
	}
	return values
}

// NewORXO43Patient creates an implementation of ORXO43Patient
func NewORXO43Patient(input hl7.HL7Type) ORXO43Patient {
	v := ORXO43Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.AccessRestriction = NewARVSlice(input.Index(3))
	return v
}

type ORXO43Patient struct {
	PatientIdentification    PID
	NotesAndComments         []NTE
	ParticipationInformation []PRT
	AccessRestriction        []ARV
}

// NewORXO43PatientSlice will construct a slice of type ORXO43Patient
func NewORXO43PatientSlice(input hl7.HL7Type) []ORXO43Patient {
	values := make([]ORXO43Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORXO43Patient(input.Index(i))
	}
	return values
}

// NewCCRI18ResourceObject creates an implementation of CCRI18ResourceObject
func NewCCRI18ResourceObject(input hl7.HL7Type) CCRI18ResourceObject {
	v := CCRI18ResourceObject{}
	v.AppointmentInformation = NewAIS(input.Index(0))
	v.AppointmentInformationGeneralResource = NewAIG(input.Index(1))
	v.AppointmentInformationLocationResource = NewAIL(input.Index(2))
	v.AppointmentInformationPersonnelResource = NewAIP(input.Index(3))
	return v
}

type CCRI18ResourceObject struct {
	AppointmentInformation                  AIS
	AppointmentInformationGeneralResource   AIG
	AppointmentInformationLocationResource  AIL
	AppointmentInformationPersonnelResource AIP
}

// NewCCRI18ResourceObjectSlice will construct a slice of type CCRI18ResourceObject
func NewCCRI18ResourceObjectSlice(input hl7.HL7Type) []CCRI18ResourceObject {
	values := make([]CCRI18ResourceObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI18ResourceObject(input.Index(i))
	}
	return values
}

// NewSIUS21Resources creates an implementation of SIUS21Resources
func NewSIUS21Resources(input hl7.HL7Type) SIUS21Resources {
	v := SIUS21Resources{}
	v.ResourceGroup = NewRGS(input.Index(0))
	v.Service = NewSIUS21ServiceSlice(input.Index(1))
	v.GeneralResource = NewSIUS21GeneralResourceSlice(input.Index(2))
	v.LocationResource = NewSIUS21LocationResourceSlice(input.Index(3))
	v.PersonnelResource = NewSIUS21PersonnelResourceSlice(input.Index(4))
	return v
}

type SIUS21Resources struct {
	ResourceGroup     RGS
	Service           []SIUS21Service
	GeneralResource   []SIUS21GeneralResource
	LocationResource  []SIUS21LocationResource
	PersonnelResource []SIUS21PersonnelResource
}

// NewSIUS21ResourcesSlice will construct a slice of type SIUS21Resources
func NewSIUS21ResourcesSlice(input hl7.HL7Type) []SIUS21Resources {
	values := make([]SIUS21Resources, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS21Resources(input.Index(i))
	}
	return values
}

// NewRREO12Encoding creates an implementation of RREO12Encoding
func NewRREO12Encoding(input hl7.HL7Type) RREO12Encoding {
	v := RREO12Encoding{}
	v.PharmacyTreatmentEncodedOrder = NewRXE(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.TimingEncoded = NewRREO12TimingEncodedSlice(input.Index(3))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(4))
	v.PharmacyTreatmentComponentOrder = NewRXCSlice(input.Index(5))
	return v
}

type RREO12Encoding struct {
	PharmacyTreatmentEncodedOrder   RXE
	ParticipationInformation        []PRT
	NotesAndComments                []NTE
	TimingEncoded                   []RREO12TimingEncoded
	PharmacyTreatmentRoute          []RXR
	PharmacyTreatmentComponentOrder []RXC
}

// NewRREO12EncodingSlice will construct a slice of type RREO12Encoding
func NewRREO12EncodingSlice(input hl7.HL7Type) []RREO12Encoding {
	values := make([]RREO12Encoding, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRREO12Encoding(input.Index(i))
	}
	return values
}

// NewCCMI21MedicationEncodingDetail creates an implementation of CCMI21MedicationEncodingDetail
func NewCCMI21MedicationEncodingDetail(input hl7.HL7Type) CCMI21MedicationEncodingDetail {
	v := CCMI21MedicationEncodingDetail{}
	v.PharmacyTreatmentEncodedOrder = NewRXE(input.Index(0))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(1))
	v.PharmacyTreatmentComponentOrder = NewRXCSlice(input.Index(2))
	v.MedicationEncodingObservation = NewCCMI21MedicationEncodingObservationSlice(input.Index(3))
	return v
}

type CCMI21MedicationEncodingDetail struct {
	PharmacyTreatmentEncodedOrder   RXE
	PharmacyTreatmentRoute          []RXR
	PharmacyTreatmentComponentOrder []RXC
	MedicationEncodingObservation   []CCMI21MedicationEncodingObservation
}

// NewCCMI21MedicationEncodingDetailSlice will construct a slice of type CCMI21MedicationEncodingDetail
func NewCCMI21MedicationEncodingDetailSlice(input hl7.HL7Type) []CCMI21MedicationEncodingDetail {
	values := make([]CCMI21MedicationEncodingDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCMI21MedicationEncodingDetail(input.Index(i))
	}
	return values
}

// NewPGLPC6Order creates an implementation of PGLPC6Order
func NewPGLPC6Order(input hl7.HL7Type) PGLPC6Order {
	v := PGLPC6Order{}
	v.CommonOrder = NewORC(input.Index(0))
	v.OrderDetail = NewPGLPC6OrderDetail(input.Index(1))
	return v
}

type PGLPC6Order struct {
	CommonOrder ORC
	OrderDetail PGLPC6OrderDetail
}

// NewPGLPC6OrderSlice will construct a slice of type PGLPC6Order
func NewPGLPC6OrderSlice(input hl7.HL7Type) []PGLPC6Order {
	values := make([]PGLPC6Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPGLPC6Order(input.Index(i))
	}
	return values
}

// NewPPRPC2ProblemRole creates an implementation of PPRPC2ProblemRole
func NewPPRPC2ProblemRole(input hl7.HL7Type) PPRPC2ProblemRole {
	v := PPRPC2ProblemRole{}
	v.Role = NewROL(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type PPRPC2ProblemRole struct {
	Role     ROL
	Variance []VAR
}

// NewPPRPC2ProblemRoleSlice will construct a slice of type PPRPC2ProblemRole
func NewPPRPC2ProblemRoleSlice(input hl7.HL7Type) []PPRPC2ProblemRole {
	values := make([]PPRPC2ProblemRole, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPRPC2ProblemRole(input.Index(i))
	}
	return values
}

// NewQVRQ17Qbp creates an implementation of QVRQ17Qbp
func NewQVRQ17Qbp(input hl7.HL7Type) QVRQ17Qbp {
	v := QVRQ17Qbp{}
	v.AnyHl7Segment = NewHxx(input.Index(0))
	return v
}

type QVRQ17Qbp struct {
	AnyHl7Segment Hxx
}

// NewQVRQ17QbpSlice will construct a slice of type QVRQ17Qbp
func NewQVRQ17QbpSlice(input hl7.HL7Type) []QVRQ17Qbp {
	values := make([]QVRQ17Qbp, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewQVRQ17Qbp(input.Index(i))
	}
	return values
}

// NewEHCE12Request creates an implementation of EHCE12Request
func NewEHCE12Request(input hl7.HL7Type) EHCE12Request {
	v := EHCE12Request{}
	v.ContactData = NewCTD(input.Index(0))
	v.ObservationRequest = NewOBR(input.Index(1))
	v.NotesAndComments = NewNTE(input.Index(2))
	v.ObservationResult = NewOBXSlice(input.Index(3))
	return v
}

type EHCE12Request struct {
	ContactData        CTD
	ObservationRequest OBR
	NotesAndComments   NTE
	ObservationResult  []OBX
}

// NewEHCE12RequestSlice will construct a slice of type EHCE12Request
func NewEHCE12RequestSlice(input hl7.HL7Type) []EHCE12Request {
	values := make([]EHCE12Request, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewEHCE12Request(input.Index(i))
	}
	return values
}

// NewOMDO03OrderDiet creates an implementation of OMDO03OrderDiet
func NewOMDO03OrderDiet(input hl7.HL7Type) OMDO03OrderDiet {
	v := OMDO03OrderDiet{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.TimingDiet = NewOMDO03TimingDietSlice(input.Index(2))
	v.Diet = NewOMDO03Diet(input.Index(3))
	return v
}

type OMDO03OrderDiet struct {
	CommonOrder              ORC
	ParticipationInformation []PRT
	TimingDiet               []OMDO03TimingDiet
	Diet                     OMDO03Diet
}

// NewOMDO03OrderDietSlice will construct a slice of type OMDO03OrderDiet
func NewOMDO03OrderDietSlice(input hl7.HL7Type) []OMDO03OrderDiet {
	values := make([]OMDO03OrderDiet, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMDO03OrderDiet(input.Index(i))
	}
	return values
}

// NewSRMS02PersonnelResource creates an implementation of SRMS02PersonnelResource
func NewSRMS02PersonnelResource(input hl7.HL7Type) SRMS02PersonnelResource {
	v := SRMS02PersonnelResource{}
	v.AppointmentInformationPersonnelResource = NewAIP(input.Index(0))
	v.AppointmentPreferences = NewAPR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type SRMS02PersonnelResource struct {
	AppointmentInformationPersonnelResource AIP
	AppointmentPreferences                  APR
	NotesAndComments                        []NTE
}

// NewSRMS02PersonnelResourceSlice will construct a slice of type SRMS02PersonnelResource
func NewSRMS02PersonnelResourceSlice(input hl7.HL7Type) []SRMS02PersonnelResource {
	values := make([]SRMS02PersonnelResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS02PersonnelResource(input.Index(i))
	}
	return values
}

// NewSRMS08GeneralResource creates an implementation of SRMS08GeneralResource
func NewSRMS08GeneralResource(input hl7.HL7Type) SRMS08GeneralResource {
	v := SRMS08GeneralResource{}
	v.AppointmentInformationGeneralResource = NewAIG(input.Index(0))
	v.AppointmentPreferences = NewAPR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type SRMS08GeneralResource struct {
	AppointmentInformationGeneralResource AIG
	AppointmentPreferences                APR
	NotesAndComments                      []NTE
}

// NewSRMS08GeneralResourceSlice will construct a slice of type SRMS08GeneralResource
func NewSRMS08GeneralResourceSlice(input hl7.HL7Type) []SRMS08GeneralResource {
	values := make([]SRMS08GeneralResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS08GeneralResource(input.Index(i))
	}
	return values
}

// NewOMIO23Insurance creates an implementation of OMIO23Insurance
func NewOMIO23Insurance(input hl7.HL7Type) OMIO23Insurance {
	v := OMIO23Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3(input.Index(2))
	return v
}

type OMIO23Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification IN3
}

// NewOMIO23InsuranceSlice will construct a slice of type OMIO23Insurance
func NewOMIO23InsuranceSlice(input hl7.HL7Type) []OMIO23Insurance {
	values := make([]OMIO23Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMIO23Insurance(input.Index(i))
	}
	return values
}

// NewPEXP07RxOrder creates an implementation of PEXP07RxOrder
func NewPEXP07RxOrder(input hl7.HL7Type) PEXP07RxOrder {
	v := PEXP07RxOrder{}
	v.PharmacyTreatmentEncodedOrder = NewRXE(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.TimingQty = NewPEXP07TimingQtySlice(input.Index(2))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(3))
	return v
}

type PEXP07RxOrder struct {
	PharmacyTreatmentEncodedOrder RXE
	ParticipationInformation      []PRT
	TimingQty                     []PEXP07TimingQty
	PharmacyTreatmentRoute        []RXR
}

// NewPEXP07RxOrderSlice will construct a slice of type PEXP07RxOrder
func NewPEXP07RxOrderSlice(input hl7.HL7Type) []PEXP07RxOrder {
	values := make([]PEXP07RxOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPEXP07RxOrder(input.Index(i))
	}
	return values
}

// NewADTA08Procedure creates an implementation of ADTA08Procedure
func NewADTA08Procedure(input hl7.HL7Type) ADTA08Procedure {
	v := ADTA08Procedure{}
	v.Procedures = NewPR1(input.Index(0))
	v.Role = NewROLSlice(input.Index(1))
	return v
}

type ADTA08Procedure struct {
	Procedures PR1
	Role       []ROL
}

// NewADTA08ProcedureSlice will construct a slice of type ADTA08Procedure
func NewADTA08ProcedureSlice(input hl7.HL7Type) []ADTA08Procedure {
	values := make([]ADTA08Procedure, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewADTA08Procedure(input.Index(i))
	}
	return values
}

// NewMDMT02CommonOrder creates an implementation of MDMT02CommonOrder
func NewMDMT02CommonOrder(input hl7.HL7Type) MDMT02CommonOrder {
	v := MDMT02CommonOrder{}
	v.CommonOrder = NewORC(input.Index(0))
	v.Timing = NewMDMT02TimingSlice(input.Index(1))
	v.ObservationRequest = NewOBR(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	return v
}

type MDMT02CommonOrder struct {
	CommonOrder        ORC
	Timing             []MDMT02Timing
	ObservationRequest OBR
	NotesAndComments   []NTE
}

// NewMDMT02CommonOrderSlice will construct a slice of type MDMT02CommonOrder
func NewMDMT02CommonOrderSlice(input hl7.HL7Type) []MDMT02CommonOrder {
	values := make([]MDMT02CommonOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMDMT02CommonOrder(input.Index(i))
	}
	return values
}

// NewRASO17AdditionalDemographics creates an implementation of RASO17AdditionalDemographics
func NewRASO17AdditionalDemographics(input hl7.HL7Type) RASO17AdditionalDemographics {
	v := RASO17AdditionalDemographics{}
	v.PatientAdditionalDemographic = NewPD1(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type RASO17AdditionalDemographics struct {
	PatientAdditionalDemographic PD1
	ParticipationInformation     []PRT
}

// NewRASO17AdditionalDemographicsSlice will construct a slice of type RASO17AdditionalDemographics
func NewRASO17AdditionalDemographicsSlice(input hl7.HL7Type) []RASO17AdditionalDemographics {
	values := make([]RASO17AdditionalDemographics, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRASO17AdditionalDemographics(input.Index(i))
	}
	return values
}

// NewSRMS01Patient creates an implementation of SRMS01Patient
func NewSRMS01Patient(input hl7.HL7Type) SRMS01Patient {
	v := SRMS01Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientVisit = NewPV1(input.Index(1))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(2))
	v.Observation = NewSRMS01ObservationSlice(input.Index(3))
	v.Diagnosis = NewDG1Slice(input.Index(4))
	return v
}

type SRMS01Patient struct {
	PatientIdentification             PID
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	Observation                       []SRMS01Observation
	Diagnosis                         []DG1
}

// NewSRMS01PatientSlice will construct a slice of type SRMS01Patient
func NewSRMS01PatientSlice(input hl7.HL7Type) []SRMS01Patient {
	values := make([]SRMS01Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS01Patient(input.Index(i))
	}
	return values
}

// NewADTA04Procedure creates an implementation of ADTA04Procedure
func NewADTA04Procedure(input hl7.HL7Type) ADTA04Procedure {
	v := ADTA04Procedure{}
	v.Procedures = NewPR1(input.Index(0))
	v.Role = NewROLSlice(input.Index(1))
	return v
}

type ADTA04Procedure struct {
	Procedures PR1
	Role       []ROL
}

// NewADTA04ProcedureSlice will construct a slice of type ADTA04Procedure
func NewADTA04ProcedureSlice(input hl7.HL7Type) []ADTA04Procedure {
	values := make([]ADTA04Procedure, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewADTA04Procedure(input.Index(i))
	}
	return values
}

// NewCCII22ResourceDetail creates an implementation of CCII22ResourceDetail
func NewCCII22ResourceDetail(input hl7.HL7Type) CCII22ResourceDetail {
	v := CCII22ResourceDetail{}
	v.ResourceObject = NewCCII22ResourceObject(input.Index(0))
	v.ObservationResult = NewOBXSlice(input.Index(1))
	return v
}

type CCII22ResourceDetail struct {
	ResourceObject    CCII22ResourceObject
	ObservationResult []OBX
}

// NewCCII22ResourceDetailSlice will construct a slice of type CCII22ResourceDetail
func NewCCII22ResourceDetailSlice(input hl7.HL7Type) []CCII22ResourceDetail {
	values := make([]CCII22ResourceDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCII22ResourceDetail(input.Index(i))
	}
	return values
}

// NewRSPK31Timing creates an implementation of RSPK31Timing
func NewRSPK31Timing(input hl7.HL7Type) RSPK31Timing {
	v := RSPK31Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type RSPK31Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewRSPK31TimingSlice will construct a slice of type RSPK31Timing
func NewRSPK31TimingSlice(input hl7.HL7Type) []RSPK31Timing {
	values := make([]RSPK31Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPK31Timing(input.Index(i))
	}
	return values
}

// NewSRMS10GeneralResource creates an implementation of SRMS10GeneralResource
func NewSRMS10GeneralResource(input hl7.HL7Type) SRMS10GeneralResource {
	v := SRMS10GeneralResource{}
	v.AppointmentInformationGeneralResource = NewAIG(input.Index(0))
	v.AppointmentPreferences = NewAPR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type SRMS10GeneralResource struct {
	AppointmentInformationGeneralResource AIG
	AppointmentPreferences                APR
	NotesAndComments                      []NTE
}

// NewSRMS10GeneralResourceSlice will construct a slice of type SRMS10GeneralResource
func NewSRMS10GeneralResourceSlice(input hl7.HL7Type) []SRMS10GeneralResource {
	values := make([]SRMS10GeneralResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS10GeneralResource(input.Index(i))
	}
	return values
}

// NewQBPZ77Qbp creates an implementation of QBPZ77Qbp
func NewQBPZ77Qbp(input hl7.HL7Type) QBPZ77Qbp {
	v := QBPZ77Qbp{}
	v.AnyHl7Segment = NewHxx(input.Index(0))
	return v
}

type QBPZ77Qbp struct {
	AnyHl7Segment Hxx
}

// NewQBPZ77QbpSlice will construct a slice of type QBPZ77Qbp
func NewQBPZ77QbpSlice(input hl7.HL7Type) []QBPZ77Qbp {
	values := make([]QBPZ77Qbp, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewQBPZ77Qbp(input.Index(i))
	}
	return values
}

// NewDRGO43DonorRegistration creates an implementation of DRGO43DonorRegistration
func NewDRGO43DonorRegistration(input hl7.HL7Type) DRGO43DonorRegistration {
	v := DRGO43DonorRegistration{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type DRGO43DonorRegistration struct {
	PatientVisit     PV1
	NotesAndComments []NTE
}

// NewDRGO43DonorRegistrationSlice will construct a slice of type DRGO43DonorRegistration
func NewDRGO43DonorRegistrationSlice(input hl7.HL7Type) []DRGO43DonorRegistration {
	values := make([]DRGO43DonorRegistration, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewDRGO43DonorRegistration(input.Index(i))
	}
	return values
}

// NewEACU07Command creates an implementation of EACU07Command
func NewEACU07Command(input hl7.HL7Type) EACU07Command {
	v := EACU07Command{}
	v.EquipmentCommand = NewECD(input.Index(0))
	v.TimingQuantity = NewTQ1(input.Index(1))
	v.SpecimenContainer = NewEACU07SpecimenContainer(input.Index(2))
	v.ClearNotification = NewCNS(input.Index(3))
	return v
}

type EACU07Command struct {
	EquipmentCommand  ECD
	TimingQuantity    TQ1
	SpecimenContainer EACU07SpecimenContainer
	ClearNotification CNS
}

// NewEACU07CommandSlice will construct a slice of type EACU07Command
func NewEACU07CommandSlice(input hl7.HL7Type) []EACU07Command {
	values := make([]EACU07Command, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewEACU07Command(input.Index(i))
	}
	return values
}

// NewPEXP08Observation creates an implementation of PEXP08Observation
func NewPEXP08Observation(input hl7.HL7Type) PEXP08Observation {
	v := PEXP08Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type PEXP08Observation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewPEXP08ObservationSlice will construct a slice of type PEXP08Observation
func NewPEXP08ObservationSlice(input hl7.HL7Type) []PEXP08Observation {
	values := make([]PEXP08Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPEXP08Observation(input.Index(i))
	}
	return values
}

// NewCCRI18MedicationOrderDetail creates an implementation of CCRI18MedicationOrderDetail
func NewCCRI18MedicationOrderDetail(input hl7.HL7Type) CCRI18MedicationOrderDetail {
	v := CCRI18MedicationOrderDetail{}
	v.PharmacyTreatmentOrder = NewRXO(input.Index(0))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(1))
	v.PharmacyTreatmentComponentOrder = NewRXCSlice(input.Index(2))
	v.MedicationOrderObservation = NewCCRI18MedicationOrderObservationSlice(input.Index(3))
	return v
}

type CCRI18MedicationOrderDetail struct {
	PharmacyTreatmentOrder          RXO
	PharmacyTreatmentRoute          []RXR
	PharmacyTreatmentComponentOrder []RXC
	MedicationOrderObservation      []CCRI18MedicationOrderObservation
}

// NewCCRI18MedicationOrderDetailSlice will construct a slice of type CCRI18MedicationOrderDetail
func NewCCRI18MedicationOrderDetailSlice(input hl7.HL7Type) []CCRI18MedicationOrderDetail {
	values := make([]CCRI18MedicationOrderDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI18MedicationOrderDetail(input.Index(i))
	}
	return values
}

// NewSRMS06Patient creates an implementation of SRMS06Patient
func NewSRMS06Patient(input hl7.HL7Type) SRMS06Patient {
	v := SRMS06Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientVisit = NewPV1(input.Index(1))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(2))
	v.Observation = NewSRMS06ObservationSlice(input.Index(3))
	v.Diagnosis = NewDG1Slice(input.Index(4))
	return v
}

type SRMS06Patient struct {
	PatientIdentification             PID
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	Observation                       []SRMS06Observation
	Diagnosis                         []DG1
}

// NewSRMS06PatientSlice will construct a slice of type SRMS06Patient
func NewSRMS06PatientSlice(input hl7.HL7Type) []SRMS06Patient {
	values := make([]SRMS06Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS06Patient(input.Index(i))
	}
	return values
}

// NewSRMS04GeneralResource creates an implementation of SRMS04GeneralResource
func NewSRMS04GeneralResource(input hl7.HL7Type) SRMS04GeneralResource {
	v := SRMS04GeneralResource{}
	v.AppointmentInformationGeneralResource = NewAIG(input.Index(0))
	v.AppointmentPreferences = NewAPR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type SRMS04GeneralResource struct {
	AppointmentInformationGeneralResource AIG
	AppointmentPreferences                APR
	NotesAndComments                      []NTE
}

// NewSRMS04GeneralResourceSlice will construct a slice of type SRMS04GeneralResource
func NewSRMS04GeneralResourceSlice(input hl7.HL7Type) []SRMS04GeneralResource {
	values := make([]SRMS04GeneralResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS04GeneralResource(input.Index(i))
	}
	return values
}

// NewCCMI21AppointmentHistory creates an implementation of CCMI21AppointmentHistory
func NewCCMI21AppointmentHistory(input hl7.HL7Type) CCMI21AppointmentHistory {
	v := CCMI21AppointmentHistory{}
	v.SchedulingActivityInformation = NewSCH(input.Index(0))
	v.Resources = NewCCMI21ResourcesSlice(input.Index(1))
	return v
}

type CCMI21AppointmentHistory struct {
	SchedulingActivityInformation SCH
	Resources                     []CCMI21Resources
}

// NewCCMI21AppointmentHistorySlice will construct a slice of type CCMI21AppointmentHistory
func NewCCMI21AppointmentHistorySlice(input hl7.HL7Type) []CCMI21AppointmentHistory {
	values := make([]CCMI21AppointmentHistory, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCMI21AppointmentHistory(input.Index(i))
	}
	return values
}

// NewDPRO48Donnor creates an implementation of DPRO48Donnor
func NewDPRO48Donnor(input hl7.HL7Type) DPRO48Donnor {
	v := DPRO48Donnor{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.ObservationResult = NewOBXSlice(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	v.PatientAllergyInformation = NewAL1Slice(input.Index(4))
	v.AccessRestriction = NewARVSlice(input.Index(5))
	v.DonorRegistration = NewDPRO48DonorRegistration(input.Index(6))
	return v
}

type DPRO48Donnor struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	ObservationResult            []OBX
	NotesAndComments             []NTE
	PatientAllergyInformation    []AL1
	AccessRestriction            []ARV
	DonorRegistration            DPRO48DonorRegistration
}

// NewDPRO48DonnorSlice will construct a slice of type DPRO48Donnor
func NewDPRO48DonnorSlice(input hl7.HL7Type) []DPRO48Donnor {
	values := make([]DPRO48Donnor, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewDPRO48Donnor(input.Index(i))
	}
	return values
}

// NewORIO24Timing creates an implementation of ORIO24Timing
func NewORIO24Timing(input hl7.HL7Type) ORIO24Timing {
	v := ORIO24Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type ORIO24Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewORIO24TimingSlice will construct a slice of type ORIO24Timing
func NewORIO24TimingSlice(input hl7.HL7Type) []ORIO24Timing {
	values := make([]ORIO24Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORIO24Timing(input.Index(i))
	}
	return values
}

// NewCCUI20RoleClinicalHistoryObject creates an implementation of CCUI20RoleClinicalHistoryObject
func NewCCUI20RoleClinicalHistoryObject(input hl7.HL7Type) CCUI20RoleClinicalHistoryObject {
	v := CCUI20RoleClinicalHistoryObject{}
	v.Role = NewROL(input.Index(0))
	v.ProviderData = NewPRD(input.Index(1))
	return v
}

type CCUI20RoleClinicalHistoryObject struct {
	Role         ROL
	ProviderData PRD
}

// NewCCUI20RoleClinicalHistoryObjectSlice will construct a slice of type CCUI20RoleClinicalHistoryObject
func NewCCUI20RoleClinicalHistoryObjectSlice(input hl7.HL7Type) []CCUI20RoleClinicalHistoryObject {
	values := make([]CCUI20RoleClinicalHistoryObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCUI20RoleClinicalHistoryObject(input.Index(i))
	}
	return values
}

// NewCCRI17ResourceObservation creates an implementation of CCRI17ResourceObservation
func NewCCRI17ResourceObservation(input hl7.HL7Type) CCRI17ResourceObservation {
	v := CCRI17ResourceObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CCRI17ResourceObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewCCRI17ResourceObservationSlice will construct a slice of type CCRI17ResourceObservation
func NewCCRI17ResourceObservationSlice(input hl7.HL7Type) []CCRI17ResourceObservation {
	values := make([]CCRI17ResourceObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI17ResourceObservation(input.Index(i))
	}
	return values
}

// NewRSPZ90Timing creates an implementation of RSPZ90Timing
func NewRSPZ90Timing(input hl7.HL7Type) RSPZ90Timing {
	v := RSPZ90Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type RSPZ90Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewRSPZ90TimingSlice will construct a slice of type RSPZ90Timing
func NewRSPZ90TimingSlice(input hl7.HL7Type) []RSPZ90Timing {
	values := make([]RSPZ90Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPZ90Timing(input.Index(i))
	}
	return values
}

// NewPPGPCHProblem creates an implementation of PPGPCHProblem
func NewPPGPCHProblem(input hl7.HL7Type) PPGPCHProblem {
	v := PPGPCHProblem{}
	v.ProblemDetails = NewPRB(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Variance = NewVARSlice(input.Index(2))
	v.ProblemRole = NewPPGPCHProblemRoleSlice(input.Index(3))
	v.ProblemObservation = NewPPGPCHProblemObservationSlice(input.Index(4))
	return v
}

type PPGPCHProblem struct {
	ProblemDetails     PRB
	NotesAndComments   []NTE
	Variance           []VAR
	ProblemRole        []PPGPCHProblemRole
	ProblemObservation []PPGPCHProblemObservation
}

// NewPPGPCHProblemSlice will construct a slice of type PPGPCHProblem
func NewPPGPCHProblemSlice(input hl7.HL7Type) []PPGPCHProblem {
	values := make([]PPGPCHProblem, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPGPCHProblem(input.Index(i))
	}
	return values
}

// NewSRMS05Patient creates an implementation of SRMS05Patient
func NewSRMS05Patient(input hl7.HL7Type) SRMS05Patient {
	v := SRMS05Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientVisit = NewPV1(input.Index(1))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(2))
	v.Observation = NewSRMS05ObservationSlice(input.Index(3))
	v.Diagnosis = NewDG1Slice(input.Index(4))
	return v
}

type SRMS05Patient struct {
	PatientIdentification             PID
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	Observation                       []SRMS05Observation
	Diagnosis                         []DG1
}

// NewSRMS05PatientSlice will construct a slice of type SRMS05Patient
func NewSRMS05PatientSlice(input hl7.HL7Type) []SRMS05Patient {
	values := make([]SRMS05Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS05Patient(input.Index(i))
	}
	return values
}

// NewRRII12ProviderContact creates an implementation of RRII12ProviderContact
func NewRRII12ProviderContact(input hl7.HL7Type) RRII12ProviderContact {
	v := RRII12ProviderContact{}
	v.ProviderData = NewPRD(input.Index(0))
	v.ContactData = NewCTDSlice(input.Index(1))
	return v
}

type RRII12ProviderContact struct {
	ProviderData PRD
	ContactData  []CTD
}

// NewRRII12ProviderContactSlice will construct a slice of type RRII12ProviderContact
func NewRRII12ProviderContactSlice(input hl7.HL7Type) []RRII12ProviderContact {
	values := make([]RRII12ProviderContact, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRRII12ProviderContact(input.Index(i))
	}
	return values
}

// NewQBPQ31Qbp creates an implementation of QBPQ31Qbp
func NewQBPQ31Qbp(input hl7.HL7Type) QBPQ31Qbp {
	v := QBPQ31Qbp{}
	v.AnyHl7Segment = NewHxx(input.Index(0))
	return v
}

type QBPQ31Qbp struct {
	AnyHl7Segment Hxx
}

// NewQBPQ31QbpSlice will construct a slice of type QBPQ31Qbp
func NewQBPQ31QbpSlice(input hl7.HL7Type) []QBPQ31Qbp {
	values := make([]QBPQ31Qbp, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewQBPQ31Qbp(input.Index(i))
	}
	return values
}

// NewORIO24Response creates an implementation of ORIO24Response
func NewORIO24Response(input hl7.HL7Type) ORIO24Response {
	v := ORIO24Response{}
	v.Patient = NewORIO24Patient(input.Index(0))
	v.Order = NewORIO24OrderSlice(input.Index(1))
	return v
}

type ORIO24Response struct {
	Patient ORIO24Patient
	Order   []ORIO24Order
}

// NewORIO24ResponseSlice will construct a slice of type ORIO24Response
func NewORIO24ResponseSlice(input hl7.HL7Type) []ORIO24Response {
	values := make([]ORIO24Response, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORIO24Response(input.Index(i))
	}
	return values
}

// NewSRRS01Service creates an implementation of SRRS01Service
func NewSRRS01Service(input hl7.HL7Type) SRRS01Service {
	v := SRRS01Service{}
	v.AppointmentInformation = NewAIS(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SRRS01Service struct {
	AppointmentInformation AIS
	NotesAndComments       []NTE
}

// NewSRRS01ServiceSlice will construct a slice of type SRRS01Service
func NewSRRS01ServiceSlice(input hl7.HL7Type) []SRRS01Service {
	values := make([]SRRS01Service, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS01Service(input.Index(i))
	}
	return values
}

// NewRSPZ86OrderDetail creates an implementation of RSPZ86OrderDetail
func NewRSPZ86OrderDetail(input hl7.HL7Type) RSPZ86OrderDetail {
	v := RSPZ86OrderDetail{}
	v.PharmacyTreatmentOrder = NewRXO(input.Index(0))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(1))
	v.PharmacyTreatmentComponentOrder = NewRXCSlice(input.Index(2))
	return v
}

type RSPZ86OrderDetail struct {
	PharmacyTreatmentOrder          RXO
	PharmacyTreatmentRoute          []RXR
	PharmacyTreatmentComponentOrder []RXC
}

// NewRSPZ86OrderDetailSlice will construct a slice of type RSPZ86OrderDetail
func NewRSPZ86OrderDetailSlice(input hl7.HL7Type) []RSPZ86OrderDetail {
	values := make([]RSPZ86OrderDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPZ86OrderDetail(input.Index(i))
	}
	return values
}

// NewSIUS20Service creates an implementation of SIUS20Service
func NewSIUS20Service(input hl7.HL7Type) SIUS20Service {
	v := SIUS20Service{}
	v.AppointmentInformation = NewAIS(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS20Service struct {
	AppointmentInformation AIS
	NotesAndComments       []NTE
}

// NewSIUS20ServiceSlice will construct a slice of type SIUS20Service
func NewSIUS20ServiceSlice(input hl7.HL7Type) []SIUS20Service {
	values := make([]SIUS20Service, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS20Service(input.Index(i))
	}
	return values
}

// NewPPPPCDPathway creates an implementation of PPPPCDPathway
func NewPPPPCDPathway(input hl7.HL7Type) PPPPCDPathway {
	v := PPPPCDPathway{}
	v.Pathway = NewPTH(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Variance = NewVARSlice(input.Index(2))
	v.PathwayRole = NewPPPPCDPathwayRoleSlice(input.Index(3))
	v.Problem = NewPPPPCDProblemSlice(input.Index(4))
	return v
}

type PPPPCDPathway struct {
	Pathway          PTH
	NotesAndComments []NTE
	Variance         []VAR
	PathwayRole      []PPPPCDPathwayRole
	Problem          []PPPPCDProblem
}

// NewPPPPCDPathwaySlice will construct a slice of type PPPPCDPathway
func NewPPPPCDPathwaySlice(input hl7.HL7Type) []PPPPCDPathway {
	values := make([]PPPPCDPathway, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPPPCDPathway(input.Index(i))
	}
	return values
}

// NewOMGO19ContainerObservation creates an implementation of OMGO19ContainerObservation
func NewOMGO19ContainerObservation(input hl7.HL7Type) OMGO19ContainerObservation {
	v := OMGO19ContainerObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type OMGO19ContainerObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewOMGO19ContainerObservationSlice will construct a slice of type OMGO19ContainerObservation
func NewOMGO19ContainerObservationSlice(input hl7.HL7Type) []OMGO19ContainerObservation {
	values := make([]OMGO19ContainerObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMGO19ContainerObservation(input.Index(i))
	}
	return values
}

// NewCCRI17AppointmentHistory creates an implementation of CCRI17AppointmentHistory
func NewCCRI17AppointmentHistory(input hl7.HL7Type) CCRI17AppointmentHistory {
	v := CCRI17AppointmentHistory{}
	v.SchedulingActivityInformation = NewSCH(input.Index(0))
	v.Resources = NewCCRI17ResourcesSlice(input.Index(1))
	return v
}

type CCRI17AppointmentHistory struct {
	SchedulingActivityInformation SCH
	Resources                     []CCRI17Resources
}

// NewCCRI17AppointmentHistorySlice will construct a slice of type CCRI17AppointmentHistory
func NewCCRI17AppointmentHistorySlice(input hl7.HL7Type) []CCRI17AppointmentHistory {
	values := make([]CCRI17AppointmentHistory, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI17AppointmentHistory(input.Index(i))
	}
	return values
}

// NewORLO34Timing creates an implementation of ORLO34Timing
func NewORLO34Timing(input hl7.HL7Type) ORLO34Timing {
	v := ORLO34Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type ORLO34Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewORLO34TimingSlice will construct a slice of type ORLO34Timing
func NewORLO34TimingSlice(input hl7.HL7Type) []ORLO34Timing {
	values := make([]ORLO34Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORLO34Timing(input.Index(i))
	}
	return values
}

// NewCQUI19Resources creates an implementation of CQUI19Resources
func NewCQUI19Resources(input hl7.HL7Type) CQUI19Resources {
	v := CQUI19Resources{}
	v.ResourceGroup = NewRGS(input.Index(0))
	v.ResourceDetail = NewCQUI19ResourceDetailSlice(input.Index(1))
	return v
}

type CQUI19Resources struct {
	ResourceGroup  RGS
	ResourceDetail []CQUI19ResourceDetail
}

// NewCQUI19ResourcesSlice will construct a slice of type CQUI19Resources
func NewCQUI19ResourcesSlice(input hl7.HL7Type) []CQUI19Resources {
	values := make([]CQUI19Resources, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCQUI19Resources(input.Index(i))
	}
	return values
}

// NewRSPZ82EncodedOrder creates an implementation of RSPZ82EncodedOrder
func NewRSPZ82EncodedOrder(input hl7.HL7Type) RSPZ82EncodedOrder {
	v := RSPZ82EncodedOrder{}
	v.PharmacyTreatmentEncodedOrder = NewRXE(input.Index(0))
	v.TimingEncoded = NewRSPZ82TimingEncodedSlice(input.Index(1))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(2))
	v.PharmacyTreatmentComponentOrder = NewRXCSlice(input.Index(3))
	return v
}

type RSPZ82EncodedOrder struct {
	PharmacyTreatmentEncodedOrder   RXE
	TimingEncoded                   []RSPZ82TimingEncoded
	PharmacyTreatmentRoute          []RXR
	PharmacyTreatmentComponentOrder []RXC
}

// NewRSPZ82EncodedOrderSlice will construct a slice of type RSPZ82EncodedOrder
func NewRSPZ82EncodedOrderSlice(input hl7.HL7Type) []RSPZ82EncodedOrder {
	values := make([]RSPZ82EncodedOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPZ82EncodedOrder(input.Index(i))
	}
	return values
}

// NewSIUS17GeneralResource creates an implementation of SIUS17GeneralResource
func NewSIUS17GeneralResource(input hl7.HL7Type) SIUS17GeneralResource {
	v := SIUS17GeneralResource{}
	v.AppointmentInformationGeneralResource = NewAIG(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS17GeneralResource struct {
	AppointmentInformationGeneralResource AIG
	NotesAndComments                      []NTE
}

// NewSIUS17GeneralResourceSlice will construct a slice of type SIUS17GeneralResource
func NewSIUS17GeneralResourceSlice(input hl7.HL7Type) []SIUS17GeneralResource {
	values := make([]SIUS17GeneralResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS17GeneralResource(input.Index(i))
	}
	return values
}

// NewCCRI18RoleGoal creates an implementation of CCRI18RoleGoal
func NewCCRI18RoleGoal(input hl7.HL7Type) CCRI18RoleGoal {
	v := CCRI18RoleGoal{}
	v.RoleGoalObject = NewCCRI18RoleGoalObject(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type CCRI18RoleGoal struct {
	RoleGoalObject CCRI18RoleGoalObject
	Variance       []VAR
}

// NewCCRI18RoleGoalSlice will construct a slice of type CCRI18RoleGoal
func NewCCRI18RoleGoalSlice(input hl7.HL7Type) []CCRI18RoleGoal {
	values := make([]CCRI18RoleGoal, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI18RoleGoal(input.Index(i))
	}
	return values
}

// NewPPPPCCGoalObservation creates an implementation of PPPPCCGoalObservation
func NewPPPPCCGoalObservation(input hl7.HL7Type) PPPPCCGoalObservation {
	v := PPPPCCGoalObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type PPPPCCGoalObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewPPPPCCGoalObservationSlice will construct a slice of type PPPPCCGoalObservation
func NewPPPPCCGoalObservationSlice(input hl7.HL7Type) []PPPPCCGoalObservation {
	values := make([]PPPPCCGoalObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPPPCCGoalObservation(input.Index(i))
	}
	return values
}

// NewPPPPCBGoalObservation creates an implementation of PPPPCBGoalObservation
func NewPPPPCBGoalObservation(input hl7.HL7Type) PPPPCBGoalObservation {
	v := PPPPCBGoalObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type PPPPCBGoalObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewPPPPCBGoalObservationSlice will construct a slice of type PPPPCBGoalObservation
func NewPPPPCBGoalObservationSlice(input hl7.HL7Type) []PPPPCBGoalObservation {
	values := make([]PPPPCBGoalObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPPPCBGoalObservation(input.Index(i))
	}
	return values
}

// NewORUR01CommonOrder creates an implementation of ORUR01CommonOrder
func NewORUR01CommonOrder(input hl7.HL7Type) ORUR01CommonOrder {
	v := ORUR01CommonOrder{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.OrderDocument = NewORUR01OrderDocument(input.Index(2))
	return v
}

type ORUR01CommonOrder struct {
	CommonOrder              ORC
	ParticipationInformation []PRT
	OrderDocument            ORUR01OrderDocument
}

// NewORUR01CommonOrderSlice will construct a slice of type ORUR01CommonOrder
func NewORUR01CommonOrderSlice(input hl7.HL7Type) []ORUR01CommonOrder {
	values := make([]ORUR01CommonOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORUR01CommonOrder(input.Index(i))
	}
	return values
}

// NewCCII22RoleProblemObject creates an implementation of CCII22RoleProblemObject
func NewCCII22RoleProblemObject(input hl7.HL7Type) CCII22RoleProblemObject {
	v := CCII22RoleProblemObject{}
	v.Role = NewROL(input.Index(0))
	v.ProviderData = NewPRD(input.Index(1))
	return v
}

type CCII22RoleProblemObject struct {
	Role         ROL
	ProviderData PRD
}

// NewCCII22RoleProblemObjectSlice will construct a slice of type CCII22RoleProblemObject
func NewCCII22RoleProblemObjectSlice(input hl7.HL7Type) []CCII22RoleProblemObject {
	values := make([]CCII22RoleProblemObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCII22RoleProblemObject(input.Index(i))
	}
	return values
}

// NewBARP01Insurance creates an implementation of BARP01Insurance
func NewBARP01Insurance(input hl7.HL7Type) BARP01Insurance {
	v := BARP01Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3Slice(input.Index(2))
	v.ParticipationInformation = NewPRTSlice(input.Index(3))
	v.Role = NewROLSlice(input.Index(4))
	return v
}

type BARP01Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification []IN3
	ParticipationInformation                    []PRT
	Role                                        []ROL
}

// NewBARP01InsuranceSlice will construct a slice of type BARP01Insurance
func NewBARP01InsuranceSlice(input hl7.HL7Type) []BARP01Insurance {
	values := make([]BARP01Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewBARP01Insurance(input.Index(i))
	}
	return values
}

// NewRTBZ76RowDefinition creates an implementation of RTBZ76RowDefinition
func NewRTBZ76RowDefinition(input hl7.HL7Type) RTBZ76RowDefinition {
	v := RTBZ76RowDefinition{}
	v.TableRowDefinition = NewRDF(input.Index(0))
	v.TableRowData = NewRDTSlice(input.Index(1))
	return v
}

type RTBZ76RowDefinition struct {
	TableRowDefinition RDF
	TableRowData       []RDT
}

// NewRTBZ76RowDefinitionSlice will construct a slice of type RTBZ76RowDefinition
func NewRTBZ76RowDefinitionSlice(input hl7.HL7Type) []RTBZ76RowDefinition {
	values := make([]RTBZ76RowDefinition, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRTBZ76RowDefinition(input.Index(i))
	}
	return values
}

// NewPPRPC3OrderObservation creates an implementation of PPRPC3OrderObservation
func NewPPRPC3OrderObservation(input hl7.HL7Type) PPRPC3OrderObservation {
	v := PPRPC3OrderObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.Variance = NewVARSlice(input.Index(3))
	return v
}

type PPRPC3OrderObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
	Variance                 []VAR
}

// NewPPRPC3OrderObservationSlice will construct a slice of type PPRPC3OrderObservation
func NewPPRPC3OrderObservationSlice(input hl7.HL7Type) []PPRPC3OrderObservation {
	values := make([]PPRPC3OrderObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPRPC3OrderObservation(input.Index(i))
	}
	return values
}

// NewOULR24TimingQty creates an implementation of OULR24TimingQty
func NewOULR24TimingQty(input hl7.HL7Type) OULR24TimingQty {
	v := OULR24TimingQty{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type OULR24TimingQty struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewOULR24TimingQtySlice will construct a slice of type OULR24TimingQty
func NewOULR24TimingQtySlice(input hl7.HL7Type) []OULR24TimingQty {
	values := make([]OULR24TimingQty, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOULR24TimingQty(input.Index(i))
	}
	return values
}

// NewSRRS01Resources creates an implementation of SRRS01Resources
func NewSRRS01Resources(input hl7.HL7Type) SRRS01Resources {
	v := SRRS01Resources{}
	v.ResourceGroup = NewRGS(input.Index(0))
	v.Service = NewSRRS01ServiceSlice(input.Index(1))
	v.GeneralResource = NewSRRS01GeneralResourceSlice(input.Index(2))
	v.LocationResource = NewSRRS01LocationResourceSlice(input.Index(3))
	v.PersonnelResource = NewSRRS01PersonnelResourceSlice(input.Index(4))
	return v
}

type SRRS01Resources struct {
	ResourceGroup     RGS
	Service           []SRRS01Service
	GeneralResource   []SRRS01GeneralResource
	LocationResource  []SRRS01LocationResource
	PersonnelResource []SRRS01PersonnelResource
}

// NewSRRS01ResourcesSlice will construct a slice of type SRRS01Resources
func NewSRRS01ResourcesSlice(input hl7.HL7Type) []SRRS01Resources {
	values := make([]SRRS01Resources, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS01Resources(input.Index(i))
	}
	return values
}

// NewDBUO42Donnor creates an implementation of DBUO42Donnor
func NewDBUO42Donnor(input hl7.HL7Type) DBUO42Donnor {
	v := DBUO42Donnor{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.ObservationResult = NewOBXSlice(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	v.PatientAllergyInformation = NewAL1Slice(input.Index(4))
	v.AccessRestriction = NewARVSlice(input.Index(5))
	return v
}

type DBUO42Donnor struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	ObservationResult            []OBX
	NotesAndComments             []NTE
	PatientAllergyInformation    []AL1
	AccessRestriction            []ARV
}

// NewDBUO42DonnorSlice will construct a slice of type DBUO42Donnor
func NewDBUO42DonnorSlice(input hl7.HL7Type) []DBUO42Donnor {
	values := make([]DBUO42Donnor, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewDBUO42Donnor(input.Index(i))
	}
	return values
}

// NewQBPQ13Qbp creates an implementation of QBPQ13Qbp
func NewQBPQ13Qbp(input hl7.HL7Type) QBPQ13Qbp {
	v := QBPQ13Qbp{}
	v.AnyHl7Segment = NewHxx(input.Index(0))
	return v
}

type QBPQ13Qbp struct {
	AnyHl7Segment Hxx
}

// NewQBPQ13QbpSlice will construct a slice of type QBPQ13Qbp
func NewQBPQ13QbpSlice(input hl7.HL7Type) []QBPQ13Qbp {
	values := make([]QBPQ13Qbp, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewQBPQ13Qbp(input.Index(i))
	}
	return values
}

// NewDFTP03Order creates an implementation of DFTP03Order
func NewDFTP03Order(input hl7.HL7Type) DFTP03Order {
	v := DFTP03Order{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type DFTP03Order struct {
	ObservationRequest OBR
	NotesAndComments   []NTE
}

// NewDFTP03OrderSlice will construct a slice of type DFTP03Order
func NewDFTP03OrderSlice(input hl7.HL7Type) []DFTP03Order {
	values := make([]DFTP03Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewDFTP03Order(input.Index(i))
	}
	return values
}

// NewEACU07SpecimenContainer creates an implementation of EACU07SpecimenContainer
func NewEACU07SpecimenContainer(input hl7.HL7Type) EACU07SpecimenContainer {
	v := EACU07SpecimenContainer{}
	v.SpecimenContainerDetail = NewSAC(input.Index(0))
	v.ObservationRequest = NewOBRSlice(input.Index(1))
	v.Specimen = NewSPMSlice(input.Index(2))
	return v
}

type EACU07SpecimenContainer struct {
	SpecimenContainerDetail SAC
	ObservationRequest      []OBR
	Specimen                []SPM
}

// NewEACU07SpecimenContainerSlice will construct a slice of type EACU07SpecimenContainer
func NewEACU07SpecimenContainerSlice(input hl7.HL7Type) []EACU07SpecimenContainer {
	values := make([]EACU07SpecimenContainer, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewEACU07SpecimenContainer(input.Index(i))
	}
	return values
}

// NewOMBO27Patient creates an implementation of OMBO27Patient
func NewOMBO27Patient(input hl7.HL7Type) OMBO27Patient {
	v := OMBO27Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.AccessRestriction = NewARVSlice(input.Index(3))
	v.NotesAndComments = NewNTESlice(input.Index(4))
	v.PatientVisit = NewOMBO27PatientVisit(input.Index(5))
	v.Insurance = NewOMBO27InsuranceSlice(input.Index(6))
	v.Guarantor = NewGT1(input.Index(7))
	v.PatientAllergyInformation = NewAL1Slice(input.Index(8))
	return v
}

type OMBO27Patient struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	ParticipationInformation     []PRT
	AccessRestriction            []ARV
	NotesAndComments             []NTE
	PatientVisit                 OMBO27PatientVisit
	Insurance                    []OMBO27Insurance
	Guarantor                    GT1
	PatientAllergyInformation    []AL1
}

// NewOMBO27PatientSlice will construct a slice of type OMBO27Patient
func NewOMBO27PatientSlice(input hl7.HL7Type) []OMBO27Patient {
	values := make([]OMBO27Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMBO27Patient(input.Index(i))
	}
	return values
}

// NewOMLO21Patient creates an implementation of OMLO21Patient
func NewOMLO21Patient(input hl7.HL7Type) OMLO21Patient {
	v := OMLO21Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	v.NextOfKinAssociatedParties = NewNK1Slice(input.Index(4))
	v.AccessRestriction = NewARV(input.Index(5))
	v.PatientVisit = NewOMLO21PatientVisit(input.Index(6))
	v.Insurance = NewOMLO21InsuranceSlice(input.Index(7))
	v.Guarantor = NewGT1(input.Index(8))
	v.PatientAllergyInformation = NewAL1Slice(input.Index(9))
	return v
}

type OMLO21Patient struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	ParticipationInformation     []PRT
	NotesAndComments             []NTE
	NextOfKinAssociatedParties   []NK1
	AccessRestriction            ARV
	PatientVisit                 OMLO21PatientVisit
	Insurance                    []OMLO21Insurance
	Guarantor                    GT1
	PatientAllergyInformation    []AL1
}

// NewOMLO21PatientSlice will construct a slice of type OMLO21Patient
func NewOMLO21PatientSlice(input hl7.HL7Type) []OMLO21Patient {
	values := make([]OMLO21Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO21Patient(input.Index(i))
	}
	return values
}

// NewCQUI19MedicationAdministrationObservation creates an implementation of CQUI19MedicationAdministrationObservation
func NewCQUI19MedicationAdministrationObservation(input hl7.HL7Type) CQUI19MedicationAdministrationObservation {
	v := CQUI19MedicationAdministrationObservation{}
	v.ObservationResult = NewOBXSlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CQUI19MedicationAdministrationObservation struct {
	ObservationResult        []OBX
	ParticipationInformation []PRT
}

// NewCQUI19MedicationAdministrationObservationSlice will construct a slice of type CQUI19MedicationAdministrationObservation
func NewCQUI19MedicationAdministrationObservationSlice(input hl7.HL7Type) []CQUI19MedicationAdministrationObservation {
	values := make([]CQUI19MedicationAdministrationObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCQUI19MedicationAdministrationObservation(input.Index(i))
	}
	return values
}

// NewOULR23OrderDocument creates an implementation of OULR23OrderDocument
func NewOULR23OrderDocument(input hl7.HL7Type) OULR23OrderDocument {
	v := OULR23OrderDocument{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.TranscriptionDocumentHeader = NewTXA(input.Index(2))
	return v
}

type OULR23OrderDocument struct {
	ObservationResult           OBX
	ParticipationInformation    []PRT
	TranscriptionDocumentHeader TXA
}

// NewOULR23OrderDocumentSlice will construct a slice of type OULR23OrderDocument
func NewOULR23OrderDocumentSlice(input hl7.HL7Type) []OULR23OrderDocument {
	values := make([]OULR23OrderDocument, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOULR23OrderDocument(input.Index(i))
	}
	return values
}

// NewMFNM16MaterialItemRecord creates an implementation of MFNM16MaterialItemRecord
func NewMFNM16MaterialItemRecord(input hl7.HL7Type) MFNM16MaterialItemRecord {
	v := MFNM16MaterialItemRecord{}
	v.MasterFileEntry = NewMFE(input.Index(0))
	v.MaterialItem = NewITM(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.Sterilization = NewMFNM16SterilizationSlice(input.Index(3))
	v.PurchasingVendor = NewMFNM16PurchasingVendorSlice(input.Index(4))
	v.MaterialLocation = NewMFNM16MaterialLocationSlice(input.Index(5))
	return v
}

type MFNM16MaterialItemRecord struct {
	MasterFileEntry  MFE
	MaterialItem     ITM
	NotesAndComments []NTE
	Sterilization    []MFNM16Sterilization
	PurchasingVendor []MFNM16PurchasingVendor
	MaterialLocation []MFNM16MaterialLocation
}

// NewMFNM16MaterialItemRecordSlice will construct a slice of type MFNM16MaterialItemRecord
func NewMFNM16MaterialItemRecordSlice(input hl7.HL7Type) []MFNM16MaterialItemRecord {
	values := make([]MFNM16MaterialItemRecord, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMFNM16MaterialItemRecord(input.Index(i))
	}
	return values
}

// NewOULR24Visit creates an implementation of OULR24Visit
func NewOULR24Visit(input hl7.HL7Type) OULR24Visit {
	v := OULR24Visit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	return v
}

type OULR24Visit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ParticipationInformation          []PRT
}

// NewOULR24VisitSlice will construct a slice of type OULR24Visit
func NewOULR24VisitSlice(input hl7.HL7Type) []OULR24Visit {
	values := make([]OULR24Visit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOULR24Visit(input.Index(i))
	}
	return values
}

// NewPPRPC2GoalObservation creates an implementation of PPRPC2GoalObservation
func NewPPRPC2GoalObservation(input hl7.HL7Type) PPRPC2GoalObservation {
	v := PPRPC2GoalObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type PPRPC2GoalObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewPPRPC2GoalObservationSlice will construct a slice of type PPRPC2GoalObservation
func NewPPRPC2GoalObservationSlice(input hl7.HL7Type) []PPRPC2GoalObservation {
	values := make([]PPRPC2GoalObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPRPC2GoalObservation(input.Index(i))
	}
	return values
}

// NewCCUI20RoleGoal creates an implementation of CCUI20RoleGoal
func NewCCUI20RoleGoal(input hl7.HL7Type) CCUI20RoleGoal {
	v := CCUI20RoleGoal{}
	v.RoleGoalObject = NewCCUI20RoleGoalObject(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type CCUI20RoleGoal struct {
	RoleGoalObject CCUI20RoleGoalObject
	Variance       []VAR
}

// NewCCUI20RoleGoalSlice will construct a slice of type CCUI20RoleGoal
func NewCCUI20RoleGoalSlice(input hl7.HL7Type) []CCUI20RoleGoal {
	values := make([]CCUI20RoleGoal, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCUI20RoleGoal(input.Index(i))
	}
	return values
}

// NewPPGPCJGoalRole creates an implementation of PPGPCJGoalRole
func NewPPGPCJGoalRole(input hl7.HL7Type) PPGPCJGoalRole {
	v := PPGPCJGoalRole{}
	v.Role = NewROL(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type PPGPCJGoalRole struct {
	Role     ROL
	Variance []VAR
}

// NewPPGPCJGoalRoleSlice will construct a slice of type PPGPCJGoalRole
func NewPPGPCJGoalRoleSlice(input hl7.HL7Type) []PPGPCJGoalRole {
	values := make([]PPGPCJGoalRole, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPGPCJGoalRole(input.Index(i))
	}
	return values
}

// NewSRRS06Resources creates an implementation of SRRS06Resources
func NewSRRS06Resources(input hl7.HL7Type) SRRS06Resources {
	v := SRRS06Resources{}
	v.ResourceGroup = NewRGS(input.Index(0))
	v.Service = NewSRRS06ServiceSlice(input.Index(1))
	v.GeneralResource = NewSRRS06GeneralResourceSlice(input.Index(2))
	v.LocationResource = NewSRRS06LocationResourceSlice(input.Index(3))
	v.PersonnelResource = NewSRRS06PersonnelResourceSlice(input.Index(4))
	return v
}

type SRRS06Resources struct {
	ResourceGroup     RGS
	Service           []SRRS06Service
	GeneralResource   []SRRS06GeneralResource
	LocationResource  []SRRS06LocationResource
	PersonnelResource []SRRS06PersonnelResource
}

// NewSRRS06ResourcesSlice will construct a slice of type SRRS06Resources
func NewSRRS06ResourcesSlice(input hl7.HL7Type) []SRRS06Resources {
	values := make([]SRRS06Resources, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS06Resources(input.Index(i))
	}
	return values
}

// NewORUR40TimingQty creates an implementation of ORUR40TimingQty
func NewORUR40TimingQty(input hl7.HL7Type) ORUR40TimingQty {
	v := ORUR40TimingQty{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type ORUR40TimingQty struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewORUR40TimingQtySlice will construct a slice of type ORUR40TimingQty
func NewORUR40TimingQtySlice(input hl7.HL7Type) []ORUR40TimingQty {
	values := make([]ORUR40TimingQty, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORUR40TimingQty(input.Index(i))
	}
	return values
}

// NewDFTP11Order creates an implementation of DFTP11Order
func NewDFTP11Order(input hl7.HL7Type) DFTP11Order {
	v := DFTP11Order{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type DFTP11Order struct {
	ObservationRequest OBR
	NotesAndComments   []NTE
}

// NewDFTP11OrderSlice will construct a slice of type DFTP11Order
func NewDFTP11OrderSlice(input hl7.HL7Type) []DFTP11Order {
	values := make([]DFTP11Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewDFTP11Order(input.Index(i))
	}
	return values
}

// NewOMPO09Observation creates an implementation of OMPO09Observation
func NewOMPO09Observation(input hl7.HL7Type) OMPO09Observation {
	v := OMPO09Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type OMPO09Observation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewOMPO09ObservationSlice will construct a slice of type OMPO09Observation
func NewOMPO09ObservationSlice(input hl7.HL7Type) []OMPO09Observation {
	values := make([]OMPO09Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMPO09Observation(input.Index(i))
	}
	return values
}

// NewCSUC09StudySchedule creates an implementation of CSUC09StudySchedule
func NewCSUC09StudySchedule(input hl7.HL7Type) CSUC09StudySchedule {
	v := CSUC09StudySchedule{}
	v.ClinicalStudyDataScheduleSegment = NewCSS(input.Index(0))
	v.StudyObservation = NewCSUC09StudyObservationSlice(input.Index(1))
	v.StudyPharm = NewCSUC09StudyPharmSlice(input.Index(2))
	return v
}

type CSUC09StudySchedule struct {
	ClinicalStudyDataScheduleSegment CSS
	StudyObservation                 []CSUC09StudyObservation
	StudyPharm                       []CSUC09StudyPharm
}

// NewCSUC09StudyScheduleSlice will construct a slice of type CSUC09StudySchedule
func NewCSUC09StudyScheduleSlice(input hl7.HL7Type) []CSUC09StudySchedule {
	values := make([]CSUC09StudySchedule, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCSUC09StudySchedule(input.Index(i))
	}
	return values
}

// NewDFTP03FinancialObservation creates an implementation of DFTP03FinancialObservation
func NewDFTP03FinancialObservation(input hl7.HL7Type) DFTP03FinancialObservation {
	v := DFTP03FinancialObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type DFTP03FinancialObservation struct {
	ObservationResult OBX
	NotesAndComments  []NTE
}

// NewDFTP03FinancialObservationSlice will construct a slice of type DFTP03FinancialObservation
func NewDFTP03FinancialObservationSlice(input hl7.HL7Type) []DFTP03FinancialObservation {
	values := make([]DFTP03FinancialObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewDFTP03FinancialObservation(input.Index(i))
	}
	return values
}

// NewSIUS18GeneralResource creates an implementation of SIUS18GeneralResource
func NewSIUS18GeneralResource(input hl7.HL7Type) SIUS18GeneralResource {
	v := SIUS18GeneralResource{}
	v.AppointmentInformationGeneralResource = NewAIG(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS18GeneralResource struct {
	AppointmentInformationGeneralResource AIG
	NotesAndComments                      []NTE
}

// NewSIUS18GeneralResourceSlice will construct a slice of type SIUS18GeneralResource
func NewSIUS18GeneralResourceSlice(input hl7.HL7Type) []SIUS18GeneralResource {
	values := make([]SIUS18GeneralResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS18GeneralResource(input.Index(i))
	}
	return values
}

// NewPPPPCCOrderObservation creates an implementation of PPPPCCOrderObservation
func NewPPPPCCOrderObservation(input hl7.HL7Type) PPPPCCOrderObservation {
	v := PPPPCCOrderObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.Variance = NewVARSlice(input.Index(3))
	return v
}

type PPPPCCOrderObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
	Variance                 []VAR
}

// NewPPPPCCOrderObservationSlice will construct a slice of type PPPPCCOrderObservation
func NewPPPPCCOrderObservationSlice(input hl7.HL7Type) []PPPPCCOrderObservation {
	values := make([]PPPPCCOrderObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPPPCCOrderObservation(input.Index(i))
	}
	return values
}

// NewOULR22CommonOrder creates an implementation of OULR22CommonOrder
func NewOULR22CommonOrder(input hl7.HL7Type) OULR22CommonOrder {
	v := OULR22CommonOrder{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.OrderDocument = NewOULR22OrderDocument(input.Index(2))
	return v
}

type OULR22CommonOrder struct {
	CommonOrder              ORC
	ParticipationInformation []PRT
	OrderDocument            OULR22OrderDocument
}

// NewOULR22CommonOrderSlice will construct a slice of type OULR22CommonOrder
func NewOULR22CommonOrderSlice(input hl7.HL7Type) []OULR22CommonOrder {
	values := make([]OULR22CommonOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOULR22CommonOrder(input.Index(i))
	}
	return values
}

// NewMDMT10Observation creates an implementation of MDMT10Observation
func NewMDMT10Observation(input hl7.HL7Type) MDMT10Observation {
	v := MDMT10Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type MDMT10Observation struct {
	ObservationResult OBX
	NotesAndComments  []NTE
}

// NewMDMT10ObservationSlice will construct a slice of type MDMT10Observation
func NewMDMT10ObservationSlice(input hl7.HL7Type) []MDMT10Observation {
	values := make([]MDMT10Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMDMT10Observation(input.Index(i))
	}
	return values
}

// NewCCRI17ProviderContact creates an implementation of CCRI17ProviderContact
func NewCCRI17ProviderContact(input hl7.HL7Type) CCRI17ProviderContact {
	v := CCRI17ProviderContact{}
	v.ProviderData = NewPRD(input.Index(0))
	v.ContactData = NewCTDSlice(input.Index(1))
	return v
}

type CCRI17ProviderContact struct {
	ProviderData PRD
	ContactData  []CTD
}

// NewCCRI17ProviderContactSlice will construct a slice of type CCRI17ProviderContact
func NewCCRI17ProviderContactSlice(input hl7.HL7Type) []CCRI17ProviderContact {
	values := make([]CCRI17ProviderContact, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI17ProviderContact(input.Index(i))
	}
	return values
}

// NewCCRI17RoleGoal creates an implementation of CCRI17RoleGoal
func NewCCRI17RoleGoal(input hl7.HL7Type) CCRI17RoleGoal {
	v := CCRI17RoleGoal{}
	v.RoleGoalObject = NewCCRI17RoleGoalObject(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type CCRI17RoleGoal struct {
	RoleGoalObject CCRI17RoleGoalObject
	Variance       []VAR
}

// NewCCRI17RoleGoalSlice will construct a slice of type CCRI17RoleGoal
func NewCCRI17RoleGoalSlice(input hl7.HL7Type) []CCRI17RoleGoal {
	values := make([]CCRI17RoleGoal, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI17RoleGoal(input.Index(i))
	}
	return values
}

// NewMDMT11CommonOrder creates an implementation of MDMT11CommonOrder
func NewMDMT11CommonOrder(input hl7.HL7Type) MDMT11CommonOrder {
	v := MDMT11CommonOrder{}
	v.CommonOrder = NewORC(input.Index(0))
	v.Timing = NewMDMT11TimingSlice(input.Index(1))
	v.ObservationRequest = NewOBR(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	return v
}

type MDMT11CommonOrder struct {
	CommonOrder        ORC
	Timing             []MDMT11Timing
	ObservationRequest OBR
	NotesAndComments   []NTE
}

// NewMDMT11CommonOrderSlice will construct a slice of type MDMT11CommonOrder
func NewMDMT11CommonOrderSlice(input hl7.HL7Type) []MDMT11CommonOrder {
	values := make([]MDMT11CommonOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMDMT11CommonOrder(input.Index(i))
	}
	return values
}

// NewOMGO19PriorResult creates an implementation of OMGO19PriorResult
func NewOMGO19PriorResult(input hl7.HL7Type) OMGO19PriorResult {
	v := OMGO19PriorResult{}
	v.PatientPrior = NewOMGO19PatientPrior(input.Index(0))
	v.PatientVisitPrior = NewOMGO19PatientVisitPrior(input.Index(1))
	v.PatientAllergyInformation = NewAL1Slice(input.Index(2))
	v.OrderPrior = NewOMGO19OrderPriorSlice(input.Index(3))
	return v
}

type OMGO19PriorResult struct {
	PatientPrior              OMGO19PatientPrior
	PatientVisitPrior         OMGO19PatientVisitPrior
	PatientAllergyInformation []AL1
	OrderPrior                []OMGO19OrderPrior
}

// NewOMGO19PriorResultSlice will construct a slice of type OMGO19PriorResult
func NewOMGO19PriorResultSlice(input hl7.HL7Type) []OMGO19PriorResult {
	values := make([]OMGO19PriorResult, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMGO19PriorResult(input.Index(i))
	}
	return values
}

// NewSRRS09Patient creates an implementation of SRRS09Patient
func NewSRRS09Patient(input hl7.HL7Type) SRRS09Patient {
	v := SRRS09Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientVisit = NewPV1(input.Index(1))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(2))
	v.Diagnosis = NewDG1Slice(input.Index(3))
	return v
}

type SRRS09Patient struct {
	PatientIdentification             PID
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	Diagnosis                         []DG1
}

// NewSRRS09PatientSlice will construct a slice of type SRRS09Patient
func NewSRRS09PatientSlice(input hl7.HL7Type) []SRRS09Patient {
	values := make([]SRRS09Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS09Patient(input.Index(i))
	}
	return values
}

// NewCSUC09TimingQty creates an implementation of CSUC09TimingQty
func NewCSUC09TimingQty(input hl7.HL7Type) CSUC09TimingQty {
	v := CSUC09TimingQty{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type CSUC09TimingQty struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewCSUC09TimingQtySlice will construct a slice of type CSUC09TimingQty
func NewCSUC09TimingQtySlice(input hl7.HL7Type) []CSUC09TimingQty {
	values := make([]CSUC09TimingQty, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCSUC09TimingQty(input.Index(i))
	}
	return values
}

// NewRSPZ82CommonOrder creates an implementation of RSPZ82CommonOrder
func NewRSPZ82CommonOrder(input hl7.HL7Type) RSPZ82CommonOrder {
	v := RSPZ82CommonOrder{}
	v.CommonOrder = NewORC(input.Index(0))
	v.Timing = NewRSPZ82TimingSlice(input.Index(1))
	v.OrderDetail = NewRSPZ82OrderDetail(input.Index(2))
	v.EncodedOrder = NewRSPZ82EncodedOrder(input.Index(3))
	v.PharmacyTreatmentDispense = NewRXD(input.Index(4))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(5))
	v.PharmacyTreatmentComponentOrder = NewRXCSlice(input.Index(6))
	v.Observation = NewRSPZ82ObservationSlice(input.Index(7))
	return v
}

type RSPZ82CommonOrder struct {
	CommonOrder                     ORC
	Timing                          []RSPZ82Timing
	OrderDetail                     RSPZ82OrderDetail
	EncodedOrder                    RSPZ82EncodedOrder
	PharmacyTreatmentDispense       RXD
	PharmacyTreatmentRoute          []RXR
	PharmacyTreatmentComponentOrder []RXC
	Observation                     []RSPZ82Observation
}

// NewRSPZ82CommonOrderSlice will construct a slice of type RSPZ82CommonOrder
func NewRSPZ82CommonOrderSlice(input hl7.HL7Type) []RSPZ82CommonOrder {
	values := make([]RSPZ82CommonOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPZ82CommonOrder(input.Index(i))
	}
	return values
}

// NewOPLO37SpecimenObservation creates an implementation of OPLO37SpecimenObservation
func NewOPLO37SpecimenObservation(input hl7.HL7Type) OPLO37SpecimenObservation {
	v := OPLO37SpecimenObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type OPLO37SpecimenObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewOPLO37SpecimenObservationSlice will construct a slice of type OPLO37SpecimenObservation
func NewOPLO37SpecimenObservationSlice(input hl7.HL7Type) []OPLO37SpecimenObservation {
	values := make([]OPLO37SpecimenObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOPLO37SpecimenObservation(input.Index(i))
	}
	return values
}

// NewSRRS07Service creates an implementation of SRRS07Service
func NewSRRS07Service(input hl7.HL7Type) SRRS07Service {
	v := SRRS07Service{}
	v.AppointmentInformation = NewAIS(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SRRS07Service struct {
	AppointmentInformation AIS
	NotesAndComments       []NTE
}

// NewSRRS07ServiceSlice will construct a slice of type SRRS07Service
func NewSRRS07ServiceSlice(input hl7.HL7Type) []SRRS07Service {
	values := make([]SRRS07Service, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS07Service(input.Index(i))
	}
	return values
}

// NewRGVO15Patient creates an implementation of RGVO15Patient
func NewRGVO15Patient(input hl7.HL7Type) RGVO15Patient {
	v := RGVO15Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.PatientAllergyInformation = NewAL1Slice(input.Index(2))
	v.AccessRestriction = NewARVSlice(input.Index(3))
	v.PatientVisit = NewRGVO15PatientVisit(input.Index(4))
	return v
}

type RGVO15Patient struct {
	PatientIdentification     PID
	NotesAndComments          []NTE
	PatientAllergyInformation []AL1
	AccessRestriction         []ARV
	PatientVisit              RGVO15PatientVisit
}

// NewRGVO15PatientSlice will construct a slice of type RGVO15Patient
func NewRGVO15PatientSlice(input hl7.HL7Type) []RGVO15Patient {
	values := make([]RGVO15Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRGVO15Patient(input.Index(i))
	}
	return values
}

// NewPPGPCHGoalObservation creates an implementation of PPGPCHGoalObservation
func NewPPGPCHGoalObservation(input hl7.HL7Type) PPGPCHGoalObservation {
	v := PPGPCHGoalObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type PPGPCHGoalObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewPPGPCHGoalObservationSlice will construct a slice of type PPGPCHGoalObservation
func NewPPGPCHGoalObservationSlice(input hl7.HL7Type) []PPGPCHGoalObservation {
	values := make([]PPGPCHGoalObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPGPCHGoalObservation(input.Index(i))
	}
	return values
}

// NewPPGPCHOrder creates an implementation of PPGPCHOrder
func NewPPGPCHOrder(input hl7.HL7Type) PPGPCHOrder {
	v := PPGPCHOrder{}
	v.CommonOrder = NewORC(input.Index(0))
	v.OrderDetail = NewPPGPCHOrderDetail(input.Index(1))
	return v
}

type PPGPCHOrder struct {
	CommonOrder ORC
	OrderDetail PPGPCHOrderDetail
}

// NewPPGPCHOrderSlice will construct a slice of type PPGPCHOrder
func NewPPGPCHOrderSlice(input hl7.HL7Type) []PPGPCHOrder {
	values := make([]PPGPCHOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPGPCHOrder(input.Index(i))
	}
	return values
}

// NewRREO12TimingEncoded creates an implementation of RREO12TimingEncoded
func NewRREO12TimingEncoded(input hl7.HL7Type) RREO12TimingEncoded {
	v := RREO12TimingEncoded{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type RREO12TimingEncoded struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewRREO12TimingEncodedSlice will construct a slice of type RREO12TimingEncoded
func NewRREO12TimingEncodedSlice(input hl7.HL7Type) []RREO12TimingEncoded {
	values := make([]RREO12TimingEncoded, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRREO12TimingEncoded(input.Index(i))
	}
	return values
}

// NewOMLO39SpecimenShipment creates an implementation of OMLO39SpecimenShipment
func NewOMLO39SpecimenShipment(input hl7.HL7Type) OMLO39SpecimenShipment {
	v := OMLO39SpecimenShipment{}
	v.Shipment = NewSHP(input.Index(0))
	v.ShipmentObservation = NewOMLO39ShipmentObservationSlice(input.Index(1))
	v.Package = NewOMLO39PackageSlice(input.Index(2))
	return v
}

type OMLO39SpecimenShipment struct {
	Shipment            SHP
	ShipmentObservation []OMLO39ShipmentObservation
	Package             []OMLO39Package
}

// NewOMLO39SpecimenShipmentSlice will construct a slice of type OMLO39SpecimenShipment
func NewOMLO39SpecimenShipmentSlice(input hl7.HL7Type) []OMLO39SpecimenShipment {
	values := make([]OMLO39SpecimenShipment, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO39SpecimenShipment(input.Index(i))
	}
	return values
}

// NewSRRS08Schedule creates an implementation of SRRS08Schedule
func NewSRRS08Schedule(input hl7.HL7Type) SRRS08Schedule {
	v := SRRS08Schedule{}
	v.SchedulingActivityInformation = NewSCH(input.Index(0))
	v.TimingQuantity = NewTQ1Slice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.Patient = NewSRRS08PatientSlice(input.Index(3))
	v.Resources = NewSRRS08ResourcesSlice(input.Index(4))
	return v
}

type SRRS08Schedule struct {
	SchedulingActivityInformation SCH
	TimingQuantity                []TQ1
	NotesAndComments              []NTE
	Patient                       []SRRS08Patient
	Resources                     []SRRS08Resources
}

// NewSRRS08ScheduleSlice will construct a slice of type SRRS08Schedule
func NewSRRS08ScheduleSlice(input hl7.HL7Type) []SRRS08Schedule {
	values := make([]SRRS08Schedule, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS08Schedule(input.Index(i))
	}
	return values
}

// NewCCUI20Pathway creates an implementation of CCUI20Pathway
func NewCCUI20Pathway(input hl7.HL7Type) CCUI20Pathway {
	v := CCUI20Pathway{}
	v.Pathway = NewPTH(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	v.RolePathway = NewCCUI20RolePathwaySlice(input.Index(2))
	v.PathwayObservation = NewCCUI20PathwayObservationSlice(input.Index(3))
	return v
}

type CCUI20Pathway struct {
	Pathway            PTH
	Variance           []VAR
	RolePathway        []CCUI20RolePathway
	PathwayObservation []CCUI20PathwayObservation
}

// NewCCUI20PathwaySlice will construct a slice of type CCUI20Pathway
func NewCCUI20PathwaySlice(input hl7.HL7Type) []CCUI20Pathway {
	values := make([]CCUI20Pathway, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCUI20Pathway(input.Index(i))
	}
	return values
}

// NewSRMS06Service creates an implementation of SRMS06Service
func NewSRMS06Service(input hl7.HL7Type) SRMS06Service {
	v := SRMS06Service{}
	v.AppointmentInformation = NewAIS(input.Index(0))
	v.AppointmentPreferences = NewAPR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type SRMS06Service struct {
	AppointmentInformation AIS
	AppointmentPreferences APR
	NotesAndComments       []NTE
}

// NewSRMS06ServiceSlice will construct a slice of type SRMS06Service
func NewSRMS06ServiceSlice(input hl7.HL7Type) []SRMS06Service {
	values := make([]SRMS06Service, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS06Service(input.Index(i))
	}
	return values
}

// NewRGVO15Timing creates an implementation of RGVO15Timing
func NewRGVO15Timing(input hl7.HL7Type) RGVO15Timing {
	v := RGVO15Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type RGVO15Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewRGVO15TimingSlice will construct a slice of type RGVO15Timing
func NewRGVO15TimingSlice(input hl7.HL7Type) []RGVO15Timing {
	values := make([]RGVO15Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRGVO15Timing(input.Index(i))
	}
	return values
}

// NewOMLO21Observation creates an implementation of OMLO21Observation
func NewOMLO21Observation(input hl7.HL7Type) OMLO21Observation {
	v := OMLO21Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.TestCodeDetail = NewTCD(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	return v
}

type OMLO21Observation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	TestCodeDetail           TCD
	NotesAndComments         []NTE
}

// NewOMLO21ObservationSlice will construct a slice of type OMLO21Observation
func NewOMLO21ObservationSlice(input hl7.HL7Type) []OMLO21Observation {
	values := make([]OMLO21Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO21Observation(input.Index(i))
	}
	return values
}

// NewSIUS16Service creates an implementation of SIUS16Service
func NewSIUS16Service(input hl7.HL7Type) SIUS16Service {
	v := SIUS16Service{}
	v.AppointmentInformation = NewAIS(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS16Service struct {
	AppointmentInformation AIS
	NotesAndComments       []NTE
}

// NewSIUS16ServiceSlice will construct a slice of type SIUS16Service
func NewSIUS16ServiceSlice(input hl7.HL7Type) []SIUS16Service {
	values := make([]SIUS16Service, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS16Service(input.Index(i))
	}
	return values
}

// NewPEXP07AssociatedRxOrder creates an implementation of PEXP07AssociatedRxOrder
func NewPEXP07AssociatedRxOrder(input hl7.HL7Type) PEXP07AssociatedRxOrder {
	v := PEXP07AssociatedRxOrder{}
	v.PharmacyTreatmentEncodedOrder = NewRXE(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.Nk1TimingQty = NewPEXP07Nk1TimingQtySlice(input.Index(2))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(3))
	return v
}

type PEXP07AssociatedRxOrder struct {
	PharmacyTreatmentEncodedOrder RXE
	ParticipationInformation      []PRT
	Nk1TimingQty                  []PEXP07Nk1TimingQty
	PharmacyTreatmentRoute        []RXR
}

// NewPEXP07AssociatedRxOrderSlice will construct a slice of type PEXP07AssociatedRxOrder
func NewPEXP07AssociatedRxOrderSlice(input hl7.HL7Type) []PEXP07AssociatedRxOrder {
	values := make([]PEXP07AssociatedRxOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPEXP07AssociatedRxOrder(input.Index(i))
	}
	return values
}

// NewOMQO42SpecimenObservation creates an implementation of OMQO42SpecimenObservation
func NewOMQO42SpecimenObservation(input hl7.HL7Type) OMQO42SpecimenObservation {
	v := OMQO42SpecimenObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type OMQO42SpecimenObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewOMQO42SpecimenObservationSlice will construct a slice of type OMQO42SpecimenObservation
func NewOMQO42SpecimenObservationSlice(input hl7.HL7Type) []OMQO42SpecimenObservation {
	values := make([]OMQO42SpecimenObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMQO42SpecimenObservation(input.Index(i))
	}
	return values
}

// NewSIUS23Resources creates an implementation of SIUS23Resources
func NewSIUS23Resources(input hl7.HL7Type) SIUS23Resources {
	v := SIUS23Resources{}
	v.ResourceGroup = NewRGS(input.Index(0))
	v.Service = NewSIUS23ServiceSlice(input.Index(1))
	v.GeneralResource = NewSIUS23GeneralResourceSlice(input.Index(2))
	v.LocationResource = NewSIUS23LocationResourceSlice(input.Index(3))
	v.PersonnelResource = NewSIUS23PersonnelResourceSlice(input.Index(4))
	return v
}

type SIUS23Resources struct {
	ResourceGroup     RGS
	Service           []SIUS23Service
	GeneralResource   []SIUS23GeneralResource
	LocationResource  []SIUS23LocationResource
	PersonnelResource []SIUS23PersonnelResource
}

// NewSIUS23ResourcesSlice will construct a slice of type SIUS23Resources
func NewSIUS23ResourcesSlice(input hl7.HL7Type) []SIUS23Resources {
	values := make([]SIUS23Resources, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS23Resources(input.Index(i))
	}
	return values
}

// NewCCUI20AppointmentHistory creates an implementation of CCUI20AppointmentHistory
func NewCCUI20AppointmentHistory(input hl7.HL7Type) CCUI20AppointmentHistory {
	v := CCUI20AppointmentHistory{}
	v.SchedulingActivityInformation = NewSCH(input.Index(0))
	v.Resources = NewCCUI20ResourcesSlice(input.Index(1))
	return v
}

type CCUI20AppointmentHistory struct {
	SchedulingActivityInformation SCH
	Resources                     []CCUI20Resources
}

// NewCCUI20AppointmentHistorySlice will construct a slice of type CCUI20AppointmentHistory
func NewCCUI20AppointmentHistorySlice(input hl7.HL7Type) []CCUI20AppointmentHistory {
	values := make([]CCUI20AppointmentHistory, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCUI20AppointmentHistory(input.Index(i))
	}
	return values
}

// NewSRMS09GeneralResource creates an implementation of SRMS09GeneralResource
func NewSRMS09GeneralResource(input hl7.HL7Type) SRMS09GeneralResource {
	v := SRMS09GeneralResource{}
	v.AppointmentInformationGeneralResource = NewAIG(input.Index(0))
	v.AppointmentPreferences = NewAPR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type SRMS09GeneralResource struct {
	AppointmentInformationGeneralResource AIG
	AppointmentPreferences                APR
	NotesAndComments                      []NTE
}

// NewSRMS09GeneralResourceSlice will construct a slice of type SRMS09GeneralResource
func NewSRMS09GeneralResourceSlice(input hl7.HL7Type) []SRMS09GeneralResource {
	values := make([]SRMS09GeneralResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS09GeneralResource(input.Index(i))
	}
	return values
}

// NewORPO10Response creates an implementation of ORPO10Response
func NewORPO10Response(input hl7.HL7Type) ORPO10Response {
	v := ORPO10Response{}
	v.Patient = NewORPO10Patient(input.Index(0))
	v.Order = NewORPO10OrderSlice(input.Index(1))
	return v
}

type ORPO10Response struct {
	Patient ORPO10Patient
	Order   []ORPO10Order
}

// NewORPO10ResponseSlice will construct a slice of type ORPO10Response
func NewORPO10ResponseSlice(input hl7.HL7Type) []ORPO10Response {
	values := make([]ORPO10Response, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORPO10Response(input.Index(i))
	}
	return values
}

// NewADTA40Patient creates an implementation of ADTA40Patient
func NewADTA40Patient(input hl7.HL7Type) ADTA40Patient {
	v := ADTA40Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.MergePatientInformation = NewMRG(input.Index(2))
	v.PatientVisit = NewPV1(input.Index(3))
	return v
}

type ADTA40Patient struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	MergePatientInformation      MRG
	PatientVisit                 PV1
}

// NewADTA40PatientSlice will construct a slice of type ADTA40Patient
func NewADTA40PatientSlice(input hl7.HL7Type) []ADTA40Patient {
	values := make([]ADTA40Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewADTA40Patient(input.Index(i))
	}
	return values
}

// NewRRII13AuthorizationContact creates an implementation of RRII13AuthorizationContact
func NewRRII13AuthorizationContact(input hl7.HL7Type) RRII13AuthorizationContact {
	v := RRII13AuthorizationContact{}
	v.AuthorizationInformation = NewAUT(input.Index(0))
	v.ContactData = NewCTD(input.Index(1))
	return v
}

type RRII13AuthorizationContact struct {
	AuthorizationInformation AUT
	ContactData              CTD
}

// NewRRII13AuthorizationContactSlice will construct a slice of type RRII13AuthorizationContact
func NewRRII13AuthorizationContactSlice(input hl7.HL7Type) []RRII13AuthorizationContact {
	values := make([]RRII13AuthorizationContact, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRRII13AuthorizationContact(input.Index(i))
	}
	return values
}

// NewOMLO35SpecimenObservation creates an implementation of OMLO35SpecimenObservation
func NewOMLO35SpecimenObservation(input hl7.HL7Type) OMLO35SpecimenObservation {
	v := OMLO35SpecimenObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type OMLO35SpecimenObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewOMLO35SpecimenObservationSlice will construct a slice of type OMLO35SpecimenObservation
func NewOMLO35SpecimenObservationSlice(input hl7.HL7Type) []OMLO35SpecimenObservation {
	values := make([]OMLO35SpecimenObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO35SpecimenObservation(input.Index(i))
	}
	return values
}

// NewCCII22Problem creates an implementation of CCII22Problem
func NewCCII22Problem(input hl7.HL7Type) CCII22Problem {
	v := CCII22Problem{}
	v.ProblemDetails = NewPRB(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	v.RoleProblem = NewCCII22RoleProblemSlice(input.Index(2))
	v.ObservationResult = NewOBXSlice(input.Index(3))
	return v
}

type CCII22Problem struct {
	ProblemDetails    PRB
	Variance          []VAR
	RoleProblem       []CCII22RoleProblem
	ObservationResult []OBX
}

// NewCCII22ProblemSlice will construct a slice of type CCII22Problem
func NewCCII22ProblemSlice(input hl7.HL7Type) []CCII22Problem {
	values := make([]CCII22Problem, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCII22Problem(input.Index(i))
	}
	return values
}

// NewORNO08Order creates an implementation of ORNO08Order
func NewORNO08Order(input hl7.HL7Type) ORNO08Order {
	v := ORNO08Order{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.Timing = NewORNO08TimingSlice(input.Index(2))
	v.RequisitionDetail = NewRQD(input.Index(3))
	v.RequisitionDetail1 = NewRQ1(input.Index(4))
	v.NotesAndComments = NewNTESlice(input.Index(5))
	return v
}

type ORNO08Order struct {
	CommonOrder              ORC
	ParticipationInformation []PRT
	Timing                   []ORNO08Timing
	RequisitionDetail        RQD
	RequisitionDetail1       RQ1
	NotesAndComments         []NTE
}

// NewORNO08OrderSlice will construct a slice of type ORNO08Order
func NewORNO08OrderSlice(input hl7.HL7Type) []ORNO08Order {
	values := make([]ORNO08Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORNO08Order(input.Index(i))
	}
	return values
}

// NewPPPPCDProblem creates an implementation of PPPPCDProblem
func NewPPPPCDProblem(input hl7.HL7Type) PPPPCDProblem {
	v := PPPPCDProblem{}
	v.ProblemDetails = NewPRB(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Variance = NewVARSlice(input.Index(2))
	v.ProblemRole = NewPPPPCDProblemRoleSlice(input.Index(3))
	v.ProblemObservation = NewPPPPCDProblemObservationSlice(input.Index(4))
	v.Goal = NewPPPPCDGoalSlice(input.Index(5))
	v.Order = NewPPPPCDOrderSlice(input.Index(6))
	return v
}

type PPPPCDProblem struct {
	ProblemDetails     PRB
	NotesAndComments   []NTE
	Variance           []VAR
	ProblemRole        []PPPPCDProblemRole
	ProblemObservation []PPPPCDProblemObservation
	Goal               []PPPPCDGoal
	Order              []PPPPCDOrder
}

// NewPPPPCDProblemSlice will construct a slice of type PPPPCDProblem
func NewPPPPCDProblemSlice(input hl7.HL7Type) []PPPPCDProblem {
	values := make([]PPPPCDProblem, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPPPCDProblem(input.Index(i))
	}
	return values
}

// NewCSUC10RxAdmin creates an implementation of CSUC10RxAdmin
func NewCSUC10RxAdmin(input hl7.HL7Type) CSUC10RxAdmin {
	v := CSUC10RxAdmin{}
	v.PharmacyTreatmentAdministration = NewRXA(input.Index(0))
	v.PharmacyTreatmentRoute = NewRXR(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	return v
}

type CSUC10RxAdmin struct {
	PharmacyTreatmentAdministration RXA
	PharmacyTreatmentRoute          RXR
	ParticipationInformation        []PRT
}

// NewCSUC10RxAdminSlice will construct a slice of type CSUC10RxAdmin
func NewCSUC10RxAdminSlice(input hl7.HL7Type) []CSUC10RxAdmin {
	values := make([]CSUC10RxAdmin, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCSUC10RxAdmin(input.Index(i))
	}
	return values
}

// NewSRMS08PersonnelResource creates an implementation of SRMS08PersonnelResource
func NewSRMS08PersonnelResource(input hl7.HL7Type) SRMS08PersonnelResource {
	v := SRMS08PersonnelResource{}
	v.AppointmentInformationPersonnelResource = NewAIP(input.Index(0))
	v.AppointmentPreferences = NewAPR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type SRMS08PersonnelResource struct {
	AppointmentInformationPersonnelResource AIP
	AppointmentPreferences                  APR
	NotesAndComments                        []NTE
}

// NewSRMS08PersonnelResourceSlice will construct a slice of type SRMS08PersonnelResource
func NewSRMS08PersonnelResourceSlice(input hl7.HL7Type) []SRMS08PersonnelResource {
	values := make([]SRMS08PersonnelResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS08PersonnelResource(input.Index(i))
	}
	return values
}

// NewEHCE24PslItemInfo creates an implementation of EHCE24PslItemInfo
func NewEHCE24PslItemInfo(input hl7.HL7Type) EHCE24PslItemInfo {
	v := EHCE24PslItemInfo{}
	v.ProductServiceLineItem = NewPSL(input.Index(0))
	v.AuthorizationInformation = NewAUT(input.Index(1))
	v.Adjustment = NewADJSlice(input.Index(2))
	return v
}

type EHCE24PslItemInfo struct {
	ProductServiceLineItem   PSL
	AuthorizationInformation AUT
	Adjustment               []ADJ
}

// NewEHCE24PslItemInfoSlice will construct a slice of type EHCE24PslItemInfo
func NewEHCE24PslItemInfoSlice(input hl7.HL7Type) []EHCE24PslItemInfo {
	values := make([]EHCE24PslItemInfo, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewEHCE24PslItemInfo(input.Index(i))
	}
	return values
}

// NewORNO08Response creates an implementation of ORNO08Response
func NewORNO08Response(input hl7.HL7Type) ORNO08Response {
	v := ORNO08Response{}
	v.Patient = NewORNO08Patient(input.Index(0))
	v.Order = NewORNO08OrderSlice(input.Index(1))
	return v
}

type ORNO08Response struct {
	Patient ORNO08Patient
	Order   []ORNO08Order
}

// NewORNO08ResponseSlice will construct a slice of type ORNO08Response
func NewORNO08ResponseSlice(input hl7.HL7Type) []ORNO08Response {
	values := make([]ORNO08Response, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORNO08Response(input.Index(i))
	}
	return values
}

// NewCQUI19RoleGoalObject creates an implementation of CQUI19RoleGoalObject
func NewCQUI19RoleGoalObject(input hl7.HL7Type) CQUI19RoleGoalObject {
	v := CQUI19RoleGoalObject{}
	v.Role = NewROL(input.Index(0))
	v.ProviderData = NewPRD(input.Index(1))
	return v
}

type CQUI19RoleGoalObject struct {
	Role         ROL
	ProviderData PRD
}

// NewCQUI19RoleGoalObjectSlice will construct a slice of type CQUI19RoleGoalObject
func NewCQUI19RoleGoalObjectSlice(input hl7.HL7Type) []CQUI19RoleGoalObject {
	values := make([]CQUI19RoleGoalObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCQUI19RoleGoalObject(input.Index(i))
	}
	return values
}

// NewPPPPCBPatientVisit creates an implementation of PPPPCBPatientVisit
func NewPPPPCBPatientVisit(input hl7.HL7Type) PPPPCBPatientVisit {
	v := PPPPCBPatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	return v
}

type PPPPCBPatientVisit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
}

// NewPPPPCBPatientVisitSlice will construct a slice of type PPPPCBPatientVisit
func NewPPPPCBPatientVisitSlice(input hl7.HL7Type) []PPPPCBPatientVisit {
	values := make([]PPPPCBPatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPPPCBPatientVisit(input.Index(i))
	}
	return values
}

// NewMFNM11MfTestCalculated creates an implementation of MFNM11MfTestCalculated
func NewMFNM11MfTestCalculated(input hl7.HL7Type) MFNM11MfTestCalculated {
	v := MFNM11MfTestCalculated{}
	v.MasterFileEntry = NewMFE(input.Index(0))
	v.GeneralSegment = NewOM1(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.MfTestCalcDetail = NewMFNM11MfTestCalcDetail(input.Index(3))
	return v
}

type MFNM11MfTestCalculated struct {
	MasterFileEntry          MFE
	GeneralSegment           OM1
	ParticipationInformation []PRT
	MfTestCalcDetail         MFNM11MfTestCalcDetail
}

// NewMFNM11MfTestCalculatedSlice will construct a slice of type MFNM11MfTestCalculated
func NewMFNM11MfTestCalculatedSlice(input hl7.HL7Type) []MFNM11MfTestCalculated {
	values := make([]MFNM11MfTestCalculated, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMFNM11MfTestCalculated(input.Index(i))
	}
	return values
}

// NewSRRS10Service creates an implementation of SRRS10Service
func NewSRRS10Service(input hl7.HL7Type) SRRS10Service {
	v := SRRS10Service{}
	v.AppointmentInformation = NewAIS(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SRRS10Service struct {
	AppointmentInformation AIS
	NotesAndComments       []NTE
}

// NewSRRS10ServiceSlice will construct a slice of type SRRS10Service
func NewSRRS10ServiceSlice(input hl7.HL7Type) []SRRS10Service {
	values := make([]SRRS10Service, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS10Service(input.Index(i))
	}
	return values
}

// NewCQUI19RoleProblem creates an implementation of CQUI19RoleProblem
func NewCQUI19RoleProblem(input hl7.HL7Type) CQUI19RoleProblem {
	v := CQUI19RoleProblem{}
	v.RoleProblemObject = NewCQUI19RoleProblemObject(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type CQUI19RoleProblem struct {
	RoleProblemObject CQUI19RoleProblemObject
	Variance          []VAR
}

// NewCQUI19RoleProblemSlice will construct a slice of type CQUI19RoleProblem
func NewCQUI19RoleProblemSlice(input hl7.HL7Type) []CQUI19RoleProblem {
	values := make([]CQUI19RoleProblem, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCQUI19RoleProblem(input.Index(i))
	}
	return values
}

// NewPPPPCDGoalObservation creates an implementation of PPPPCDGoalObservation
func NewPPPPCDGoalObservation(input hl7.HL7Type) PPPPCDGoalObservation {
	v := PPPPCDGoalObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type PPPPCDGoalObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewPPPPCDGoalObservationSlice will construct a slice of type PPPPCDGoalObservation
func NewPPPPCDGoalObservationSlice(input hl7.HL7Type) []PPPPCDGoalObservation {
	values := make([]PPPPCDGoalObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPPPCDGoalObservation(input.Index(i))
	}
	return values
}

// NewSIUS27Service creates an implementation of SIUS27Service
func NewSIUS27Service(input hl7.HL7Type) SIUS27Service {
	v := SIUS27Service{}
	v.AppointmentInformation = NewAIS(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS27Service struct {
	AppointmentInformation AIS
	NotesAndComments       []NTE
}

// NewSIUS27ServiceSlice will construct a slice of type SIUS27Service
func NewSIUS27ServiceSlice(input hl7.HL7Type) []SIUS27Service {
	values := make([]SIUS27Service, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS27Service(input.Index(i))
	}
	return values
}

// NewSRMS02Patient creates an implementation of SRMS02Patient
func NewSRMS02Patient(input hl7.HL7Type) SRMS02Patient {
	v := SRMS02Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientVisit = NewPV1(input.Index(1))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(2))
	v.Observation = NewSRMS02ObservationSlice(input.Index(3))
	v.Diagnosis = NewDG1Slice(input.Index(4))
	return v
}

type SRMS02Patient struct {
	PatientIdentification             PID
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	Observation                       []SRMS02Observation
	Diagnosis                         []DG1
}

// NewSRMS02PatientSlice will construct a slice of type SRMS02Patient
func NewSRMS02PatientSlice(input hl7.HL7Type) []SRMS02Patient {
	values := make([]SRMS02Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS02Patient(input.Index(i))
	}
	return values
}

// NewPPGPCGProblemRole creates an implementation of PPGPCGProblemRole
func NewPPGPCGProblemRole(input hl7.HL7Type) PPGPCGProblemRole {
	v := PPGPCGProblemRole{}
	v.Role = NewROL(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type PPGPCGProblemRole struct {
	Role     ROL
	Variance []VAR
}

// NewPPGPCGProblemRoleSlice will construct a slice of type PPGPCGProblemRole
func NewPPGPCGProblemRoleSlice(input hl7.HL7Type) []PPGPCGProblemRole {
	values := make([]PPGPCGProblemRole, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPGPCGProblemRole(input.Index(i))
	}
	return values
}

// NewPPGPCGOrderObservation creates an implementation of PPGPCGOrderObservation
func NewPPGPCGOrderObservation(input hl7.HL7Type) PPGPCGOrderObservation {
	v := PPGPCGOrderObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.Variance = NewVARSlice(input.Index(3))
	return v
}

type PPGPCGOrderObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
	Variance                 []VAR
}

// NewPPGPCGOrderObservationSlice will construct a slice of type PPGPCGOrderObservation
func NewPPGPCGOrderObservationSlice(input hl7.HL7Type) []PPGPCGOrderObservation {
	values := make([]PPGPCGOrderObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPGPCGOrderObservation(input.Index(i))
	}
	return values
}

// NewCCRI18RoleGoalObject creates an implementation of CCRI18RoleGoalObject
func NewCCRI18RoleGoalObject(input hl7.HL7Type) CCRI18RoleGoalObject {
	v := CCRI18RoleGoalObject{}
	v.Role = NewROL(input.Index(0))
	v.ProviderData = NewPRD(input.Index(1))
	return v
}

type CCRI18RoleGoalObject struct {
	Role         ROL
	ProviderData PRD
}

// NewCCRI18RoleGoalObjectSlice will construct a slice of type CCRI18RoleGoalObject
func NewCCRI18RoleGoalObjectSlice(input hl7.HL7Type) []CCRI18RoleGoalObject {
	values := make([]CCRI18RoleGoalObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI18RoleGoalObject(input.Index(i))
	}
	return values
}

// NewOSUO41OrderStatus creates an implementation of OSUO41OrderStatus
func NewOSUO41OrderStatus(input hl7.HL7Type) OSUO41OrderStatus {
	v := OSUO41OrderStatus{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type OSUO41OrderStatus struct {
	CommonOrder              ORC
	ParticipationInformation []PRT
}

// NewOSUO41OrderStatusSlice will construct a slice of type OSUO41OrderStatus
func NewOSUO41OrderStatusSlice(input hl7.HL7Type) []OSUO41OrderStatus {
	values := make([]OSUO41OrderStatus, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOSUO41OrderStatus(input.Index(i))
	}
	return values
}

// NewCCRI16ResourceObservation creates an implementation of CCRI16ResourceObservation
func NewCCRI16ResourceObservation(input hl7.HL7Type) CCRI16ResourceObservation {
	v := CCRI16ResourceObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CCRI16ResourceObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewCCRI16ResourceObservationSlice will construct a slice of type CCRI16ResourceObservation
func NewCCRI16ResourceObservationSlice(input hl7.HL7Type) []CCRI16ResourceObservation {
	values := make([]CCRI16ResourceObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI16ResourceObservation(input.Index(i))
	}
	return values
}

// NewPEXP08RxOrder creates an implementation of PEXP08RxOrder
func NewPEXP08RxOrder(input hl7.HL7Type) PEXP08RxOrder {
	v := PEXP08RxOrder{}
	v.PharmacyTreatmentEncodedOrder = NewRXE(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.TimingQty = NewPEXP08TimingQtySlice(input.Index(2))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(3))
	return v
}

type PEXP08RxOrder struct {
	PharmacyTreatmentEncodedOrder RXE
	ParticipationInformation      []PRT
	TimingQty                     []PEXP08TimingQty
	PharmacyTreatmentRoute        []RXR
}

// NewPEXP08RxOrderSlice will construct a slice of type PEXP08RxOrder
func NewPEXP08RxOrderSlice(input hl7.HL7Type) []PEXP08RxOrder {
	values := make([]PEXP08RxOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPEXP08RxOrder(input.Index(i))
	}
	return values
}

// NewMDMT05Timing creates an implementation of MDMT05Timing
func NewMDMT05Timing(input hl7.HL7Type) MDMT05Timing {
	v := MDMT05Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type MDMT05Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewMDMT05TimingSlice will construct a slice of type MDMT05Timing
func NewMDMT05TimingSlice(input hl7.HL7Type) []MDMT05Timing {
	values := make([]MDMT05Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMDMT05Timing(input.Index(i))
	}
	return values
}

// NewRSPE22QueryAck creates an implementation of RSPE22QueryAck
func NewRSPE22QueryAck(input hl7.HL7Type) RSPE22QueryAck {
	v := RSPE22QueryAck{}
	v.QueryAcknowledgment = NewQAK(input.Index(0))
	v.QueryParameterDefinition = NewQPD(input.Index(1))
	v.AuthorizationInfo = NewRSPE22AuthorizationInfo(input.Index(2))
	return v
}

type RSPE22QueryAck struct {
	QueryAcknowledgment      QAK
	QueryParameterDefinition QPD
	AuthorizationInfo        RSPE22AuthorizationInfo
}

// NewRSPE22QueryAckSlice will construct a slice of type RSPE22QueryAck
func NewRSPE22QueryAckSlice(input hl7.HL7Type) []RSPE22QueryAck {
	values := make([]RSPE22QueryAck, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPE22QueryAck(input.Index(i))
	}
	return values
}

// NewOPLO37Guarantor creates an implementation of OPLO37Guarantor
func NewOPLO37Guarantor(input hl7.HL7Type) OPLO37Guarantor {
	v := OPLO37Guarantor{}
	v.Guarantor = NewGT1(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type OPLO37Guarantor struct {
	Guarantor        GT1
	NotesAndComments []NTE
}

// NewOPLO37GuarantorSlice will construct a slice of type OPLO37Guarantor
func NewOPLO37GuarantorSlice(input hl7.HL7Type) []OPLO37Guarantor {
	values := make([]OPLO37Guarantor, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOPLO37Guarantor(input.Index(i))
	}
	return values
}

// NewBARP05Visit creates an implementation of BARP05Visit
func NewBARP05Visit(input hl7.HL7Type) BARP05Visit {
	v := BARP05Visit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.Role = NewROLSlice(input.Index(3))
	v.Disability = NewDB1Slice(input.Index(4))
	v.ObservationResult = NewOBXSlice(input.Index(5))
	v.PatientAllergyInformation = NewAL1Slice(input.Index(6))
	v.Diagnosis = NewDG1Slice(input.Index(7))
	v.DiagnosisRelatedGroup = NewDRG(input.Index(8))
	v.Procedure = NewBARP05ProcedureSlice(input.Index(9))
	v.Guarantor = NewGT1Slice(input.Index(10))
	v.NextOfKinAssociatedParties = NewNK1Slice(input.Index(11))
	v.Insurance = NewBARP05InsuranceSlice(input.Index(12))
	v.Accident = NewACC(input.Index(13))
	v.Ub82 = NewUB1(input.Index(14))
	v.UniformBillingData = NewUB2(input.Index(15))
	v.Abstract = NewABS(input.Index(16))
	v.BloodCode = NewBLCSlice(input.Index(17))
	v.RiskManagementIncident = NewRMI(input.Index(18))
	return v
}

type BARP05Visit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ParticipationInformation          []PRT
	Role                              []ROL
	Disability                        []DB1
	ObservationResult                 []OBX
	PatientAllergyInformation         []AL1
	Diagnosis                         []DG1
	DiagnosisRelatedGroup             DRG
	Procedure                         []BARP05Procedure
	Guarantor                         []GT1
	NextOfKinAssociatedParties        []NK1
	Insurance                         []BARP05Insurance
	Accident                          ACC
	Ub82                              UB1
	UniformBillingData                UB2
	Abstract                          ABS
	BloodCode                         []BLC
	RiskManagementIncident            RMI
}

// NewBARP05VisitSlice will construct a slice of type BARP05Visit
func NewBARP05VisitSlice(input hl7.HL7Type) []BARP05Visit {
	values := make([]BARP05Visit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewBARP05Visit(input.Index(i))
	}
	return values
}

// NewDBCO41Donnor creates an implementation of DBCO41Donnor
func NewDBCO41Donnor(input hl7.HL7Type) DBCO41Donnor {
	v := DBCO41Donnor{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.ObservationResult = NewOBXSlice(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	v.AccessRestriction = NewARVSlice(input.Index(4))
	v.PatientAllergyInformation = NewAL1Slice(input.Index(5))
	return v
}

type DBCO41Donnor struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	ObservationResult            []OBX
	NotesAndComments             []NTE
	AccessRestriction            []ARV
	PatientAllergyInformation    []AL1
}

// NewDBCO41DonnorSlice will construct a slice of type DBCO41Donnor
func NewDBCO41DonnorSlice(input hl7.HL7Type) []DBCO41Donnor {
	values := make([]DBCO41Donnor, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewDBCO41Donnor(input.Index(i))
	}
	return values
}

// NewPGLPC7Goal creates an implementation of PGLPC7Goal
func NewPGLPC7Goal(input hl7.HL7Type) PGLPC7Goal {
	v := PGLPC7Goal{}
	v.GoalDetail = NewGOL(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Variance = NewVARSlice(input.Index(2))
	v.GoalRole = NewPGLPC7GoalRoleSlice(input.Index(3))
	v.Pathway = NewPGLPC7PathwaySlice(input.Index(4))
	v.Observation = NewPGLPC7ObservationSlice(input.Index(5))
	v.Problem = NewPGLPC7ProblemSlice(input.Index(6))
	v.Order = NewPGLPC7OrderSlice(input.Index(7))
	return v
}

type PGLPC7Goal struct {
	GoalDetail       GOL
	NotesAndComments []NTE
	Variance         []VAR
	GoalRole         []PGLPC7GoalRole
	Pathway          []PGLPC7Pathway
	Observation      []PGLPC7Observation
	Problem          []PGLPC7Problem
	Order            []PGLPC7Order
}

// NewPGLPC7GoalSlice will construct a slice of type PGLPC7Goal
func NewPGLPC7GoalSlice(input hl7.HL7Type) []PGLPC7Goal {
	values := make([]PGLPC7Goal, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPGLPC7Goal(input.Index(i))
	}
	return values
}

// NewRPAI11Insurance creates an implementation of RPAI11Insurance
func NewRPAI11Insurance(input hl7.HL7Type) RPAI11Insurance {
	v := RPAI11Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3(input.Index(2))
	return v
}

type RPAI11Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification IN3
}

// NewRPAI11InsuranceSlice will construct a slice of type RPAI11Insurance
func NewRPAI11InsuranceSlice(input hl7.HL7Type) []RPAI11Insurance {
	values := make([]RPAI11Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRPAI11Insurance(input.Index(i))
	}
	return values
}

// NewRSPZ88OrderDetail creates an implementation of RSPZ88OrderDetail
func NewRSPZ88OrderDetail(input hl7.HL7Type) RSPZ88OrderDetail {
	v := RSPZ88OrderDetail{}
	v.PharmacyTreatmentOrder = NewRXO(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(2))
	v.Component = NewRSPZ88Component(input.Index(3))
	return v
}

type RSPZ88OrderDetail struct {
	PharmacyTreatmentOrder RXO
	NotesAndComments       []NTE
	PharmacyTreatmentRoute []RXR
	Component              RSPZ88Component
}

// NewRSPZ88OrderDetailSlice will construct a slice of type RSPZ88OrderDetail
func NewRSPZ88OrderDetailSlice(input hl7.HL7Type) []RSPZ88OrderDetail {
	values := make([]RSPZ88OrderDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPZ88OrderDetail(input.Index(i))
	}
	return values
}

// NewSRMS03LocationResource creates an implementation of SRMS03LocationResource
func NewSRMS03LocationResource(input hl7.HL7Type) SRMS03LocationResource {
	v := SRMS03LocationResource{}
	v.AppointmentInformationLocationResource = NewAIL(input.Index(0))
	v.AppointmentPreferences = NewAPR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type SRMS03LocationResource struct {
	AppointmentInformationLocationResource AIL
	AppointmentPreferences                 APR
	NotesAndComments                       []NTE
}

// NewSRMS03LocationResourceSlice will construct a slice of type SRMS03LocationResource
func NewSRMS03LocationResourceSlice(input hl7.HL7Type) []SRMS03LocationResource {
	values := make([]SRMS03LocationResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS03LocationResource(input.Index(i))
	}
	return values
}

// NewSIUS12PersonnelResource creates an implementation of SIUS12PersonnelResource
func NewSIUS12PersonnelResource(input hl7.HL7Type) SIUS12PersonnelResource {
	v := SIUS12PersonnelResource{}
	v.AppointmentInformationPersonnelResource = NewAIP(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS12PersonnelResource struct {
	AppointmentInformationPersonnelResource AIP
	NotesAndComments                        []NTE
}

// NewSIUS12PersonnelResourceSlice will construct a slice of type SIUS12PersonnelResource
func NewSIUS12PersonnelResourceSlice(input hl7.HL7Type) []SIUS12PersonnelResource {
	values := make([]SIUS12PersonnelResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS12PersonnelResource(input.Index(i))
	}
	return values
}

// NewRSPZ86Administration creates an implementation of RSPZ86Administration
func NewRSPZ86Administration(input hl7.HL7Type) RSPZ86Administration {
	v := RSPZ86Administration{}
	v.PharmacyTreatmentAdministration = NewRXA(input.Index(0))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(1))
	v.PharmacyTreatmentComponentOrder = NewRXCSlice(input.Index(2))
	return v
}

type RSPZ86Administration struct {
	PharmacyTreatmentAdministration RXA
	PharmacyTreatmentRoute          []RXR
	PharmacyTreatmentComponentOrder []RXC
}

// NewRSPZ86AdministrationSlice will construct a slice of type RSPZ86Administration
func NewRSPZ86AdministrationSlice(input hl7.HL7Type) []RSPZ86Administration {
	values := make([]RSPZ86Administration, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPZ86Administration(input.Index(i))
	}
	return values
}

// NewDFTP03FinancialProcedure creates an implementation of DFTP03FinancialProcedure
func NewDFTP03FinancialProcedure(input hl7.HL7Type) DFTP03FinancialProcedure {
	v := DFTP03FinancialProcedure{}
	v.Procedures = NewPR1(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.Role = NewROLSlice(input.Index(2))
	return v
}

type DFTP03FinancialProcedure struct {
	Procedures               PR1
	ParticipationInformation []PRT
	Role                     []ROL
}

// NewDFTP03FinancialProcedureSlice will construct a slice of type DFTP03FinancialProcedure
func NewDFTP03FinancialProcedureSlice(input hl7.HL7Type) []DFTP03FinancialProcedure {
	values := make([]DFTP03FinancialProcedure, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewDFTP03FinancialProcedure(input.Index(i))
	}
	return values
}

// NewOMQO42PatientVisitPrior creates an implementation of OMQO42PatientVisitPrior
func NewOMQO42PatientVisitPrior(input hl7.HL7Type) OMQO42PatientVisitPrior {
	v := OMQO42PatientVisitPrior{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	return v
}

type OMQO42PatientVisitPrior struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ParticipationInformation          []PRT
}

// NewOMQO42PatientVisitPriorSlice will construct a slice of type OMQO42PatientVisitPrior
func NewOMQO42PatientVisitPriorSlice(input hl7.HL7Type) []OMQO42PatientVisitPrior {
	values := make([]OMQO42PatientVisitPrior, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMQO42PatientVisitPrior(input.Index(i))
	}
	return values
}

// NewREFI14AuthorizationContact2 creates an implementation of REFI14AuthorizationContact2
func NewREFI14AuthorizationContact2(input hl7.HL7Type) REFI14AuthorizationContact2 {
	v := REFI14AuthorizationContact2{}
	v.AuthorizationInformation = NewAUT(input.Index(0))
	v.ContactData = NewCTD(input.Index(1))
	return v
}

type REFI14AuthorizationContact2 struct {
	AuthorizationInformation AUT
	ContactData              CTD
}

// NewREFI14AuthorizationContact2Slice will construct a slice of type REFI14AuthorizationContact2
func NewREFI14AuthorizationContact2Slice(input hl7.HL7Type) []REFI14AuthorizationContact2 {
	values := make([]REFI14AuthorizationContact2, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewREFI14AuthorizationContact2(input.Index(i))
	}
	return values
}

// NewSRRS01Schedule creates an implementation of SRRS01Schedule
func NewSRRS01Schedule(input hl7.HL7Type) SRRS01Schedule {
	v := SRRS01Schedule{}
	v.TimingQuantity = NewTQ1Slice(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Patient = NewSRRS01PatientSlice(input.Index(2))
	v.Resources = NewSRRS01ResourcesSlice(input.Index(3))
	return v
}

type SRRS01Schedule struct {
	TimingQuantity   []TQ1
	NotesAndComments []NTE
	Patient          []SRRS01Patient
	Resources        []SRRS01Resources
}

// NewSRRS01ScheduleSlice will construct a slice of type SRRS01Schedule
func NewSRRS01ScheduleSlice(input hl7.HL7Type) []SRRS01Schedule {
	values := make([]SRRS01Schedule, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS01Schedule(input.Index(i))
	}
	return values
}

// NewRRII12Procedure creates an implementation of RRII12Procedure
func NewRRII12Procedure(input hl7.HL7Type) RRII12Procedure {
	v := RRII12Procedure{}
	v.Procedures = NewPR1(input.Index(0))
	v.AuthorizationContact2 = NewRRII12AuthorizationContact2(input.Index(1))
	return v
}

type RRII12Procedure struct {
	Procedures            PR1
	AuthorizationContact2 RRII12AuthorizationContact2
}

// NewRRII12ProcedureSlice will construct a slice of type RRII12Procedure
func NewRRII12ProcedureSlice(input hl7.HL7Type) []RRII12Procedure {
	values := make([]RRII12Procedure, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRRII12Procedure(input.Index(i))
	}
	return values
}

// NewCCMI21RoleClinicalHistory creates an implementation of CCMI21RoleClinicalHistory
func NewCCMI21RoleClinicalHistory(input hl7.HL7Type) CCMI21RoleClinicalHistory {
	v := CCMI21RoleClinicalHistory{}
	v.RoleClinicalHistoryObject = NewCCMI21RoleClinicalHistoryObject(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type CCMI21RoleClinicalHistory struct {
	RoleClinicalHistoryObject CCMI21RoleClinicalHistoryObject
	Variance                  []VAR
}

// NewCCMI21RoleClinicalHistorySlice will construct a slice of type CCMI21RoleClinicalHistory
func NewCCMI21RoleClinicalHistorySlice(input hl7.HL7Type) []CCMI21RoleClinicalHistory {
	values := make([]CCMI21RoleClinicalHistory, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCMI21RoleClinicalHistory(input.Index(i))
	}
	return values
}

// NewSRRS04Service creates an implementation of SRRS04Service
func NewSRRS04Service(input hl7.HL7Type) SRRS04Service {
	v := SRRS04Service{}
	v.AppointmentInformation = NewAIS(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SRRS04Service struct {
	AppointmentInformation AIS
	NotesAndComments       []NTE
}

// NewSRRS04ServiceSlice will construct a slice of type SRRS04Service
func NewSRRS04ServiceSlice(input hl7.HL7Type) []SRRS04Service {
	values := make([]SRRS04Service, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS04Service(input.Index(i))
	}
	return values
}

// NewOULR22TimingQty creates an implementation of OULR22TimingQty
func NewOULR22TimingQty(input hl7.HL7Type) OULR22TimingQty {
	v := OULR22TimingQty{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type OULR22TimingQty struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewOULR22TimingQtySlice will construct a slice of type OULR22TimingQty
func NewOULR22TimingQtySlice(input hl7.HL7Type) []OULR22TimingQty {
	values := make([]OULR22TimingQty, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOULR22TimingQty(input.Index(i))
	}
	return values
}

// NewOPRO38Order creates an implementation of OPRO38Order
func NewOPRO38Order(input hl7.HL7Type) OPRO38Order {
	v := OPRO38Order{}
	v.NextOfKinAssociatedParties = NewNK1Slice(input.Index(0))
	v.PatientIdentification = NewPID(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.AccessRestriction = NewARVSlice(input.Index(3))
	v.Specimen = NewOPRO38SpecimenSlice(input.Index(4))
	return v
}

type OPRO38Order struct {
	NextOfKinAssociatedParties []NK1
	PatientIdentification      PID
	ParticipationInformation   []PRT
	AccessRestriction          []ARV
	Specimen                   []OPRO38Specimen
}

// NewOPRO38OrderSlice will construct a slice of type OPRO38Order
func NewOPRO38OrderSlice(input hl7.HL7Type) []OPRO38Order {
	values := make([]OPRO38Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOPRO38Order(input.Index(i))
	}
	return values
}

// NewRSPZ90QueryResponse creates an implementation of RSPZ90QueryResponse
func NewRSPZ90QueryResponse(input hl7.HL7Type) RSPZ90QueryResponse {
	v := RSPZ90QueryResponse{}
	v.Patient = NewRSPZ90Patient(input.Index(0))
	v.CommonOrder = NewRSPZ90CommonOrderSlice(input.Index(1))
	v.Specimen = NewRSPZ90SpecimenSlice(input.Index(2))
	return v
}

type RSPZ90QueryResponse struct {
	Patient     RSPZ90Patient
	CommonOrder []RSPZ90CommonOrder
	Specimen    []RSPZ90Specimen
}

// NewRSPZ90QueryResponseSlice will construct a slice of type RSPZ90QueryResponse
func NewRSPZ90QueryResponseSlice(input hl7.HL7Type) []RSPZ90QueryResponse {
	values := make([]RSPZ90QueryResponse, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPZ90QueryResponse(input.Index(i))
	}
	return values
}

// NewCCRI18AppointmentHistory creates an implementation of CCRI18AppointmentHistory
func NewCCRI18AppointmentHistory(input hl7.HL7Type) CCRI18AppointmentHistory {
	v := CCRI18AppointmentHistory{}
	v.SchedulingActivityInformation = NewSCH(input.Index(0))
	v.Resources = NewCCRI18ResourcesSlice(input.Index(1))
	return v
}

type CCRI18AppointmentHistory struct {
	SchedulingActivityInformation SCH
	Resources                     []CCRI18Resources
}

// NewCCRI18AppointmentHistorySlice will construct a slice of type CCRI18AppointmentHistory
func NewCCRI18AppointmentHistorySlice(input hl7.HL7Type) []CCRI18AppointmentHistory {
	values := make([]CCRI18AppointmentHistory, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI18AppointmentHistory(input.Index(i))
	}
	return values
}

// NewPGLPC6OrderObservation creates an implementation of PGLPC6OrderObservation
func NewPGLPC6OrderObservation(input hl7.HL7Type) PGLPC6OrderObservation {
	v := PGLPC6OrderObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.Variance = NewVARSlice(input.Index(3))
	return v
}

type PGLPC6OrderObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
	Variance                 []VAR
}

// NewPGLPC6OrderObservationSlice will construct a slice of type PGLPC6OrderObservation
func NewPGLPC6OrderObservationSlice(input hl7.HL7Type) []PGLPC6OrderObservation {
	values := make([]PGLPC6OrderObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPGLPC6OrderObservation(input.Index(i))
	}
	return values
}

// NewMDMT05CommonOrder creates an implementation of MDMT05CommonOrder
func NewMDMT05CommonOrder(input hl7.HL7Type) MDMT05CommonOrder {
	v := MDMT05CommonOrder{}
	v.CommonOrder = NewORC(input.Index(0))
	v.Timing = NewMDMT05TimingSlice(input.Index(1))
	v.ObservationRequest = NewOBR(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	return v
}

type MDMT05CommonOrder struct {
	CommonOrder        ORC
	Timing             []MDMT05Timing
	ObservationRequest OBR
	NotesAndComments   []NTE
}

// NewMDMT05CommonOrderSlice will construct a slice of type MDMT05CommonOrder
func NewMDMT05CommonOrderSlice(input hl7.HL7Type) []MDMT05CommonOrder {
	values := make([]MDMT05CommonOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMDMT05CommonOrder(input.Index(i))
	}
	return values
}

// NewPPGPCJChoice creates an implementation of PPGPCJChoice
func NewPPGPCJChoice(input hl7.HL7Type) PPGPCJChoice {
	v := PPGPCJChoice{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.AnyHl7Segment = NewHxx(input.Index(1))
	return v
}

type PPGPCJChoice struct {
	ObservationRequest OBR
	AnyHl7Segment      Hxx
}

// NewPPGPCJChoiceSlice will construct a slice of type PPGPCJChoice
func NewPPGPCJChoiceSlice(input hl7.HL7Type) []PPGPCJChoice {
	values := make([]PPGPCJChoice, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPGPCJChoice(input.Index(i))
	}
	return values
}

// NewSIUS21GeneralResource creates an implementation of SIUS21GeneralResource
func NewSIUS21GeneralResource(input hl7.HL7Type) SIUS21GeneralResource {
	v := SIUS21GeneralResource{}
	v.AppointmentInformationGeneralResource = NewAIG(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS21GeneralResource struct {
	AppointmentInformationGeneralResource AIG
	NotesAndComments                      []NTE
}

// NewSIUS21GeneralResourceSlice will construct a slice of type SIUS21GeneralResource
func NewSIUS21GeneralResourceSlice(input hl7.HL7Type) []SIUS21GeneralResource {
	values := make([]SIUS21GeneralResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS21GeneralResource(input.Index(i))
	}
	return values
}

// NewADTA31Insurance creates an implementation of ADTA31Insurance
func NewADTA31Insurance(input hl7.HL7Type) ADTA31Insurance {
	v := ADTA31Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3Slice(input.Index(2))
	v.Role = NewROLSlice(input.Index(3))
	v.AuthorizationInformation = NewAUTSlice(input.Index(4))
	v.ReferralInformation = NewRF1Slice(input.Index(5))
	return v
}

type ADTA31Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification []IN3
	Role                                        []ROL
	AuthorizationInformation                    []AUT
	ReferralInformation                         []RF1
}

// NewADTA31InsuranceSlice will construct a slice of type ADTA31Insurance
func NewADTA31InsuranceSlice(input hl7.HL7Type) []ADTA31Insurance {
	values := make([]ADTA31Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewADTA31Insurance(input.Index(i))
	}
	return values
}

// NewCSUC10StudyPhase creates an implementation of CSUC10StudyPhase
func NewCSUC10StudyPhase(input hl7.HL7Type) CSUC10StudyPhase {
	v := CSUC10StudyPhase{}
	v.ClinicalStudyPhase = NewCSP(input.Index(0))
	v.StudySchedule = NewCSUC10StudyScheduleSlice(input.Index(1))
	return v
}

type CSUC10StudyPhase struct {
	ClinicalStudyPhase CSP
	StudySchedule      []CSUC10StudySchedule
}

// NewCSUC10StudyPhaseSlice will construct a slice of type CSUC10StudyPhase
func NewCSUC10StudyPhaseSlice(input hl7.HL7Type) []CSUC10StudyPhase {
	values := make([]CSUC10StudyPhase, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCSUC10StudyPhase(input.Index(i))
	}
	return values
}

// NewCRMC03PatientVisit creates an implementation of CRMC03PatientVisit
func NewCRMC03PatientVisit(input hl7.HL7Type) CRMC03PatientVisit {
	v := CRMC03PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CRMC03PatientVisit struct {
	PatientVisit             PV1
	ParticipationInformation []PRT
}

// NewCRMC03PatientVisitSlice will construct a slice of type CRMC03PatientVisit
func NewCRMC03PatientVisitSlice(input hl7.HL7Type) []CRMC03PatientVisit {
	values := make([]CRMC03PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCRMC03PatientVisit(input.Index(i))
	}
	return values
}

// NewOMLO35Specimen creates an implementation of OMLO35Specimen
func NewOMLO35Specimen(input hl7.HL7Type) OMLO35Specimen {
	v := OMLO35Specimen{}
	v.Specimen = NewSPM(input.Index(0))
	v.SpecimenObservation = NewOMLO35SpecimenObservationSlice(input.Index(1))
	v.SpecimenContainer = NewOMLO35SpecimenContainerSlice(input.Index(2))
	return v
}

type OMLO35Specimen struct {
	Specimen            SPM
	SpecimenObservation []OMLO35SpecimenObservation
	SpecimenContainer   []OMLO35SpecimenContainer
}

// NewOMLO35SpecimenSlice will construct a slice of type OMLO35Specimen
func NewOMLO35SpecimenSlice(input hl7.HL7Type) []OMLO35Specimen {
	values := make([]OMLO35Specimen, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO35Specimen(input.Index(i))
	}
	return values
}

// NewRDEO11TimingEncoded creates an implementation of RDEO11TimingEncoded
func NewRDEO11TimingEncoded(input hl7.HL7Type) RDEO11TimingEncoded {
	v := RDEO11TimingEncoded{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type RDEO11TimingEncoded struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewRDEO11TimingEncodedSlice will construct a slice of type RDEO11TimingEncoded
func NewRDEO11TimingEncodedSlice(input hl7.HL7Type) []RDEO11TimingEncoded {
	values := make([]RDEO11TimingEncoded, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRDEO11TimingEncoded(input.Index(i))
	}
	return values
}

// NewOMLO39Patient creates an implementation of OMLO39Patient
func NewOMLO39Patient(input hl7.HL7Type) OMLO39Patient {
	v := OMLO39Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	v.NextOfKinAssociatedParties = NewNK1Slice(input.Index(4))
	v.AccessRestriction = NewARVSlice(input.Index(5))
	v.PatientVisit = NewOMLO39PatientVisit(input.Index(6))
	v.Insurance = NewOMLO39InsuranceSlice(input.Index(7))
	v.Guarantor = NewGT1(input.Index(8))
	v.PatientAllergyInformation = NewAL1Slice(input.Index(9))
	return v
}

type OMLO39Patient struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	ParticipationInformation     []PRT
	NotesAndComments             []NTE
	NextOfKinAssociatedParties   []NK1
	AccessRestriction            []ARV
	PatientVisit                 OMLO39PatientVisit
	Insurance                    []OMLO39Insurance
	Guarantor                    GT1
	PatientAllergyInformation    []AL1
}

// NewOMLO39PatientSlice will construct a slice of type OMLO39Patient
func NewOMLO39PatientSlice(input hl7.HL7Type) []OMLO39Patient {
	values := make([]OMLO39Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO39Patient(input.Index(i))
	}
	return values
}

// NewRDRRDROrder creates an implementation of RDRRDROrder
func NewRDRRDROrder(input hl7.HL7Type) RDRRDROrder {
	v := RDRRDROrder{}
	v.CommonOrder = NewORC(input.Index(0))
	v.Timing = NewRDRRDRTimingSlice(input.Index(1))
	v.Encoding = NewRDRRDREncoding(input.Index(2))
	v.Dispense = NewRDRRDRDispenseSlice(input.Index(3))
	return v
}

type RDRRDROrder struct {
	CommonOrder ORC
	Timing      []RDRRDRTiming
	Encoding    RDRRDREncoding
	Dispense    []RDRRDRDispense
}

// NewRDRRDROrderSlice will construct a slice of type RDRRDROrder
func NewRDRRDROrderSlice(input hl7.HL7Type) []RDRRDROrder {
	values := make([]RDRRDROrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRDRRDROrder(input.Index(i))
	}
	return values
}

// NewRRDO14Order creates an implementation of RRDO14Order
func NewRRDO14Order(input hl7.HL7Type) RRDO14Order {
	v := RRDO14Order{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.Timing = NewRRDO14TimingSlice(input.Index(2))
	v.Dispense = NewRRDO14Dispense(input.Index(3))
	return v
}

type RRDO14Order struct {
	CommonOrder              ORC
	ParticipationInformation []PRT
	Timing                   []RRDO14Timing
	Dispense                 RRDO14Dispense
}

// NewRRDO14OrderSlice will construct a slice of type RRDO14Order
func NewRRDO14OrderSlice(input hl7.HL7Type) []RRDO14Order {
	values := make([]RRDO14Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRRDO14Order(input.Index(i))
	}
	return values
}

// NewSRMS11Patient creates an implementation of SRMS11Patient
func NewSRMS11Patient(input hl7.HL7Type) SRMS11Patient {
	v := SRMS11Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientVisit = NewPV1(input.Index(1))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(2))
	v.Observation = NewSRMS11ObservationSlice(input.Index(3))
	v.Diagnosis = NewDG1Slice(input.Index(4))
	return v
}

type SRMS11Patient struct {
	PatientIdentification             PID
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	Observation                       []SRMS11Observation
	Diagnosis                         []DG1
}

// NewSRMS11PatientSlice will construct a slice of type SRMS11Patient
func NewSRMS11PatientSlice(input hl7.HL7Type) []SRMS11Patient {
	values := make([]SRMS11Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS11Patient(input.Index(i))
	}
	return values
}

// NewPPPPCBProblemRole creates an implementation of PPPPCBProblemRole
func NewPPPPCBProblemRole(input hl7.HL7Type) PPPPCBProblemRole {
	v := PPPPCBProblemRole{}
	v.Role = NewROL(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type PPPPCBProblemRole struct {
	Role     ROL
	Variance []VAR
}

// NewPPPPCBProblemRoleSlice will construct a slice of type PPPPCBProblemRole
func NewPPPPCBProblemRoleSlice(input hl7.HL7Type) []PPPPCBProblemRole {
	values := make([]PPPPCBProblemRole, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPPPCBProblemRole(input.Index(i))
	}
	return values
}

// NewRDSO13OrderDetail creates an implementation of RDSO13OrderDetail
func NewRDSO13OrderDetail(input hl7.HL7Type) RDSO13OrderDetail {
	v := RDSO13OrderDetail{}
	v.PharmacyTreatmentOrder = NewRXO(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.OrderDetailSupplement = NewRDSO13OrderDetailSupplement(input.Index(2))
	return v
}

type RDSO13OrderDetail struct {
	PharmacyTreatmentOrder   RXO
	ParticipationInformation []PRT
	OrderDetailSupplement    RDSO13OrderDetailSupplement
}

// NewRDSO13OrderDetailSlice will construct a slice of type RDSO13OrderDetail
func NewRDSO13OrderDetailSlice(input hl7.HL7Type) []RDSO13OrderDetail {
	values := make([]RDSO13OrderDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRDSO13OrderDetail(input.Index(i))
	}
	return values
}

// NewRPAI10Authorization1 creates an implementation of RPAI10Authorization1
func NewRPAI10Authorization1(input hl7.HL7Type) RPAI10Authorization1 {
	v := RPAI10Authorization1{}
	v.AuthorizationInformation = NewAUT(input.Index(0))
	v.ContactData = NewCTD(input.Index(1))
	return v
}

type RPAI10Authorization1 struct {
	AuthorizationInformation AUT
	ContactData              CTD
}

// NewRPAI10Authorization1Slice will construct a slice of type RPAI10Authorization1
func NewRPAI10Authorization1Slice(input hl7.HL7Type) []RPAI10Authorization1 {
	values := make([]RPAI10Authorization1, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRPAI10Authorization1(input.Index(i))
	}
	return values
}

// NewSIUS19GeneralResource creates an implementation of SIUS19GeneralResource
func NewSIUS19GeneralResource(input hl7.HL7Type) SIUS19GeneralResource {
	v := SIUS19GeneralResource{}
	v.AppointmentInformationGeneralResource = NewAIG(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS19GeneralResource struct {
	AppointmentInformationGeneralResource AIG
	NotesAndComments                      []NTE
}

// NewSIUS19GeneralResourceSlice will construct a slice of type SIUS19GeneralResource
func NewSIUS19GeneralResourceSlice(input hl7.HL7Type) []SIUS19GeneralResource {
	values := make([]SIUS19GeneralResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS19GeneralResource(input.Index(i))
	}
	return values
}

// NewRPII01Insurance creates an implementation of RPII01Insurance
func NewRPII01Insurance(input hl7.HL7Type) RPII01Insurance {
	v := RPII01Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3(input.Index(2))
	return v
}

type RPII01Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification IN3
}

// NewRPII01InsuranceSlice will construct a slice of type RPII01Insurance
func NewRPII01InsuranceSlice(input hl7.HL7Type) []RPII01Insurance {
	values := make([]RPII01Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRPII01Insurance(input.Index(i))
	}
	return values
}

// NewRQAI08Procedure creates an implementation of RQAI08Procedure
func NewRQAI08Procedure(input hl7.HL7Type) RQAI08Procedure {
	v := RQAI08Procedure{}
	v.Procedures = NewPR1(input.Index(0))
	v.Authorization2 = NewRQAI08Authorization2(input.Index(1))
	return v
}

type RQAI08Procedure struct {
	Procedures     PR1
	Authorization2 RQAI08Authorization2
}

// NewRQAI08ProcedureSlice will construct a slice of type RQAI08Procedure
func NewRQAI08ProcedureSlice(input hl7.HL7Type) []RQAI08Procedure {
	values := make([]RQAI08Procedure, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQAI08Procedure(input.Index(i))
	}
	return values
}

// NewRQII01Insurance creates an implementation of RQII01Insurance
func NewRQII01Insurance(input hl7.HL7Type) RQII01Insurance {
	v := RQII01Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3(input.Index(2))
	return v
}

type RQII01Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification IN3
}

// NewRQII01InsuranceSlice will construct a slice of type RQII01Insurance
func NewRQII01InsuranceSlice(input hl7.HL7Type) []RQII01Insurance {
	values := make([]RQII01Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQII01Insurance(input.Index(i))
	}
	return values
}

// NewCCRI17ClinicalHistoryDetail creates an implementation of CCRI17ClinicalHistoryDetail
func NewCCRI17ClinicalHistoryDetail(input hl7.HL7Type) CCRI17ClinicalHistoryDetail {
	v := CCRI17ClinicalHistoryDetail{}
	v.ClinicalHistoryObject = NewCCRI17ClinicalHistoryObject(input.Index(0))
	v.ClinicalHistoryObservation = NewCCRI17ClinicalHistoryObservationSlice(input.Index(1))
	return v
}

type CCRI17ClinicalHistoryDetail struct {
	ClinicalHistoryObject      CCRI17ClinicalHistoryObject
	ClinicalHistoryObservation []CCRI17ClinicalHistoryObservation
}

// NewCCRI17ClinicalHistoryDetailSlice will construct a slice of type CCRI17ClinicalHistoryDetail
func NewCCRI17ClinicalHistoryDetailSlice(input hl7.HL7Type) []CCRI17ClinicalHistoryDetail {
	values := make([]CCRI17ClinicalHistoryDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI17ClinicalHistoryDetail(input.Index(i))
	}
	return values
}

// NewPEXP08Nk1TimingQty creates an implementation of PEXP08Nk1TimingQty
func NewPEXP08Nk1TimingQty(input hl7.HL7Type) PEXP08Nk1TimingQty {
	v := PEXP08Nk1TimingQty{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type PEXP08Nk1TimingQty struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewPEXP08Nk1TimingQtySlice will construct a slice of type PEXP08Nk1TimingQty
func NewPEXP08Nk1TimingQtySlice(input hl7.HL7Type) []PEXP08Nk1TimingQty {
	values := make([]PEXP08Nk1TimingQty, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPEXP08Nk1TimingQty(input.Index(i))
	}
	return values
}

// NewPPPPCBChoice creates an implementation of PPPPCBChoice
func NewPPPPCBChoice(input hl7.HL7Type) PPPPCBChoice {
	v := PPPPCBChoice{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.AnyHl7Segment = NewHxx(input.Index(1))
	return v
}

type PPPPCBChoice struct {
	ObservationRequest OBR
	AnyHl7Segment      Hxx
}

// NewPPPPCBChoiceSlice will construct a slice of type PPPPCBChoice
func NewPPPPCBChoiceSlice(input hl7.HL7Type) []PPPPCBChoice {
	values := make([]PPPPCBChoice, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPPPCBChoice(input.Index(i))
	}
	return values
}

// NewRSPK34Donnation creates an implementation of RSPK34Donnation
func NewRSPK34Donnation(input hl7.HL7Type) RSPK34Donnation {
	v := RSPK34Donnation{}
	v.DonationSegment = NewDON(input.Index(0))
	v.ObservationResult = NewOBXSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type RSPK34Donnation struct {
	DonationSegment   DON
	ObservationResult []OBX
	NotesAndComments  []NTE
}

// NewRSPK34DonnationSlice will construct a slice of type RSPK34Donnation
func NewRSPK34DonnationSlice(input hl7.HL7Type) []RSPK34Donnation {
	values := make([]RSPK34Donnation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPK34Donnation(input.Index(i))
	}
	return values
}

// NewADTA04Insurance creates an implementation of ADTA04Insurance
func NewADTA04Insurance(input hl7.HL7Type) ADTA04Insurance {
	v := ADTA04Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3Slice(input.Index(2))
	v.Role = NewROLSlice(input.Index(3))
	v.AuthorizationInformation = NewAUTSlice(input.Index(4))
	v.ReferralInformation = NewRF1Slice(input.Index(5))
	return v
}

type ADTA04Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification []IN3
	Role                                        []ROL
	AuthorizationInformation                    []AUT
	ReferralInformation                         []RF1
}

// NewADTA04InsuranceSlice will construct a slice of type ADTA04Insurance
func NewADTA04InsuranceSlice(input hl7.HL7Type) []ADTA04Insurance {
	values := make([]ADTA04Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewADTA04Insurance(input.Index(i))
	}
	return values
}

// NewCRMC01Patient creates an implementation of CRMC01Patient
func NewCRMC01Patient(input hl7.HL7Type) CRMC01Patient {
	v := CRMC01Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.AccessRestriction = NewARVSlice(input.Index(2))
	v.PatientVisit = NewCRMC01PatientVisit(input.Index(3))
	v.ClinicalStudyRegistration = NewCSR(input.Index(4))
	v.ClinicalStudyPhase = NewCSPSlice(input.Index(5))
	return v
}

type CRMC01Patient struct {
	PatientIdentification     PID
	ParticipationInformation  []PRT
	AccessRestriction         []ARV
	PatientVisit              CRMC01PatientVisit
	ClinicalStudyRegistration CSR
	ClinicalStudyPhase        []CSP
}

// NewCRMC01PatientSlice will construct a slice of type CRMC01Patient
func NewCRMC01PatientSlice(input hl7.HL7Type) []CRMC01Patient {
	values := make([]CRMC01Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCRMC01Patient(input.Index(i))
	}
	return values
}

// NewREFI13PatientVisit creates an implementation of REFI13PatientVisit
func NewREFI13PatientVisit(input hl7.HL7Type) REFI13PatientVisit {
	v := REFI13PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	return v
}

type REFI13PatientVisit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
}

// NewREFI13PatientVisitSlice will construct a slice of type REFI13PatientVisit
func NewREFI13PatientVisitSlice(input hl7.HL7Type) []REFI13PatientVisit {
	values := make([]REFI13PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewREFI13PatientVisit(input.Index(i))
	}
	return values
}

// NewRGVO15OrderDetailSupplement creates an implementation of RGVO15OrderDetailSupplement
func NewRGVO15OrderDetailSupplement(input hl7.HL7Type) RGVO15OrderDetailSupplement {
	v := RGVO15OrderDetailSupplement{}
	v.NotesAndComments = NewNTESlice(input.Index(0))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(1))
	v.Components = NewRGVO15ComponentsSlice(input.Index(2))
	return v
}

type RGVO15OrderDetailSupplement struct {
	NotesAndComments       []NTE
	PharmacyTreatmentRoute []RXR
	Components             []RGVO15Components
}

// NewRGVO15OrderDetailSupplementSlice will construct a slice of type RGVO15OrderDetailSupplement
func NewRGVO15OrderDetailSupplementSlice(input hl7.HL7Type) []RGVO15OrderDetailSupplement {
	values := make([]RGVO15OrderDetailSupplement, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRGVO15OrderDetailSupplement(input.Index(i))
	}
	return values
}

// NewCQUI19ResourceObject creates an implementation of CQUI19ResourceObject
func NewCQUI19ResourceObject(input hl7.HL7Type) CQUI19ResourceObject {
	v := CQUI19ResourceObject{}
	v.AppointmentInformation = NewAIS(input.Index(0))
	v.AppointmentInformationGeneralResource = NewAIG(input.Index(1))
	v.AppointmentInformationLocationResource = NewAIL(input.Index(2))
	v.AppointmentInformationPersonnelResource = NewAIP(input.Index(3))
	return v
}

type CQUI19ResourceObject struct {
	AppointmentInformation                  AIS
	AppointmentInformationGeneralResource   AIG
	AppointmentInformationLocationResource  AIL
	AppointmentInformationPersonnelResource AIP
}

// NewCQUI19ResourceObjectSlice will construct a slice of type CQUI19ResourceObject
func NewCQUI19ResourceObjectSlice(input hl7.HL7Type) []CQUI19ResourceObject {
	values := make([]CQUI19ResourceObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCQUI19ResourceObject(input.Index(i))
	}
	return values
}

// NewCQUI19Pathway creates an implementation of CQUI19Pathway
func NewCQUI19Pathway(input hl7.HL7Type) CQUI19Pathway {
	v := CQUI19Pathway{}
	v.Pathway = NewPTH(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	v.RolePathway = NewCQUI19RolePathwaySlice(input.Index(2))
	v.PathwayObservation = NewCQUI19PathwayObservationSlice(input.Index(3))
	return v
}

type CQUI19Pathway struct {
	Pathway            PTH
	Variance           []VAR
	RolePathway        []CQUI19RolePathway
	PathwayObservation []CQUI19PathwayObservation
}

// NewCQUI19PathwaySlice will construct a slice of type CQUI19Pathway
func NewCQUI19PathwaySlice(input hl7.HL7Type) []CQUI19Pathway {
	values := make([]CQUI19Pathway, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCQUI19Pathway(input.Index(i))
	}
	return values
}

// NewPPGPCJPatientVisit creates an implementation of PPGPCJPatientVisit
func NewPPGPCJPatientVisit(input hl7.HL7Type) PPGPCJPatientVisit {
	v := PPGPCJPatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	return v
}

type PPGPCJPatientVisit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
}

// NewPPGPCJPatientVisitSlice will construct a slice of type PPGPCJPatientVisit
func NewPPGPCJPatientVisitSlice(input hl7.HL7Type) []PPGPCJPatientVisit {
	values := make([]PPGPCJPatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPGPCJPatientVisit(input.Index(i))
	}
	return values
}

// NewOMLO33PatientVisit creates an implementation of OMLO33PatientVisit
func NewOMLO33PatientVisit(input hl7.HL7Type) OMLO33PatientVisit {
	v := OMLO33PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	return v
}

type OMLO33PatientVisit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ParticipationInformation          []PRT
}

// NewOMLO33PatientVisitSlice will construct a slice of type OMLO33PatientVisit
func NewOMLO33PatientVisitSlice(input hl7.HL7Type) []OMLO33PatientVisit {
	values := make([]OMLO33PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO33PatientVisit(input.Index(i))
	}
	return values
}

// NewCSUC09StudyObservation creates an implementation of CSUC09StudyObservation
func NewCSUC09StudyObservation(input hl7.HL7Type) CSUC09StudyObservation {
	v := CSUC09StudyObservation{}
	v.CommonOrder = NewCSUC09CommonOrder(input.Index(0))
	v.ObservationRequest = NewOBR(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.TimingQty = NewCSUC09TimingQtySlice(input.Index(3))
	v.ObservationResult = NewOBX(input.Index(4))
	v.AdditionalParticipationInformation = NewPRTSlice(input.Index(5))
	return v
}

type CSUC09StudyObservation struct {
	CommonOrder                        CSUC09CommonOrder
	ObservationRequest                 OBR
	ParticipationInformation           []PRT
	TimingQty                          []CSUC09TimingQty
	ObservationResult                  OBX
	AdditionalParticipationInformation []PRT
}

// NewCSUC09StudyObservationSlice will construct a slice of type CSUC09StudyObservation
func NewCSUC09StudyObservationSlice(input hl7.HL7Type) []CSUC09StudyObservation {
	values := make([]CSUC09StudyObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCSUC09StudyObservation(input.Index(i))
	}
	return values
}

// NewPPRPC3Goal creates an implementation of PPRPC3Goal
func NewPPRPC3Goal(input hl7.HL7Type) PPRPC3Goal {
	v := PPRPC3Goal{}
	v.GoalDetail = NewGOL(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Variance = NewVARSlice(input.Index(2))
	v.GoalRole = NewPPRPC3GoalRoleSlice(input.Index(3))
	v.GoalObservation = NewPPRPC3GoalObservationSlice(input.Index(4))
	return v
}

type PPRPC3Goal struct {
	GoalDetail       GOL
	NotesAndComments []NTE
	Variance         []VAR
	GoalRole         []PPRPC3GoalRole
	GoalObservation  []PPRPC3GoalObservation
}

// NewPPRPC3GoalSlice will construct a slice of type PPRPC3Goal
func NewPPRPC3GoalSlice(input hl7.HL7Type) []PPRPC3Goal {
	values := make([]PPRPC3Goal, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPRPC3Goal(input.Index(i))
	}
	return values
}

// NewCCMI21Problem creates an implementation of CCMI21Problem
func NewCCMI21Problem(input hl7.HL7Type) CCMI21Problem {
	v := CCMI21Problem{}
	v.ProblemDetails = NewPRB(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	v.RoleProblem = NewCCMI21RoleProblemSlice(input.Index(2))
	v.ProblemObservation = NewCCMI21ProblemObservationSlice(input.Index(3))
	return v
}

type CCMI21Problem struct {
	ProblemDetails     PRB
	Variance           []VAR
	RoleProblem        []CCMI21RoleProblem
	ProblemObservation []CCMI21ProblemObservation
}

// NewCCMI21ProblemSlice will construct a slice of type CCMI21Problem
func NewCCMI21ProblemSlice(input hl7.HL7Type) []CCMI21Problem {
	values := make([]CCMI21Problem, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCMI21Problem(input.Index(i))
	}
	return values
}

// NewCCUI20Insurance creates an implementation of CCUI20Insurance
func NewCCUI20Insurance(input hl7.HL7Type) CCUI20Insurance {
	v := CCUI20Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3(input.Index(2))
	return v
}

type CCUI20Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification IN3
}

// NewCCUI20InsuranceSlice will construct a slice of type CCUI20Insurance
func NewCCUI20InsuranceSlice(input hl7.HL7Type) []CCUI20Insurance {
	values := make([]CCUI20Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCUI20Insurance(input.Index(i))
	}
	return values
}

// NewORPO10OrderDetail creates an implementation of ORPO10OrderDetail
func NewORPO10OrderDetail(input hl7.HL7Type) ORPO10OrderDetail {
	v := ORPO10OrderDetail{}
	v.PharmacyTreatmentOrder = NewRXO(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(3))
	v.Component = NewORPO10ComponentSlice(input.Index(4))
	return v
}

type ORPO10OrderDetail struct {
	PharmacyTreatmentOrder   RXO
	ParticipationInformation []PRT
	NotesAndComments         []NTE
	PharmacyTreatmentRoute   []RXR
	Component                []ORPO10Component
}

// NewORPO10OrderDetailSlice will construct a slice of type ORPO10OrderDetail
func NewORPO10OrderDetailSlice(input hl7.HL7Type) []ORPO10OrderDetail {
	values := make([]ORPO10OrderDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORPO10OrderDetail(input.Index(i))
	}
	return values
}

// NewORGO20Order creates an implementation of ORGO20Order
func NewORGO20Order(input hl7.HL7Type) ORGO20Order {
	v := ORGO20Order{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.Timing = NewORGO20TimingSlice(input.Index(2))
	v.ObservationGroup = NewORGO20ObservationGroup(input.Index(3))
	v.AdditionalParticipationInformation = NewPRTSlice(input.Index(4))
	v.NotesAndComments = NewNTESlice(input.Index(5))
	v.ClinicalTrialIdentification = NewCTISlice(input.Index(6))
	v.Specimen = NewORGO20SpecimenSlice(input.Index(7))
	return v
}

type ORGO20Order struct {
	CommonOrder                        ORC
	ParticipationInformation           []PRT
	Timing                             []ORGO20Timing
	ObservationGroup                   ORGO20ObservationGroup
	AdditionalParticipationInformation []PRT
	NotesAndComments                   []NTE
	ClinicalTrialIdentification        []CTI
	Specimen                           []ORGO20Specimen
}

// NewORGO20OrderSlice will construct a slice of type ORGO20Order
func NewORGO20OrderSlice(input hl7.HL7Type) []ORGO20Order {
	values := make([]ORGO20Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORGO20Order(input.Index(i))
	}
	return values
}

// NewDEOO45DonorRegistration creates an implementation of DEOO45DonorRegistration
func NewDEOO45DonorRegistration(input hl7.HL7Type) DEOO45DonorRegistration {
	v := DEOO45DonorRegistration{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type DEOO45DonorRegistration struct {
	PatientVisit     PV1
	NotesAndComments []NTE
}

// NewDEOO45DonorRegistrationSlice will construct a slice of type DEOO45DonorRegistration
func NewDEOO45DonorRegistrationSlice(input hl7.HL7Type) []DEOO45DonorRegistration {
	values := make([]DEOO45DonorRegistration, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewDEOO45DonorRegistration(input.Index(i))
	}
	return values
}

// NewREFI15ProviderContact creates an implementation of REFI15ProviderContact
func NewREFI15ProviderContact(input hl7.HL7Type) REFI15ProviderContact {
	v := REFI15ProviderContact{}
	v.ProviderData = NewPRD(input.Index(0))
	v.ContactData = NewCTDSlice(input.Index(1))
	return v
}

type REFI15ProviderContact struct {
	ProviderData PRD
	ContactData  []CTD
}

// NewREFI15ProviderContactSlice will construct a slice of type REFI15ProviderContact
func NewREFI15ProviderContactSlice(input hl7.HL7Type) []REFI15ProviderContact {
	values := make([]REFI15ProviderContact, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewREFI15ProviderContact(input.Index(i))
	}
	return values
}

// NewSRMS01Resources creates an implementation of SRMS01Resources
func NewSRMS01Resources(input hl7.HL7Type) SRMS01Resources {
	v := SRMS01Resources{}
	v.ResourceGroup = NewRGS(input.Index(0))
	v.Service = NewSRMS01ServiceSlice(input.Index(1))
	v.GeneralResource = NewSRMS01GeneralResourceSlice(input.Index(2))
	v.LocationResource = NewSRMS01LocationResourceSlice(input.Index(3))
	v.PersonnelResource = NewSRMS01PersonnelResourceSlice(input.Index(4))
	return v
}

type SRMS01Resources struct {
	ResourceGroup     RGS
	Service           []SRMS01Service
	GeneralResource   []SRMS01GeneralResource
	LocationResource  []SRMS01LocationResource
	PersonnelResource []SRMS01PersonnelResource
}

// NewSRMS01ResourcesSlice will construct a slice of type SRMS01Resources
func NewSRMS01ResourcesSlice(input hl7.HL7Type) []SRMS01Resources {
	values := make([]SRMS01Resources, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS01Resources(input.Index(i))
	}
	return values
}

// NewEHCE13Request creates an implementation of EHCE13Request
func NewEHCE13Request(input hl7.HL7Type) EHCE13Request {
	v := EHCE13Request{}
	v.ContactData = NewCTD(input.Index(0))
	v.ObservationRequest = NewOBR(input.Index(1))
	v.NotesAndComments = NewNTE(input.Index(2))
	v.Response = NewEHCE13ResponseSlice(input.Index(3))
	return v
}

type EHCE13Request struct {
	ContactData        CTD
	ObservationRequest OBR
	NotesAndComments   NTE
	Response           []EHCE13Response
}

// NewEHCE13RequestSlice will construct a slice of type EHCE13Request
func NewEHCE13RequestSlice(input hl7.HL7Type) []EHCE13Request {
	values := make([]EHCE13Request, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewEHCE13Request(input.Index(i))
	}
	return values
}

// NewRSPZ82Timing creates an implementation of RSPZ82Timing
func NewRSPZ82Timing(input hl7.HL7Type) RSPZ82Timing {
	v := RSPZ82Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type RSPZ82Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewRSPZ82TimingSlice will construct a slice of type RSPZ82Timing
func NewRSPZ82TimingSlice(input hl7.HL7Type) []RSPZ82Timing {
	values := make([]RSPZ82Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPZ82Timing(input.Index(i))
	}
	return values
}

// NewORUR32PatientObservation creates an implementation of ORUR32PatientObservation
func NewORUR32PatientObservation(input hl7.HL7Type) ORUR32PatientObservation {
	v := ORUR32PatientObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type ORUR32PatientObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewORUR32PatientObservationSlice will construct a slice of type ORUR32PatientObservation
func NewORUR32PatientObservationSlice(input hl7.HL7Type) []ORUR32PatientObservation {
	values := make([]ORUR32PatientObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORUR32PatientObservation(input.Index(i))
	}
	return values
}

// NewPPGPCGPatientVisit creates an implementation of PPGPCGPatientVisit
func NewPPGPCGPatientVisit(input hl7.HL7Type) PPGPCGPatientVisit {
	v := PPGPCGPatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	return v
}

type PPGPCGPatientVisit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
}

// NewPPGPCGPatientVisitSlice will construct a slice of type PPGPCGPatientVisit
func NewPPGPCGPatientVisitSlice(input hl7.HL7Type) []PPGPCGPatientVisit {
	values := make([]PPGPCGPatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPGPCGPatientVisit(input.Index(i))
	}
	return values
}

// NewRRAO18Timing creates an implementation of RRAO18Timing
func NewRRAO18Timing(input hl7.HL7Type) RRAO18Timing {
	v := RRAO18Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type RRAO18Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewRRAO18TimingSlice will construct a slice of type RRAO18Timing
func NewRRAO18TimingSlice(input hl7.HL7Type) []RRAO18Timing {
	values := make([]RRAO18Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRRAO18Timing(input.Index(i))
	}
	return values
}

// NewSRRS02Schedule creates an implementation of SRRS02Schedule
func NewSRRS02Schedule(input hl7.HL7Type) SRRS02Schedule {
	v := SRRS02Schedule{}
	v.SchedulingActivityInformation = NewSCH(input.Index(0))
	v.TimingQuantity = NewTQ1Slice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.Patient = NewSRRS02PatientSlice(input.Index(3))
	v.Resources = NewSRRS02ResourcesSlice(input.Index(4))
	return v
}

type SRRS02Schedule struct {
	SchedulingActivityInformation SCH
	TimingQuantity                []TQ1
	NotesAndComments              []NTE
	Patient                       []SRRS02Patient
	Resources                     []SRRS02Resources
}

// NewSRRS02ScheduleSlice will construct a slice of type SRRS02Schedule
func NewSRRS02ScheduleSlice(input hl7.HL7Type) []SRRS02Schedule {
	values := make([]SRRS02Schedule, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS02Schedule(input.Index(i))
	}
	return values
}

// NewSIUS23LocationResource creates an implementation of SIUS23LocationResource
func NewSIUS23LocationResource(input hl7.HL7Type) SIUS23LocationResource {
	v := SIUS23LocationResource{}
	v.AppointmentInformationLocationResource = NewAIL(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS23LocationResource struct {
	AppointmentInformationLocationResource AIL
	NotesAndComments                       []NTE
}

// NewSIUS23LocationResourceSlice will construct a slice of type SIUS23LocationResource
func NewSIUS23LocationResourceSlice(input hl7.HL7Type) []SIUS23LocationResource {
	values := make([]SIUS23LocationResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS23LocationResource(input.Index(i))
	}
	return values
}

// NewORUR01Observation creates an implementation of ORUR01Observation
func NewORUR01Observation(input hl7.HL7Type) ORUR01Observation {
	v := ORUR01Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type ORUR01Observation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewORUR01ObservationSlice will construct a slice of type ORUR01Observation
func NewORUR01ObservationSlice(input hl7.HL7Type) []ORUR01Observation {
	values := make([]ORUR01Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORUR01Observation(input.Index(i))
	}
	return values
}

// NewSRRS05Patient creates an implementation of SRRS05Patient
func NewSRRS05Patient(input hl7.HL7Type) SRRS05Patient {
	v := SRRS05Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientVisit = NewPV1(input.Index(1))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(2))
	v.Diagnosis = NewDG1Slice(input.Index(3))
	return v
}

type SRRS05Patient struct {
	PatientIdentification             PID
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	Diagnosis                         []DG1
}

// NewSRRS05PatientSlice will construct a slice of type SRRS05Patient
func NewSRRS05PatientSlice(input hl7.HL7Type) []SRRS05Patient {
	values := make([]SRRS05Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS05Patient(input.Index(i))
	}
	return values
}

// NewRASO17Timing creates an implementation of RASO17Timing
func NewRASO17Timing(input hl7.HL7Type) RASO17Timing {
	v := RASO17Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type RASO17Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewRASO17TimingSlice will construct a slice of type RASO17Timing
func NewRASO17TimingSlice(input hl7.HL7Type) []RASO17Timing {
	values := make([]RASO17Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRASO17Timing(input.Index(i))
	}
	return values
}

// NewOMLO21Specimen creates an implementation of OMLO21Specimen
func NewOMLO21Specimen(input hl7.HL7Type) OMLO21Specimen {
	v := OMLO21Specimen{}
	v.Specimen = NewSPM(input.Index(0))
	v.SpecimenObservation = NewOMLO21SpecimenObservationSlice(input.Index(1))
	v.Container = NewOMLO21ContainerSlice(input.Index(2))
	return v
}

type OMLO21Specimen struct {
	Specimen            SPM
	SpecimenObservation []OMLO21SpecimenObservation
	Container           []OMLO21Container
}

// NewOMLO21SpecimenSlice will construct a slice of type OMLO21Specimen
func NewOMLO21SpecimenSlice(input hl7.HL7Type) []OMLO21Specimen {
	values := make([]OMLO21Specimen, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO21Specimen(input.Index(i))
	}
	return values
}

// NewCCRI16MedicationHistory creates an implementation of CCRI16MedicationHistory
func NewCCRI16MedicationHistory(input hl7.HL7Type) CCRI16MedicationHistory {
	v := CCRI16MedicationHistory{}
	v.CommonOrder = NewORC(input.Index(0))
	v.MedicationOrderDetail = NewCCRI16MedicationOrderDetail(input.Index(1))
	v.MedicationEncodingDetail = NewCCRI16MedicationEncodingDetail(input.Index(2))
	v.MedicationAdministrationDetail = NewCCRI16MedicationAdministrationDetailSlice(input.Index(3))
	v.ClinicalTrialIdentification = NewCTISlice(input.Index(4))
	return v
}

type CCRI16MedicationHistory struct {
	CommonOrder                    ORC
	MedicationOrderDetail          CCRI16MedicationOrderDetail
	MedicationEncodingDetail       CCRI16MedicationEncodingDetail
	MedicationAdministrationDetail []CCRI16MedicationAdministrationDetail
	ClinicalTrialIdentification    []CTI
}

// NewCCRI16MedicationHistorySlice will construct a slice of type CCRI16MedicationHistory
func NewCCRI16MedicationHistorySlice(input hl7.HL7Type) []CCRI16MedicationHistory {
	values := make([]CCRI16MedicationHistory, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI16MedicationHistory(input.Index(i))
	}
	return values
}

// NewORDO04OrderTray creates an implementation of ORDO04OrderTray
func NewORDO04OrderTray(input hl7.HL7Type) ORDO04OrderTray {
	v := ORDO04OrderTray{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.TimingTray = NewORDO04TimingTraySlice(input.Index(2))
	v.DietTrayInstructions = NewODTSlice(input.Index(3))
	v.NotesAndComments = NewNTESlice(input.Index(4))
	return v
}

type ORDO04OrderTray struct {
	CommonOrder              ORC
	ParticipationInformation []PRT
	TimingTray               []ORDO04TimingTray
	DietTrayInstructions     []ODT
	NotesAndComments         []NTE
}

// NewORDO04OrderTraySlice will construct a slice of type ORDO04OrderTray
func NewORDO04OrderTraySlice(input hl7.HL7Type) []ORDO04OrderTray {
	values := make([]ORDO04OrderTray, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORDO04OrderTray(input.Index(i))
	}
	return values
}

// NewEHCE10InvoiceProcessingResultsInfo creates an implementation of EHCE10InvoiceProcessingResultsInfo
func NewEHCE10InvoiceProcessingResultsInfo(input hl7.HL7Type) EHCE10InvoiceProcessingResultsInfo {
	v := EHCE10InvoiceProcessingResultsInfo{}
	v.InvoiceProcessingResults = NewIPR(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.PayeeInformation = NewPYE(input.Index(2))
	v.Insurance = NewIN1(input.Index(3))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(4))
	v.InvoiceSegment = NewIVC(input.Index(5))
	v.ProductServiceSection = NewEHCE10ProductServiceSectionSlice(input.Index(6))
	return v
}

type EHCE10InvoiceProcessingResultsInfo struct {
	InvoiceProcessingResults       IPR
	NotesAndComments               []NTE
	PayeeInformation               PYE
	Insurance                      IN1
	InsuranceAdditionalInformation IN2
	InvoiceSegment                 IVC
	ProductServiceSection          []EHCE10ProductServiceSection
}

// NewEHCE10InvoiceProcessingResultsInfoSlice will construct a slice of type EHCE10InvoiceProcessingResultsInfo
func NewEHCE10InvoiceProcessingResultsInfoSlice(input hl7.HL7Type) []EHCE10InvoiceProcessingResultsInfo {
	values := make([]EHCE10InvoiceProcessingResultsInfo, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewEHCE10InvoiceProcessingResultsInfo(input.Index(i))
	}
	return values
}

// NewCCRI17ClinicalHistory creates an implementation of CCRI17ClinicalHistory
func NewCCRI17ClinicalHistory(input hl7.HL7Type) CCRI17ClinicalHistory {
	v := CCRI17ClinicalHistory{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ClinicalHistoryDetail = NewCCRI17ClinicalHistoryDetailSlice(input.Index(1))
	v.RoleClinicalHistory = NewCCRI17RoleClinicalHistorySlice(input.Index(2))
	v.ClinicalTrialIdentification = NewCTISlice(input.Index(3))
	return v
}

type CCRI17ClinicalHistory struct {
	CommonOrder                 ORC
	ClinicalHistoryDetail       []CCRI17ClinicalHistoryDetail
	RoleClinicalHistory         []CCRI17RoleClinicalHistory
	ClinicalTrialIdentification []CTI
}

// NewCCRI17ClinicalHistorySlice will construct a slice of type CCRI17ClinicalHistory
func NewCCRI17ClinicalHistorySlice(input hl7.HL7Type) []CCRI17ClinicalHistory {
	values := make([]CCRI17ClinicalHistory, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI17ClinicalHistory(input.Index(i))
	}
	return values
}

// NewRDEO25PatientVisit creates an implementation of RDEO25PatientVisit
func NewRDEO25PatientVisit(input hl7.HL7Type) RDEO25PatientVisit {
	v := RDEO25PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.AccessRestriction = NewARVSlice(input.Index(3))
	return v
}

type RDEO25PatientVisit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ParticipationInformation          []PRT
	AccessRestriction                 []ARV
}

// NewRDEO25PatientVisitSlice will construct a slice of type RDEO25PatientVisit
func NewRDEO25PatientVisitSlice(input hl7.HL7Type) []RDEO25PatientVisit {
	values := make([]RDEO25PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRDEO25PatientVisit(input.Index(i))
	}
	return values
}

// NewRSPZ82Observation creates an implementation of RSPZ82Observation
func NewRSPZ82Observation(input hl7.HL7Type) RSPZ82Observation {
	v := RSPZ82Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type RSPZ82Observation struct {
	ObservationResult OBX
	NotesAndComments  []NTE
}

// NewRSPZ82ObservationSlice will construct a slice of type RSPZ82Observation
func NewRSPZ82ObservationSlice(input hl7.HL7Type) []RSPZ82Observation {
	values := make([]RSPZ82Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPZ82Observation(input.Index(i))
	}
	return values
}

// NewRRII12Observation creates an implementation of RRII12Observation
func NewRRII12Observation(input hl7.HL7Type) RRII12Observation {
	v := RRII12Observation{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.ResultsNotes = NewRRII12ResultsNotesSlice(input.Index(2))
	return v
}

type RRII12Observation struct {
	ObservationRequest OBR
	NotesAndComments   []NTE
	ResultsNotes       []RRII12ResultsNotes
}

// NewRRII12ObservationSlice will construct a slice of type RRII12Observation
func NewRRII12ObservationSlice(input hl7.HL7Type) []RRII12Observation {
	values := make([]RRII12Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRRII12Observation(input.Index(i))
	}
	return values
}

// NewRQAI09Authorization creates an implementation of RQAI09Authorization
func NewRQAI09Authorization(input hl7.HL7Type) RQAI09Authorization {
	v := RQAI09Authorization{}
	v.AuthorizationInformation = NewAUT(input.Index(0))
	v.ContactData = NewCTD(input.Index(1))
	return v
}

type RQAI09Authorization struct {
	AuthorizationInformation AUT
	ContactData              CTD
}

// NewRQAI09AuthorizationSlice will construct a slice of type RQAI09Authorization
func NewRQAI09AuthorizationSlice(input hl7.HL7Type) []RQAI09Authorization {
	values := make([]RQAI09Authorization, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQAI09Authorization(input.Index(i))
	}
	return values
}

// NewRQAI10Authorization2 creates an implementation of RQAI10Authorization2
func NewRQAI10Authorization2(input hl7.HL7Type) RQAI10Authorization2 {
	v := RQAI10Authorization2{}
	v.AuthorizationInformation = NewAUT(input.Index(0))
	v.ContactData = NewCTD(input.Index(1))
	return v
}

type RQAI10Authorization2 struct {
	AuthorizationInformation AUT
	ContactData              CTD
}

// NewRQAI10Authorization2Slice will construct a slice of type RQAI10Authorization2
func NewRQAI10Authorization2Slice(input hl7.HL7Type) []RQAI10Authorization2 {
	values := make([]RQAI10Authorization2, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQAI10Authorization2(input.Index(i))
	}
	return values
}

// NewQBPE22Query creates an implementation of QBPE22Query
func NewQBPE22Query(input hl7.HL7Type) QBPE22Query {
	v := QBPE22Query{}
	v.QueryParameterDefinition = NewQPD(input.Index(0))
	v.ResponseControlParameter = NewRCP(input.Index(1))
	return v
}

type QBPE22Query struct {
	QueryParameterDefinition QPD
	ResponseControlParameter RCP
}

// NewQBPE22QuerySlice will construct a slice of type QBPE22Query
func NewQBPE22QuerySlice(input hl7.HL7Type) []QBPE22Query {
	values := make([]QBPE22Query, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewQBPE22Query(input.Index(i))
	}
	return values
}

// NewDFTP03FinancialOrder creates an implementation of DFTP03FinancialOrder
func NewDFTP03FinancialOrder(input hl7.HL7Type) DFTP03FinancialOrder {
	v := DFTP03FinancialOrder{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type DFTP03FinancialOrder struct {
	ObservationRequest OBR
	NotesAndComments   []NTE
}

// NewDFTP03FinancialOrderSlice will construct a slice of type DFTP03FinancialOrder
func NewDFTP03FinancialOrderSlice(input hl7.HL7Type) []DFTP03FinancialOrder {
	values := make([]DFTP03FinancialOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewDFTP03FinancialOrder(input.Index(i))
	}
	return values
}

// NewORNO08Patient creates an implementation of ORNO08Patient
func NewORNO08Patient(input hl7.HL7Type) ORNO08Patient {
	v := ORNO08Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.AccessRestriction = NewARVSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type ORNO08Patient struct {
	PatientIdentification PID
	AccessRestriction     []ARV
	NotesAndComments      []NTE
}

// NewORNO08PatientSlice will construct a slice of type ORNO08Patient
func NewORNO08PatientSlice(input hl7.HL7Type) []ORNO08Patient {
	values := make([]ORNO08Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORNO08Patient(input.Index(i))
	}
	return values
}

// NewEHCE04ProductServiceGroup creates an implementation of EHCE04ProductServiceGroup
func NewEHCE04ProductServiceGroup(input hl7.HL7Type) EHCE04ProductServiceGroup {
	v := EHCE04ProductServiceGroup{}
	v.ProductServiceGroup = NewPSG(input.Index(0))
	v.ProductServiceLineItem = NewPSLSlice(input.Index(1))
	return v
}

type EHCE04ProductServiceGroup struct {
	ProductServiceGroup    PSG
	ProductServiceLineItem []PSL
}

// NewEHCE04ProductServiceGroupSlice will construct a slice of type EHCE04ProductServiceGroup
func NewEHCE04ProductServiceGroupSlice(input hl7.HL7Type) []EHCE04ProductServiceGroup {
	values := make([]EHCE04ProductServiceGroup, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewEHCE04ProductServiceGroup(input.Index(i))
	}
	return values
}

// NewSIUS19PersonnelResource creates an implementation of SIUS19PersonnelResource
func NewSIUS19PersonnelResource(input hl7.HL7Type) SIUS19PersonnelResource {
	v := SIUS19PersonnelResource{}
	v.AppointmentInformationPersonnelResource = NewAIP(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS19PersonnelResource struct {
	AppointmentInformationPersonnelResource AIP
	NotesAndComments                        []NTE
}

// NewSIUS19PersonnelResourceSlice will construct a slice of type SIUS19PersonnelResource
func NewSIUS19PersonnelResourceSlice(input hl7.HL7Type) []SIUS19PersonnelResource {
	values := make([]SIUS19PersonnelResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS19PersonnelResource(input.Index(i))
	}
	return values
}

// NewSIUS12Resources creates an implementation of SIUS12Resources
func NewSIUS12Resources(input hl7.HL7Type) SIUS12Resources {
	v := SIUS12Resources{}
	v.ResourceGroup = NewRGS(input.Index(0))
	v.Service = NewSIUS12ServiceSlice(input.Index(1))
	v.GeneralResource = NewSIUS12GeneralResourceSlice(input.Index(2))
	v.LocationResource = NewSIUS12LocationResourceSlice(input.Index(3))
	v.PersonnelResource = NewSIUS12PersonnelResourceSlice(input.Index(4))
	return v
}

type SIUS12Resources struct {
	ResourceGroup     RGS
	Service           []SIUS12Service
	GeneralResource   []SIUS12GeneralResource
	LocationResource  []SIUS12LocationResource
	PersonnelResource []SIUS12PersonnelResource
}

// NewSIUS12ResourcesSlice will construct a slice of type SIUS12Resources
func NewSIUS12ResourcesSlice(input hl7.HL7Type) []SIUS12Resources {
	values := make([]SIUS12Resources, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS12Resources(input.Index(i))
	}
	return values
}

// NewCSUC11Visit creates an implementation of CSUC11Visit
func NewCSUC11Visit(input hl7.HL7Type) CSUC11Visit {
	v := CSUC11Visit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	return v
}

type CSUC11Visit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ParticipationInformation          []PRT
}

// NewCSUC11VisitSlice will construct a slice of type CSUC11Visit
func NewCSUC11VisitSlice(input hl7.HL7Type) []CSUC11Visit {
	values := make([]CSUC11Visit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCSUC11Visit(input.Index(i))
	}
	return values
}

// NewCCUI20ResourceObservation creates an implementation of CCUI20ResourceObservation
func NewCCUI20ResourceObservation(input hl7.HL7Type) CCUI20ResourceObservation {
	v := CCUI20ResourceObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CCUI20ResourceObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewCCUI20ResourceObservationSlice will construct a slice of type CCUI20ResourceObservation
func NewCCUI20ResourceObservationSlice(input hl7.HL7Type) []CCUI20ResourceObservation {
	values := make([]CCUI20ResourceObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCUI20ResourceObservation(input.Index(i))
	}
	return values
}

// NewREFI14Insurance creates an implementation of REFI14Insurance
func NewREFI14Insurance(input hl7.HL7Type) REFI14Insurance {
	v := REFI14Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3(input.Index(2))
	return v
}

type REFI14Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification IN3
}

// NewREFI14InsuranceSlice will construct a slice of type REFI14Insurance
func NewREFI14InsuranceSlice(input hl7.HL7Type) []REFI14Insurance {
	values := make([]REFI14Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewREFI14Insurance(input.Index(i))
	}
	return values
}

// NewPGLPC7PatientVisit creates an implementation of PGLPC7PatientVisit
func NewPGLPC7PatientVisit(input hl7.HL7Type) PGLPC7PatientVisit {
	v := PGLPC7PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	return v
}

type PGLPC7PatientVisit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
}

// NewPGLPC7PatientVisitSlice will construct a slice of type PGLPC7PatientVisit
func NewPGLPC7PatientVisitSlice(input hl7.HL7Type) []PGLPC7PatientVisit {
	values := make([]PGLPC7PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPGLPC7PatientVisit(input.Index(i))
	}
	return values
}

// NewDPRO48DonorRegistration creates an implementation of DPRO48DonorRegistration
func NewDPRO48DonorRegistration(input hl7.HL7Type) DPRO48DonorRegistration {
	v := DPRO48DonorRegistration{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type DPRO48DonorRegistration struct {
	PatientVisit     PV1
	NotesAndComments []NTE
}

// NewDPRO48DonorRegistrationSlice will construct a slice of type DPRO48DonorRegistration
func NewDPRO48DonorRegistrationSlice(input hl7.HL7Type) []DPRO48DonorRegistration {
	values := make([]DPRO48DonorRegistration, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewDPRO48DonorRegistration(input.Index(i))
	}
	return values
}

// NewRSPK31PatientVisit creates an implementation of RSPK31PatientVisit
func NewRSPK31PatientVisit(input hl7.HL7Type) RSPK31PatientVisit {
	v := RSPK31PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	return v
}

type RSPK31PatientVisit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ParticipationInformation          []PRT
}

// NewRSPK31PatientVisitSlice will construct a slice of type RSPK31PatientVisit
func NewRSPK31PatientVisitSlice(input hl7.HL7Type) []RSPK31PatientVisit {
	values := make([]RSPK31PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPK31PatientVisit(input.Index(i))
	}
	return values
}

// NewRRGO16Order creates an implementation of RRGO16Order
func NewRRGO16Order(input hl7.HL7Type) RRGO16Order {
	v := RRGO16Order{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.Timing = NewRRGO16TimingSlice(input.Index(2))
	v.Give = NewRRGO16Give(input.Index(3))
	return v
}

type RRGO16Order struct {
	CommonOrder              ORC
	ParticipationInformation []PRT
	Timing                   []RRGO16Timing
	Give                     RRGO16Give
}

// NewRRGO16OrderSlice will construct a slice of type RRGO16Order
func NewRRGO16OrderSlice(input hl7.HL7Type) []RRGO16Order {
	values := make([]RRGO16Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRRGO16Order(input.Index(i))
	}
	return values
}

// NewSIUS20Resources creates an implementation of SIUS20Resources
func NewSIUS20Resources(input hl7.HL7Type) SIUS20Resources {
	v := SIUS20Resources{}
	v.ResourceGroup = NewRGS(input.Index(0))
	v.Service = NewSIUS20ServiceSlice(input.Index(1))
	v.GeneralResource = NewSIUS20GeneralResourceSlice(input.Index(2))
	v.LocationResource = NewSIUS20LocationResourceSlice(input.Index(3))
	v.PersonnelResource = NewSIUS20PersonnelResourceSlice(input.Index(4))
	return v
}

type SIUS20Resources struct {
	ResourceGroup     RGS
	Service           []SIUS20Service
	GeneralResource   []SIUS20GeneralResource
	LocationResource  []SIUS20LocationResource
	PersonnelResource []SIUS20PersonnelResource
}

// NewSIUS20ResourcesSlice will construct a slice of type SIUS20Resources
func NewSIUS20ResourcesSlice(input hl7.HL7Type) []SIUS20Resources {
	values := make([]SIUS20Resources, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS20Resources(input.Index(i))
	}
	return values
}

// NewOPUR25Container creates an implementation of OPUR25Container
func NewOPUR25Container(input hl7.HL7Type) OPUR25Container {
	v := OPUR25Container{}
	v.SpecimenContainerDetail = NewSAC(input.Index(0))
	v.InventoryDetail = NewINV(input.Index(1))
	return v
}

type OPUR25Container struct {
	SpecimenContainerDetail SAC
	InventoryDetail         INV
}

// NewOPUR25ContainerSlice will construct a slice of type OPUR25Container
func NewOPUR25ContainerSlice(input hl7.HL7Type) []OPUR25Container {
	values := make([]OPUR25Container, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOPUR25Container(input.Index(i))
	}
	return values
}

// NewCCRI18ClinicalHistoryDetail creates an implementation of CCRI18ClinicalHistoryDetail
func NewCCRI18ClinicalHistoryDetail(input hl7.HL7Type) CCRI18ClinicalHistoryDetail {
	v := CCRI18ClinicalHistoryDetail{}
	v.ClinicalHistoryObject = NewCCRI18ClinicalHistoryObject(input.Index(0))
	v.ClinicalHistoryObservation = NewCCRI18ClinicalHistoryObservationSlice(input.Index(1))
	return v
}

type CCRI18ClinicalHistoryDetail struct {
	ClinicalHistoryObject      CCRI18ClinicalHistoryObject
	ClinicalHistoryObservation []CCRI18ClinicalHistoryObservation
}

// NewCCRI18ClinicalHistoryDetailSlice will construct a slice of type CCRI18ClinicalHistoryDetail
func NewCCRI18ClinicalHistoryDetailSlice(input hl7.HL7Type) []CCRI18ClinicalHistoryDetail {
	values := make([]CCRI18ClinicalHistoryDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI18ClinicalHistoryDetail(input.Index(i))
	}
	return values
}

// NewCSUC09StudyPhase creates an implementation of CSUC09StudyPhase
func NewCSUC09StudyPhase(input hl7.HL7Type) CSUC09StudyPhase {
	v := CSUC09StudyPhase{}
	v.ClinicalStudyPhase = NewCSP(input.Index(0))
	v.StudySchedule = NewCSUC09StudyScheduleSlice(input.Index(1))
	return v
}

type CSUC09StudyPhase struct {
	ClinicalStudyPhase CSP
	StudySchedule      []CSUC09StudySchedule
}

// NewCSUC09StudyPhaseSlice will construct a slice of type CSUC09StudyPhase
func NewCSUC09StudyPhaseSlice(input hl7.HL7Type) []CSUC09StudyPhase {
	values := make([]CSUC09StudyPhase, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCSUC09StudyPhase(input.Index(i))
	}
	return values
}

// NewCCRI17ClinicalOrderTiming creates an implementation of CCRI17ClinicalOrderTiming
func NewCCRI17ClinicalOrderTiming(input hl7.HL7Type) CCRI17ClinicalOrderTiming {
	v := CCRI17ClinicalOrderTiming{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type CCRI17ClinicalOrderTiming struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewCCRI17ClinicalOrderTimingSlice will construct a slice of type CCRI17ClinicalOrderTiming
func NewCCRI17ClinicalOrderTimingSlice(input hl7.HL7Type) []CCRI17ClinicalOrderTiming {
	values := make([]CCRI17ClinicalOrderTiming, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI17ClinicalOrderTiming(input.Index(i))
	}
	return values
}

// NewSRRS02Resources creates an implementation of SRRS02Resources
func NewSRRS02Resources(input hl7.HL7Type) SRRS02Resources {
	v := SRRS02Resources{}
	v.ResourceGroup = NewRGS(input.Index(0))
	v.Service = NewSRRS02ServiceSlice(input.Index(1))
	v.GeneralResource = NewSRRS02GeneralResourceSlice(input.Index(2))
	v.LocationResource = NewSRRS02LocationResourceSlice(input.Index(3))
	v.PersonnelResource = NewSRRS02PersonnelResourceSlice(input.Index(4))
	return v
}

type SRRS02Resources struct {
	ResourceGroup     RGS
	Service           []SRRS02Service
	GeneralResource   []SRRS02GeneralResource
	LocationResource  []SRRS02LocationResource
	PersonnelResource []SRRS02PersonnelResource
}

// NewSRRS02ResourcesSlice will construct a slice of type SRRS02Resources
func NewSRRS02ResourcesSlice(input hl7.HL7Type) []SRRS02Resources {
	values := make([]SRRS02Resources, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS02Resources(input.Index(i))
	}
	return values
}

// NewRPAI11Provider creates an implementation of RPAI11Provider
func NewRPAI11Provider(input hl7.HL7Type) RPAI11Provider {
	v := RPAI11Provider{}
	v.ProviderData = NewPRD(input.Index(0))
	v.ContactData = NewCTDSlice(input.Index(1))
	return v
}

type RPAI11Provider struct {
	ProviderData PRD
	ContactData  []CTD
}

// NewRPAI11ProviderSlice will construct a slice of type RPAI11Provider
func NewRPAI11ProviderSlice(input hl7.HL7Type) []RPAI11Provider {
	values := make([]RPAI11Provider, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRPAI11Provider(input.Index(i))
	}
	return values
}

// NewVXUV04Order creates an implementation of VXUV04Order
func NewVXUV04Order(input hl7.HL7Type) VXUV04Order {
	v := VXUV04Order{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.Timing = NewVXUV04TimingSlice(input.Index(2))
	v.PharmacyTreatmentAdministration = NewRXA(input.Index(3))
	v.PharmacyTreatmentRoute = NewRXR(input.Index(4))
	v.Observation = NewVXUV04ObservationSlice(input.Index(5))
	return v
}

type VXUV04Order struct {
	CommonOrder                     ORC
	ParticipationInformation        []PRT
	Timing                          []VXUV04Timing
	PharmacyTreatmentAdministration RXA
	PharmacyTreatmentRoute          RXR
	Observation                     []VXUV04Observation
}

// NewVXUV04OrderSlice will construct a slice of type VXUV04Order
func NewVXUV04OrderSlice(input hl7.HL7Type) []VXUV04Order {
	values := make([]VXUV04Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewVXUV04Order(input.Index(i))
	}
	return values
}

// NewREFI12Observation creates an implementation of REFI12Observation
func NewREFI12Observation(input hl7.HL7Type) REFI12Observation {
	v := REFI12Observation{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.ResultsNotes = NewREFI12ResultsNotesSlice(input.Index(2))
	return v
}

type REFI12Observation struct {
	ObservationRequest OBR
	NotesAndComments   []NTE
	ResultsNotes       []REFI12ResultsNotes
}

// NewREFI12ObservationSlice will construct a slice of type REFI12Observation
func NewREFI12ObservationSlice(input hl7.HL7Type) []REFI12Observation {
	values := make([]REFI12Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewREFI12Observation(input.Index(i))
	}
	return values
}

// NewSRRS03GeneralResource creates an implementation of SRRS03GeneralResource
func NewSRRS03GeneralResource(input hl7.HL7Type) SRRS03GeneralResource {
	v := SRRS03GeneralResource{}
	v.AppointmentInformationGeneralResource = NewAIG(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SRRS03GeneralResource struct {
	AppointmentInformationGeneralResource AIG
	NotesAndComments                      []NTE
}

// NewSRRS03GeneralResourceSlice will construct a slice of type SRRS03GeneralResource
func NewSRRS03GeneralResourceSlice(input hl7.HL7Type) []SRRS03GeneralResource {
	values := make([]SRRS03GeneralResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS03GeneralResource(input.Index(i))
	}
	return values
}

// NewEHCE21PslItemInfo creates an implementation of EHCE21PslItemInfo
func NewEHCE21PslItemInfo(input hl7.HL7Type) EHCE21PslItemInfo {
	v := EHCE21PslItemInfo{}
	v.ProductServiceLineItem = NewPSL(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.AuthorizationInformation = NewAUT(input.Index(2))
	return v
}

type EHCE21PslItemInfo struct {
	ProductServiceLineItem   PSL
	NotesAndComments         []NTE
	AuthorizationInformation AUT
}

// NewEHCE21PslItemInfoSlice will construct a slice of type EHCE21PslItemInfo
func NewEHCE21PslItemInfoSlice(input hl7.HL7Type) []EHCE21PslItemInfo {
	values := make([]EHCE21PslItemInfo, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewEHCE21PslItemInfo(input.Index(i))
	}
	return values
}

// NewOMLO21PatientVisitPrior creates an implementation of OMLO21PatientVisitPrior
func NewOMLO21PatientVisitPrior(input hl7.HL7Type) OMLO21PatientVisitPrior {
	v := OMLO21PatientVisitPrior{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	return v
}

type OMLO21PatientVisitPrior struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ParticipationInformation          []PRT
}

// NewOMLO21PatientVisitPriorSlice will construct a slice of type OMLO21PatientVisitPrior
func NewOMLO21PatientVisitPriorSlice(input hl7.HL7Type) []OMLO21PatientVisitPrior {
	values := make([]OMLO21PatientVisitPrior, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO21PatientVisitPrior(input.Index(i))
	}
	return values
}

// NewOMQO42Specimen creates an implementation of OMQO42Specimen
func NewOMQO42Specimen(input hl7.HL7Type) OMQO42Specimen {
	v := OMQO42Specimen{}
	v.Specimen = NewSPM(input.Index(0))
	v.SpecimenObservation = NewOMQO42SpecimenObservationSlice(input.Index(1))
	v.Container = NewOMQO42ContainerSlice(input.Index(2))
	return v
}

type OMQO42Specimen struct {
	Specimen            SPM
	SpecimenObservation []OMQO42SpecimenObservation
	Container           []OMQO42Container
}

// NewOMQO42SpecimenSlice will construct a slice of type OMQO42Specimen
func NewOMQO42SpecimenSlice(input hl7.HL7Type) []OMQO42Specimen {
	values := make([]OMQO42Specimen, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMQO42Specimen(input.Index(i))
	}
	return values
}

// NewOPUR25Specimen creates an implementation of OPUR25Specimen
func NewOPUR25Specimen(input hl7.HL7Type) OPUR25Specimen {
	v := OPUR25Specimen{}
	v.Specimen = NewSPM(input.Index(0))
	v.SpecimenObservation = NewOPUR25SpecimenObservationSlice(input.Index(1))
	v.Container = NewOPUR25ContainerSlice(input.Index(2))
	v.Order = NewOPUR25OrderSlice(input.Index(3))
	return v
}

type OPUR25Specimen struct {
	Specimen            SPM
	SpecimenObservation []OPUR25SpecimenObservation
	Container           []OPUR25Container
	Order               []OPUR25Order
}

// NewOPUR25SpecimenSlice will construct a slice of type OPUR25Specimen
func NewOPUR25SpecimenSlice(input hl7.HL7Type) []OPUR25Specimen {
	values := make([]OPUR25Specimen, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOPUR25Specimen(input.Index(i))
	}
	return values
}

// NewPPPPCCPathwayRole creates an implementation of PPPPCCPathwayRole
func NewPPPPCCPathwayRole(input hl7.HL7Type) PPPPCCPathwayRole {
	v := PPPPCCPathwayRole{}
	v.Role = NewROL(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type PPPPCCPathwayRole struct {
	Role     ROL
	Variance []VAR
}

// NewPPPPCCPathwayRoleSlice will construct a slice of type PPPPCCPathwayRole
func NewPPPPCCPathwayRoleSlice(input hl7.HL7Type) []PPPPCCPathwayRole {
	values := make([]PPPPCCPathwayRole, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPPPCCPathwayRole(input.Index(i))
	}
	return values
}

// NewADTA03Procedure creates an implementation of ADTA03Procedure
func NewADTA03Procedure(input hl7.HL7Type) ADTA03Procedure {
	v := ADTA03Procedure{}
	v.Procedures = NewPR1(input.Index(0))
	v.Role = NewROLSlice(input.Index(1))
	return v
}

type ADTA03Procedure struct {
	Procedures PR1
	Role       []ROL
}

// NewADTA03ProcedureSlice will construct a slice of type ADTA03Procedure
func NewADTA03ProcedureSlice(input hl7.HL7Type) []ADTA03Procedure {
	values := make([]ADTA03Procedure, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewADTA03Procedure(input.Index(i))
	}
	return values
}

// NewOPLO37OrderRelatedObservation creates an implementation of OPLO37OrderRelatedObservation
func NewOPLO37OrderRelatedObservation(input hl7.HL7Type) OPLO37OrderRelatedObservation {
	v := OPLO37OrderRelatedObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type OPLO37OrderRelatedObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewOPLO37OrderRelatedObservationSlice will construct a slice of type OPLO37OrderRelatedObservation
func NewOPLO37OrderRelatedObservationSlice(input hl7.HL7Type) []OPLO37OrderRelatedObservation {
	values := make([]OPLO37OrderRelatedObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOPLO37OrderRelatedObservation(input.Index(i))
	}
	return values
}

// NewSIUS18Resources creates an implementation of SIUS18Resources
func NewSIUS18Resources(input hl7.HL7Type) SIUS18Resources {
	v := SIUS18Resources{}
	v.ResourceGroup = NewRGS(input.Index(0))
	v.Service = NewSIUS18ServiceSlice(input.Index(1))
	v.GeneralResource = NewSIUS18GeneralResourceSlice(input.Index(2))
	v.LocationResource = NewSIUS18LocationResourceSlice(input.Index(3))
	v.PersonnelResource = NewSIUS18PersonnelResourceSlice(input.Index(4))
	return v
}

type SIUS18Resources struct {
	ResourceGroup     RGS
	Service           []SIUS18Service
	GeneralResource   []SIUS18GeneralResource
	LocationResource  []SIUS18LocationResource
	PersonnelResource []SIUS18PersonnelResource
}

// NewSIUS18ResourcesSlice will construct a slice of type SIUS18Resources
func NewSIUS18ResourcesSlice(input hl7.HL7Type) []SIUS18Resources {
	values := make([]SIUS18Resources, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS18Resources(input.Index(i))
	}
	return values
}

// NewPPGPCJProblemRole creates an implementation of PPGPCJProblemRole
func NewPPGPCJProblemRole(input hl7.HL7Type) PPGPCJProblemRole {
	v := PPGPCJProblemRole{}
	v.Role = NewROL(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type PPGPCJProblemRole struct {
	Role     ROL
	Variance []VAR
}

// NewPPGPCJProblemRoleSlice will construct a slice of type PPGPCJProblemRole
func NewPPGPCJProblemRoleSlice(input hl7.HL7Type) []PPGPCJProblemRole {
	values := make([]PPGPCJProblemRole, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPGPCJProblemRole(input.Index(i))
	}
	return values
}

// NewSIUS16GeneralResource creates an implementation of SIUS16GeneralResource
func NewSIUS16GeneralResource(input hl7.HL7Type) SIUS16GeneralResource {
	v := SIUS16GeneralResource{}
	v.AppointmentInformationGeneralResource = NewAIG(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS16GeneralResource struct {
	AppointmentInformationGeneralResource AIG
	NotesAndComments                      []NTE
}

// NewSIUS16GeneralResourceSlice will construct a slice of type SIUS16GeneralResource
func NewSIUS16GeneralResourceSlice(input hl7.HL7Type) []SIUS16GeneralResource {
	values := make([]SIUS16GeneralResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS16GeneralResource(input.Index(i))
	}
	return values
}

// NewSRMS10PersonnelResource creates an implementation of SRMS10PersonnelResource
func NewSRMS10PersonnelResource(input hl7.HL7Type) SRMS10PersonnelResource {
	v := SRMS10PersonnelResource{}
	v.AppointmentInformationPersonnelResource = NewAIP(input.Index(0))
	v.AppointmentPreferences = NewAPR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type SRMS10PersonnelResource struct {
	AppointmentInformationPersonnelResource AIP
	AppointmentPreferences                  APR
	NotesAndComments                        []NTE
}

// NewSRMS10PersonnelResourceSlice will construct a slice of type SRMS10PersonnelResource
func NewSRMS10PersonnelResourceSlice(input hl7.HL7Type) []SRMS10PersonnelResource {
	values := make([]SRMS10PersonnelResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS10PersonnelResource(input.Index(i))
	}
	return values
}

// NewDFTP11Insurance creates an implementation of DFTP11Insurance
func NewDFTP11Insurance(input hl7.HL7Type) DFTP11Insurance {
	v := DFTP11Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3Slice(input.Index(2))
	v.ParticipationInformation = NewPRTSlice(input.Index(3))
	v.Role = NewROLSlice(input.Index(4))
	return v
}

type DFTP11Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification []IN3
	ParticipationInformation                    []PRT
	Role                                        []ROL
}

// NewDFTP11InsuranceSlice will construct a slice of type DFTP11Insurance
func NewDFTP11InsuranceSlice(input hl7.HL7Type) []DFTP11Insurance {
	values := make([]DFTP11Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewDFTP11Insurance(input.Index(i))
	}
	return values
}

// NewORUR40PatientResult creates an implementation of ORUR40PatientResult
func NewORUR40PatientResult(input hl7.HL7Type) ORUR40PatientResult {
	v := ORUR40PatientResult{}
	v.Patient = NewORUR40Patient(input.Index(0))
	v.OrderObservation = NewORUR40OrderObservationSlice(input.Index(1))
	return v
}

type ORUR40PatientResult struct {
	Patient          ORUR40Patient
	OrderObservation []ORUR40OrderObservation
}

// NewORUR40PatientResultSlice will construct a slice of type ORUR40PatientResult
func NewORUR40PatientResultSlice(input hl7.HL7Type) []ORUR40PatientResult {
	values := make([]ORUR40PatientResult, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORUR40PatientResult(input.Index(i))
	}
	return values
}

// NewSRMS11Resources creates an implementation of SRMS11Resources
func NewSRMS11Resources(input hl7.HL7Type) SRMS11Resources {
	v := SRMS11Resources{}
	v.ResourceGroup = NewRGS(input.Index(0))
	v.Service = NewSRMS11ServiceSlice(input.Index(1))
	v.GeneralResource = NewSRMS11GeneralResourceSlice(input.Index(2))
	v.LocationResource = NewSRMS11LocationResourceSlice(input.Index(3))
	v.PersonnelResource = NewSRMS11PersonnelResourceSlice(input.Index(4))
	return v
}

type SRMS11Resources struct {
	ResourceGroup     RGS
	Service           []SRMS11Service
	GeneralResource   []SRMS11GeneralResource
	LocationResource  []SRMS11LocationResource
	PersonnelResource []SRMS11PersonnelResource
}

// NewSRMS11ResourcesSlice will construct a slice of type SRMS11Resources
func NewSRMS11ResourcesSlice(input hl7.HL7Type) []SRMS11Resources {
	values := make([]SRMS11Resources, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS11Resources(input.Index(i))
	}
	return values
}

// NewPPRPC2Order creates an implementation of PPRPC2Order
func NewPPRPC2Order(input hl7.HL7Type) PPRPC2Order {
	v := PPRPC2Order{}
	v.CommonOrder = NewORC(input.Index(0))
	v.OrderDetail = NewPPRPC2OrderDetail(input.Index(1))
	return v
}

type PPRPC2Order struct {
	CommonOrder ORC
	OrderDetail PPRPC2OrderDetail
}

// NewPPRPC2OrderSlice will construct a slice of type PPRPC2Order
func NewPPRPC2OrderSlice(input hl7.HL7Type) []PPRPC2Order {
	values := make([]PPRPC2Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPRPC2Order(input.Index(i))
	}
	return values
}

// NewCCRI18ClinicalOrder creates an implementation of CCRI18ClinicalOrder
func NewCCRI18ClinicalOrder(input hl7.HL7Type) CCRI18ClinicalOrder {
	v := CCRI18ClinicalOrder{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ClinicalOrderTiming = NewCCRI18ClinicalOrderTimingSlice(input.Index(1))
	v.ClinicalOrderDetail = NewCCRI18ClinicalOrderDetailSlice(input.Index(2))
	v.ClinicalTrialIdentification = NewCTISlice(input.Index(3))
	return v
}

type CCRI18ClinicalOrder struct {
	CommonOrder                 ORC
	ClinicalOrderTiming         []CCRI18ClinicalOrderTiming
	ClinicalOrderDetail         []CCRI18ClinicalOrderDetail
	ClinicalTrialIdentification []CTI
}

// NewCCRI18ClinicalOrderSlice will construct a slice of type CCRI18ClinicalOrder
func NewCCRI18ClinicalOrderSlice(input hl7.HL7Type) []CCRI18ClinicalOrder {
	values := make([]CCRI18ClinicalOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI18ClinicalOrder(input.Index(i))
	}
	return values
}

// NewSIUS24Resources creates an implementation of SIUS24Resources
func NewSIUS24Resources(input hl7.HL7Type) SIUS24Resources {
	v := SIUS24Resources{}
	v.ResourceGroup = NewRGS(input.Index(0))
	v.Service = NewSIUS24ServiceSlice(input.Index(1))
	v.GeneralResource = NewSIUS24GeneralResourceSlice(input.Index(2))
	v.LocationResource = NewSIUS24LocationResourceSlice(input.Index(3))
	v.PersonnelResource = NewSIUS24PersonnelResourceSlice(input.Index(4))
	return v
}

type SIUS24Resources struct {
	ResourceGroup     RGS
	Service           []SIUS24Service
	GeneralResource   []SIUS24GeneralResource
	LocationResource  []SIUS24LocationResource
	PersonnelResource []SIUS24PersonnelResource
}

// NewSIUS24ResourcesSlice will construct a slice of type SIUS24Resources
func NewSIUS24ResourcesSlice(input hl7.HL7Type) []SIUS24Resources {
	values := make([]SIUS24Resources, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS24Resources(input.Index(i))
	}
	return values
}

// NewADTA60AdverseReactionGroup creates an implementation of ADTA60AdverseReactionGroup
func NewADTA60AdverseReactionGroup(input hl7.HL7Type) ADTA60AdverseReactionGroup {
	v := ADTA60AdverseReactionGroup{}
	v.PatientAdverseReactionInformation = NewIAM(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.AllergyReaction = NewIARSlice(input.Index(2))
	return v
}

type ADTA60AdverseReactionGroup struct {
	PatientAdverseReactionInformation IAM
	NotesAndComments                  []NTE
	AllergyReaction                   []IAR
}

// NewADTA60AdverseReactionGroupSlice will construct a slice of type ADTA60AdverseReactionGroup
func NewADTA60AdverseReactionGroupSlice(input hl7.HL7Type) []ADTA60AdverseReactionGroup {
	values := make([]ADTA60AdverseReactionGroup, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewADTA60AdverseReactionGroup(input.Index(i))
	}
	return values
}

// NewOMGO19PatientVisit creates an implementation of OMGO19PatientVisit
func NewOMGO19PatientVisit(input hl7.HL7Type) OMGO19PatientVisit {
	v := OMGO19PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	return v
}

type OMGO19PatientVisit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ParticipationInformation          []PRT
}

// NewOMGO19PatientVisitSlice will construct a slice of type OMGO19PatientVisit
func NewOMGO19PatientVisitSlice(input hl7.HL7Type) []OMGO19PatientVisit {
	values := make([]OMGO19PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMGO19PatientVisit(input.Index(i))
	}
	return values
}

// NewCCRI16MedicationOrderObservation creates an implementation of CCRI16MedicationOrderObservation
func NewCCRI16MedicationOrderObservation(input hl7.HL7Type) CCRI16MedicationOrderObservation {
	v := CCRI16MedicationOrderObservation{}
	v.ObservationResult = NewOBXSlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CCRI16MedicationOrderObservation struct {
	ObservationResult        []OBX
	ParticipationInformation []PRT
}

// NewCCRI16MedicationOrderObservationSlice will construct a slice of type CCRI16MedicationOrderObservation
func NewCCRI16MedicationOrderObservationSlice(input hl7.HL7Type) []CCRI16MedicationOrderObservation {
	values := make([]CCRI16MedicationOrderObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI16MedicationOrderObservation(input.Index(i))
	}
	return values
}

// NewADTA28Insurance creates an implementation of ADTA28Insurance
func NewADTA28Insurance(input hl7.HL7Type) ADTA28Insurance {
	v := ADTA28Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3Slice(input.Index(2))
	v.Role = NewROLSlice(input.Index(3))
	v.AuthorizationInformation = NewAUTSlice(input.Index(4))
	v.ReferralInformation = NewRF1Slice(input.Index(5))
	return v
}

type ADTA28Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification []IN3
	Role                                        []ROL
	AuthorizationInformation                    []AUT
	ReferralInformation                         []RF1
}

// NewADTA28InsuranceSlice will construct a slice of type ADTA28Insurance
func NewADTA28InsuranceSlice(input hl7.HL7Type) []ADTA28Insurance {
	values := make([]ADTA28Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewADTA28Insurance(input.Index(i))
	}
	return values
}

// NewOULR22Specimen creates an implementation of OULR22Specimen
func NewOULR22Specimen(input hl7.HL7Type) OULR22Specimen {
	v := OULR22Specimen{}
	v.Specimen = NewSPM(input.Index(0))
	v.SpecimenObservation = NewOULR22SpecimenObservationSlice(input.Index(1))
	v.Container = NewOULR22ContainerSlice(input.Index(2))
	v.Order = NewOULR22OrderSlice(input.Index(3))
	return v
}

type OULR22Specimen struct {
	Specimen            SPM
	SpecimenObservation []OULR22SpecimenObservation
	Container           []OULR22Container
	Order               []OULR22Order
}

// NewOULR22SpecimenSlice will construct a slice of type OULR22Specimen
func NewOULR22SpecimenSlice(input hl7.HL7Type) []OULR22Specimen {
	values := make([]OULR22Specimen, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOULR22Specimen(input.Index(i))
	}
	return values
}

// NewCCMI21Pathway creates an implementation of CCMI21Pathway
func NewCCMI21Pathway(input hl7.HL7Type) CCMI21Pathway {
	v := CCMI21Pathway{}
	v.Pathway = NewPTH(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	v.RolePathway = NewCCMI21RolePathwaySlice(input.Index(2))
	v.PathwayObservation = NewCCMI21PathwayObservationSlice(input.Index(3))
	return v
}

type CCMI21Pathway struct {
	Pathway            PTH
	Variance           []VAR
	RolePathway        []CCMI21RolePathway
	PathwayObservation []CCMI21PathwayObservation
}

// NewCCMI21PathwaySlice will construct a slice of type CCMI21Pathway
func NewCCMI21PathwaySlice(input hl7.HL7Type) []CCMI21Pathway {
	values := make([]CCMI21Pathway, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCMI21Pathway(input.Index(i))
	}
	return values
}

// NewVXUV04PatientVisit creates an implementation of VXUV04PatientVisit
func NewVXUV04PatientVisit(input hl7.HL7Type) VXUV04PatientVisit {
	v := VXUV04PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	v.AccessRestriction = NewARVSlice(input.Index(2))
	return v
}

type VXUV04PatientVisit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	AccessRestriction                 []ARV
}

// NewVXUV04PatientVisitSlice will construct a slice of type VXUV04PatientVisit
func NewVXUV04PatientVisitSlice(input hl7.HL7Type) []VXUV04PatientVisit {
	values := make([]VXUV04PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewVXUV04PatientVisit(input.Index(i))
	}
	return values
}

// NewPEXP07TimingQty creates an implementation of PEXP07TimingQty
func NewPEXP07TimingQty(input hl7.HL7Type) PEXP07TimingQty {
	v := PEXP07TimingQty{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type PEXP07TimingQty struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewPEXP07TimingQtySlice will construct a slice of type PEXP07TimingQty
func NewPEXP07TimingQtySlice(input hl7.HL7Type) []PEXP07TimingQty {
	values := make([]PEXP07TimingQty, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPEXP07TimingQty(input.Index(i))
	}
	return values
}

// NewCCRI16RoleProblem creates an implementation of CCRI16RoleProblem
func NewCCRI16RoleProblem(input hl7.HL7Type) CCRI16RoleProblem {
	v := CCRI16RoleProblem{}
	v.RoleProblemObject = NewCCRI16RoleProblemObject(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type CCRI16RoleProblem struct {
	RoleProblemObject CCRI16RoleProblemObject
	Variance          []VAR
}

// NewCCRI16RoleProblemSlice will construct a slice of type CCRI16RoleProblem
func NewCCRI16RoleProblemSlice(input hl7.HL7Type) []CCRI16RoleProblem {
	values := make([]CCRI16RoleProblem, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI16RoleProblem(input.Index(i))
	}
	return values
}

// NewMDMT08Observation creates an implementation of MDMT08Observation
func NewMDMT08Observation(input hl7.HL7Type) MDMT08Observation {
	v := MDMT08Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type MDMT08Observation struct {
	ObservationResult OBX
	NotesAndComments  []NTE
}

// NewMDMT08ObservationSlice will construct a slice of type MDMT08Observation
func NewMDMT08ObservationSlice(input hl7.HL7Type) []MDMT08Observation {
	values := make([]MDMT08Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMDMT08Observation(input.Index(i))
	}
	return values
}

// NewEHCE20Diagnosis creates an implementation of EHCE20Diagnosis
func NewEHCE20Diagnosis(input hl7.HL7Type) EHCE20Diagnosis {
	v := EHCE20Diagnosis{}
	v.Diagnosis = NewDG1(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type EHCE20Diagnosis struct {
	Diagnosis        DG1
	NotesAndComments []NTE
}

// NewEHCE20DiagnosisSlice will construct a slice of type EHCE20Diagnosis
func NewEHCE20DiagnosisSlice(input hl7.HL7Type) []EHCE20Diagnosis {
	values := make([]EHCE20Diagnosis, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewEHCE20Diagnosis(input.Index(i))
	}
	return values
}

// NewPGLPC6Problem creates an implementation of PGLPC6Problem
func NewPGLPC6Problem(input hl7.HL7Type) PGLPC6Problem {
	v := PGLPC6Problem{}
	v.ProblemDetails = NewPRB(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Variance = NewVARSlice(input.Index(2))
	v.ProblemRole = NewPGLPC6ProblemRoleSlice(input.Index(3))
	v.ProblemObservation = NewPGLPC6ProblemObservationSlice(input.Index(4))
	return v
}

type PGLPC6Problem struct {
	ProblemDetails     PRB
	NotesAndComments   []NTE
	Variance           []VAR
	ProblemRole        []PGLPC6ProblemRole
	ProblemObservation []PGLPC6ProblemObservation
}

// NewPGLPC6ProblemSlice will construct a slice of type PGLPC6Problem
func NewPGLPC6ProblemSlice(input hl7.HL7Type) []PGLPC6Problem {
	values := make([]PGLPC6Problem, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPGLPC6Problem(input.Index(i))
	}
	return values
}

// NewRSPZ88Observation creates an implementation of RSPZ88Observation
func NewRSPZ88Observation(input hl7.HL7Type) RSPZ88Observation {
	v := RSPZ88Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type RSPZ88Observation struct {
	ObservationResult OBX
	NotesAndComments  []NTE
}

// NewRSPZ88ObservationSlice will construct a slice of type RSPZ88Observation
func NewRSPZ88ObservationSlice(input hl7.HL7Type) []RSPZ88Observation {
	values := make([]RSPZ88Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPZ88Observation(input.Index(i))
	}
	return values
}

// NewCCMI21GoalObservation creates an implementation of CCMI21GoalObservation
func NewCCMI21GoalObservation(input hl7.HL7Type) CCMI21GoalObservation {
	v := CCMI21GoalObservation{}
	v.ObservationResult = NewOBXSlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CCMI21GoalObservation struct {
	ObservationResult        []OBX
	ParticipationInformation []PRT
}

// NewCCMI21GoalObservationSlice will construct a slice of type CCMI21GoalObservation
func NewCCMI21GoalObservationSlice(input hl7.HL7Type) []CCMI21GoalObservation {
	values := make([]CCMI21GoalObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCMI21GoalObservation(input.Index(i))
	}
	return values
}

// NewSRMS10Service creates an implementation of SRMS10Service
func NewSRMS10Service(input hl7.HL7Type) SRMS10Service {
	v := SRMS10Service{}
	v.AppointmentInformation = NewAIS(input.Index(0))
	v.AppointmentPreferences = NewAPR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type SRMS10Service struct {
	AppointmentInformation AIS
	AppointmentPreferences APR
	NotesAndComments       []NTE
}

// NewSRMS10ServiceSlice will construct a slice of type SRMS10Service
func NewSRMS10ServiceSlice(input hl7.HL7Type) []SRMS10Service {
	values := make([]SRMS10Service, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS10Service(input.Index(i))
	}
	return values
}

// NewPEXP07RxAdministration creates an implementation of PEXP07RxAdministration
func NewPEXP07RxAdministration(input hl7.HL7Type) PEXP07RxAdministration {
	v := PEXP07RxAdministration{}
	v.PharmacyTreatmentAdministration = NewRXA(input.Index(0))
	v.PharmacyTreatmentRoute = NewRXR(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	return v
}

type PEXP07RxAdministration struct {
	PharmacyTreatmentAdministration RXA
	PharmacyTreatmentRoute          RXR
	ParticipationInformation        []PRT
}

// NewPEXP07RxAdministrationSlice will construct a slice of type PEXP07RxAdministration
func NewPEXP07RxAdministrationSlice(input hl7.HL7Type) []PEXP07RxAdministration {
	values := make([]PEXP07RxAdministration, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPEXP07RxAdministration(input.Index(i))
	}
	return values
}

// NewRREO26Timing creates an implementation of RREO26Timing
func NewRREO26Timing(input hl7.HL7Type) RREO26Timing {
	v := RREO26Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type RREO26Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewRREO26TimingSlice will construct a slice of type RREO26Timing
func NewRREO26TimingSlice(input hl7.HL7Type) []RREO26Timing {
	values := make([]RREO26Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRREO26Timing(input.Index(i))
	}
	return values
}

// NewRASO17Order creates an implementation of RASO17Order
func NewRASO17Order(input hl7.HL7Type) RASO17Order {
	v := RASO17Order{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.Timing = NewRASO17TimingSlice(input.Index(2))
	v.OrderDetail = NewRASO17OrderDetail(input.Index(3))
	v.Encoding = NewRASO17Encoding(input.Index(4))
	v.Administration = NewRASO17AdministrationSlice(input.Index(5))
	v.ClinicalTrialIdentification = NewCTISlice(input.Index(6))
	return v
}

type RASO17Order struct {
	CommonOrder                 ORC
	ParticipationInformation    []PRT
	Timing                      []RASO17Timing
	OrderDetail                 RASO17OrderDetail
	Encoding                    RASO17Encoding
	Administration              []RASO17Administration
	ClinicalTrialIdentification []CTI
}

// NewRASO17OrderSlice will construct a slice of type RASO17Order
func NewRASO17OrderSlice(input hl7.HL7Type) []RASO17Order {
	values := make([]RASO17Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRASO17Order(input.Index(i))
	}
	return values
}

// NewPPPPCDGoal creates an implementation of PPPPCDGoal
func NewPPPPCDGoal(input hl7.HL7Type) PPPPCDGoal {
	v := PPPPCDGoal{}
	v.GoalDetail = NewGOL(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Variance = NewVARSlice(input.Index(2))
	v.GoalRole = NewPPPPCDGoalRoleSlice(input.Index(3))
	v.GoalObservation = NewPPPPCDGoalObservationSlice(input.Index(4))
	return v
}

type PPPPCDGoal struct {
	GoalDetail       GOL
	NotesAndComments []NTE
	Variance         []VAR
	GoalRole         []PPPPCDGoalRole
	GoalObservation  []PPPPCDGoalObservation
}

// NewPPPPCDGoalSlice will construct a slice of type PPPPCDGoal
func NewPPPPCDGoalSlice(input hl7.HL7Type) []PPPPCDGoal {
	values := make([]PPPPCDGoal, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPPPCDGoal(input.Index(i))
	}
	return values
}

// NewPMUB07Certificate creates an implementation of PMUB07Certificate
func NewPMUB07Certificate(input hl7.HL7Type) PMUB07Certificate {
	v := PMUB07Certificate{}
	v.CertificateDetail = NewCER(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.Role = NewROLSlice(input.Index(2))
	return v
}

type PMUB07Certificate struct {
	CertificateDetail        CER
	ParticipationInformation []PRT
	Role                     []ROL
}

// NewPMUB07CertificateSlice will construct a slice of type PMUB07Certificate
func NewPMUB07CertificateSlice(input hl7.HL7Type) []PMUB07Certificate {
	values := make([]PMUB07Certificate, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPMUB07Certificate(input.Index(i))
	}
	return values
}

// NewCCRI18MedicationOrderObservation creates an implementation of CCRI18MedicationOrderObservation
func NewCCRI18MedicationOrderObservation(input hl7.HL7Type) CCRI18MedicationOrderObservation {
	v := CCRI18MedicationOrderObservation{}
	v.ObservationResult = NewOBXSlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CCRI18MedicationOrderObservation struct {
	ObservationResult        []OBX
	ParticipationInformation []PRT
}

// NewCCRI18MedicationOrderObservationSlice will construct a slice of type CCRI18MedicationOrderObservation
func NewCCRI18MedicationOrderObservationSlice(input hl7.HL7Type) []CCRI18MedicationOrderObservation {
	values := make([]CCRI18MedicationOrderObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI18MedicationOrderObservation(input.Index(i))
	}
	return values
}

// NewCQUI19AppointmentHistory creates an implementation of CQUI19AppointmentHistory
func NewCQUI19AppointmentHistory(input hl7.HL7Type) CQUI19AppointmentHistory {
	v := CQUI19AppointmentHistory{}
	v.SchedulingActivityInformation = NewSCH(input.Index(0))
	v.Resources = NewCQUI19ResourcesSlice(input.Index(1))
	return v
}

type CQUI19AppointmentHistory struct {
	SchedulingActivityInformation SCH
	Resources                     []CQUI19Resources
}

// NewCQUI19AppointmentHistorySlice will construct a slice of type CQUI19AppointmentHistory
func NewCQUI19AppointmentHistorySlice(input hl7.HL7Type) []CQUI19AppointmentHistory {
	values := make([]CQUI19AppointmentHistory, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCQUI19AppointmentHistory(input.Index(i))
	}
	return values
}

// NewCCRI16ClinicalOrderObservation creates an implementation of CCRI16ClinicalOrderObservation
func NewCCRI16ClinicalOrderObservation(input hl7.HL7Type) CCRI16ClinicalOrderObservation {
	v := CCRI16ClinicalOrderObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CCRI16ClinicalOrderObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewCCRI16ClinicalOrderObservationSlice will construct a slice of type CCRI16ClinicalOrderObservation
func NewCCRI16ClinicalOrderObservationSlice(input hl7.HL7Type) []CCRI16ClinicalOrderObservation {
	values := make([]CCRI16ClinicalOrderObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI16ClinicalOrderObservation(input.Index(i))
	}
	return values
}

// NewRDEO25Component creates an implementation of RDEO25Component
func NewRDEO25Component(input hl7.HL7Type) RDEO25Component {
	v := RDEO25Component{}
	v.PharmacyTreatmentComponentOrder = NewRXC(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type RDEO25Component struct {
	PharmacyTreatmentComponentOrder RXC
	NotesAndComments                []NTE
}

// NewRDEO25ComponentSlice will construct a slice of type RDEO25Component
func NewRDEO25ComponentSlice(input hl7.HL7Type) []RDEO25Component {
	values := make([]RDEO25Component, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRDEO25Component(input.Index(i))
	}
	return values
}

// NewRGVO15Components creates an implementation of RGVO15Components
func NewRGVO15Components(input hl7.HL7Type) RGVO15Components {
	v := RGVO15Components{}
	v.PharmacyTreatmentComponentOrder = NewRXC(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type RGVO15Components struct {
	PharmacyTreatmentComponentOrder RXC
	NotesAndComments                []NTE
}

// NewRGVO15ComponentsSlice will construct a slice of type RGVO15Components
func NewRGVO15ComponentsSlice(input hl7.HL7Type) []RGVO15Components {
	values := make([]RGVO15Components, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRGVO15Components(input.Index(i))
	}
	return values
}

// NewCQUI19RoleClinicalHistoryObject creates an implementation of CQUI19RoleClinicalHistoryObject
func NewCQUI19RoleClinicalHistoryObject(input hl7.HL7Type) CQUI19RoleClinicalHistoryObject {
	v := CQUI19RoleClinicalHistoryObject{}
	v.Role = NewROL(input.Index(0))
	v.ProviderData = NewPRD(input.Index(1))
	return v
}

type CQUI19RoleClinicalHistoryObject struct {
	Role         ROL
	ProviderData PRD
}

// NewCQUI19RoleClinicalHistoryObjectSlice will construct a slice of type CQUI19RoleClinicalHistoryObject
func NewCQUI19RoleClinicalHistoryObjectSlice(input hl7.HL7Type) []CQUI19RoleClinicalHistoryObject {
	values := make([]CQUI19RoleClinicalHistoryObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCQUI19RoleClinicalHistoryObject(input.Index(i))
	}
	return values
}

// NewADTA13Insurance creates an implementation of ADTA13Insurance
func NewADTA13Insurance(input hl7.HL7Type) ADTA13Insurance {
	v := ADTA13Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3Slice(input.Index(2))
	v.Role = NewROLSlice(input.Index(3))
	v.AuthorizationInformation = NewAUTSlice(input.Index(4))
	v.ReferralInformation = NewRF1Slice(input.Index(5))
	return v
}

type ADTA13Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification []IN3
	Role                                        []ROL
	AuthorizationInformation                    []AUT
	ReferralInformation                         []RF1
}

// NewADTA13InsuranceSlice will construct a slice of type ADTA13Insurance
func NewADTA13InsuranceSlice(input hl7.HL7Type) []ADTA13Insurance {
	values := make([]ADTA13Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewADTA13Insurance(input.Index(i))
	}
	return values
}

// NewPPPPCCOrderDetail creates an implementation of PPPPCCOrderDetail
func NewPPPPCCOrderDetail(input hl7.HL7Type) PPPPCCOrderDetail {
	v := PPPPCCOrderDetail{}
	v.Choice = NewPPPPCCChoice(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Variance = NewVARSlice(input.Index(2))
	v.OrderObservation = NewPPPPCCOrderObservationSlice(input.Index(3))
	return v
}

type PPPPCCOrderDetail struct {
	Choice           PPPPCCChoice
	NotesAndComments []NTE
	Variance         []VAR
	OrderObservation []PPPPCCOrderObservation
}

// NewPPPPCCOrderDetailSlice will construct a slice of type PPPPCCOrderDetail
func NewPPPPCCOrderDetailSlice(input hl7.HL7Type) []PPPPCCOrderDetail {
	values := make([]PPPPCCOrderDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPPPCCOrderDetail(input.Index(i))
	}
	return values
}

// NewADTA41Patient creates an implementation of ADTA41Patient
func NewADTA41Patient(input hl7.HL7Type) ADTA41Patient {
	v := ADTA41Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.MergePatientInformation = NewMRG(input.Index(2))
	v.PatientVisit = NewPV1(input.Index(3))
	return v
}

type ADTA41Patient struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	MergePatientInformation      MRG
	PatientVisit                 PV1
}

// NewADTA41PatientSlice will construct a slice of type ADTA41Patient
func NewADTA41PatientSlice(input hl7.HL7Type) []ADTA41Patient {
	values := make([]ADTA41Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewADTA41Patient(input.Index(i))
	}
	return values
}

// NewCCRI17RoleProblemObject creates an implementation of CCRI17RoleProblemObject
func NewCCRI17RoleProblemObject(input hl7.HL7Type) CCRI17RoleProblemObject {
	v := CCRI17RoleProblemObject{}
	v.Role = NewROL(input.Index(0))
	v.ProviderData = NewPRD(input.Index(1))
	return v
}

type CCRI17RoleProblemObject struct {
	Role         ROL
	ProviderData PRD
}

// NewCCRI17RoleProblemObjectSlice will construct a slice of type CCRI17RoleProblemObject
func NewCCRI17RoleProblemObjectSlice(input hl7.HL7Type) []CCRI17RoleProblemObject {
	values := make([]CCRI17RoleProblemObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI17RoleProblemObject(input.Index(i))
	}
	return values
}

// NewSRMS08Observation creates an implementation of SRMS08Observation
func NewSRMS08Observation(input hl7.HL7Type) SRMS08Observation {
	v := SRMS08Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type SRMS08Observation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewSRMS08ObservationSlice will construct a slice of type SRMS08Observation
func NewSRMS08ObservationSlice(input hl7.HL7Type) []SRMS08Observation {
	values := make([]SRMS08Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS08Observation(input.Index(i))
	}
	return values
}

// NewOMLO21TimingPrior creates an implementation of OMLO21TimingPrior
func NewOMLO21TimingPrior(input hl7.HL7Type) OMLO21TimingPrior {
	v := OMLO21TimingPrior{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type OMLO21TimingPrior struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewOMLO21TimingPriorSlice will construct a slice of type OMLO21TimingPrior
func NewOMLO21TimingPriorSlice(input hl7.HL7Type) []OMLO21TimingPrior {
	values := make([]OMLO21TimingPrior, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO21TimingPrior(input.Index(i))
	}
	return values
}

// NewCCRI17ClinicalOrderDetail creates an implementation of CCRI17ClinicalOrderDetail
func NewCCRI17ClinicalOrderDetail(input hl7.HL7Type) CCRI17ClinicalOrderDetail {
	v := CCRI17ClinicalOrderDetail{}
	v.ClinicalOrderObject = NewCCRI17ClinicalOrderObject(input.Index(0))
	v.ClinicalOrderObservation = NewCCRI17ClinicalOrderObservationSlice(input.Index(1))
	return v
}

type CCRI17ClinicalOrderDetail struct {
	ClinicalOrderObject      CCRI17ClinicalOrderObject
	ClinicalOrderObservation []CCRI17ClinicalOrderObservation
}

// NewCCRI17ClinicalOrderDetailSlice will construct a slice of type CCRI17ClinicalOrderDetail
func NewCCRI17ClinicalOrderDetailSlice(input hl7.HL7Type) []CCRI17ClinicalOrderDetail {
	values := make([]CCRI17ClinicalOrderDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI17ClinicalOrderDetail(input.Index(i))
	}
	return values
}

// NewCCMI21MedicationOrderObservation creates an implementation of CCMI21MedicationOrderObservation
func NewCCMI21MedicationOrderObservation(input hl7.HL7Type) CCMI21MedicationOrderObservation {
	v := CCMI21MedicationOrderObservation{}
	v.ObservationResult = NewOBXSlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CCMI21MedicationOrderObservation struct {
	ObservationResult        []OBX
	ParticipationInformation []PRT
}

// NewCCMI21MedicationOrderObservationSlice will construct a slice of type CCMI21MedicationOrderObservation
func NewCCMI21MedicationOrderObservationSlice(input hl7.HL7Type) []CCMI21MedicationOrderObservation {
	values := make([]CCMI21MedicationOrderObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCMI21MedicationOrderObservation(input.Index(i))
	}
	return values
}

// NewRQAI10GuarantorInsurance creates an implementation of RQAI10GuarantorInsurance
func NewRQAI10GuarantorInsurance(input hl7.HL7Type) RQAI10GuarantorInsurance {
	v := RQAI10GuarantorInsurance{}
	v.Guarantor = NewGT1Slice(input.Index(0))
	v.Insurance = NewRQAI10InsuranceSlice(input.Index(1))
	return v
}

type RQAI10GuarantorInsurance struct {
	Guarantor []GT1
	Insurance []RQAI10Insurance
}

// NewRQAI10GuarantorInsuranceSlice will construct a slice of type RQAI10GuarantorInsurance
func NewRQAI10GuarantorInsuranceSlice(input hl7.HL7Type) []RQAI10GuarantorInsurance {
	values := make([]RQAI10GuarantorInsurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQAI10GuarantorInsurance(input.Index(i))
	}
	return values
}

// NewOMLO35TimingPrior creates an implementation of OMLO35TimingPrior
func NewOMLO35TimingPrior(input hl7.HL7Type) OMLO35TimingPrior {
	v := OMLO35TimingPrior{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type OMLO35TimingPrior struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewOMLO35TimingPriorSlice will construct a slice of type OMLO35TimingPrior
func NewOMLO35TimingPriorSlice(input hl7.HL7Type) []OMLO35TimingPrior {
	values := make([]OMLO35TimingPrior, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO35TimingPrior(input.Index(i))
	}
	return values
}

// NewPPGPCJPathwayRole creates an implementation of PPGPCJPathwayRole
func NewPPGPCJPathwayRole(input hl7.HL7Type) PPGPCJPathwayRole {
	v := PPGPCJPathwayRole{}
	v.Role = NewROL(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type PPGPCJPathwayRole struct {
	Role     ROL
	Variance []VAR
}

// NewPPGPCJPathwayRoleSlice will construct a slice of type PPGPCJPathwayRole
func NewPPGPCJPathwayRoleSlice(input hl7.HL7Type) []PPGPCJPathwayRole {
	values := make([]PPGPCJPathwayRole, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPGPCJPathwayRole(input.Index(i))
	}
	return values
}

// NewRSPK33Donnor creates an implementation of RSPK33Donnor
func NewRSPK33Donnor(input hl7.HL7Type) RSPK33Donnor {
	v := RSPK33Donnor{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.AccessRestriction = NewARVSlice(input.Index(1))
	return v
}

type RSPK33Donnor struct {
	PatientIdentification PID
	AccessRestriction     []ARV
}

// NewRSPK33DonnorSlice will construct a slice of type RSPK33Donnor
func NewRSPK33DonnorSlice(input hl7.HL7Type) []RSPK33Donnor {
	values := make([]RSPK33Donnor, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPK33Donnor(input.Index(i))
	}
	return values
}

// NewRRII13Observation creates an implementation of RRII13Observation
func NewRRII13Observation(input hl7.HL7Type) RRII13Observation {
	v := RRII13Observation{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.ResultsNotes = NewRRII13ResultsNotesSlice(input.Index(2))
	return v
}

type RRII13Observation struct {
	ObservationRequest OBR
	NotesAndComments   []NTE
	ResultsNotes       []RRII13ResultsNotes
}

// NewRRII13ObservationSlice will construct a slice of type RRII13Observation
func NewRRII13ObservationSlice(input hl7.HL7Type) []RRII13Observation {
	values := make([]RRII13Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRRII13Observation(input.Index(i))
	}
	return values
}

// NewSRRS09Service creates an implementation of SRRS09Service
func NewSRRS09Service(input hl7.HL7Type) SRRS09Service {
	v := SRRS09Service{}
	v.AppointmentInformation = NewAIS(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SRRS09Service struct {
	AppointmentInformation AIS
	NotesAndComments       []NTE
}

// NewSRRS09ServiceSlice will construct a slice of type SRRS09Service
func NewSRRS09ServiceSlice(input hl7.HL7Type) []SRRS09Service {
	values := make([]SRRS09Service, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS09Service(input.Index(i))
	}
	return values
}

// NewMFNM12MfObsOtherAttributes creates an implementation of MFNM12MfObsOtherAttributes
func NewMFNM12MfObsOtherAttributes(input hl7.HL7Type) MFNM12MfObsOtherAttributes {
	v := MFNM12MfObsOtherAttributes{}
	v.AdditionalBasicAttributes = NewOM7(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type MFNM12MfObsOtherAttributes struct {
	AdditionalBasicAttributes OM7
	ParticipationInformation  []PRT
}

// NewMFNM12MfObsOtherAttributesSlice will construct a slice of type MFNM12MfObsOtherAttributes
func NewMFNM12MfObsOtherAttributesSlice(input hl7.HL7Type) []MFNM12MfObsOtherAttributes {
	values := make([]MFNM12MfObsOtherAttributes, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMFNM12MfObsOtherAttributes(input.Index(i))
	}
	return values
}

// NewORLO22Specimen creates an implementation of ORLO22Specimen
func NewORLO22Specimen(input hl7.HL7Type) ORLO22Specimen {
	v := ORLO22Specimen{}
	v.Specimen = NewSPM(input.Index(0))
	v.SpecimenContainerDetail = NewSACSlice(input.Index(1))
	return v
}

type ORLO22Specimen struct {
	Specimen                SPM
	SpecimenContainerDetail []SAC
}

// NewORLO22SpecimenSlice will construct a slice of type ORLO22Specimen
func NewORLO22SpecimenSlice(input hl7.HL7Type) []ORLO22Specimen {
	values := make([]ORLO22Specimen, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORLO22Specimen(input.Index(i))
	}
	return values
}

// NewPPRPC3ProblemObservation creates an implementation of PPRPC3ProblemObservation
func NewPPRPC3ProblemObservation(input hl7.HL7Type) PPRPC3ProblemObservation {
	v := PPRPC3ProblemObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type PPRPC3ProblemObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewPPRPC3ProblemObservationSlice will construct a slice of type PPRPC3ProblemObservation
func NewPPRPC3ProblemObservationSlice(input hl7.HL7Type) []PPRPC3ProblemObservation {
	values := make([]PPRPC3ProblemObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPRPC3ProblemObservation(input.Index(i))
	}
	return values
}

// NewRQAI11Authorization2 creates an implementation of RQAI11Authorization2
func NewRQAI11Authorization2(input hl7.HL7Type) RQAI11Authorization2 {
	v := RQAI11Authorization2{}
	v.AuthorizationInformation = NewAUT(input.Index(0))
	v.ContactData = NewCTD(input.Index(1))
	return v
}

type RQAI11Authorization2 struct {
	AuthorizationInformation AUT
	ContactData              CTD
}

// NewRQAI11Authorization2Slice will construct a slice of type RQAI11Authorization2
func NewRQAI11Authorization2Slice(input hl7.HL7Type) []RQAI11Authorization2 {
	values := make([]RQAI11Authorization2, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQAI11Authorization2(input.Index(i))
	}
	return values
}

// NewDFTP11FinancialInsurance creates an implementation of DFTP11FinancialInsurance
func NewDFTP11FinancialInsurance(input hl7.HL7Type) DFTP11FinancialInsurance {
	v := DFTP11FinancialInsurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3Slice(input.Index(2))
	v.ParticipationInformation = NewPRTSlice(input.Index(3))
	v.Role = NewROLSlice(input.Index(4))
	return v
}

type DFTP11FinancialInsurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification []IN3
	ParticipationInformation                    []PRT
	Role                                        []ROL
}

// NewDFTP11FinancialInsuranceSlice will construct a slice of type DFTP11FinancialInsurance
func NewDFTP11FinancialInsuranceSlice(input hl7.HL7Type) []DFTP11FinancialInsurance {
	values := make([]DFTP11FinancialInsurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewDFTP11FinancialInsurance(input.Index(i))
	}
	return values
}

// NewEHCE15PslItemInfo creates an implementation of EHCE15PslItemInfo
func NewEHCE15PslItemInfo(input hl7.HL7Type) EHCE15PslItemInfo {
	v := EHCE15PslItemInfo{}
	v.ProductServiceLineItem = NewPSL(input.Index(0))
	v.Adjustment = NewADJSlice(input.Index(1))
	return v
}

type EHCE15PslItemInfo struct {
	ProductServiceLineItem PSL
	Adjustment             []ADJ
}

// NewEHCE15PslItemInfoSlice will construct a slice of type EHCE15PslItemInfo
func NewEHCE15PslItemInfoSlice(input hl7.HL7Type) []EHCE15PslItemInfo {
	values := make([]EHCE15PslItemInfo, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewEHCE15PslItemInfo(input.Index(i))
	}
	return values
}

// NewMDMT01CommonOrder creates an implementation of MDMT01CommonOrder
func NewMDMT01CommonOrder(input hl7.HL7Type) MDMT01CommonOrder {
	v := MDMT01CommonOrder{}
	v.CommonOrder = NewORC(input.Index(0))
	v.Timing = NewMDMT01TimingSlice(input.Index(1))
	v.ObservationRequest = NewOBR(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	return v
}

type MDMT01CommonOrder struct {
	CommonOrder        ORC
	Timing             []MDMT01Timing
	ObservationRequest OBR
	NotesAndComments   []NTE
}

// NewMDMT01CommonOrderSlice will construct a slice of type MDMT01CommonOrder
func NewMDMT01CommonOrderSlice(input hl7.HL7Type) []MDMT01CommonOrder {
	values := make([]MDMT01CommonOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMDMT01CommonOrder(input.Index(i))
	}
	return values
}

// NewSIUS21Service creates an implementation of SIUS21Service
func NewSIUS21Service(input hl7.HL7Type) SIUS21Service {
	v := SIUS21Service{}
	v.AppointmentInformation = NewAIS(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS21Service struct {
	AppointmentInformation AIS
	NotesAndComments       []NTE
}

// NewSIUS21ServiceSlice will construct a slice of type SIUS21Service
func NewSIUS21ServiceSlice(input hl7.HL7Type) []SIUS21Service {
	values := make([]SIUS21Service, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS21Service(input.Index(i))
	}
	return values
}

// NewEHCE10ProductServiceGroup creates an implementation of EHCE10ProductServiceGroup
func NewEHCE10ProductServiceGroup(input hl7.HL7Type) EHCE10ProductServiceGroup {
	v := EHCE10ProductServiceGroup{}
	v.ProductServiceGroup = NewPSG(input.Index(0))
	v.ProductServiceLineInfo = NewEHCE10ProductServiceLineInfoSlice(input.Index(1))
	return v
}

type EHCE10ProductServiceGroup struct {
	ProductServiceGroup    PSG
	ProductServiceLineInfo []EHCE10ProductServiceLineInfo
}

// NewEHCE10ProductServiceGroupSlice will construct a slice of type EHCE10ProductServiceGroup
func NewEHCE10ProductServiceGroupSlice(input hl7.HL7Type) []EHCE10ProductServiceGroup {
	values := make([]EHCE10ProductServiceGroup, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewEHCE10ProductServiceGroup(input.Index(i))
	}
	return values
}

// NewPPPPCBOrderObservation creates an implementation of PPPPCBOrderObservation
func NewPPPPCBOrderObservation(input hl7.HL7Type) PPPPCBOrderObservation {
	v := PPPPCBOrderObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.Variance = NewVARSlice(input.Index(3))
	return v
}

type PPPPCBOrderObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
	Variance                 []VAR
}

// NewPPPPCBOrderObservationSlice will construct a slice of type PPPPCBOrderObservation
func NewPPPPCBOrderObservationSlice(input hl7.HL7Type) []PPPPCBOrderObservation {
	values := make([]PPPPCBOrderObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPPPCBOrderObservation(input.Index(i))
	}
	return values
}

// NewBRTO32Timing creates an implementation of BRTO32Timing
func NewBRTO32Timing(input hl7.HL7Type) BRTO32Timing {
	v := BRTO32Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type BRTO32Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewBRTO32TimingSlice will construct a slice of type BRTO32Timing
func NewBRTO32TimingSlice(input hl7.HL7Type) []BRTO32Timing {
	values := make([]BRTO32Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewBRTO32Timing(input.Index(i))
	}
	return values
}

// NewSRRS05Schedule creates an implementation of SRRS05Schedule
func NewSRRS05Schedule(input hl7.HL7Type) SRRS05Schedule {
	v := SRRS05Schedule{}
	v.SchedulingActivityInformation = NewSCH(input.Index(0))
	v.TimingQuantity = NewTQ1Slice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.Patient = NewSRRS05PatientSlice(input.Index(3))
	v.Resources = NewSRRS05ResourcesSlice(input.Index(4))
	return v
}

type SRRS05Schedule struct {
	SchedulingActivityInformation SCH
	TimingQuantity                []TQ1
	NotesAndComments              []NTE
	Patient                       []SRRS05Patient
	Resources                     []SRRS05Resources
}

// NewSRRS05ScheduleSlice will construct a slice of type SRRS05Schedule
func NewSRRS05ScheduleSlice(input hl7.HL7Type) []SRRS05Schedule {
	values := make([]SRRS05Schedule, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS05Schedule(input.Index(i))
	}
	return values
}

// NewPGLPC6PatientVisit creates an implementation of PGLPC6PatientVisit
func NewPGLPC6PatientVisit(input hl7.HL7Type) PGLPC6PatientVisit {
	v := PGLPC6PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	return v
}

type PGLPC6PatientVisit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
}

// NewPGLPC6PatientVisitSlice will construct a slice of type PGLPC6PatientVisit
func NewPGLPC6PatientVisitSlice(input hl7.HL7Type) []PGLPC6PatientVisit {
	values := make([]PGLPC6PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPGLPC6PatientVisit(input.Index(i))
	}
	return values
}

// NewOMLO35ObservationRequest creates an implementation of OMLO35ObservationRequest
func NewOMLO35ObservationRequest(input hl7.HL7Type) OMLO35ObservationRequest {
	v := OMLO35ObservationRequest{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.TestCodeDetail = NewTCD(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.ParticipationInformation = NewPRTSlice(input.Index(3))
	v.Diagnosis = NewDG1Slice(input.Index(4))
	v.Observation = NewOMLO35ObservationSlice(input.Index(5))
	v.PriorResult = NewOMLO35PriorResultSlice(input.Index(6))
	return v
}

type OMLO35ObservationRequest struct {
	ObservationRequest       OBR
	TestCodeDetail           TCD
	NotesAndComments         []NTE
	ParticipationInformation []PRT
	Diagnosis                []DG1
	Observation              []OMLO35Observation
	PriorResult              []OMLO35PriorResult
}

// NewOMLO35ObservationRequestSlice will construct a slice of type OMLO35ObservationRequest
func NewOMLO35ObservationRequestSlice(input hl7.HL7Type) []OMLO35ObservationRequest {
	values := make([]OMLO35ObservationRequest, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO35ObservationRequest(input.Index(i))
	}
	return values
}

// NewSRRS08LocationResource creates an implementation of SRRS08LocationResource
func NewSRRS08LocationResource(input hl7.HL7Type) SRRS08LocationResource {
	v := SRRS08LocationResource{}
	v.AppointmentInformationLocationResource = NewAIL(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SRRS08LocationResource struct {
	AppointmentInformationLocationResource AIL
	NotesAndComments                       []NTE
}

// NewSRRS08LocationResourceSlice will construct a slice of type SRRS08LocationResource
func NewSRRS08LocationResourceSlice(input hl7.HL7Type) []SRRS08LocationResource {
	values := make([]SRRS08LocationResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS08LocationResource(input.Index(i))
	}
	return values
}

// NewPPPPCBProblemObservation creates an implementation of PPPPCBProblemObservation
func NewPPPPCBProblemObservation(input hl7.HL7Type) PPPPCBProblemObservation {
	v := PPPPCBProblemObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type PPPPCBProblemObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewPPPPCBProblemObservationSlice will construct a slice of type PPPPCBProblemObservation
func NewPPPPCBProblemObservationSlice(input hl7.HL7Type) []PPPPCBProblemObservation {
	values := make([]PPPPCBProblemObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPPPCBProblemObservation(input.Index(i))
	}
	return values
}

// NewRSPZ82Treatment creates an implementation of RSPZ82Treatment
func NewRSPZ82Treatment(input hl7.HL7Type) RSPZ82Treatment {
	v := RSPZ82Treatment{}
	v.PharmacyTreatmentComponentOrder = NewRXCSlice(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type RSPZ82Treatment struct {
	PharmacyTreatmentComponentOrder []RXC
	NotesAndComments                []NTE
}

// NewRSPZ82TreatmentSlice will construct a slice of type RSPZ82Treatment
func NewRSPZ82TreatmentSlice(input hl7.HL7Type) []RSPZ82Treatment {
	values := make([]RSPZ82Treatment, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPZ82Treatment(input.Index(i))
	}
	return values
}

// NewSRMS09Resources creates an implementation of SRMS09Resources
func NewSRMS09Resources(input hl7.HL7Type) SRMS09Resources {
	v := SRMS09Resources{}
	v.ResourceGroup = NewRGS(input.Index(0))
	v.Service = NewSRMS09ServiceSlice(input.Index(1))
	v.GeneralResource = NewSRMS09GeneralResourceSlice(input.Index(2))
	v.LocationResource = NewSRMS09LocationResourceSlice(input.Index(3))
	v.PersonnelResource = NewSRMS09PersonnelResourceSlice(input.Index(4))
	return v
}

type SRMS09Resources struct {
	ResourceGroup     RGS
	Service           []SRMS09Service
	GeneralResource   []SRMS09GeneralResource
	LocationResource  []SRMS09LocationResource
	PersonnelResource []SRMS09PersonnelResource
}

// NewSRMS09ResourcesSlice will construct a slice of type SRMS09Resources
func NewSRMS09ResourcesSlice(input hl7.HL7Type) []SRMS09Resources {
	values := make([]SRMS09Resources, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS09Resources(input.Index(i))
	}
	return values
}

// NewCCUI20MedicationEncodingDetail creates an implementation of CCUI20MedicationEncodingDetail
func NewCCUI20MedicationEncodingDetail(input hl7.HL7Type) CCUI20MedicationEncodingDetail {
	v := CCUI20MedicationEncodingDetail{}
	v.PharmacyTreatmentEncodedOrder = NewRXE(input.Index(0))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(1))
	v.PharmacyTreatmentComponentOrder = NewRXCSlice(input.Index(2))
	v.MedicationEncodingObservation = NewCCUI20MedicationEncodingObservationSlice(input.Index(3))
	return v
}

type CCUI20MedicationEncodingDetail struct {
	PharmacyTreatmentEncodedOrder   RXE
	PharmacyTreatmentRoute          []RXR
	PharmacyTreatmentComponentOrder []RXC
	MedicationEncodingObservation   []CCUI20MedicationEncodingObservation
}

// NewCCUI20MedicationEncodingDetailSlice will construct a slice of type CCUI20MedicationEncodingDetail
func NewCCUI20MedicationEncodingDetailSlice(input hl7.HL7Type) []CCUI20MedicationEncodingDetail {
	values := make([]CCUI20MedicationEncodingDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCUI20MedicationEncodingDetail(input.Index(i))
	}
	return values
}

// NewPPGPCGGoalRole creates an implementation of PPGPCGGoalRole
func NewPPGPCGGoalRole(input hl7.HL7Type) PPGPCGGoalRole {
	v := PPGPCGGoalRole{}
	v.Role = NewROL(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type PPGPCGGoalRole struct {
	Role     ROL
	Variance []VAR
}

// NewPPGPCGGoalRoleSlice will construct a slice of type PPGPCGGoalRole
func NewPPGPCGGoalRoleSlice(input hl7.HL7Type) []PPGPCGGoalRole {
	values := make([]PPGPCGGoalRole, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPGPCGGoalRole(input.Index(i))
	}
	return values
}

// NewOMLO39SpecimenObservation creates an implementation of OMLO39SpecimenObservation
func NewOMLO39SpecimenObservation(input hl7.HL7Type) OMLO39SpecimenObservation {
	v := OMLO39SpecimenObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type OMLO39SpecimenObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewOMLO39SpecimenObservationSlice will construct a slice of type OMLO39SpecimenObservation
func NewOMLO39SpecimenObservationSlice(input hl7.HL7Type) []OMLO39SpecimenObservation {
	values := make([]OMLO39SpecimenObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO39SpecimenObservation(input.Index(i))
	}
	return values
}

// NewRGVO15Order creates an implementation of RGVO15Order
func NewRGVO15Order(input hl7.HL7Type) RGVO15Order {
	v := RGVO15Order{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.Timing = NewRGVO15TimingSlice(input.Index(2))
	v.OrderDetail = NewRGVO15OrderDetail(input.Index(3))
	v.Encoding = NewRGVO15Encoding(input.Index(4))
	v.Give = NewRGVO15GiveSlice(input.Index(5))
	return v
}

type RGVO15Order struct {
	CommonOrder              ORC
	ParticipationInformation []PRT
	Timing                   []RGVO15Timing
	OrderDetail              RGVO15OrderDetail
	Encoding                 RGVO15Encoding
	Give                     []RGVO15Give
}

// NewRGVO15OrderSlice will construct a slice of type RGVO15Order
func NewRGVO15OrderSlice(input hl7.HL7Type) []RGVO15Order {
	values := make([]RGVO15Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRGVO15Order(input.Index(i))
	}
	return values
}

// NewSRMS05PersonnelResource creates an implementation of SRMS05PersonnelResource
func NewSRMS05PersonnelResource(input hl7.HL7Type) SRMS05PersonnelResource {
	v := SRMS05PersonnelResource{}
	v.AppointmentInformationPersonnelResource = NewAIP(input.Index(0))
	v.AppointmentPreferences = NewAPR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type SRMS05PersonnelResource struct {
	AppointmentInformationPersonnelResource AIP
	AppointmentPreferences                  APR
	NotesAndComments                        []NTE
}

// NewSRMS05PersonnelResourceSlice will construct a slice of type SRMS05PersonnelResource
func NewSRMS05PersonnelResourceSlice(input hl7.HL7Type) []SRMS05PersonnelResource {
	values := make([]SRMS05PersonnelResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS05PersonnelResource(input.Index(i))
	}
	return values
}

// NewRPAI08Authorization2 creates an implementation of RPAI08Authorization2
func NewRPAI08Authorization2(input hl7.HL7Type) RPAI08Authorization2 {
	v := RPAI08Authorization2{}
	v.AuthorizationInformation = NewAUT(input.Index(0))
	v.ContactData = NewCTD(input.Index(1))
	return v
}

type RPAI08Authorization2 struct {
	AuthorizationInformation AUT
	ContactData              CTD
}

// NewRPAI08Authorization2Slice will construct a slice of type RPAI08Authorization2
func NewRPAI08Authorization2Slice(input hl7.HL7Type) []RPAI08Authorization2 {
	values := make([]RPAI08Authorization2, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRPAI08Authorization2(input.Index(i))
	}
	return values
}

// NewOMLO33PatientVisitPrior creates an implementation of OMLO33PatientVisitPrior
func NewOMLO33PatientVisitPrior(input hl7.HL7Type) OMLO33PatientVisitPrior {
	v := OMLO33PatientVisitPrior{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	return v
}

type OMLO33PatientVisitPrior struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ParticipationInformation          []PRT
}

// NewOMLO33PatientVisitPriorSlice will construct a slice of type OMLO33PatientVisitPrior
func NewOMLO33PatientVisitPriorSlice(input hl7.HL7Type) []OMLO33PatientVisitPrior {
	values := make([]OMLO33PatientVisitPrior, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO33PatientVisitPrior(input.Index(i))
	}
	return values
}

// NewORUR40PatientObservation creates an implementation of ORUR40PatientObservation
func NewORUR40PatientObservation(input hl7.HL7Type) ORUR40PatientObservation {
	v := ORUR40PatientObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type ORUR40PatientObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewORUR40PatientObservationSlice will construct a slice of type ORUR40PatientObservation
func NewORUR40PatientObservationSlice(input hl7.HL7Type) []ORUR40PatientObservation {
	values := make([]ORUR40PatientObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORUR40PatientObservation(input.Index(i))
	}
	return values
}

// NewOMLO33Timing creates an implementation of OMLO33Timing
func NewOMLO33Timing(input hl7.HL7Type) OMLO33Timing {
	v := OMLO33Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type OMLO33Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewOMLO33TimingSlice will construct a slice of type OMLO33Timing
func NewOMLO33TimingSlice(input hl7.HL7Type) []OMLO33Timing {
	values := make([]OMLO33Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO33Timing(input.Index(i))
	}
	return values
}

// NewRSPK32QueryResponse creates an implementation of RSPK32QueryResponse
func NewRSPK32QueryResponse(input hl7.HL7Type) RSPK32QueryResponse {
	v := RSPK32QueryResponse{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.NextOfKinAssociatedParties = NewNK1Slice(input.Index(2))
	v.PatientVisit = NewPV1(input.Index(3))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(4))
	v.QueryResponseInstance = NewQRI(input.Index(5))
	return v
}

type RSPK32QueryResponse struct {
	PatientIdentification             PID
	PatientAdditionalDemographic      PD1
	NextOfKinAssociatedParties        []NK1
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	QueryResponseInstance             QRI
}

// NewRSPK32QueryResponseSlice will construct a slice of type RSPK32QueryResponse
func NewRSPK32QueryResponseSlice(input hl7.HL7Type) []RSPK32QueryResponse {
	values := make([]RSPK32QueryResponse, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPK32QueryResponse(input.Index(i))
	}
	return values
}

// NewDRCO47Donnor creates an implementation of DRCO47Donnor
func NewDRCO47Donnor(input hl7.HL7Type) DRCO47Donnor {
	v := DRCO47Donnor{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.ObservationResult = NewOBXSlice(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	v.PatientAllergyInformation = NewAL1Slice(input.Index(4))
	v.AccessRestriction = NewARVSlice(input.Index(5))
	v.DonorRegistration = NewDRCO47DonorRegistration(input.Index(6))
	return v
}

type DRCO47Donnor struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	ObservationResult            []OBX
	NotesAndComments             []NTE
	PatientAllergyInformation    []AL1
	AccessRestriction            []ARV
	DonorRegistration            DRCO47DonorRegistration
}

// NewDRCO47DonnorSlice will construct a slice of type DRCO47Donnor
func NewDRCO47DonnorSlice(input hl7.HL7Type) []DRCO47Donnor {
	values := make([]DRCO47Donnor, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewDRCO47Donnor(input.Index(i))
	}
	return values
}

// NewCCRI17RolePathwayObject creates an implementation of CCRI17RolePathwayObject
func NewCCRI17RolePathwayObject(input hl7.HL7Type) CCRI17RolePathwayObject {
	v := CCRI17RolePathwayObject{}
	v.Role = NewROL(input.Index(0))
	v.ProviderData = NewPRD(input.Index(1))
	return v
}

type CCRI17RolePathwayObject struct {
	Role         ROL
	ProviderData PRD
}

// NewCCRI17RolePathwayObjectSlice will construct a slice of type CCRI17RolePathwayObject
func NewCCRI17RolePathwayObjectSlice(input hl7.HL7Type) []CCRI17RolePathwayObject {
	values := make([]CCRI17RolePathwayObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI17RolePathwayObject(input.Index(i))
	}
	return values
}

// NewADTA13Procedure creates an implementation of ADTA13Procedure
func NewADTA13Procedure(input hl7.HL7Type) ADTA13Procedure {
	v := ADTA13Procedure{}
	v.Procedures = NewPR1(input.Index(0))
	v.Role = NewROLSlice(input.Index(1))
	return v
}

type ADTA13Procedure struct {
	Procedures PR1
	Role       []ROL
}

// NewADTA13ProcedureSlice will construct a slice of type ADTA13Procedure
func NewADTA13ProcedureSlice(input hl7.HL7Type) []ADTA13Procedure {
	values := make([]ADTA13Procedure, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewADTA13Procedure(input.Index(i))
	}
	return values
}

// NewCCRI17RoleClinicalHistory creates an implementation of CCRI17RoleClinicalHistory
func NewCCRI17RoleClinicalHistory(input hl7.HL7Type) CCRI17RoleClinicalHistory {
	v := CCRI17RoleClinicalHistory{}
	v.RoleClinicalHistoryObject = NewCCRI17RoleClinicalHistoryObject(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type CCRI17RoleClinicalHistory struct {
	RoleClinicalHistoryObject CCRI17RoleClinicalHistoryObject
	Variance                  []VAR
}

// NewCCRI17RoleClinicalHistorySlice will construct a slice of type CCRI17RoleClinicalHistory
func NewCCRI17RoleClinicalHistorySlice(input hl7.HL7Type) []CCRI17RoleClinicalHistory {
	values := make([]CCRI17RoleClinicalHistory, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI17RoleClinicalHistory(input.Index(i))
	}
	return values
}

// NewSRRS11Schedule creates an implementation of SRRS11Schedule
func NewSRRS11Schedule(input hl7.HL7Type) SRRS11Schedule {
	v := SRRS11Schedule{}
	v.SchedulingActivityInformation = NewSCH(input.Index(0))
	v.TimingQuantity = NewTQ1Slice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.Patient = NewSRRS11PatientSlice(input.Index(3))
	v.Resources = NewSRRS11ResourcesSlice(input.Index(4))
	return v
}

type SRRS11Schedule struct {
	SchedulingActivityInformation SCH
	TimingQuantity                []TQ1
	NotesAndComments              []NTE
	Patient                       []SRRS11Patient
	Resources                     []SRRS11Resources
}

// NewSRRS11ScheduleSlice will construct a slice of type SRRS11Schedule
func NewSRRS11ScheduleSlice(input hl7.HL7Type) []SRRS11Schedule {
	values := make([]SRRS11Schedule, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS11Schedule(input.Index(i))
	}
	return values
}

// NewEHCE20PslItemInfo creates an implementation of EHCE20PslItemInfo
func NewEHCE20PslItemInfo(input hl7.HL7Type) EHCE20PslItemInfo {
	v := EHCE20PslItemInfo{}
	v.ProductServiceLineItem = NewPSL(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Adjustment = NewADJSlice(input.Index(2))
	v.LocationIdentification = NewLOCSlice(input.Index(3))
	v.ParticipationInformation = NewPRTSlice(input.Index(4))
	v.Role = NewROLSlice(input.Index(5))
	return v
}

type EHCE20PslItemInfo struct {
	ProductServiceLineItem   PSL
	NotesAndComments         []NTE
	Adjustment               []ADJ
	LocationIdentification   []LOC
	ParticipationInformation []PRT
	Role                     []ROL
}

// NewEHCE20PslItemInfoSlice will construct a slice of type EHCE20PslItemInfo
func NewEHCE20PslItemInfoSlice(input hl7.HL7Type) []EHCE20PslItemInfo {
	values := make([]EHCE20PslItemInfo, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewEHCE20PslItemInfo(input.Index(i))
	}
	return values
}

// NewBTSO31Patient creates an implementation of BTSO31Patient
func NewBTSO31Patient(input hl7.HL7Type) BTSO31Patient {
	v := BTSO31Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	v.PatientVisit = NewBTSO31PatientVisit(input.Index(4))
	return v
}

type BTSO31Patient struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	ParticipationInformation     []PRT
	NotesAndComments             []NTE
	PatientVisit                 BTSO31PatientVisit
}

// NewBTSO31PatientSlice will construct a slice of type BTSO31Patient
func NewBTSO31PatientSlice(input hl7.HL7Type) []BTSO31Patient {
	values := make([]BTSO31Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewBTSO31Patient(input.Index(i))
	}
	return values
}

// NewCCRI18ClinicalOrderTiming creates an implementation of CCRI18ClinicalOrderTiming
func NewCCRI18ClinicalOrderTiming(input hl7.HL7Type) CCRI18ClinicalOrderTiming {
	v := CCRI18ClinicalOrderTiming{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type CCRI18ClinicalOrderTiming struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewCCRI18ClinicalOrderTimingSlice will construct a slice of type CCRI18ClinicalOrderTiming
func NewCCRI18ClinicalOrderTimingSlice(input hl7.HL7Type) []CCRI18ClinicalOrderTiming {
	values := make([]CCRI18ClinicalOrderTiming, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI18ClinicalOrderTiming(input.Index(i))
	}
	return values
}

// NewPGLPC8Pathway creates an implementation of PGLPC8Pathway
func NewPGLPC8Pathway(input hl7.HL7Type) PGLPC8Pathway {
	v := PGLPC8Pathway{}
	v.Pathway = NewPTH(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type PGLPC8Pathway struct {
	Pathway  PTH
	Variance []VAR
}

// NewPGLPC8PathwaySlice will construct a slice of type PGLPC8Pathway
func NewPGLPC8PathwaySlice(input hl7.HL7Type) []PGLPC8Pathway {
	values := make([]PGLPC8Pathway, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPGLPC8Pathway(input.Index(i))
	}
	return values
}

// NewOMNO07PatientVisit creates an implementation of OMNO07PatientVisit
func NewOMNO07PatientVisit(input hl7.HL7Type) OMNO07PatientVisit {
	v := OMNO07PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	return v
}

type OMNO07PatientVisit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ParticipationInformation          []PRT
}

// NewOMNO07PatientVisitSlice will construct a slice of type OMNO07PatientVisit
func NewOMNO07PatientVisitSlice(input hl7.HL7Type) []OMNO07PatientVisit {
	values := make([]OMNO07PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMNO07PatientVisit(input.Index(i))
	}
	return values
}

// NewNMDN02AppStats creates an implementation of NMDN02AppStats
func NewNMDN02AppStats(input hl7.HL7Type) NMDN02AppStats {
	v := NMDN02AppStats{}
	v.ApplicationControlLevelStatistics = NewNST(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type NMDN02AppStats struct {
	ApplicationControlLevelStatistics NST
	NotesAndComments                  []NTE
}

// NewNMDN02AppStatsSlice will construct a slice of type NMDN02AppStats
func NewNMDN02AppStatsSlice(input hl7.HL7Type) []NMDN02AppStats {
	values := make([]NMDN02AppStats, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewNMDN02AppStats(input.Index(i))
	}
	return values
}

// NewRRII15Procedure creates an implementation of RRII15Procedure
func NewRRII15Procedure(input hl7.HL7Type) RRII15Procedure {
	v := RRII15Procedure{}
	v.Procedures = NewPR1(input.Index(0))
	v.AuthorizationContact = NewRRII15AuthorizationContact(input.Index(1))
	return v
}

type RRII15Procedure struct {
	Procedures           PR1
	AuthorizationContact RRII15AuthorizationContact
}

// NewRRII15ProcedureSlice will construct a slice of type RRII15Procedure
func NewRRII15ProcedureSlice(input hl7.HL7Type) []RRII15Procedure {
	values := make([]RRII15Procedure, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRRII15Procedure(input.Index(i))
	}
	return values
}

// NewPPRPC1Problem creates an implementation of PPRPC1Problem
func NewPPRPC1Problem(input hl7.HL7Type) PPRPC1Problem {
	v := PPRPC1Problem{}
	v.ProblemDetails = NewPRB(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Variance = NewVARSlice(input.Index(2))
	v.ProblemRole = NewPPRPC1ProblemRoleSlice(input.Index(3))
	v.Pathway = NewPPRPC1PathwaySlice(input.Index(4))
	v.ProblemObservation = NewPPRPC1ProblemObservationSlice(input.Index(5))
	v.Goal = NewPPRPC1GoalSlice(input.Index(6))
	v.Order = NewPPRPC1OrderSlice(input.Index(7))
	return v
}

type PPRPC1Problem struct {
	ProblemDetails     PRB
	NotesAndComments   []NTE
	Variance           []VAR
	ProblemRole        []PPRPC1ProblemRole
	Pathway            []PPRPC1Pathway
	ProblemObservation []PPRPC1ProblemObservation
	Goal               []PPRPC1Goal
	Order              []PPRPC1Order
}

// NewPPRPC1ProblemSlice will construct a slice of type PPRPC1Problem
func NewPPRPC1ProblemSlice(input hl7.HL7Type) []PPRPC1Problem {
	values := make([]PPRPC1Problem, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPRPC1Problem(input.Index(i))
	}
	return values
}

// NewPPRPC2OrderDetail creates an implementation of PPRPC2OrderDetail
func NewPPRPC2OrderDetail(input hl7.HL7Type) PPRPC2OrderDetail {
	v := PPRPC2OrderDetail{}
	v.Choice = NewPPRPC2Choice(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Variance = NewVARSlice(input.Index(2))
	v.OrderObservation = NewPPRPC2OrderObservationSlice(input.Index(3))
	return v
}

type PPRPC2OrderDetail struct {
	Choice           PPRPC2Choice
	NotesAndComments []NTE
	Variance         []VAR
	OrderObservation []PPRPC2OrderObservation
}

// NewPPRPC2OrderDetailSlice will construct a slice of type PPRPC2OrderDetail
func NewPPRPC2OrderDetailSlice(input hl7.HL7Type) []PPRPC2OrderDetail {
	values := make([]PPRPC2OrderDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPRPC2OrderDetail(input.Index(i))
	}
	return values
}

// NewRPAI09Authorization1 creates an implementation of RPAI09Authorization1
func NewRPAI09Authorization1(input hl7.HL7Type) RPAI09Authorization1 {
	v := RPAI09Authorization1{}
	v.AuthorizationInformation = NewAUT(input.Index(0))
	v.ContactData = NewCTD(input.Index(1))
	return v
}

type RPAI09Authorization1 struct {
	AuthorizationInformation AUT
	ContactData              CTD
}

// NewRPAI09Authorization1Slice will construct a slice of type RPAI09Authorization1
func NewRPAI09Authorization1Slice(input hl7.HL7Type) []RPAI09Authorization1 {
	values := make([]RPAI09Authorization1, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRPAI09Authorization1(input.Index(i))
	}
	return values
}

// NewPEXP08AssociatedObservation creates an implementation of PEXP08AssociatedObservation
func NewPEXP08AssociatedObservation(input hl7.HL7Type) PEXP08AssociatedObservation {
	v := PEXP08AssociatedObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type PEXP08AssociatedObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewPEXP08AssociatedObservationSlice will construct a slice of type PEXP08AssociatedObservation
func NewPEXP08AssociatedObservationSlice(input hl7.HL7Type) []PEXP08AssociatedObservation {
	values := make([]PEXP08AssociatedObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPEXP08AssociatedObservation(input.Index(i))
	}
	return values
}

// NewOPUR25PatientVisitObservation creates an implementation of OPUR25PatientVisitObservation
func NewOPUR25PatientVisitObservation(input hl7.HL7Type) OPUR25PatientVisitObservation {
	v := OPUR25PatientVisitObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	return v
}

type OPUR25PatientVisitObservation struct {
	ObservationResult        OBX
	NotesAndComments         []NTE
	ParticipationInformation []PRT
}

// NewOPUR25PatientVisitObservationSlice will construct a slice of type OPUR25PatientVisitObservation
func NewOPUR25PatientVisitObservationSlice(input hl7.HL7Type) []OPUR25PatientVisitObservation {
	values := make([]OPUR25PatientVisitObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOPUR25PatientVisitObservation(input.Index(i))
	}
	return values
}

// NewSIUS21PersonnelResource creates an implementation of SIUS21PersonnelResource
func NewSIUS21PersonnelResource(input hl7.HL7Type) SIUS21PersonnelResource {
	v := SIUS21PersonnelResource{}
	v.AppointmentInformationPersonnelResource = NewAIP(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS21PersonnelResource struct {
	AppointmentInformationPersonnelResource AIP
	NotesAndComments                        []NTE
}

// NewSIUS21PersonnelResourceSlice will construct a slice of type SIUS21PersonnelResource
func NewSIUS21PersonnelResourceSlice(input hl7.HL7Type) []SIUS21PersonnelResource {
	values := make([]SIUS21PersonnelResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS21PersonnelResource(input.Index(i))
	}
	return values
}

// NewRQAI10Authorization creates an implementation of RQAI10Authorization
func NewRQAI10Authorization(input hl7.HL7Type) RQAI10Authorization {
	v := RQAI10Authorization{}
	v.AuthorizationInformation = NewAUT(input.Index(0))
	v.ContactData = NewCTD(input.Index(1))
	return v
}

type RQAI10Authorization struct {
	AuthorizationInformation AUT
	ContactData              CTD
}

// NewRQAI10AuthorizationSlice will construct a slice of type RQAI10Authorization
func NewRQAI10AuthorizationSlice(input hl7.HL7Type) []RQAI10Authorization {
	values := make([]RQAI10Authorization, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQAI10Authorization(input.Index(i))
	}
	return values
}

// NewSRMS04Patient creates an implementation of SRMS04Patient
func NewSRMS04Patient(input hl7.HL7Type) SRMS04Patient {
	v := SRMS04Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientVisit = NewPV1(input.Index(1))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(2))
	v.Observation = NewSRMS04ObservationSlice(input.Index(3))
	v.Diagnosis = NewDG1Slice(input.Index(4))
	return v
}

type SRMS04Patient struct {
	PatientIdentification             PID
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	Observation                       []SRMS04Observation
	Diagnosis                         []DG1
}

// NewSRMS04PatientSlice will construct a slice of type SRMS04Patient
func NewSRMS04PatientSlice(input hl7.HL7Type) []SRMS04Patient {
	values := make([]SRMS04Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS04Patient(input.Index(i))
	}
	return values
}

// NewQBPZ93Qbp creates an implementation of QBPZ93Qbp
func NewQBPZ93Qbp(input hl7.HL7Type) QBPZ93Qbp {
	v := QBPZ93Qbp{}
	v.AnyHl7Segment = NewHxx(input.Index(0))
	return v
}

type QBPZ93Qbp struct {
	AnyHl7Segment Hxx
}

// NewQBPZ93QbpSlice will construct a slice of type QBPZ93Qbp
func NewQBPZ93QbpSlice(input hl7.HL7Type) []QBPZ93Qbp {
	values := make([]QBPZ93Qbp, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewQBPZ93Qbp(input.Index(i))
	}
	return values
}

// NewMFNM17MfDrg creates an implementation of MFNM17MfDrg
func NewMFNM17MfDrg(input hl7.HL7Type) MFNM17MfDrg {
	v := MFNM17MfDrg{}
	v.MasterFileEntry = NewMFE(input.Index(0))
	v.DrgMasterFileInformation = NewDMI(input.Index(1))
	return v
}

type MFNM17MfDrg struct {
	MasterFileEntry          MFE
	DrgMasterFileInformation DMI
}

// NewMFNM17MfDrgSlice will construct a slice of type MFNM17MfDrg
func NewMFNM17MfDrgSlice(input hl7.HL7Type) []MFNM17MfDrg {
	values := make([]MFNM17MfDrg, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMFNM17MfDrg(input.Index(i))
	}
	return values
}

// NewCCMI21ClinicalHistory creates an implementation of CCMI21ClinicalHistory
func NewCCMI21ClinicalHistory(input hl7.HL7Type) CCMI21ClinicalHistory {
	v := CCMI21ClinicalHistory{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ClinicalHistoryDetail = NewCCMI21ClinicalHistoryDetailSlice(input.Index(1))
	v.RoleClinicalHistory = NewCCMI21RoleClinicalHistorySlice(input.Index(2))
	v.ClinicalTrialIdentification = NewCTISlice(input.Index(3))
	return v
}

type CCMI21ClinicalHistory struct {
	CommonOrder                 ORC
	ClinicalHistoryDetail       []CCMI21ClinicalHistoryDetail
	RoleClinicalHistory         []CCMI21RoleClinicalHistory
	ClinicalTrialIdentification []CTI
}

// NewCCMI21ClinicalHistorySlice will construct a slice of type CCMI21ClinicalHistory
func NewCCMI21ClinicalHistorySlice(input hl7.HL7Type) []CCMI21ClinicalHistory {
	values := make([]CCMI21ClinicalHistory, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCMI21ClinicalHistory(input.Index(i))
	}
	return values
}

// NewOMBO27Insurance creates an implementation of OMBO27Insurance
func NewOMBO27Insurance(input hl7.HL7Type) OMBO27Insurance {
	v := OMBO27Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3(input.Index(2))
	return v
}

type OMBO27Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification IN3
}

// NewOMBO27InsuranceSlice will construct a slice of type OMBO27Insurance
func NewOMBO27InsuranceSlice(input hl7.HL7Type) []OMBO27Insurance {
	values := make([]OMBO27Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMBO27Insurance(input.Index(i))
	}
	return values
}

// NewSSRU04SpecimenContainer creates an implementation of SSRU04SpecimenContainer
func NewSSRU04SpecimenContainer(input hl7.HL7Type) SSRU04SpecimenContainer {
	v := SSRU04SpecimenContainer{}
	v.SpecimenContainerDetail = NewSAC(input.Index(0))
	v.Specimen = NewSPMSlice(input.Index(1))
	return v
}

type SSRU04SpecimenContainer struct {
	SpecimenContainerDetail SAC
	Specimen                []SPM
}

// NewSSRU04SpecimenContainerSlice will construct a slice of type SSRU04SpecimenContainer
func NewSSRU04SpecimenContainerSlice(input hl7.HL7Type) []SSRU04SpecimenContainer {
	values := make([]SSRU04SpecimenContainer, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSSRU04SpecimenContainer(input.Index(i))
	}
	return values
}

// NewORLO40ObservationRequest creates an implementation of ORLO40ObservationRequest
func NewORLO40ObservationRequest(input hl7.HL7Type) ORLO40ObservationRequest {
	v := ORLO40ObservationRequest{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.SpecimenShipment = NewORLO40SpecimenShipmentSlice(input.Index(2))
	return v
}

type ORLO40ObservationRequest struct {
	ObservationRequest       OBR
	ParticipationInformation []PRT
	SpecimenShipment         []ORLO40SpecimenShipment
}

// NewORLO40ObservationRequestSlice will construct a slice of type ORLO40ObservationRequest
func NewORLO40ObservationRequestSlice(input hl7.HL7Type) []ORLO40ObservationRequest {
	values := make([]ORLO40ObservationRequest, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORLO40ObservationRequest(input.Index(i))
	}
	return values
}

// NewBARP01Procedure creates an implementation of BARP01Procedure
func NewBARP01Procedure(input hl7.HL7Type) BARP01Procedure {
	v := BARP01Procedure{}
	v.Procedures = NewPR1(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.Role = NewROLSlice(input.Index(2))
	return v
}

type BARP01Procedure struct {
	Procedures               PR1
	ParticipationInformation []PRT
	Role                     []ROL
}

// NewBARP01ProcedureSlice will construct a slice of type BARP01Procedure
func NewBARP01ProcedureSlice(input hl7.HL7Type) []BARP01Procedure {
	values := make([]BARP01Procedure, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewBARP01Procedure(input.Index(i))
	}
	return values
}

// NewSIUS26GeneralResource creates an implementation of SIUS26GeneralResource
func NewSIUS26GeneralResource(input hl7.HL7Type) SIUS26GeneralResource {
	v := SIUS26GeneralResource{}
	v.AppointmentInformationGeneralResource = NewAIG(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS26GeneralResource struct {
	AppointmentInformationGeneralResource AIG
	NotesAndComments                      []NTE
}

// NewSIUS26GeneralResourceSlice will construct a slice of type SIUS26GeneralResource
func NewSIUS26GeneralResourceSlice(input hl7.HL7Type) []SIUS26GeneralResource {
	values := make([]SIUS26GeneralResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS26GeneralResource(input.Index(i))
	}
	return values
}

// NewRPAI10Provider creates an implementation of RPAI10Provider
func NewRPAI10Provider(input hl7.HL7Type) RPAI10Provider {
	v := RPAI10Provider{}
	v.ProviderData = NewPRD(input.Index(0))
	v.ContactData = NewCTDSlice(input.Index(1))
	return v
}

type RPAI10Provider struct {
	ProviderData PRD
	ContactData  []CTD
}

// NewRPAI10ProviderSlice will construct a slice of type RPAI10Provider
func NewRPAI10ProviderSlice(input hl7.HL7Type) []RPAI10Provider {
	values := make([]RPAI10Provider, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRPAI10Provider(input.Index(i))
	}
	return values
}

// NewPPGPCGPathway creates an implementation of PPGPCGPathway
func NewPPGPCGPathway(input hl7.HL7Type) PPGPCGPathway {
	v := PPGPCGPathway{}
	v.Pathway = NewPTH(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Variance = NewVARSlice(input.Index(2))
	v.PathwayRole = NewPPGPCGPathwayRoleSlice(input.Index(3))
	v.Goal = NewPPGPCGGoalSlice(input.Index(4))
	return v
}

type PPGPCGPathway struct {
	Pathway          PTH
	NotesAndComments []NTE
	Variance         []VAR
	PathwayRole      []PPGPCGPathwayRole
	Goal             []PPGPCGGoal
}

// NewPPGPCGPathwaySlice will construct a slice of type PPGPCGPathway
func NewPPGPCGPathwaySlice(input hl7.HL7Type) []PPGPCGPathway {
	values := make([]PPGPCGPathway, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPGPCGPathway(input.Index(i))
	}
	return values
}

// NewCCRI18Problem creates an implementation of CCRI18Problem
func NewCCRI18Problem(input hl7.HL7Type) CCRI18Problem {
	v := CCRI18Problem{}
	v.ProblemDetails = NewPRB(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	v.RoleProblem = NewCCRI18RoleProblemSlice(input.Index(2))
	v.ProblemObservation = NewCCRI18ProblemObservationSlice(input.Index(3))
	return v
}

type CCRI18Problem struct {
	ProblemDetails     PRB
	Variance           []VAR
	RoleProblem        []CCRI18RoleProblem
	ProblemObservation []CCRI18ProblemObservation
}

// NewCCRI18ProblemSlice will construct a slice of type CCRI18Problem
func NewCCRI18ProblemSlice(input hl7.HL7Type) []CCRI18Problem {
	values := make([]CCRI18Problem, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI18Problem(input.Index(i))
	}
	return values
}

// NewPPGPCHProblemObservation creates an implementation of PPGPCHProblemObservation
func NewPPGPCHProblemObservation(input hl7.HL7Type) PPGPCHProblemObservation {
	v := PPGPCHProblemObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type PPGPCHProblemObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewPPGPCHProblemObservationSlice will construct a slice of type PPGPCHProblemObservation
func NewPPGPCHProblemObservationSlice(input hl7.HL7Type) []PPGPCHProblemObservation {
	values := make([]PPGPCHProblemObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPGPCHProblemObservation(input.Index(i))
	}
	return values
}

// NewCCUI20Goal creates an implementation of CCUI20Goal
func NewCCUI20Goal(input hl7.HL7Type) CCUI20Goal {
	v := CCUI20Goal{}
	v.GoalDetail = NewGOL(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	v.RoleGoal = NewCCUI20RoleGoalSlice(input.Index(2))
	v.GoalObservation = NewCCUI20GoalObservationSlice(input.Index(3))
	return v
}

type CCUI20Goal struct {
	GoalDetail      GOL
	Variance        []VAR
	RoleGoal        []CCUI20RoleGoal
	GoalObservation []CCUI20GoalObservation
}

// NewCCUI20GoalSlice will construct a slice of type CCUI20Goal
func NewCCUI20GoalSlice(input hl7.HL7Type) []CCUI20Goal {
	values := make([]CCUI20Goal, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCUI20Goal(input.Index(i))
	}
	return values
}

// NewRSPK22QueryResponse creates an implementation of RSPK22QueryResponse
func NewRSPK22QueryResponse(input hl7.HL7Type) RSPK22QueryResponse {
	v := RSPK22QueryResponse{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.NextOfKinAssociatedParties = NewNK1Slice(input.Index(2))
	v.QueryResponseInstance = NewQRI(input.Index(3))
	return v
}

type RSPK22QueryResponse struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	NextOfKinAssociatedParties   []NK1
	QueryResponseInstance        QRI
}

// NewRSPK22QueryResponseSlice will construct a slice of type RSPK22QueryResponse
func NewRSPK22QueryResponseSlice(input hl7.HL7Type) []RSPK22QueryResponse {
	values := make([]RSPK22QueryResponse, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPK22QueryResponse(input.Index(i))
	}
	return values
}

// NewSRMS05Service creates an implementation of SRMS05Service
func NewSRMS05Service(input hl7.HL7Type) SRMS05Service {
	v := SRMS05Service{}
	v.AppointmentInformation = NewAIS(input.Index(0))
	v.AppointmentPreferences = NewAPR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type SRMS05Service struct {
	AppointmentInformation AIS
	AppointmentPreferences APR
	NotesAndComments       []NTE
}

// NewSRMS05ServiceSlice will construct a slice of type SRMS05Service
func NewSRMS05ServiceSlice(input hl7.HL7Type) []SRMS05Service {
	values := make([]SRMS05Service, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS05Service(input.Index(i))
	}
	return values
}

// NewRQAI08Visit creates an implementation of RQAI08Visit
func NewRQAI08Visit(input hl7.HL7Type) RQAI08Visit {
	v := RQAI08Visit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	return v
}

type RQAI08Visit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
}

// NewRQAI08VisitSlice will construct a slice of type RQAI08Visit
func NewRQAI08VisitSlice(input hl7.HL7Type) []RQAI08Visit {
	values := make([]RQAI08Visit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQAI08Visit(input.Index(i))
	}
	return values
}

// NewOMPO09Timing creates an implementation of OMPO09Timing
func NewOMPO09Timing(input hl7.HL7Type) OMPO09Timing {
	v := OMPO09Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type OMPO09Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewOMPO09TimingSlice will construct a slice of type OMPO09Timing
func NewOMPO09TimingSlice(input hl7.HL7Type) []OMPO09Timing {
	values := make([]OMPO09Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMPO09Timing(input.Index(i))
	}
	return values
}

// NewSIUS27Patient creates an implementation of SIUS27Patient
func NewSIUS27Patient(input hl7.HL7Type) SIUS27Patient {
	v := SIUS27Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.PatientVisit = NewPV1(input.Index(2))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(3))
	v.ObservationResult = NewOBXSlice(input.Index(4))
	v.Diagnosis = NewDG1Slice(input.Index(5))
	return v
}

type SIUS27Patient struct {
	PatientIdentification             PID
	PatientAdditionalDemographic      PD1
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ObservationResult                 []OBX
	Diagnosis                         []DG1
}

// NewSIUS27PatientSlice will construct a slice of type SIUS27Patient
func NewSIUS27PatientSlice(input hl7.HL7Type) []SIUS27Patient {
	values := make([]SIUS27Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS27Patient(input.Index(i))
	}
	return values
}

// NewSIUS13GeneralResource creates an implementation of SIUS13GeneralResource
func NewSIUS13GeneralResource(input hl7.HL7Type) SIUS13GeneralResource {
	v := SIUS13GeneralResource{}
	v.AppointmentInformationGeneralResource = NewAIG(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS13GeneralResource struct {
	AppointmentInformationGeneralResource AIG
	NotesAndComments                      []NTE
}

// NewSIUS13GeneralResourceSlice will construct a slice of type SIUS13GeneralResource
func NewSIUS13GeneralResourceSlice(input hl7.HL7Type) []SIUS13GeneralResource {
	values := make([]SIUS13GeneralResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS13GeneralResource(input.Index(i))
	}
	return values
}

// NewMFNM11MfTestCalcDetail creates an implementation of MFNM11MfTestCalcDetail
func NewMFNM11MfTestCalcDetail(input hl7.HL7Type) MFNM11MfTestCalcDetail {
	v := MFNM11MfTestCalcDetail{}
	v.ObservationsThatAreCalculatedFromOtherObservations = NewOM6(input.Index(0))
	v.NumericObservation = NewOM2(input.Index(1))
	return v
}

type MFNM11MfTestCalcDetail struct {
	ObservationsThatAreCalculatedFromOtherObservations OM6
	NumericObservation                                 OM2
}

// NewMFNM11MfTestCalcDetailSlice will construct a slice of type MFNM11MfTestCalcDetail
func NewMFNM11MfTestCalcDetailSlice(input hl7.HL7Type) []MFNM11MfTestCalcDetail {
	values := make([]MFNM11MfTestCalcDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMFNM11MfTestCalcDetail(input.Index(i))
	}
	return values
}

// NewCSUC11StudySchedule creates an implementation of CSUC11StudySchedule
func NewCSUC11StudySchedule(input hl7.HL7Type) CSUC11StudySchedule {
	v := CSUC11StudySchedule{}
	v.ClinicalStudyDataScheduleSegment = NewCSS(input.Index(0))
	v.StudyObservation = NewCSUC11StudyObservationSlice(input.Index(1))
	v.StudyPharm = NewCSUC11StudyPharmSlice(input.Index(2))
	return v
}

type CSUC11StudySchedule struct {
	ClinicalStudyDataScheduleSegment CSS
	StudyObservation                 []CSUC11StudyObservation
	StudyPharm                       []CSUC11StudyPharm
}

// NewCSUC11StudyScheduleSlice will construct a slice of type CSUC11StudySchedule
func NewCSUC11StudyScheduleSlice(input hl7.HL7Type) []CSUC11StudySchedule {
	values := make([]CSUC11StudySchedule, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCSUC11StudySchedule(input.Index(i))
	}
	return values
}

// NewCCQI19ProviderContact creates an implementation of CCQI19ProviderContact
func NewCCQI19ProviderContact(input hl7.HL7Type) CCQI19ProviderContact {
	v := CCQI19ProviderContact{}
	v.ProviderData = NewPRD(input.Index(0))
	v.ContactData = NewCTDSlice(input.Index(1))
	return v
}

type CCQI19ProviderContact struct {
	ProviderData PRD
	ContactData  []CTD
}

// NewCCQI19ProviderContactSlice will construct a slice of type CCQI19ProviderContact
func NewCCQI19ProviderContactSlice(input hl7.HL7Type) []CCQI19ProviderContact {
	values := make([]CCQI19ProviderContact, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCQI19ProviderContact(input.Index(i))
	}
	return values
}

// NewRGVO15TimingEncoded creates an implementation of RGVO15TimingEncoded
func NewRGVO15TimingEncoded(input hl7.HL7Type) RGVO15TimingEncoded {
	v := RGVO15TimingEncoded{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type RGVO15TimingEncoded struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewRGVO15TimingEncodedSlice will construct a slice of type RGVO15TimingEncoded
func NewRGVO15TimingEncodedSlice(input hl7.HL7Type) []RGVO15TimingEncoded {
	values := make([]RGVO15TimingEncoded, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRGVO15TimingEncoded(input.Index(i))
	}
	return values
}

// NewCCRI18ClinicalOrderDetail creates an implementation of CCRI18ClinicalOrderDetail
func NewCCRI18ClinicalOrderDetail(input hl7.HL7Type) CCRI18ClinicalOrderDetail {
	v := CCRI18ClinicalOrderDetail{}
	v.ClinicalOrderObject = NewCCRI18ClinicalOrderObject(input.Index(0))
	v.ClinicalOrderObservation = NewCCRI18ClinicalOrderObservationSlice(input.Index(1))
	return v
}

type CCRI18ClinicalOrderDetail struct {
	ClinicalOrderObject      CCRI18ClinicalOrderObject
	ClinicalOrderObservation []CCRI18ClinicalOrderObservation
}

// NewCCRI18ClinicalOrderDetailSlice will construct a slice of type CCRI18ClinicalOrderDetail
func NewCCRI18ClinicalOrderDetailSlice(input hl7.HL7Type) []CCRI18ClinicalOrderDetail {
	values := make([]CCRI18ClinicalOrderDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI18ClinicalOrderDetail(input.Index(i))
	}
	return values
}

// NewPGLPC8ProblemObservation creates an implementation of PGLPC8ProblemObservation
func NewPGLPC8ProblemObservation(input hl7.HL7Type) PGLPC8ProblemObservation {
	v := PGLPC8ProblemObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type PGLPC8ProblemObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewPGLPC8ProblemObservationSlice will construct a slice of type PGLPC8ProblemObservation
func NewPGLPC8ProblemObservationSlice(input hl7.HL7Type) []PGLPC8ProblemObservation {
	values := make([]PGLPC8ProblemObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPGLPC8ProblemObservation(input.Index(i))
	}
	return values
}

// NewBRPO30Patient creates an implementation of BRPO30Patient
func NewBRPO30Patient(input hl7.HL7Type) BRPO30Patient {
	v := BRPO30Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.AccessRestriction = NewARVSlice(input.Index(2))
	v.Order = NewBRPO30OrderSlice(input.Index(3))
	return v
}

type BRPO30Patient struct {
	PatientIdentification    PID
	ParticipationInformation []PRT
	AccessRestriction        []ARV
	Order                    []BRPO30Order
}

// NewBRPO30PatientSlice will construct a slice of type BRPO30Patient
func NewBRPO30PatientSlice(input hl7.HL7Type) []BRPO30Patient {
	values := make([]BRPO30Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewBRPO30Patient(input.Index(i))
	}
	return values
}

// NewSRRS08GeneralResource creates an implementation of SRRS08GeneralResource
func NewSRRS08GeneralResource(input hl7.HL7Type) SRRS08GeneralResource {
	v := SRRS08GeneralResource{}
	v.AppointmentInformationGeneralResource = NewAIG(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SRRS08GeneralResource struct {
	AppointmentInformationGeneralResource AIG
	NotesAndComments                      []NTE
}

// NewSRRS08GeneralResourceSlice will construct a slice of type SRRS08GeneralResource
func NewSRRS08GeneralResourceSlice(input hl7.HL7Type) []SRRS08GeneralResource {
	values := make([]SRRS08GeneralResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS08GeneralResource(input.Index(i))
	}
	return values
}

// NewRPII01Provider creates an implementation of RPII01Provider
func NewRPII01Provider(input hl7.HL7Type) RPII01Provider {
	v := RPII01Provider{}
	v.ProviderData = NewPRD(input.Index(0))
	v.ContactData = NewCTDSlice(input.Index(1))
	return v
}

type RPII01Provider struct {
	ProviderData PRD
	ContactData  []CTD
}

// NewRPII01ProviderSlice will construct a slice of type RPII01Provider
func NewRPII01ProviderSlice(input hl7.HL7Type) []RPII01Provider {
	values := make([]RPII01Provider, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRPII01Provider(input.Index(i))
	}
	return values
}

// NewRSPZ86Give creates an implementation of RSPZ86Give
func NewRSPZ86Give(input hl7.HL7Type) RSPZ86Give {
	v := RSPZ86Give{}
	v.PharmacyTreatmentGive = NewRXG(input.Index(0))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(1))
	v.PharmacyTreatmentComponentOrder = NewRXCSlice(input.Index(2))
	return v
}

type RSPZ86Give struct {
	PharmacyTreatmentGive           RXG
	PharmacyTreatmentRoute          []RXR
	PharmacyTreatmentComponentOrder []RXC
}

// NewRSPZ86GiveSlice will construct a slice of type RSPZ86Give
func NewRSPZ86GiveSlice(input hl7.HL7Type) []RSPZ86Give {
	values := make([]RSPZ86Give, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPZ86Give(input.Index(i))
	}
	return values
}

// NewOULR22Patient creates an implementation of OULR22Patient
func NewOULR22Patient(input hl7.HL7Type) OULR22Patient {
	v := OULR22Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.AccessRestriction = NewARVSlice(input.Index(3))
	v.NotesAndComments = NewNTESlice(input.Index(4))
	v.PatientObservation = NewOULR22PatientObservationSlice(input.Index(5))
	v.Visit = NewOULR22Visit(input.Index(6))
	return v
}

type OULR22Patient struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	ParticipationInformation     []PRT
	AccessRestriction            []ARV
	NotesAndComments             []NTE
	PatientObservation           []OULR22PatientObservation
	Visit                        OULR22Visit
}

// NewOULR22PatientSlice will construct a slice of type OULR22Patient
func NewOULR22PatientSlice(input hl7.HL7Type) []OULR22Patient {
	values := make([]OULR22Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOULR22Patient(input.Index(i))
	}
	return values
}

// NewSIUS15GeneralResource creates an implementation of SIUS15GeneralResource
func NewSIUS15GeneralResource(input hl7.HL7Type) SIUS15GeneralResource {
	v := SIUS15GeneralResource{}
	v.AppointmentInformationGeneralResource = NewAIG(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS15GeneralResource struct {
	AppointmentInformationGeneralResource AIG
	NotesAndComments                      []NTE
}

// NewSIUS15GeneralResourceSlice will construct a slice of type SIUS15GeneralResource
func NewSIUS15GeneralResourceSlice(input hl7.HL7Type) []SIUS15GeneralResource {
	values := make([]SIUS15GeneralResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS15GeneralResource(input.Index(i))
	}
	return values
}

// NewSRMS02GeneralResource creates an implementation of SRMS02GeneralResource
func NewSRMS02GeneralResource(input hl7.HL7Type) SRMS02GeneralResource {
	v := SRMS02GeneralResource{}
	v.AppointmentInformationGeneralResource = NewAIG(input.Index(0))
	v.AppointmentPreferences = NewAPR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type SRMS02GeneralResource struct {
	AppointmentInformationGeneralResource AIG
	AppointmentPreferences                APR
	NotesAndComments                      []NTE
}

// NewSRMS02GeneralResourceSlice will construct a slice of type SRMS02GeneralResource
func NewSRMS02GeneralResourceSlice(input hl7.HL7Type) []SRMS02GeneralResource {
	values := make([]SRMS02GeneralResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS02GeneralResource(input.Index(i))
	}
	return values
}

// NewRDEO11Timing creates an implementation of RDEO11Timing
func NewRDEO11Timing(input hl7.HL7Type) RDEO11Timing {
	v := RDEO11Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type RDEO11Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewRDEO11TimingSlice will construct a slice of type RDEO11Timing
func NewRDEO11TimingSlice(input hl7.HL7Type) []RDEO11Timing {
	values := make([]RDEO11Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRDEO11Timing(input.Index(i))
	}
	return values
}

// NewSRMS11LocationResource creates an implementation of SRMS11LocationResource
func NewSRMS11LocationResource(input hl7.HL7Type) SRMS11LocationResource {
	v := SRMS11LocationResource{}
	v.AppointmentInformationLocationResource = NewAIL(input.Index(0))
	v.AppointmentPreferences = NewAPR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type SRMS11LocationResource struct {
	AppointmentInformationLocationResource AIL
	AppointmentPreferences                 APR
	NotesAndComments                       []NTE
}

// NewSRMS11LocationResourceSlice will construct a slice of type SRMS11LocationResource
func NewSRMS11LocationResourceSlice(input hl7.HL7Type) []SRMS11LocationResource {
	values := make([]SRMS11LocationResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS11LocationResource(input.Index(i))
	}
	return values
}

// NewOMNO07Observation creates an implementation of OMNO07Observation
func NewOMNO07Observation(input hl7.HL7Type) OMNO07Observation {
	v := OMNO07Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type OMNO07Observation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewOMNO07ObservationSlice will construct a slice of type OMNO07Observation
func NewOMNO07ObservationSlice(input hl7.HL7Type) []OMNO07Observation {
	values := make([]OMNO07Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMNO07Observation(input.Index(i))
	}
	return values
}

// NewCCRI17Resources creates an implementation of CCRI17Resources
func NewCCRI17Resources(input hl7.HL7Type) CCRI17Resources {
	v := CCRI17Resources{}
	v.ResourceGroup = NewRGS(input.Index(0))
	v.ResourceDetail = NewCCRI17ResourceDetailSlice(input.Index(1))
	return v
}

type CCRI17Resources struct {
	ResourceGroup  RGS
	ResourceDetail []CCRI17ResourceDetail
}

// NewCCRI17ResourcesSlice will construct a slice of type CCRI17Resources
func NewCCRI17ResourcesSlice(input hl7.HL7Type) []CCRI17Resources {
	values := make([]CCRI17Resources, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI17Resources(input.Index(i))
	}
	return values
}

// NewORUR31PatientObservation creates an implementation of ORUR31PatientObservation
func NewORUR31PatientObservation(input hl7.HL7Type) ORUR31PatientObservation {
	v := ORUR31PatientObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type ORUR31PatientObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewORUR31PatientObservationSlice will construct a slice of type ORUR31PatientObservation
func NewORUR31PatientObservationSlice(input hl7.HL7Type) []ORUR31PatientObservation {
	values := make([]ORUR31PatientObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORUR31PatientObservation(input.Index(i))
	}
	return values
}

// NewEARU08CommandResponse creates an implementation of EARU08CommandResponse
func NewEARU08CommandResponse(input hl7.HL7Type) EARU08CommandResponse {
	v := EARU08CommandResponse{}
	v.EquipmentCommand = NewECD(input.Index(0))
	v.SpecimenContainer = NewEARU08SpecimenContainer(input.Index(1))
	v.EquipmentCommandResponse = NewECR(input.Index(2))
	return v
}

type EARU08CommandResponse struct {
	EquipmentCommand         ECD
	SpecimenContainer        EARU08SpecimenContainer
	EquipmentCommandResponse ECR
}

// NewEARU08CommandResponseSlice will construct a slice of type EARU08CommandResponse
func NewEARU08CommandResponseSlice(input hl7.HL7Type) []EARU08CommandResponse {
	values := make([]EARU08CommandResponse, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewEARU08CommandResponse(input.Index(i))
	}
	return values
}

// NewADTA01Insurance creates an implementation of ADTA01Insurance
func NewADTA01Insurance(input hl7.HL7Type) ADTA01Insurance {
	v := ADTA01Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3Slice(input.Index(2))
	v.Role = NewROLSlice(input.Index(3))
	v.AuthorizationInformation = NewAUTSlice(input.Index(4))
	v.ReferralInformation = NewRF1Slice(input.Index(5))
	return v
}

type ADTA01Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification []IN3
	Role                                        []ROL
	AuthorizationInformation                    []AUT
	ReferralInformation                         []RF1
}

// NewADTA01InsuranceSlice will construct a slice of type ADTA01Insurance
func NewADTA01InsuranceSlice(input hl7.HL7Type) []ADTA01Insurance {
	values := make([]ADTA01Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewADTA01Insurance(input.Index(i))
	}
	return values
}

// NewCCRI16Goal creates an implementation of CCRI16Goal
func NewCCRI16Goal(input hl7.HL7Type) CCRI16Goal {
	v := CCRI16Goal{}
	v.GoalDetail = NewGOL(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	v.RoleGoal = NewCCRI16RoleGoalSlice(input.Index(2))
	v.GoalObservation = NewCCRI16GoalObservationSlice(input.Index(3))
	return v
}

type CCRI16Goal struct {
	GoalDetail      GOL
	Variance        []VAR
	RoleGoal        []CCRI16RoleGoal
	GoalObservation []CCRI16GoalObservation
}

// NewCCRI16GoalSlice will construct a slice of type CCRI16Goal
func NewCCRI16GoalSlice(input hl7.HL7Type) []CCRI16Goal {
	values := make([]CCRI16Goal, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI16Goal(input.Index(i))
	}
	return values
}

// NewORUR30Observation creates an implementation of ORUR30Observation
func NewORUR30Observation(input hl7.HL7Type) ORUR30Observation {
	v := ORUR30Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type ORUR30Observation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewORUR30ObservationSlice will construct a slice of type ORUR30Observation
func NewORUR30ObservationSlice(input hl7.HL7Type) []ORUR30Observation {
	values := make([]ORUR30Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORUR30Observation(input.Index(i))
	}
	return values
}

// NewCSUC10StudySchedule creates an implementation of CSUC10StudySchedule
func NewCSUC10StudySchedule(input hl7.HL7Type) CSUC10StudySchedule {
	v := CSUC10StudySchedule{}
	v.ClinicalStudyDataScheduleSegment = NewCSS(input.Index(0))
	v.StudyObservation = NewCSUC10StudyObservationSlice(input.Index(1))
	v.StudyPharm = NewCSUC10StudyPharmSlice(input.Index(2))
	return v
}

type CSUC10StudySchedule struct {
	ClinicalStudyDataScheduleSegment CSS
	StudyObservation                 []CSUC10StudyObservation
	StudyPharm                       []CSUC10StudyPharm
}

// NewCSUC10StudyScheduleSlice will construct a slice of type CSUC10StudySchedule
func NewCSUC10StudyScheduleSlice(input hl7.HL7Type) []CSUC10StudySchedule {
	values := make([]CSUC10StudySchedule, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCSUC10StudySchedule(input.Index(i))
	}
	return values
}

// NewRQII03GuarantorInsurance creates an implementation of RQII03GuarantorInsurance
func NewRQII03GuarantorInsurance(input hl7.HL7Type) RQII03GuarantorInsurance {
	v := RQII03GuarantorInsurance{}
	v.Guarantor = NewGT1Slice(input.Index(0))
	v.Insurance = NewRQII03InsuranceSlice(input.Index(1))
	return v
}

type RQII03GuarantorInsurance struct {
	Guarantor []GT1
	Insurance []RQII03Insurance
}

// NewRQII03GuarantorInsuranceSlice will construct a slice of type RQII03GuarantorInsurance
func NewRQII03GuarantorInsuranceSlice(input hl7.HL7Type) []RQII03GuarantorInsurance {
	values := make([]RQII03GuarantorInsurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQII03GuarantorInsurance(input.Index(i))
	}
	return values
}

// NewCSUC11CommonOrder creates an implementation of CSUC11CommonOrder
func NewCSUC11CommonOrder(input hl7.HL7Type) CSUC11CommonOrder {
	v := CSUC11CommonOrder{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CSUC11CommonOrder struct {
	CommonOrder              ORC
	ParticipationInformation []PRT
}

// NewCSUC11CommonOrderSlice will construct a slice of type CSUC11CommonOrder
func NewCSUC11CommonOrderSlice(input hl7.HL7Type) []CSUC11CommonOrder {
	values := make([]CSUC11CommonOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCSUC11CommonOrder(input.Index(i))
	}
	return values
}

// NewDFTP03FinancialTimingQuantity creates an implementation of DFTP03FinancialTimingQuantity
func NewDFTP03FinancialTimingQuantity(input hl7.HL7Type) DFTP03FinancialTimingQuantity {
	v := DFTP03FinancialTimingQuantity{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type DFTP03FinancialTimingQuantity struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewDFTP03FinancialTimingQuantitySlice will construct a slice of type DFTP03FinancialTimingQuantity
func NewDFTP03FinancialTimingQuantitySlice(input hl7.HL7Type) []DFTP03FinancialTimingQuantity {
	values := make([]DFTP03FinancialTimingQuantity, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewDFTP03FinancialTimingQuantity(input.Index(i))
	}
	return values
}

// NewOPLO37Insurance creates an implementation of OPLO37Insurance
func NewOPLO37Insurance(input hl7.HL7Type) OPLO37Insurance {
	v := OPLO37Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3(input.Index(2))
	return v
}

type OPLO37Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification IN3
}

// NewOPLO37InsuranceSlice will construct a slice of type OPLO37Insurance
func NewOPLO37InsuranceSlice(input hl7.HL7Type) []OPLO37Insurance {
	values := make([]OPLO37Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOPLO37Insurance(input.Index(i))
	}
	return values
}

// NewQBPZ85Qbp creates an implementation of QBPZ85Qbp
func NewQBPZ85Qbp(input hl7.HL7Type) QBPZ85Qbp {
	v := QBPZ85Qbp{}
	v.AnyHl7Segment = NewHxx(input.Index(0))
	return v
}

type QBPZ85Qbp struct {
	AnyHl7Segment Hxx
}

// NewQBPZ85QbpSlice will construct a slice of type QBPZ85Qbp
func NewQBPZ85QbpSlice(input hl7.HL7Type) []QBPZ85Qbp {
	values := make([]QBPZ85Qbp, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewQBPZ85Qbp(input.Index(i))
	}
	return values
}

// NewORUR40CommonOrder creates an implementation of ORUR40CommonOrder
func NewORUR40CommonOrder(input hl7.HL7Type) ORUR40CommonOrder {
	v := ORUR40CommonOrder{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.OrderDocument = NewORUR40OrderDocument(input.Index(2))
	return v
}

type ORUR40CommonOrder struct {
	CommonOrder              ORC
	ParticipationInformation []PRT
	OrderDocument            ORUR40OrderDocument
}

// NewORUR40CommonOrderSlice will construct a slice of type ORUR40CommonOrder
func NewORUR40CommonOrderSlice(input hl7.HL7Type) []ORUR40CommonOrder {
	values := make([]ORUR40CommonOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORUR40CommonOrder(input.Index(i))
	}
	return values
}

// NewCQUI19MedicationEncodingDetail creates an implementation of CQUI19MedicationEncodingDetail
func NewCQUI19MedicationEncodingDetail(input hl7.HL7Type) CQUI19MedicationEncodingDetail {
	v := CQUI19MedicationEncodingDetail{}
	v.PharmacyTreatmentEncodedOrder = NewRXE(input.Index(0))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(1))
	v.PharmacyTreatmentComponentOrder = NewRXCSlice(input.Index(2))
	v.MedicationEncodingObservation = NewCQUI19MedicationEncodingObservationSlice(input.Index(3))
	return v
}

type CQUI19MedicationEncodingDetail struct {
	PharmacyTreatmentEncodedOrder   RXE
	PharmacyTreatmentRoute          []RXR
	PharmacyTreatmentComponentOrder []RXC
	MedicationEncodingObservation   []CQUI19MedicationEncodingObservation
}

// NewCQUI19MedicationEncodingDetailSlice will construct a slice of type CQUI19MedicationEncodingDetail
func NewCQUI19MedicationEncodingDetailSlice(input hl7.HL7Type) []CQUI19MedicationEncodingDetail {
	values := make([]CQUI19MedicationEncodingDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCQUI19MedicationEncodingDetail(input.Index(i))
	}
	return values
}

// NewADTA01Procedure creates an implementation of ADTA01Procedure
func NewADTA01Procedure(input hl7.HL7Type) ADTA01Procedure {
	v := ADTA01Procedure{}
	v.Procedures = NewPR1(input.Index(0))
	v.Role = NewROLSlice(input.Index(1))
	return v
}

type ADTA01Procedure struct {
	Procedures PR1
	Role       []ROL
}

// NewADTA01ProcedureSlice will construct a slice of type ADTA01Procedure
func NewADTA01ProcedureSlice(input hl7.HL7Type) []ADTA01Procedure {
	values := make([]ADTA01Procedure, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewADTA01Procedure(input.Index(i))
	}
	return values
}

// NewVXUV04PersonObservation creates an implementation of VXUV04PersonObservation
func NewVXUV04PersonObservation(input hl7.HL7Type) VXUV04PersonObservation {
	v := VXUV04PersonObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type VXUV04PersonObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewVXUV04PersonObservationSlice will construct a slice of type VXUV04PersonObservation
func NewVXUV04PersonObservationSlice(input hl7.HL7Type) []VXUV04PersonObservation {
	values := make([]VXUV04PersonObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewVXUV04PersonObservation(input.Index(i))
	}
	return values
}

// NewRQAI10Visit creates an implementation of RQAI10Visit
func NewRQAI10Visit(input hl7.HL7Type) RQAI10Visit {
	v := RQAI10Visit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	return v
}

type RQAI10Visit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
}

// NewRQAI10VisitSlice will construct a slice of type RQAI10Visit
func NewRQAI10VisitSlice(input hl7.HL7Type) []RQAI10Visit {
	values := make([]RQAI10Visit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQAI10Visit(input.Index(i))
	}
	return values
}

// NewSRMS11Observation creates an implementation of SRMS11Observation
func NewSRMS11Observation(input hl7.HL7Type) SRMS11Observation {
	v := SRMS11Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type SRMS11Observation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewSRMS11ObservationSlice will construct a slice of type SRMS11Observation
func NewSRMS11ObservationSlice(input hl7.HL7Type) []SRMS11Observation {
	values := make([]SRMS11Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS11Observation(input.Index(i))
	}
	return values
}

// NewSRRS09Resources creates an implementation of SRRS09Resources
func NewSRRS09Resources(input hl7.HL7Type) SRRS09Resources {
	v := SRRS09Resources{}
	v.ResourceGroup = NewRGS(input.Index(0))
	v.Service = NewSRRS09ServiceSlice(input.Index(1))
	v.GeneralResource = NewSRRS09GeneralResourceSlice(input.Index(2))
	v.LocationResource = NewSRRS09LocationResourceSlice(input.Index(3))
	v.PersonnelResource = NewSRRS09PersonnelResourceSlice(input.Index(4))
	return v
}

type SRRS09Resources struct {
	ResourceGroup     RGS
	Service           []SRRS09Service
	GeneralResource   []SRRS09GeneralResource
	LocationResource  []SRRS09LocationResource
	PersonnelResource []SRRS09PersonnelResource
}

// NewSRRS09ResourcesSlice will construct a slice of type SRRS09Resources
func NewSRRS09ResourcesSlice(input hl7.HL7Type) []SRRS09Resources {
	values := make([]SRRS09Resources, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS09Resources(input.Index(i))
	}
	return values
}

// NewMDMT03CommonOrder creates an implementation of MDMT03CommonOrder
func NewMDMT03CommonOrder(input hl7.HL7Type) MDMT03CommonOrder {
	v := MDMT03CommonOrder{}
	v.CommonOrder = NewORC(input.Index(0))
	v.Timing = NewMDMT03TimingSlice(input.Index(1))
	v.ObservationRequest = NewOBR(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	return v
}

type MDMT03CommonOrder struct {
	CommonOrder        ORC
	Timing             []MDMT03Timing
	ObservationRequest OBR
	NotesAndComments   []NTE
}

// NewMDMT03CommonOrderSlice will construct a slice of type MDMT03CommonOrder
func NewMDMT03CommonOrderSlice(input hl7.HL7Type) []MDMT03CommonOrder {
	values := make([]MDMT03CommonOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMDMT03CommonOrder(input.Index(i))
	}
	return values
}

// NewOULR24PatientObservation creates an implementation of OULR24PatientObservation
func NewOULR24PatientObservation(input hl7.HL7Type) OULR24PatientObservation {
	v := OULR24PatientObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type OULR24PatientObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewOULR24PatientObservationSlice will construct a slice of type OULR24PatientObservation
func NewOULR24PatientObservationSlice(input hl7.HL7Type) []OULR24PatientObservation {
	values := make([]OULR24PatientObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOULR24PatientObservation(input.Index(i))
	}
	return values
}

// NewDFTP03Financial creates an implementation of DFTP03Financial
func NewDFTP03Financial(input hl7.HL7Type) DFTP03Financial {
	v := DFTP03Financial{}
	v.FinancialTransaction = NewFT1(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.Role = NewROLSlice(input.Index(2))
	v.NotesAndComments = NewNTE(input.Index(3))
	v.FinancialProcedure = NewDFTP03FinancialProcedureSlice(input.Index(4))
	v.FinancialCommonOrder = NewDFTP03FinancialCommonOrderSlice(input.Index(5))
	return v
}

type DFTP03Financial struct {
	FinancialTransaction     FT1
	ParticipationInformation []PRT
	Role                     []ROL
	NotesAndComments         NTE
	FinancialProcedure       []DFTP03FinancialProcedure
	FinancialCommonOrder     []DFTP03FinancialCommonOrder
}

// NewDFTP03FinancialSlice will construct a slice of type DFTP03Financial
func NewDFTP03FinancialSlice(input hl7.HL7Type) []DFTP03Financial {
	values := make([]DFTP03Financial, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewDFTP03Financial(input.Index(i))
	}
	return values
}

// NewSRMS02LocationResource creates an implementation of SRMS02LocationResource
func NewSRMS02LocationResource(input hl7.HL7Type) SRMS02LocationResource {
	v := SRMS02LocationResource{}
	v.AppointmentInformationLocationResource = NewAIL(input.Index(0))
	v.AppointmentPreferences = NewAPR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type SRMS02LocationResource struct {
	AppointmentInformationLocationResource AIL
	AppointmentPreferences                 APR
	NotesAndComments                       []NTE
}

// NewSRMS02LocationResourceSlice will construct a slice of type SRMS02LocationResource
func NewSRMS02LocationResourceSlice(input hl7.HL7Type) []SRMS02LocationResource {
	values := make([]SRMS02LocationResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS02LocationResource(input.Index(i))
	}
	return values
}

// NewSRMS11PersonnelResource creates an implementation of SRMS11PersonnelResource
func NewSRMS11PersonnelResource(input hl7.HL7Type) SRMS11PersonnelResource {
	v := SRMS11PersonnelResource{}
	v.AppointmentInformationPersonnelResource = NewAIP(input.Index(0))
	v.AppointmentPreferences = NewAPR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type SRMS11PersonnelResource struct {
	AppointmentInformationPersonnelResource AIP
	AppointmentPreferences                  APR
	NotesAndComments                        []NTE
}

// NewSRMS11PersonnelResourceSlice will construct a slice of type SRMS11PersonnelResource
func NewSRMS11PersonnelResourceSlice(input hl7.HL7Type) []SRMS11PersonnelResource {
	values := make([]SRMS11PersonnelResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS11PersonnelResource(input.Index(i))
	}
	return values
}

// NewOMLO33Patient creates an implementation of OMLO33Patient
func NewOMLO33Patient(input hl7.HL7Type) OMLO33Patient {
	v := OMLO33Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	v.NextOfKinAssociatedParties = NewNK1Slice(input.Index(4))
	v.AccessRestriction = NewARVSlice(input.Index(5))
	v.PatientVisit = NewOMLO33PatientVisit(input.Index(6))
	v.Insurance = NewOMLO33InsuranceSlice(input.Index(7))
	v.Guarantor = NewGT1(input.Index(8))
	v.PatientAllergyInformation = NewAL1Slice(input.Index(9))
	return v
}

type OMLO33Patient struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	ParticipationInformation     []PRT
	NotesAndComments             []NTE
	NextOfKinAssociatedParties   []NK1
	AccessRestriction            []ARV
	PatientVisit                 OMLO33PatientVisit
	Insurance                    []OMLO33Insurance
	Guarantor                    GT1
	PatientAllergyInformation    []AL1
}

// NewOMLO33PatientSlice will construct a slice of type OMLO33Patient
func NewOMLO33PatientSlice(input hl7.HL7Type) []OMLO33Patient {
	values := make([]OMLO33Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO33Patient(input.Index(i))
	}
	return values
}

// NewSIUS21LocationResource creates an implementation of SIUS21LocationResource
func NewSIUS21LocationResource(input hl7.HL7Type) SIUS21LocationResource {
	v := SIUS21LocationResource{}
	v.AppointmentInformationLocationResource = NewAIL(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS21LocationResource struct {
	AppointmentInformationLocationResource AIL
	NotesAndComments                       []NTE
}

// NewSIUS21LocationResourceSlice will construct a slice of type SIUS21LocationResource
func NewSIUS21LocationResourceSlice(input hl7.HL7Type) []SIUS21LocationResource {
	values := make([]SIUS21LocationResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS21LocationResource(input.Index(i))
	}
	return values
}

// NewRRAO18Treatment creates an implementation of RRAO18Treatment
func NewRRAO18Treatment(input hl7.HL7Type) RRAO18Treatment {
	v := RRAO18Treatment{}
	v.PharmacyTreatmentAdministration = NewRXA(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type RRAO18Treatment struct {
	PharmacyTreatmentAdministration RXA
	ParticipationInformation        []PRT
}

// NewRRAO18TreatmentSlice will construct a slice of type RRAO18Treatment
func NewRRAO18TreatmentSlice(input hl7.HL7Type) []RRAO18Treatment {
	values := make([]RRAO18Treatment, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRRAO18Treatment(input.Index(i))
	}
	return values
}

// NewPPGPCJGoalObservation creates an implementation of PPGPCJGoalObservation
func NewPPGPCJGoalObservation(input hl7.HL7Type) PPGPCJGoalObservation {
	v := PPGPCJGoalObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type PPGPCJGoalObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewPPGPCJGoalObservationSlice will construct a slice of type PPGPCJGoalObservation
func NewPPGPCJGoalObservationSlice(input hl7.HL7Type) []PPGPCJGoalObservation {
	values := make([]PPGPCJGoalObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPGPCJGoalObservation(input.Index(i))
	}
	return values
}

// NewSRRS01Patient creates an implementation of SRRS01Patient
func NewSRRS01Patient(input hl7.HL7Type) SRRS01Patient {
	v := SRRS01Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientVisit = NewPV1(input.Index(1))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(2))
	v.Diagnosis = NewDG1Slice(input.Index(3))
	return v
}

type SRRS01Patient struct {
	PatientIdentification             PID
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	Diagnosis                         []DG1
}

// NewSRRS01PatientSlice will construct a slice of type SRRS01Patient
func NewSRRS01PatientSlice(input hl7.HL7Type) []SRRS01Patient {
	values := make([]SRRS01Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS01Patient(input.Index(i))
	}
	return values
}

// NewRSPK31Order creates an implementation of RSPK31Order
func NewRSPK31Order(input hl7.HL7Type) RSPK31Order {
	v := RSPK31Order{}
	v.CommonOrder = NewORC(input.Index(0))
	v.Timing = NewRSPK31TimingSlice(input.Index(1))
	v.OrderDetail = NewRSPK31OrderDetail(input.Index(2))
	v.Encoding = NewRSPK31Encoding(input.Index(3))
	v.PharmacyTreatmentDispense = NewRXD(input.Index(4))
	v.ParticipationInformation = NewPRTSlice(input.Index(5))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(6))
	v.PharmacyTreatmentComponentOrder = NewRXCSlice(input.Index(7))
	v.Observation = NewRSPK31ObservationSlice(input.Index(8))
	return v
}

type RSPK31Order struct {
	CommonOrder                     ORC
	Timing                          []RSPK31Timing
	OrderDetail                     RSPK31OrderDetail
	Encoding                        RSPK31Encoding
	PharmacyTreatmentDispense       RXD
	ParticipationInformation        []PRT
	PharmacyTreatmentRoute          []RXR
	PharmacyTreatmentComponentOrder []RXC
	Observation                     []RSPK31Observation
}

// NewRSPK31OrderSlice will construct a slice of type RSPK31Order
func NewRSPK31OrderSlice(input hl7.HL7Type) []RSPK31Order {
	values := make([]RSPK31Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPK31Order(input.Index(i))
	}
	return values
}

// NewRPAI10Visit creates an implementation of RPAI10Visit
func NewRPAI10Visit(input hl7.HL7Type) RPAI10Visit {
	v := RPAI10Visit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	return v
}

type RPAI10Visit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
}

// NewRPAI10VisitSlice will construct a slice of type RPAI10Visit
func NewRPAI10VisitSlice(input hl7.HL7Type) []RPAI10Visit {
	values := make([]RPAI10Visit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRPAI10Visit(input.Index(i))
	}
	return values
}

// NewCSUC11StudyPharm creates an implementation of CSUC11StudyPharm
func NewCSUC11StudyPharm(input hl7.HL7Type) CSUC11StudyPharm {
	v := CSUC11StudyPharm{}
	v.CommonOrder = NewCSUC11CommonOrder(input.Index(0))
	v.RxAdmin = NewCSUC11RxAdminSlice(input.Index(1))
	return v
}

type CSUC11StudyPharm struct {
	CommonOrder CSUC11CommonOrder
	RxAdmin     []CSUC11RxAdmin
}

// NewCSUC11StudyPharmSlice will construct a slice of type CSUC11StudyPharm
func NewCSUC11StudyPharmSlice(input hl7.HL7Type) []CSUC11StudyPharm {
	values := make([]CSUC11StudyPharm, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCSUC11StudyPharm(input.Index(i))
	}
	return values
}

// NewRDSO13TimingEncoded creates an implementation of RDSO13TimingEncoded
func NewRDSO13TimingEncoded(input hl7.HL7Type) RDSO13TimingEncoded {
	v := RDSO13TimingEncoded{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type RDSO13TimingEncoded struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewRDSO13TimingEncodedSlice will construct a slice of type RDSO13TimingEncoded
func NewRDSO13TimingEncodedSlice(input hl7.HL7Type) []RDSO13TimingEncoded {
	values := make([]RDSO13TimingEncoded, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRDSO13TimingEncoded(input.Index(i))
	}
	return values
}

// NewCSUC12RxAdmin creates an implementation of CSUC12RxAdmin
func NewCSUC12RxAdmin(input hl7.HL7Type) CSUC12RxAdmin {
	v := CSUC12RxAdmin{}
	v.PharmacyTreatmentAdministration = NewRXA(input.Index(0))
	v.PharmacyTreatmentRoute = NewRXR(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	return v
}

type CSUC12RxAdmin struct {
	PharmacyTreatmentAdministration RXA
	PharmacyTreatmentRoute          RXR
	ParticipationInformation        []PRT
}

// NewCSUC12RxAdminSlice will construct a slice of type CSUC12RxAdmin
func NewCSUC12RxAdminSlice(input hl7.HL7Type) []CSUC12RxAdmin {
	values := make([]CSUC12RxAdmin, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCSUC12RxAdmin(input.Index(i))
	}
	return values
}

// NewRSPZ86EncodedOrder creates an implementation of RSPZ86EncodedOrder
func NewRSPZ86EncodedOrder(input hl7.HL7Type) RSPZ86EncodedOrder {
	v := RSPZ86EncodedOrder{}
	v.PharmacyTreatmentEncodedOrder = NewRXE(input.Index(0))
	v.TimingEncoded = NewRSPZ86TimingEncodedSlice(input.Index(1))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(2))
	v.PharmacyTreatmentComponentOrder = NewRXCSlice(input.Index(3))
	return v
}

type RSPZ86EncodedOrder struct {
	PharmacyTreatmentEncodedOrder   RXE
	TimingEncoded                   []RSPZ86TimingEncoded
	PharmacyTreatmentRoute          []RXR
	PharmacyTreatmentComponentOrder []RXC
}

// NewRSPZ86EncodedOrderSlice will construct a slice of type RSPZ86EncodedOrder
func NewRSPZ86EncodedOrderSlice(input hl7.HL7Type) []RSPZ86EncodedOrder {
	values := make([]RSPZ86EncodedOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPZ86EncodedOrder(input.Index(i))
	}
	return values
}

// NewSIUS13LocationResource creates an implementation of SIUS13LocationResource
func NewSIUS13LocationResource(input hl7.HL7Type) SIUS13LocationResource {
	v := SIUS13LocationResource{}
	v.AppointmentInformationLocationResource = NewAIL(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS13LocationResource struct {
	AppointmentInformationLocationResource AIL
	NotesAndComments                       []NTE
}

// NewSIUS13LocationResourceSlice will construct a slice of type SIUS13LocationResource
func NewSIUS13LocationResourceSlice(input hl7.HL7Type) []SIUS13LocationResource {
	values := make([]SIUS13LocationResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS13LocationResource(input.Index(i))
	}
	return values
}

// NewPPRPC2Pathway creates an implementation of PPRPC2Pathway
func NewPPRPC2Pathway(input hl7.HL7Type) PPRPC2Pathway {
	v := PPRPC2Pathway{}
	v.Pathway = NewPTH(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type PPRPC2Pathway struct {
	Pathway  PTH
	Variance []VAR
}

// NewPPRPC2PathwaySlice will construct a slice of type PPRPC2Pathway
func NewPPRPC2PathwaySlice(input hl7.HL7Type) []PPRPC2Pathway {
	values := make([]PPRPC2Pathway, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPRPC2Pathway(input.Index(i))
	}
	return values
}

// NewCCRI18Goal creates an implementation of CCRI18Goal
func NewCCRI18Goal(input hl7.HL7Type) CCRI18Goal {
	v := CCRI18Goal{}
	v.GoalDetail = NewGOL(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	v.RoleGoal = NewCCRI18RoleGoalSlice(input.Index(2))
	v.GoalObservation = NewCCRI18GoalObservationSlice(input.Index(3))
	return v
}

type CCRI18Goal struct {
	GoalDetail      GOL
	Variance        []VAR
	RoleGoal        []CCRI18RoleGoal
	GoalObservation []CCRI18GoalObservation
}

// NewCCRI18GoalSlice will construct a slice of type CCRI18Goal
func NewCCRI18GoalSlice(input hl7.HL7Type) []CCRI18Goal {
	values := make([]CCRI18Goal, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI18Goal(input.Index(i))
	}
	return values
}

// NewOMGO19SpecimenObservation creates an implementation of OMGO19SpecimenObservation
func NewOMGO19SpecimenObservation(input hl7.HL7Type) OMGO19SpecimenObservation {
	v := OMGO19SpecimenObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type OMGO19SpecimenObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewOMGO19SpecimenObservationSlice will construct a slice of type OMGO19SpecimenObservation
func NewOMGO19SpecimenObservationSlice(input hl7.HL7Type) []OMGO19SpecimenObservation {
	values := make([]OMGO19SpecimenObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMGO19SpecimenObservation(input.Index(i))
	}
	return values
}

// NewSRMS05Observation creates an implementation of SRMS05Observation
func NewSRMS05Observation(input hl7.HL7Type) SRMS05Observation {
	v := SRMS05Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type SRMS05Observation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewSRMS05ObservationSlice will construct a slice of type SRMS05Observation
func NewSRMS05ObservationSlice(input hl7.HL7Type) []SRMS05Observation {
	values := make([]SRMS05Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS05Observation(input.Index(i))
	}
	return values
}

// NewSMDS32AntiMicrobialDeviceCycleData creates an implementation of SMDS32AntiMicrobialDeviceCycleData
func NewSMDS32AntiMicrobialDeviceCycleData(input hl7.HL7Type) SMDS32AntiMicrobialDeviceCycleData {
	v := SMDS32AntiMicrobialDeviceCycleData{}
	v.SterilizationDeviceData = NewSDD(input.Index(0))
	v.AntiMicrobialCycleData = NewSCDSlice(input.Index(1))
	return v
}

type SMDS32AntiMicrobialDeviceCycleData struct {
	SterilizationDeviceData SDD
	AntiMicrobialCycleData  []SCD
}

// NewSMDS32AntiMicrobialDeviceCycleDataSlice will construct a slice of type SMDS32AntiMicrobialDeviceCycleData
func NewSMDS32AntiMicrobialDeviceCycleDataSlice(input hl7.HL7Type) []SMDS32AntiMicrobialDeviceCycleData {
	values := make([]SMDS32AntiMicrobialDeviceCycleData, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSMDS32AntiMicrobialDeviceCycleData(input.Index(i))
	}
	return values
}

// NewCCRI17Pathway creates an implementation of CCRI17Pathway
func NewCCRI17Pathway(input hl7.HL7Type) CCRI17Pathway {
	v := CCRI17Pathway{}
	v.Pathway = NewPTH(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	v.RolePathway = NewCCRI17RolePathwaySlice(input.Index(2))
	v.PathwayObservation = NewCCRI17PathwayObservationSlice(input.Index(3))
	return v
}

type CCRI17Pathway struct {
	Pathway            PTH
	Variance           []VAR
	RolePathway        []CCRI17RolePathway
	PathwayObservation []CCRI17PathwayObservation
}

// NewCCRI17PathwaySlice will construct a slice of type CCRI17Pathway
func NewCCRI17PathwaySlice(input hl7.HL7Type) []CCRI17Pathway {
	values := make([]CCRI17Pathway, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI17Pathway(input.Index(i))
	}
	return values
}

// NewDFTP11FinancialOrder creates an implementation of DFTP11FinancialOrder
func NewDFTP11FinancialOrder(input hl7.HL7Type) DFTP11FinancialOrder {
	v := DFTP11FinancialOrder{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type DFTP11FinancialOrder struct {
	ObservationRequest OBR
	NotesAndComments   []NTE
}

// NewDFTP11FinancialOrderSlice will construct a slice of type DFTP11FinancialOrder
func NewDFTP11FinancialOrderSlice(input hl7.HL7Type) []DFTP11FinancialOrder {
	values := make([]DFTP11FinancialOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewDFTP11FinancialOrder(input.Index(i))
	}
	return values
}

// NewRDSO13Encoding creates an implementation of RDSO13Encoding
func NewRDSO13Encoding(input hl7.HL7Type) RDSO13Encoding {
	v := RDSO13Encoding{}
	v.PharmacyTreatmentEncodedOrder = NewRXE(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.TimingEncoded = NewRDSO13TimingEncodedSlice(input.Index(3))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(4))
	v.PharmacyTreatmentComponentOrder = NewRXCSlice(input.Index(5))
	return v
}

type RDSO13Encoding struct {
	PharmacyTreatmentEncodedOrder   RXE
	ParticipationInformation        []PRT
	NotesAndComments                []NTE
	TimingEncoded                   []RDSO13TimingEncoded
	PharmacyTreatmentRoute          []RXR
	PharmacyTreatmentComponentOrder []RXC
}

// NewRDSO13EncodingSlice will construct a slice of type RDSO13Encoding
func NewRDSO13EncodingSlice(input hl7.HL7Type) []RDSO13Encoding {
	values := make([]RDSO13Encoding, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRDSO13Encoding(input.Index(i))
	}
	return values
}

// NewOMLO21ContainerObservation creates an implementation of OMLO21ContainerObservation
func NewOMLO21ContainerObservation(input hl7.HL7Type) OMLO21ContainerObservation {
	v := OMLO21ContainerObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type OMLO21ContainerObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewOMLO21ContainerObservationSlice will construct a slice of type OMLO21ContainerObservation
func NewOMLO21ContainerObservationSlice(input hl7.HL7Type) []OMLO21ContainerObservation {
	values := make([]OMLO21ContainerObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO21ContainerObservation(input.Index(i))
	}
	return values
}

// NewSRMS05LocationResource creates an implementation of SRMS05LocationResource
func NewSRMS05LocationResource(input hl7.HL7Type) SRMS05LocationResource {
	v := SRMS05LocationResource{}
	v.AppointmentInformationLocationResource = NewAIL(input.Index(0))
	v.AppointmentPreferences = NewAPR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type SRMS05LocationResource struct {
	AppointmentInformationLocationResource AIL
	AppointmentPreferences                 APR
	NotesAndComments                       []NTE
}

// NewSRMS05LocationResourceSlice will construct a slice of type SRMS05LocationResource
func NewSRMS05LocationResourceSlice(input hl7.HL7Type) []SRMS05LocationResource {
	values := make([]SRMS05LocationResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS05LocationResource(input.Index(i))
	}
	return values
}

// NewRPAI11Procedure creates an implementation of RPAI11Procedure
func NewRPAI11Procedure(input hl7.HL7Type) RPAI11Procedure {
	v := RPAI11Procedure{}
	v.Procedures = NewPR1(input.Index(0))
	v.Authorization2 = NewRPAI11Authorization2(input.Index(1))
	return v
}

type RPAI11Procedure struct {
	Procedures     PR1
	Authorization2 RPAI11Authorization2
}

// NewRPAI11ProcedureSlice will construct a slice of type RPAI11Procedure
func NewRPAI11ProcedureSlice(input hl7.HL7Type) []RPAI11Procedure {
	values := make([]RPAI11Procedure, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRPAI11Procedure(input.Index(i))
	}
	return values
}

// NewCSUC10StudyObservation creates an implementation of CSUC10StudyObservation
func NewCSUC10StudyObservation(input hl7.HL7Type) CSUC10StudyObservation {
	v := CSUC10StudyObservation{}
	v.CommonOrder = NewCSUC10CommonOrder(input.Index(0))
	v.ObservationRequest = NewOBR(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.TimingQty = NewCSUC10TimingQtySlice(input.Index(3))
	v.ObservationResult = NewOBX(input.Index(4))
	v.AdditionalParticipationInformation = NewPRTSlice(input.Index(5))
	return v
}

type CSUC10StudyObservation struct {
	CommonOrder                        CSUC10CommonOrder
	ObservationRequest                 OBR
	ParticipationInformation           []PRT
	TimingQty                          []CSUC10TimingQty
	ObservationResult                  OBX
	AdditionalParticipationInformation []PRT
}

// NewCSUC10StudyObservationSlice will construct a slice of type CSUC10StudyObservation
func NewCSUC10StudyObservationSlice(input hl7.HL7Type) []CSUC10StudyObservation {
	values := make([]CSUC10StudyObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCSUC10StudyObservation(input.Index(i))
	}
	return values
}

// NewOMQO42Patient creates an implementation of OMQO42Patient
func NewOMQO42Patient(input hl7.HL7Type) OMQO42Patient {
	v := OMQO42Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	v.NextOfKinAssociatedParties = NewNK1Slice(input.Index(4))
	v.AccessRestriction = NewARVSlice(input.Index(5))
	v.PatientVisit = NewOMQO42PatientVisit(input.Index(6))
	v.Insurance = NewOMQO42InsuranceSlice(input.Index(7))
	v.Guarantor = NewGT1(input.Index(8))
	v.PatientAllergyInformation = NewAL1Slice(input.Index(9))
	return v
}

type OMQO42Patient struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	ParticipationInformation     []PRT
	NotesAndComments             []NTE
	NextOfKinAssociatedParties   []NK1
	AccessRestriction            []ARV
	PatientVisit                 OMQO42PatientVisit
	Insurance                    []OMQO42Insurance
	Guarantor                    GT1
	PatientAllergyInformation    []AL1
}

// NewOMQO42PatientSlice will construct a slice of type OMQO42Patient
func NewOMQO42PatientSlice(input hl7.HL7Type) []OMQO42Patient {
	values := make([]OMQO42Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMQO42Patient(input.Index(i))
	}
	return values
}

// NewOMLO33PriorResult creates an implementation of OMLO33PriorResult
func NewOMLO33PriorResult(input hl7.HL7Type) OMLO33PriorResult {
	v := OMLO33PriorResult{}
	v.PatientPrior = NewOMLO33PatientPrior(input.Index(0))
	v.PatientVisitPrior = NewOMLO33PatientVisitPrior(input.Index(1))
	v.PatientAllergyInformation = NewAL1Slice(input.Index(2))
	v.OrderPrior = NewOMLO33OrderPriorSlice(input.Index(3))
	return v
}

type OMLO33PriorResult struct {
	PatientPrior              OMLO33PatientPrior
	PatientVisitPrior         OMLO33PatientVisitPrior
	PatientAllergyInformation []AL1
	OrderPrior                []OMLO33OrderPrior
}

// NewOMLO33PriorResultSlice will construct a slice of type OMLO33PriorResult
func NewOMLO33PriorResultSlice(input hl7.HL7Type) []OMLO33PriorResult {
	values := make([]OMLO33PriorResult, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO33PriorResult(input.Index(i))
	}
	return values
}

// NewRRII14PatientVisit creates an implementation of RRII14PatientVisit
func NewRRII14PatientVisit(input hl7.HL7Type) RRII14PatientVisit {
	v := RRII14PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	return v
}

type RRII14PatientVisit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
}

// NewRRII14PatientVisitSlice will construct a slice of type RRII14PatientVisit
func NewRRII14PatientVisitSlice(input hl7.HL7Type) []RRII14PatientVisit {
	values := make([]RRII14PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRRII14PatientVisit(input.Index(i))
	}
	return values
}

// NewOPLO37ContainerObservation creates an implementation of OPLO37ContainerObservation
func NewOPLO37ContainerObservation(input hl7.HL7Type) OPLO37ContainerObservation {
	v := OPLO37ContainerObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type OPLO37ContainerObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewOPLO37ContainerObservationSlice will construct a slice of type OPLO37ContainerObservation
func NewOPLO37ContainerObservationSlice(input hl7.HL7Type) []OPLO37ContainerObservation {
	values := make([]OPLO37ContainerObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOPLO37ContainerObservation(input.Index(i))
	}
	return values
}

// NewCQUI19MedicationEncodingObservation creates an implementation of CQUI19MedicationEncodingObservation
func NewCQUI19MedicationEncodingObservation(input hl7.HL7Type) CQUI19MedicationEncodingObservation {
	v := CQUI19MedicationEncodingObservation{}
	v.ObservationResult = NewOBXSlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CQUI19MedicationEncodingObservation struct {
	ObservationResult        []OBX
	ParticipationInformation []PRT
}

// NewCQUI19MedicationEncodingObservationSlice will construct a slice of type CQUI19MedicationEncodingObservation
func NewCQUI19MedicationEncodingObservationSlice(input hl7.HL7Type) []CQUI19MedicationEncodingObservation {
	values := make([]CQUI19MedicationEncodingObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCQUI19MedicationEncodingObservation(input.Index(i))
	}
	return values
}

// NewQBPQ11Qbp creates an implementation of QBPQ11Qbp
func NewQBPQ11Qbp(input hl7.HL7Type) QBPQ11Qbp {
	v := QBPQ11Qbp{}
	v.AnyHl7Segment = NewHxx(input.Index(0))
	return v
}

type QBPQ11Qbp struct {
	AnyHl7Segment Hxx
}

// NewQBPQ11QbpSlice will construct a slice of type QBPQ11Qbp
func NewQBPQ11QbpSlice(input hl7.HL7Type) []QBPQ11Qbp {
	values := make([]QBPQ11Qbp, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewQBPQ11Qbp(input.Index(i))
	}
	return values
}

// NewPEXP07Study creates an implementation of PEXP07Study
func NewPEXP07Study(input hl7.HL7Type) PEXP07Study {
	v := PEXP07Study{}
	v.ClinicalStudyRegistration = NewCSR(input.Index(0))
	v.ClinicalStudyPhase = NewCSPSlice(input.Index(1))
	return v
}

type PEXP07Study struct {
	ClinicalStudyRegistration CSR
	ClinicalStudyPhase        []CSP
}

// NewPEXP07StudySlice will construct a slice of type PEXP07Study
func NewPEXP07StudySlice(input hl7.HL7Type) []PEXP07Study {
	values := make([]PEXP07Study, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPEXP07Study(input.Index(i))
	}
	return values
}

// NewRPAI09Visit creates an implementation of RPAI09Visit
func NewRPAI09Visit(input hl7.HL7Type) RPAI09Visit {
	v := RPAI09Visit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	return v
}

type RPAI09Visit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
}

// NewRPAI09VisitSlice will construct a slice of type RPAI09Visit
func NewRPAI09VisitSlice(input hl7.HL7Type) []RPAI09Visit {
	values := make([]RPAI09Visit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRPAI09Visit(input.Index(i))
	}
	return values
}

// NewEHCE15PaymentRemittanceDetailInfo creates an implementation of EHCE15PaymentRemittanceDetailInfo
func NewEHCE15PaymentRemittanceDetailInfo(input hl7.HL7Type) EHCE15PaymentRemittanceDetailInfo {
	v := EHCE15PaymentRemittanceDetailInfo{}
	v.InvoiceProcessingResults = NewIPR(input.Index(0))
	v.InvoiceSegment = NewIVC(input.Index(1))
	v.ProductServiceSection = NewEHCE15ProductServiceSectionSlice(input.Index(2))
	return v
}

type EHCE15PaymentRemittanceDetailInfo struct {
	InvoiceProcessingResults IPR
	InvoiceSegment           IVC
	ProductServiceSection    []EHCE15ProductServiceSection
}

// NewEHCE15PaymentRemittanceDetailInfoSlice will construct a slice of type EHCE15PaymentRemittanceDetailInfo
func NewEHCE15PaymentRemittanceDetailInfoSlice(input hl7.HL7Type) []EHCE15PaymentRemittanceDetailInfo {
	values := make([]EHCE15PaymentRemittanceDetailInfo, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewEHCE15PaymentRemittanceDetailInfo(input.Index(i))
	}
	return values
}

// NewOMBO27Order creates an implementation of OMBO27Order
func NewOMBO27Order(input hl7.HL7Type) OMBO27Order {
	v := OMBO27Order{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.Timing = NewOMBO27TimingSlice(input.Index(2))
	v.BloodProductOrder = NewBPO(input.Index(3))
	v.Specimen = NewSPM(input.Index(4))
	v.NotesAndComments = NewNTESlice(input.Index(5))
	v.Diagnosis = NewDG1Slice(input.Index(6))
	v.Observation = NewOMBO27ObservationSlice(input.Index(7))
	v.FinancialTransaction = NewFT1Slice(input.Index(8))
	v.Billing = NewBLG(input.Index(9))
	return v
}

type OMBO27Order struct {
	CommonOrder              ORC
	ParticipationInformation []PRT
	Timing                   []OMBO27Timing
	BloodProductOrder        BPO
	Specimen                 SPM
	NotesAndComments         []NTE
	Diagnosis                []DG1
	Observation              []OMBO27Observation
	FinancialTransaction     []FT1
	Billing                  BLG
}

// NewOMBO27OrderSlice will construct a slice of type OMBO27Order
func NewOMBO27OrderSlice(input hl7.HL7Type) []OMBO27Order {
	values := make([]OMBO27Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMBO27Order(input.Index(i))
	}
	return values
}

// NewCCRI18ResourceObservation creates an implementation of CCRI18ResourceObservation
func NewCCRI18ResourceObservation(input hl7.HL7Type) CCRI18ResourceObservation {
	v := CCRI18ResourceObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CCRI18ResourceObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewCCRI18ResourceObservationSlice will construct a slice of type CCRI18ResourceObservation
func NewCCRI18ResourceObservationSlice(input hl7.HL7Type) []CCRI18ResourceObservation {
	values := make([]CCRI18ResourceObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI18ResourceObservation(input.Index(i))
	}
	return values
}

// NewCCRI18Pathway creates an implementation of CCRI18Pathway
func NewCCRI18Pathway(input hl7.HL7Type) CCRI18Pathway {
	v := CCRI18Pathway{}
	v.Pathway = NewPTH(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	v.RolePathway = NewCCRI18RolePathwaySlice(input.Index(2))
	v.PathwayObservation = NewCCRI18PathwayObservationSlice(input.Index(3))
	return v
}

type CCRI18Pathway struct {
	Pathway            PTH
	Variance           []VAR
	RolePathway        []CCRI18RolePathway
	PathwayObservation []CCRI18PathwayObservation
}

// NewCCRI18PathwaySlice will construct a slice of type CCRI18Pathway
func NewCCRI18PathwaySlice(input hl7.HL7Type) []CCRI18Pathway {
	values := make([]CCRI18Pathway, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI18Pathway(input.Index(i))
	}
	return values
}

// NewDFTP11CommonOrder creates an implementation of DFTP11CommonOrder
func NewDFTP11CommonOrder(input hl7.HL7Type) DFTP11CommonOrder {
	v := DFTP11CommonOrder{}
	v.CommonOrder = NewORC(input.Index(0))
	v.TimingQuantity = NewDFTP11TimingQuantitySlice(input.Index(1))
	v.Order = NewDFTP11Order(input.Index(2))
	v.Observation = NewDFTP11ObservationSlice(input.Index(3))
	return v
}

type DFTP11CommonOrder struct {
	CommonOrder    ORC
	TimingQuantity []DFTP11TimingQuantity
	Order          DFTP11Order
	Observation    []DFTP11Observation
}

// NewDFTP11CommonOrderSlice will construct a slice of type DFTP11CommonOrder
func NewDFTP11CommonOrderSlice(input hl7.HL7Type) []DFTP11CommonOrder {
	values := make([]DFTP11CommonOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewDFTP11CommonOrder(input.Index(i))
	}
	return values
}

// NewOMLO35SpecimenContainer creates an implementation of OMLO35SpecimenContainer
func NewOMLO35SpecimenContainer(input hl7.HL7Type) OMLO35SpecimenContainer {
	v := OMLO35SpecimenContainer{}
	v.SpecimenContainerDetail = NewSAC(input.Index(0))
	v.Order = NewOMLO35OrderSlice(input.Index(1))
	return v
}

type OMLO35SpecimenContainer struct {
	SpecimenContainerDetail SAC
	Order                   []OMLO35Order
}

// NewOMLO35SpecimenContainerSlice will construct a slice of type OMLO35SpecimenContainer
func NewOMLO35SpecimenContainerSlice(input hl7.HL7Type) []OMLO35SpecimenContainer {
	values := make([]OMLO35SpecimenContainer, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO35SpecimenContainer(input.Index(i))
	}
	return values
}

// NewMFNM09MfTestCatDetail creates an implementation of MFNM09MfTestCatDetail
func NewMFNM09MfTestCatDetail(input hl7.HL7Type) MFNM09MfTestCatDetail {
	v := MFNM09MfTestCatDetail{}
	v.CategoricalServicetestobservation = NewOM3(input.Index(0))
	v.ObservationsThatRequireSpecimens = NewOM4Slice(input.Index(1))
	return v
}

type MFNM09MfTestCatDetail struct {
	CategoricalServicetestobservation OM3
	ObservationsThatRequireSpecimens  []OM4
}

// NewMFNM09MfTestCatDetailSlice will construct a slice of type MFNM09MfTestCatDetail
func NewMFNM09MfTestCatDetailSlice(input hl7.HL7Type) []MFNM09MfTestCatDetail {
	values := make([]MFNM09MfTestCatDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMFNM09MfTestCatDetail(input.Index(i))
	}
	return values
}

// NewSIUS14LocationResource creates an implementation of SIUS14LocationResource
func NewSIUS14LocationResource(input hl7.HL7Type) SIUS14LocationResource {
	v := SIUS14LocationResource{}
	v.AppointmentInformationLocationResource = NewAIL(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS14LocationResource struct {
	AppointmentInformationLocationResource AIL
	NotesAndComments                       []NTE
}

// NewSIUS14LocationResourceSlice will construct a slice of type SIUS14LocationResource
func NewSIUS14LocationResourceSlice(input hl7.HL7Type) []SIUS14LocationResource {
	values := make([]SIUS14LocationResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS14LocationResource(input.Index(i))
	}
	return values
}

// NewCCUI20Patient creates an implementation of CCUI20Patient
func NewCCUI20Patient(input hl7.HL7Type) CCUI20Patient {
	v := CCUI20Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	return v
}

type CCUI20Patient struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
}

// NewCCUI20PatientSlice will construct a slice of type CCUI20Patient
func NewCCUI20PatientSlice(input hl7.HL7Type) []CCUI20Patient {
	values := make([]CCUI20Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCUI20Patient(input.Index(i))
	}
	return values
}

// NewSRRS10GeneralResource creates an implementation of SRRS10GeneralResource
func NewSRRS10GeneralResource(input hl7.HL7Type) SRRS10GeneralResource {
	v := SRRS10GeneralResource{}
	v.AppointmentInformationGeneralResource = NewAIG(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SRRS10GeneralResource struct {
	AppointmentInformationGeneralResource AIG
	NotesAndComments                      []NTE
}

// NewSRRS10GeneralResourceSlice will construct a slice of type SRRS10GeneralResource
func NewSRRS10GeneralResourceSlice(input hl7.HL7Type) []SRRS10GeneralResource {
	values := make([]SRRS10GeneralResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS10GeneralResource(input.Index(i))
	}
	return values
}

// NewEHCE01ProductServiceSection creates an implementation of EHCE01ProductServiceSection
func NewEHCE01ProductServiceSection(input hl7.HL7Type) EHCE01ProductServiceSection {
	v := EHCE01ProductServiceSection{}
	v.ProductServiceSection = NewPSS(input.Index(0))
	v.ProductServiceGroup = NewEHCE01ProductServiceGroupSlice(input.Index(1))
	return v
}

type EHCE01ProductServiceSection struct {
	ProductServiceSection PSS
	ProductServiceGroup   []EHCE01ProductServiceGroup
}

// NewEHCE01ProductServiceSectionSlice will construct a slice of type EHCE01ProductServiceSection
func NewEHCE01ProductServiceSectionSlice(input hl7.HL7Type) []EHCE01ProductServiceSection {
	values := make([]EHCE01ProductServiceSection, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewEHCE01ProductServiceSection(input.Index(i))
	}
	return values
}

// NewSRRS08Resources creates an implementation of SRRS08Resources
func NewSRRS08Resources(input hl7.HL7Type) SRRS08Resources {
	v := SRRS08Resources{}
	v.ResourceGroup = NewRGS(input.Index(0))
	v.Service = NewSRRS08ServiceSlice(input.Index(1))
	v.GeneralResource = NewSRRS08GeneralResourceSlice(input.Index(2))
	v.LocationResource = NewSRRS08LocationResourceSlice(input.Index(3))
	v.PersonnelResource = NewSRRS08PersonnelResourceSlice(input.Index(4))
	return v
}

type SRRS08Resources struct {
	ResourceGroup     RGS
	Service           []SRRS08Service
	GeneralResource   []SRRS08GeneralResource
	LocationResource  []SRRS08LocationResource
	PersonnelResource []SRRS08PersonnelResource
}

// NewSRRS08ResourcesSlice will construct a slice of type SRRS08Resources
func NewSRRS08ResourcesSlice(input hl7.HL7Type) []SRRS08Resources {
	values := make([]SRRS08Resources, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS08Resources(input.Index(i))
	}
	return values
}

// NewREFI15Observation creates an implementation of REFI15Observation
func NewREFI15Observation(input hl7.HL7Type) REFI15Observation {
	v := REFI15Observation{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.ResultsNotes = NewREFI15ResultsNotesSlice(input.Index(2))
	return v
}

type REFI15Observation struct {
	ObservationRequest OBR
	NotesAndComments   []NTE
	ResultsNotes       []REFI15ResultsNotes
}

// NewREFI15ObservationSlice will construct a slice of type REFI15Observation
func NewREFI15ObservationSlice(input hl7.HL7Type) []REFI15Observation {
	values := make([]REFI15Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewREFI15Observation(input.Index(i))
	}
	return values
}

// NewCSUC10StudyPharm creates an implementation of CSUC10StudyPharm
func NewCSUC10StudyPharm(input hl7.HL7Type) CSUC10StudyPharm {
	v := CSUC10StudyPharm{}
	v.CommonOrder = NewCSUC10CommonOrder(input.Index(0))
	v.RxAdmin = NewCSUC10RxAdminSlice(input.Index(1))
	return v
}

type CSUC10StudyPharm struct {
	CommonOrder CSUC10CommonOrder
	RxAdmin     []CSUC10RxAdmin
}

// NewCSUC10StudyPharmSlice will construct a slice of type CSUC10StudyPharm
func NewCSUC10StudyPharmSlice(input hl7.HL7Type) []CSUC10StudyPharm {
	values := make([]CSUC10StudyPharm, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCSUC10StudyPharm(input.Index(i))
	}
	return values
}

// NewEHCE20Insurance creates an implementation of EHCE20Insurance
func NewEHCE20Insurance(input hl7.HL7Type) EHCE20Insurance {
	v := EHCE20Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	return v
}

type EHCE20Insurance struct {
	Insurance                      IN1
	InsuranceAdditionalInformation IN2
}

// NewEHCE20InsuranceSlice will construct a slice of type EHCE20Insurance
func NewEHCE20InsuranceSlice(input hl7.HL7Type) []EHCE20Insurance {
	values := make([]EHCE20Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewEHCE20Insurance(input.Index(i))
	}
	return values
}

// NewOMNO07Timing creates an implementation of OMNO07Timing
func NewOMNO07Timing(input hl7.HL7Type) OMNO07Timing {
	v := OMNO07Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type OMNO07Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewOMNO07TimingSlice will construct a slice of type OMNO07Timing
func NewOMNO07TimingSlice(input hl7.HL7Type) []OMNO07Timing {
	values := make([]OMNO07Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMNO07Timing(input.Index(i))
	}
	return values
}

// NewRQAI08Authorization creates an implementation of RQAI08Authorization
func NewRQAI08Authorization(input hl7.HL7Type) RQAI08Authorization {
	v := RQAI08Authorization{}
	v.AuthorizationInformation = NewAUT(input.Index(0))
	v.ContactData = NewCTD(input.Index(1))
	return v
}

type RQAI08Authorization struct {
	AuthorizationInformation AUT
	ContactData              CTD
}

// NewRQAI08AuthorizationSlice will construct a slice of type RQAI08Authorization
func NewRQAI08AuthorizationSlice(input hl7.HL7Type) []RQAI08Authorization {
	values := make([]RQAI08Authorization, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQAI08Authorization(input.Index(i))
	}
	return values
}

// NewORPO10Order creates an implementation of ORPO10Order
func NewORPO10Order(input hl7.HL7Type) ORPO10Order {
	v := ORPO10Order{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.Timing = NewORPO10TimingSlice(input.Index(2))
	v.OrderDetail = NewORPO10OrderDetail(input.Index(3))
	return v
}

type ORPO10Order struct {
	CommonOrder              ORC
	ParticipationInformation []PRT
	Timing                   []ORPO10Timing
	OrderDetail              ORPO10OrderDetail
}

// NewORPO10OrderSlice will construct a slice of type ORPO10Order
func NewORPO10OrderSlice(input hl7.HL7Type) []ORPO10Order {
	values := make([]ORPO10Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORPO10Order(input.Index(i))
	}
	return values
}

// NewORBO28Patient creates an implementation of ORBO28Patient
func NewORBO28Patient(input hl7.HL7Type) ORBO28Patient {
	v := ORBO28Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.AccessRestriction = NewARVSlice(input.Index(2))
	v.Order = NewORBO28OrderSlice(input.Index(3))
	return v
}

type ORBO28Patient struct {
	PatientIdentification    PID
	ParticipationInformation []PRT
	AccessRestriction        []ARV
	Order                    []ORBO28Order
}

// NewORBO28PatientSlice will construct a slice of type ORBO28Patient
func NewORBO28PatientSlice(input hl7.HL7Type) []ORBO28Patient {
	values := make([]ORBO28Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORBO28Patient(input.Index(i))
	}
	return values
}

// NewMFNM06MfPhaseSchedDetail creates an implementation of MFNM06MfPhaseSchedDetail
func NewMFNM06MfPhaseSchedDetail(input hl7.HL7Type) MFNM06MfPhaseSchedDetail {
	v := MFNM06MfPhaseSchedDetail{}
	v.ClinicalStudyPhaseMaster = NewCM1(input.Index(0))
	v.ClinicalStudyScheduleMaster = NewCM2Slice(input.Index(1))
	return v
}

type MFNM06MfPhaseSchedDetail struct {
	ClinicalStudyPhaseMaster    CM1
	ClinicalStudyScheduleMaster []CM2
}

// NewMFNM06MfPhaseSchedDetailSlice will construct a slice of type MFNM06MfPhaseSchedDetail
func NewMFNM06MfPhaseSchedDetailSlice(input hl7.HL7Type) []MFNM06MfPhaseSchedDetail {
	values := make([]MFNM06MfPhaseSchedDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMFNM06MfPhaseSchedDetail(input.Index(i))
	}
	return values
}

// NewRDSO13Order creates an implementation of RDSO13Order
func NewRDSO13Order(input hl7.HL7Type) RDSO13Order {
	v := RDSO13Order{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.Timing = NewRDSO13TimingSlice(input.Index(2))
	v.OrderDetail = NewRDSO13OrderDetail(input.Index(3))
	v.Encoding = NewRDSO13Encoding(input.Index(4))
	v.PharmacyTreatmentDispense = NewRXD(input.Index(5))
	v.AdditionalParticipationInformation = NewPRTSlice(input.Index(6))
	v.NotesAndComments = NewNTESlice(input.Index(7))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(8))
	v.PharmacyTreatmentComponentOrder = NewRXCSlice(input.Index(9))
	v.CumulativeDosage = NewCDOSlice(input.Index(10))
	v.Observation = NewRDSO13ObservationSlice(input.Index(11))
	v.FinancialTransaction = NewFT1Slice(input.Index(12))
	return v
}

type RDSO13Order struct {
	CommonOrder                        ORC
	ParticipationInformation           []PRT
	Timing                             []RDSO13Timing
	OrderDetail                        RDSO13OrderDetail
	Encoding                           RDSO13Encoding
	PharmacyTreatmentDispense          RXD
	AdditionalParticipationInformation []PRT
	NotesAndComments                   []NTE
	PharmacyTreatmentRoute             []RXR
	PharmacyTreatmentComponentOrder    []RXC
	CumulativeDosage                   []CDO
	Observation                        []RDSO13Observation
	FinancialTransaction               []FT1
}

// NewRDSO13OrderSlice will construct a slice of type RDSO13Order
func NewRDSO13OrderSlice(input hl7.HL7Type) []RDSO13Order {
	values := make([]RDSO13Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRDSO13Order(input.Index(i))
	}
	return values
}

// NewORLO34ObservationRequest creates an implementation of ORLO34ObservationRequest
func NewORLO34ObservationRequest(input hl7.HL7Type) ORLO34ObservationRequest {
	v := ORLO34ObservationRequest{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type ORLO34ObservationRequest struct {
	ObservationRequest       OBR
	ParticipationInformation []PRT
}

// NewORLO34ObservationRequestSlice will construct a slice of type ORLO34ObservationRequest
func NewORLO34ObservationRequestSlice(input hl7.HL7Type) []ORLO34ObservationRequest {
	values := make([]ORLO34ObservationRequest, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORLO34ObservationRequest(input.Index(i))
	}
	return values
}

// NewSIUS26Service creates an implementation of SIUS26Service
func NewSIUS26Service(input hl7.HL7Type) SIUS26Service {
	v := SIUS26Service{}
	v.AppointmentInformation = NewAIS(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS26Service struct {
	AppointmentInformation AIS
	NotesAndComments       []NTE
}

// NewSIUS26ServiceSlice will construct a slice of type SIUS26Service
func NewSIUS26ServiceSlice(input hl7.HL7Type) []SIUS26Service {
	values := make([]SIUS26Service, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS26Service(input.Index(i))
	}
	return values
}

// NewOPRO38Response creates an implementation of OPRO38Response
func NewOPRO38Response(input hl7.HL7Type) OPRO38Response {
	v := OPRO38Response{}
	v.Order = NewOPRO38OrderSlice(input.Index(0))
	return v
}

type OPRO38Response struct {
	Order []OPRO38Order
}

// NewOPRO38ResponseSlice will construct a slice of type OPRO38Response
func NewOPRO38ResponseSlice(input hl7.HL7Type) []OPRO38Response {
	values := make([]OPRO38Response, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOPRO38Response(input.Index(i))
	}
	return values
}

// NewPPPPCBProblem creates an implementation of PPPPCBProblem
func NewPPPPCBProblem(input hl7.HL7Type) PPPPCBProblem {
	v := PPPPCBProblem{}
	v.ProblemDetails = NewPRB(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Variance = NewVARSlice(input.Index(2))
	v.ProblemRole = NewPPPPCBProblemRoleSlice(input.Index(3))
	v.ProblemObservation = NewPPPPCBProblemObservationSlice(input.Index(4))
	v.Goal = NewPPPPCBGoalSlice(input.Index(5))
	v.Order = NewPPPPCBOrderSlice(input.Index(6))
	return v
}

type PPPPCBProblem struct {
	ProblemDetails     PRB
	NotesAndComments   []NTE
	Variance           []VAR
	ProblemRole        []PPPPCBProblemRole
	ProblemObservation []PPPPCBProblemObservation
	Goal               []PPPPCBGoal
	Order              []PPPPCBOrder
}

// NewPPPPCBProblemSlice will construct a slice of type PPPPCBProblem
func NewPPPPCBProblemSlice(input hl7.HL7Type) []PPPPCBProblem {
	values := make([]PPPPCBProblem, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPPPCBProblem(input.Index(i))
	}
	return values
}

// NewCSUC11RxAdmin creates an implementation of CSUC11RxAdmin
func NewCSUC11RxAdmin(input hl7.HL7Type) CSUC11RxAdmin {
	v := CSUC11RxAdmin{}
	v.PharmacyTreatmentAdministration = NewRXA(input.Index(0))
	v.PharmacyTreatmentRoute = NewRXR(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	return v
}

type CSUC11RxAdmin struct {
	PharmacyTreatmentAdministration RXA
	PharmacyTreatmentRoute          RXR
	ParticipationInformation        []PRT
}

// NewCSUC11RxAdminSlice will construct a slice of type CSUC11RxAdmin
func NewCSUC11RxAdminSlice(input hl7.HL7Type) []CSUC11RxAdmin {
	values := make([]CSUC11RxAdmin, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCSUC11RxAdmin(input.Index(i))
	}
	return values
}

// NewCCII22Resources creates an implementation of CCII22Resources
func NewCCII22Resources(input hl7.HL7Type) CCII22Resources {
	v := CCII22Resources{}
	v.ResourceGroup = NewRGS(input.Index(0))
	v.ResourceDetail = NewCCII22ResourceDetailSlice(input.Index(1))
	return v
}

type CCII22Resources struct {
	ResourceGroup  RGS
	ResourceDetail []CCII22ResourceDetail
}

// NewCCII22ResourcesSlice will construct a slice of type CCII22Resources
func NewCCII22ResourcesSlice(input hl7.HL7Type) []CCII22Resources {
	values := make([]CCII22Resources, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCII22Resources(input.Index(i))
	}
	return values
}

// NewSRRS09Schedule creates an implementation of SRRS09Schedule
func NewSRRS09Schedule(input hl7.HL7Type) SRRS09Schedule {
	v := SRRS09Schedule{}
	v.SchedulingActivityInformation = NewSCH(input.Index(0))
	v.TimingQuantity = NewTQ1Slice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.Patient = NewSRRS09PatientSlice(input.Index(3))
	v.Resources = NewSRRS09ResourcesSlice(input.Index(4))
	return v
}

type SRRS09Schedule struct {
	SchedulingActivityInformation SCH
	TimingQuantity                []TQ1
	NotesAndComments              []NTE
	Patient                       []SRRS09Patient
	Resources                     []SRRS09Resources
}

// NewSRRS09ScheduleSlice will construct a slice of type SRRS09Schedule
func NewSRRS09ScheduleSlice(input hl7.HL7Type) []SRRS09Schedule {
	values := make([]SRRS09Schedule, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS09Schedule(input.Index(i))
	}
	return values
}

// NewRDYZ80SegmentPattern creates an implementation of RDYZ80SegmentPattern
func NewRDYZ80SegmentPattern(input hl7.HL7Type) RDYZ80SegmentPattern {
	v := RDYZ80SegmentPattern{}
	v.AnyHl7Segment = NewHxx(input.Index(0))
	return v
}

type RDYZ80SegmentPattern struct {
	AnyHl7Segment Hxx
}

// NewRDYZ80SegmentPatternSlice will construct a slice of type RDYZ80SegmentPattern
func NewRDYZ80SegmentPatternSlice(input hl7.HL7Type) []RDYZ80SegmentPattern {
	values := make([]RDYZ80SegmentPattern, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRDYZ80SegmentPattern(input.Index(i))
	}
	return values
}

// NewCCRI17RoleProblem creates an implementation of CCRI17RoleProblem
func NewCCRI17RoleProblem(input hl7.HL7Type) CCRI17RoleProblem {
	v := CCRI17RoleProblem{}
	v.RoleProblemObject = NewCCRI17RoleProblemObject(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type CCRI17RoleProblem struct {
	RoleProblemObject CCRI17RoleProblemObject
	Variance          []VAR
}

// NewCCRI17RoleProblemSlice will construct a slice of type CCRI17RoleProblem
func NewCCRI17RoleProblemSlice(input hl7.HL7Type) []CCRI17RoleProblem {
	values := make([]CCRI17RoleProblem, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI17RoleProblem(input.Index(i))
	}
	return values
}

// NewMDMT07Timing creates an implementation of MDMT07Timing
func NewMDMT07Timing(input hl7.HL7Type) MDMT07Timing {
	v := MDMT07Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type MDMT07Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewMDMT07TimingSlice will construct a slice of type MDMT07Timing
func NewMDMT07TimingSlice(input hl7.HL7Type) []MDMT07Timing {
	values := make([]MDMT07Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMDMT07Timing(input.Index(i))
	}
	return values
}

// NewRSPK25Staff creates an implementation of RSPK25Staff
func NewRSPK25Staff(input hl7.HL7Type) RSPK25Staff {
	v := RSPK25Staff{}
	v.StaffIdentification = NewSTF(input.Index(0))
	v.PractitionerDetail = NewPRASlice(input.Index(1))
	v.PractitionerOrganizationUnit = NewORGSlice(input.Index(2))
	v.ProfessionalAffiliation = NewAFFSlice(input.Index(3))
	v.LanguageDetail = NewLANSlice(input.Index(4))
	v.EducationalDetail = NewEDUSlice(input.Index(5))
	v.CertificateDetail = NewCERSlice(input.Index(6))
	v.NextOfKinAssociatedParties = NewNK1Slice(input.Index(7))
	v.ParticipationInformation = NewPRTSlice(input.Index(8))
	v.Role = NewROLSlice(input.Index(9))
	return v
}

type RSPK25Staff struct {
	StaffIdentification          STF
	PractitionerDetail           []PRA
	PractitionerOrganizationUnit []ORG
	ProfessionalAffiliation      []AFF
	LanguageDetail               []LAN
	EducationalDetail            []EDU
	CertificateDetail            []CER
	NextOfKinAssociatedParties   []NK1
	ParticipationInformation     []PRT
	Role                         []ROL
}

// NewRSPK25StaffSlice will construct a slice of type RSPK25Staff
func NewRSPK25StaffSlice(input hl7.HL7Type) []RSPK25Staff {
	values := make([]RSPK25Staff, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPK25Staff(input.Index(i))
	}
	return values
}

// NewRPAI08Insurance creates an implementation of RPAI08Insurance
func NewRPAI08Insurance(input hl7.HL7Type) RPAI08Insurance {
	v := RPAI08Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3(input.Index(2))
	return v
}

type RPAI08Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification IN3
}

// NewRPAI08InsuranceSlice will construct a slice of type RPAI08Insurance
func NewRPAI08InsuranceSlice(input hl7.HL7Type) []RPAI08Insurance {
	values := make([]RPAI08Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRPAI08Insurance(input.Index(i))
	}
	return values
}

// NewORUR01Visit creates an implementation of ORUR01Visit
func NewORUR01Visit(input hl7.HL7Type) ORUR01Visit {
	v := ORUR01Visit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	return v
}

type ORUR01Visit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ParticipationInformation          []PRT
}

// NewORUR01VisitSlice will construct a slice of type ORUR01Visit
func NewORUR01VisitSlice(input hl7.HL7Type) []ORUR01Visit {
	values := make([]ORUR01Visit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORUR01Visit(input.Index(i))
	}
	return values
}

// NewOMLO39ShipmentObservation creates an implementation of OMLO39ShipmentObservation
func NewOMLO39ShipmentObservation(input hl7.HL7Type) OMLO39ShipmentObservation {
	v := OMLO39ShipmentObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type OMLO39ShipmentObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewOMLO39ShipmentObservationSlice will construct a slice of type OMLO39ShipmentObservation
func NewOMLO39ShipmentObservationSlice(input hl7.HL7Type) []OMLO39ShipmentObservation {
	values := make([]OMLO39ShipmentObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO39ShipmentObservation(input.Index(i))
	}
	return values
}

// NewORPO10Timing creates an implementation of ORPO10Timing
func NewORPO10Timing(input hl7.HL7Type) ORPO10Timing {
	v := ORPO10Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type ORPO10Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewORPO10TimingSlice will construct a slice of type ORPO10Timing
func NewORPO10TimingSlice(input hl7.HL7Type) []ORPO10Timing {
	values := make([]ORPO10Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORPO10Timing(input.Index(i))
	}
	return values
}

// NewORGO20Timing creates an implementation of ORGO20Timing
func NewORGO20Timing(input hl7.HL7Type) ORGO20Timing {
	v := ORGO20Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type ORGO20Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewORGO20TimingSlice will construct a slice of type ORGO20Timing
func NewORGO20TimingSlice(input hl7.HL7Type) []ORGO20Timing {
	values := make([]ORGO20Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORGO20Timing(input.Index(i))
	}
	return values
}

// NewPEXP08Visit creates an implementation of PEXP08Visit
func NewPEXP08Visit(input hl7.HL7Type) PEXP08Visit {
	v := PEXP08Visit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	return v
}

type PEXP08Visit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ParticipationInformation          []PRT
}

// NewPEXP08VisitSlice will construct a slice of type PEXP08Visit
func NewPEXP08VisitSlice(input hl7.HL7Type) []PEXP08Visit {
	values := make([]PEXP08Visit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPEXP08Visit(input.Index(i))
	}
	return values
}

// NewCCRI18RoleClinicalHistory creates an implementation of CCRI18RoleClinicalHistory
func NewCCRI18RoleClinicalHistory(input hl7.HL7Type) CCRI18RoleClinicalHistory {
	v := CCRI18RoleClinicalHistory{}
	v.RoleClinicalHistoryObject = NewCCRI18RoleClinicalHistoryObject(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type CCRI18RoleClinicalHistory struct {
	RoleClinicalHistoryObject CCRI18RoleClinicalHistoryObject
	Variance                  []VAR
}

// NewCCRI18RoleClinicalHistorySlice will construct a slice of type CCRI18RoleClinicalHistory
func NewCCRI18RoleClinicalHistorySlice(input hl7.HL7Type) []CCRI18RoleClinicalHistory {
	values := make([]CCRI18RoleClinicalHistory, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI18RoleClinicalHistory(input.Index(i))
	}
	return values
}

// NewSIUS14GeneralResource creates an implementation of SIUS14GeneralResource
func NewSIUS14GeneralResource(input hl7.HL7Type) SIUS14GeneralResource {
	v := SIUS14GeneralResource{}
	v.AppointmentInformationGeneralResource = NewAIG(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS14GeneralResource struct {
	AppointmentInformationGeneralResource AIG
	NotesAndComments                      []NTE
}

// NewSIUS14GeneralResourceSlice will construct a slice of type SIUS14GeneralResource
func NewSIUS14GeneralResourceSlice(input hl7.HL7Type) []SIUS14GeneralResource {
	values := make([]SIUS14GeneralResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS14GeneralResource(input.Index(i))
	}
	return values
}

// NewRPAI08Authorization creates an implementation of RPAI08Authorization
func NewRPAI08Authorization(input hl7.HL7Type) RPAI08Authorization {
	v := RPAI08Authorization{}
	v.AuthorizationInformation = NewAUT(input.Index(0))
	v.ContactData = NewCTD(input.Index(1))
	return v
}

type RPAI08Authorization struct {
	AuthorizationInformation AUT
	ContactData              CTD
}

// NewRPAI08AuthorizationSlice will construct a slice of type RPAI08Authorization
func NewRPAI08AuthorizationSlice(input hl7.HL7Type) []RPAI08Authorization {
	values := make([]RPAI08Authorization, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRPAI08Authorization(input.Index(i))
	}
	return values
}

// NewRQAI11Results creates an implementation of RQAI11Results
func NewRQAI11Results(input hl7.HL7Type) RQAI11Results {
	v := RQAI11Results{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type RQAI11Results struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewRQAI11ResultsSlice will construct a slice of type RQAI11Results
func NewRQAI11ResultsSlice(input hl7.HL7Type) []RQAI11Results {
	values := make([]RQAI11Results, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQAI11Results(input.Index(i))
	}
	return values
}

// NewEHCE21AuthorizationRequest creates an implementation of EHCE21AuthorizationRequest
func NewEHCE21AuthorizationRequest(input hl7.HL7Type) EHCE21AuthorizationRequest {
	v := EHCE21AuthorizationRequest{}
	v.InvoiceSegment = NewIVC(input.Index(0))
	v.PslItemInfo = NewEHCE21PslItemInfoSlice(input.Index(1))
	return v
}

type EHCE21AuthorizationRequest struct {
	InvoiceSegment IVC
	PslItemInfo    []EHCE21PslItemInfo
}

// NewEHCE21AuthorizationRequestSlice will construct a slice of type EHCE21AuthorizationRequest
func NewEHCE21AuthorizationRequestSlice(input hl7.HL7Type) []EHCE21AuthorizationRequest {
	values := make([]EHCE21AuthorizationRequest, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewEHCE21AuthorizationRequest(input.Index(i))
	}
	return values
}

// NewSIUS16Resources creates an implementation of SIUS16Resources
func NewSIUS16Resources(input hl7.HL7Type) SIUS16Resources {
	v := SIUS16Resources{}
	v.ResourceGroup = NewRGS(input.Index(0))
	v.Service = NewSIUS16ServiceSlice(input.Index(1))
	v.GeneralResource = NewSIUS16GeneralResourceSlice(input.Index(2))
	v.LocationResource = NewSIUS16LocationResourceSlice(input.Index(3))
	v.PersonnelResource = NewSIUS16PersonnelResourceSlice(input.Index(4))
	return v
}

type SIUS16Resources struct {
	ResourceGroup     RGS
	Service           []SIUS16Service
	GeneralResource   []SIUS16GeneralResource
	LocationResource  []SIUS16LocationResource
	PersonnelResource []SIUS16PersonnelResource
}

// NewSIUS16ResourcesSlice will construct a slice of type SIUS16Resources
func NewSIUS16ResourcesSlice(input hl7.HL7Type) []SIUS16Resources {
	values := make([]SIUS16Resources, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS16Resources(input.Index(i))
	}
	return values
}

// NewRQAI11Insurance creates an implementation of RQAI11Insurance
func NewRQAI11Insurance(input hl7.HL7Type) RQAI11Insurance {
	v := RQAI11Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3(input.Index(2))
	return v
}

type RQAI11Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification IN3
}

// NewRQAI11InsuranceSlice will construct a slice of type RQAI11Insurance
func NewRQAI11InsuranceSlice(input hl7.HL7Type) []RQAI11Insurance {
	values := make([]RQAI11Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQAI11Insurance(input.Index(i))
	}
	return values
}

// NewOMLO21ObservationPrior creates an implementation of OMLO21ObservationPrior
func NewOMLO21ObservationPrior(input hl7.HL7Type) OMLO21ObservationPrior {
	v := OMLO21ObservationPrior{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type OMLO21ObservationPrior struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewOMLO21ObservationPriorSlice will construct a slice of type OMLO21ObservationPrior
func NewOMLO21ObservationPriorSlice(input hl7.HL7Type) []OMLO21ObservationPrior {
	values := make([]OMLO21ObservationPrior, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO21ObservationPrior(input.Index(i))
	}
	return values
}

// NewCSUC10CommonOrder creates an implementation of CSUC10CommonOrder
func NewCSUC10CommonOrder(input hl7.HL7Type) CSUC10CommonOrder {
	v := CSUC10CommonOrder{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CSUC10CommonOrder struct {
	CommonOrder              ORC
	ParticipationInformation []PRT
}

// NewCSUC10CommonOrderSlice will construct a slice of type CSUC10CommonOrder
func NewCSUC10CommonOrderSlice(input hl7.HL7Type) []CSUC10CommonOrder {
	values := make([]CSUC10CommonOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCSUC10CommonOrder(input.Index(i))
	}
	return values
}

// NewRQAI08Insurance creates an implementation of RQAI08Insurance
func NewRQAI08Insurance(input hl7.HL7Type) RQAI08Insurance {
	v := RQAI08Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3(input.Index(2))
	return v
}

type RQAI08Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification IN3
}

// NewRQAI08InsuranceSlice will construct a slice of type RQAI08Insurance
func NewRQAI08InsuranceSlice(input hl7.HL7Type) []RQAI08Insurance {
	values := make([]RQAI08Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQAI08Insurance(input.Index(i))
	}
	return values
}

// NewCCUI20MedicationOrderDetail creates an implementation of CCUI20MedicationOrderDetail
func NewCCUI20MedicationOrderDetail(input hl7.HL7Type) CCUI20MedicationOrderDetail {
	v := CCUI20MedicationOrderDetail{}
	v.PharmacyTreatmentOrder = NewRXO(input.Index(0))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(1))
	v.PharmacyTreatmentComponentOrder = NewRXCSlice(input.Index(2))
	v.MedicationOrderObservation = NewCCUI20MedicationOrderObservationSlice(input.Index(3))
	return v
}

type CCUI20MedicationOrderDetail struct {
	PharmacyTreatmentOrder          RXO
	PharmacyTreatmentRoute          []RXR
	PharmacyTreatmentComponentOrder []RXC
	MedicationOrderObservation      []CCUI20MedicationOrderObservation
}

// NewCCUI20MedicationOrderDetailSlice will construct a slice of type CCUI20MedicationOrderDetail
func NewCCUI20MedicationOrderDetailSlice(input hl7.HL7Type) []CCUI20MedicationOrderDetail {
	values := make([]CCUI20MedicationOrderDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCUI20MedicationOrderDetail(input.Index(i))
	}
	return values
}

// NewSRMS09Observation creates an implementation of SRMS09Observation
func NewSRMS09Observation(input hl7.HL7Type) SRMS09Observation {
	v := SRMS09Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type SRMS09Observation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewSRMS09ObservationSlice will construct a slice of type SRMS09Observation
func NewSRMS09ObservationSlice(input hl7.HL7Type) []SRMS09Observation {
	values := make([]SRMS09Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS09Observation(input.Index(i))
	}
	return values
}

// NewRRDO14Response creates an implementation of RRDO14Response
func NewRRDO14Response(input hl7.HL7Type) RRDO14Response {
	v := RRDO14Response{}
	v.Patient = NewRRDO14Patient(input.Index(0))
	v.Order = NewRRDO14OrderSlice(input.Index(1))
	return v
}

type RRDO14Response struct {
	Patient RRDO14Patient
	Order   []RRDO14Order
}

// NewRRDO14ResponseSlice will construct a slice of type RRDO14Response
func NewRRDO14ResponseSlice(input hl7.HL7Type) []RRDO14Response {
	values := make([]RRDO14Response, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRRDO14Response(input.Index(i))
	}
	return values
}

// NewCCRI18MedicationHistory creates an implementation of CCRI18MedicationHistory
func NewCCRI18MedicationHistory(input hl7.HL7Type) CCRI18MedicationHistory {
	v := CCRI18MedicationHistory{}
	v.CommonOrder = NewORC(input.Index(0))
	v.MedicationOrderDetail = NewCCRI18MedicationOrderDetail(input.Index(1))
	v.MedicationEncodingDetail = NewCCRI18MedicationEncodingDetail(input.Index(2))
	v.MedicationAdministrationDetail = NewCCRI18MedicationAdministrationDetailSlice(input.Index(3))
	v.ClinicalTrialIdentification = NewCTISlice(input.Index(4))
	return v
}

type CCRI18MedicationHistory struct {
	CommonOrder                    ORC
	MedicationOrderDetail          CCRI18MedicationOrderDetail
	MedicationEncodingDetail       CCRI18MedicationEncodingDetail
	MedicationAdministrationDetail []CCRI18MedicationAdministrationDetail
	ClinicalTrialIdentification    []CTI
}

// NewCCRI18MedicationHistorySlice will construct a slice of type CCRI18MedicationHistory
func NewCCRI18MedicationHistorySlice(input hl7.HL7Type) []CCRI18MedicationHistory {
	values := make([]CCRI18MedicationHistory, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI18MedicationHistory(input.Index(i))
	}
	return values
}

// NewRQAI10Observation creates an implementation of RQAI10Observation
func NewRQAI10Observation(input hl7.HL7Type) RQAI10Observation {
	v := RQAI10Observation{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Results = NewRQAI10ResultsSlice(input.Index(2))
	return v
}

type RQAI10Observation struct {
	ObservationRequest OBR
	NotesAndComments   []NTE
	Results            []RQAI10Results
}

// NewRQAI10ObservationSlice will construct a slice of type RQAI10Observation
func NewRQAI10ObservationSlice(input hl7.HL7Type) []RQAI10Observation {
	values := make([]RQAI10Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQAI10Observation(input.Index(i))
	}
	return values
}

// NewREFI12ProviderContact creates an implementation of REFI12ProviderContact
func NewREFI12ProviderContact(input hl7.HL7Type) REFI12ProviderContact {
	v := REFI12ProviderContact{}
	v.ProviderData = NewPRD(input.Index(0))
	v.ContactData = NewCTDSlice(input.Index(1))
	return v
}

type REFI12ProviderContact struct {
	ProviderData PRD
	ContactData  []CTD
}

// NewREFI12ProviderContactSlice will construct a slice of type REFI12ProviderContact
func NewREFI12ProviderContactSlice(input hl7.HL7Type) []REFI12ProviderContact {
	values := make([]REFI12ProviderContact, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewREFI12ProviderContact(input.Index(i))
	}
	return values
}

// NewREFI14Procedure creates an implementation of REFI14Procedure
func NewREFI14Procedure(input hl7.HL7Type) REFI14Procedure {
	v := REFI14Procedure{}
	v.Procedures = NewPR1(input.Index(0))
	v.AuthorizationContact2 = NewREFI14AuthorizationContact2(input.Index(1))
	return v
}

type REFI14Procedure struct {
	Procedures            PR1
	AuthorizationContact2 REFI14AuthorizationContact2
}

// NewREFI14ProcedureSlice will construct a slice of type REFI14Procedure
func NewREFI14ProcedureSlice(input hl7.HL7Type) []REFI14Procedure {
	values := make([]REFI14Procedure, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewREFI14Procedure(input.Index(i))
	}
	return values
}

// NewSRMS01GeneralResource creates an implementation of SRMS01GeneralResource
func NewSRMS01GeneralResource(input hl7.HL7Type) SRMS01GeneralResource {
	v := SRMS01GeneralResource{}
	v.AppointmentInformationGeneralResource = NewAIG(input.Index(0))
	v.AppointmentPreferences = NewAPR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type SRMS01GeneralResource struct {
	AppointmentInformationGeneralResource AIG
	AppointmentPreferences                APR
	NotesAndComments                      []NTE
}

// NewSRMS01GeneralResourceSlice will construct a slice of type SRMS01GeneralResource
func NewSRMS01GeneralResourceSlice(input hl7.HL7Type) []SRMS01GeneralResource {
	values := make([]SRMS01GeneralResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS01GeneralResource(input.Index(i))
	}
	return values
}

// NewORLO40Package creates an implementation of ORLO40Package
func NewORLO40Package(input hl7.HL7Type) ORLO40Package {
	v := ORLO40Package{}
	v.ShipmentPackage = NewPAC(input.Index(0))
	v.SpecimenInPackage = NewORLO40SpecimenInPackageSlice(input.Index(1))
	return v
}

type ORLO40Package struct {
	ShipmentPackage   PAC
	SpecimenInPackage []ORLO40SpecimenInPackage
}

// NewORLO40PackageSlice will construct a slice of type ORLO40Package
func NewORLO40PackageSlice(input hl7.HL7Type) []ORLO40Package {
	values := make([]ORLO40Package, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORLO40Package(input.Index(i))
	}
	return values
}

// NewRQAI09Insurance creates an implementation of RQAI09Insurance
func NewRQAI09Insurance(input hl7.HL7Type) RQAI09Insurance {
	v := RQAI09Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3(input.Index(2))
	return v
}

type RQAI09Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification IN3
}

// NewRQAI09InsuranceSlice will construct a slice of type RQAI09Insurance
func NewRQAI09InsuranceSlice(input hl7.HL7Type) []RQAI09Insurance {
	values := make([]RQAI09Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQAI09Insurance(input.Index(i))
	}
	return values
}

// NewOMDO03OrderTray creates an implementation of OMDO03OrderTray
func NewOMDO03OrderTray(input hl7.HL7Type) OMDO03OrderTray {
	v := OMDO03OrderTray{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.TimingTray = NewOMDO03TimingTraySlice(input.Index(2))
	v.DietTrayInstructions = NewODTSlice(input.Index(3))
	v.NotesAndComments = NewNTESlice(input.Index(4))
	return v
}

type OMDO03OrderTray struct {
	CommonOrder              ORC
	ParticipationInformation []PRT
	TimingTray               []OMDO03TimingTray
	DietTrayInstructions     []ODT
	NotesAndComments         []NTE
}

// NewOMDO03OrderTraySlice will construct a slice of type OMDO03OrderTray
func NewOMDO03OrderTraySlice(input hl7.HL7Type) []OMDO03OrderTray {
	values := make([]OMDO03OrderTray, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMDO03OrderTray(input.Index(i))
	}
	return values
}

// NewPGLPC6Pathway creates an implementation of PGLPC6Pathway
func NewPGLPC6Pathway(input hl7.HL7Type) PGLPC6Pathway {
	v := PGLPC6Pathway{}
	v.Pathway = NewPTH(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type PGLPC6Pathway struct {
	Pathway  PTH
	Variance []VAR
}

// NewPGLPC6PathwaySlice will construct a slice of type PGLPC6Pathway
func NewPGLPC6PathwaySlice(input hl7.HL7Type) []PGLPC6Pathway {
	values := make([]PGLPC6Pathway, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPGLPC6Pathway(input.Index(i))
	}
	return values
}

// NewCQUI19ClinicalHistoryDetail creates an implementation of CQUI19ClinicalHistoryDetail
func NewCQUI19ClinicalHistoryDetail(input hl7.HL7Type) CQUI19ClinicalHistoryDetail {
	v := CQUI19ClinicalHistoryDetail{}
	v.ClinicalHistoryObject = NewCQUI19ClinicalHistoryObject(input.Index(0))
	v.ClinicalHistoryObservation = NewCQUI19ClinicalHistoryObservationSlice(input.Index(1))
	return v
}

type CQUI19ClinicalHistoryDetail struct {
	ClinicalHistoryObject      CQUI19ClinicalHistoryObject
	ClinicalHistoryObservation []CQUI19ClinicalHistoryObservation
}

// NewCQUI19ClinicalHistoryDetailSlice will construct a slice of type CQUI19ClinicalHistoryDetail
func NewCQUI19ClinicalHistoryDetailSlice(input hl7.HL7Type) []CQUI19ClinicalHistoryDetail {
	values := make([]CQUI19ClinicalHistoryDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCQUI19ClinicalHistoryDetail(input.Index(i))
	}
	return values
}

// NewMFNM02MfStaff creates an implementation of MFNM02MfStaff
func NewMFNM02MfStaff(input hl7.HL7Type) MFNM02MfStaff {
	v := MFNM02MfStaff{}
	v.MasterFileEntry = NewMFE(input.Index(0))
	v.StaffIdentification = NewSTF(input.Index(1))
	v.PractitionerDetail = NewPRASlice(input.Index(2))
	v.PractitionerOrganizationUnit = NewORGSlice(input.Index(3))
	v.ProfessionalAffiliation = NewAFFSlice(input.Index(4))
	v.LanguageDetail = NewLANSlice(input.Index(5))
	v.EducationalDetail = NewEDUSlice(input.Index(6))
	v.CertificateDetail = NewCERSlice(input.Index(7))
	v.NotesAndComments = NewNTESlice(input.Index(8))
	return v
}

type MFNM02MfStaff struct {
	MasterFileEntry              MFE
	StaffIdentification          STF
	PractitionerDetail           []PRA
	PractitionerOrganizationUnit []ORG
	ProfessionalAffiliation      []AFF
	LanguageDetail               []LAN
	EducationalDetail            []EDU
	CertificateDetail            []CER
	NotesAndComments             []NTE
}

// NewMFNM02MfStaffSlice will construct a slice of type MFNM02MfStaff
func NewMFNM02MfStaffSlice(input hl7.HL7Type) []MFNM02MfStaff {
	values := make([]MFNM02MfStaff, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMFNM02MfStaff(input.Index(i))
	}
	return values
}

// NewPEXP08TimingQty creates an implementation of PEXP08TimingQty
func NewPEXP08TimingQty(input hl7.HL7Type) PEXP08TimingQty {
	v := PEXP08TimingQty{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type PEXP08TimingQty struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewPEXP08TimingQtySlice will construct a slice of type PEXP08TimingQty
func NewPEXP08TimingQtySlice(input hl7.HL7Type) []PEXP08TimingQty {
	values := make([]PEXP08TimingQty, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPEXP08TimingQty(input.Index(i))
	}
	return values
}

// NewSRRS06Patient creates an implementation of SRRS06Patient
func NewSRRS06Patient(input hl7.HL7Type) SRRS06Patient {
	v := SRRS06Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientVisit = NewPV1(input.Index(1))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(2))
	v.Diagnosis = NewDG1Slice(input.Index(3))
	return v
}

type SRRS06Patient struct {
	PatientIdentification             PID
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	Diagnosis                         []DG1
}

// NewSRRS06PatientSlice will construct a slice of type SRRS06Patient
func NewSRRS06PatientSlice(input hl7.HL7Type) []SRRS06Patient {
	values := make([]SRRS06Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS06Patient(input.Index(i))
	}
	return values
}

// NewRQAI09Results creates an implementation of RQAI09Results
func NewRQAI09Results(input hl7.HL7Type) RQAI09Results {
	v := RQAI09Results{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type RQAI09Results struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewRQAI09ResultsSlice will construct a slice of type RQAI09Results
func NewRQAI09ResultsSlice(input hl7.HL7Type) []RQAI09Results {
	values := make([]RQAI09Results, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQAI09Results(input.Index(i))
	}
	return values
}

// NewMFNM16PurchasingVendor creates an implementation of MFNM16PurchasingVendor
func NewMFNM16PurchasingVendor(input hl7.HL7Type) MFNM16PurchasingVendor {
	v := MFNM16PurchasingVendor{}
	v.PurchasingVendor = NewVND(input.Index(0))
	v.Packaging = NewMFNM16PackagingSlice(input.Index(1))
	return v
}

type MFNM16PurchasingVendor struct {
	PurchasingVendor VND
	Packaging        []MFNM16Packaging
}

// NewMFNM16PurchasingVendorSlice will construct a slice of type MFNM16PurchasingVendor
func NewMFNM16PurchasingVendorSlice(input hl7.HL7Type) []MFNM16PurchasingVendor {
	values := make([]MFNM16PurchasingVendor, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMFNM16PurchasingVendor(input.Index(i))
	}
	return values
}

// NewCCRI18Patient creates an implementation of CCRI18Patient
func NewCCRI18Patient(input hl7.HL7Type) CCRI18Patient {
	v := CCRI18Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	return v
}

type CCRI18Patient struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
}

// NewCCRI18PatientSlice will construct a slice of type CCRI18Patient
func NewCCRI18PatientSlice(input hl7.HL7Type) []CCRI18Patient {
	values := make([]CCRI18Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI18Patient(input.Index(i))
	}
	return values
}

// NewOMLO21Container creates an implementation of OMLO21Container
func NewOMLO21Container(input hl7.HL7Type) OMLO21Container {
	v := OMLO21Container{}
	v.SpecimenContainerDetail = NewSAC(input.Index(0))
	v.ContainerObservation = NewOMLO21ContainerObservationSlice(input.Index(1))
	return v
}

type OMLO21Container struct {
	SpecimenContainerDetail SAC
	ContainerObservation    []OMLO21ContainerObservation
}

// NewOMLO21ContainerSlice will construct a slice of type OMLO21Container
func NewOMLO21ContainerSlice(input hl7.HL7Type) []OMLO21Container {
	values := make([]OMLO21Container, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO21Container(input.Index(i))
	}
	return values
}

// NewSRRS05Resources creates an implementation of SRRS05Resources
func NewSRRS05Resources(input hl7.HL7Type) SRRS05Resources {
	v := SRRS05Resources{}
	v.ResourceGroup = NewRGS(input.Index(0))
	v.Service = NewSRRS05ServiceSlice(input.Index(1))
	v.GeneralResource = NewSRRS05GeneralResourceSlice(input.Index(2))
	v.LocationResource = NewSRRS05LocationResourceSlice(input.Index(3))
	v.PersonnelResource = NewSRRS05PersonnelResourceSlice(input.Index(4))
	return v
}

type SRRS05Resources struct {
	ResourceGroup     RGS
	Service           []SRRS05Service
	GeneralResource   []SRRS05GeneralResource
	LocationResource  []SRRS05LocationResource
	PersonnelResource []SRRS05PersonnelResource
}

// NewSRRS05ResourcesSlice will construct a slice of type SRRS05Resources
func NewSRRS05ResourcesSlice(input hl7.HL7Type) []SRRS05Resources {
	values := make([]SRRS05Resources, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS05Resources(input.Index(i))
	}
	return values
}

// NewOULR24Result creates an implementation of OULR24Result
func NewOULR24Result(input hl7.HL7Type) OULR24Result {
	v := OULR24Result{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.TestCodeDetail = NewTCD(input.Index(2))
	v.SubstanceIdentifier = NewSIDSlice(input.Index(3))
	v.NotesAndComments = NewNTESlice(input.Index(4))
	return v
}

type OULR24Result struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	TestCodeDetail           TCD
	SubstanceIdentifier      []SID
	NotesAndComments         []NTE
}

// NewOULR24ResultSlice will construct a slice of type OULR24Result
func NewOULR24ResultSlice(input hl7.HL7Type) []OULR24Result {
	values := make([]OULR24Result, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOULR24Result(input.Index(i))
	}
	return values
}

// NewPPGPCJPathway creates an implementation of PPGPCJPathway
func NewPPGPCJPathway(input hl7.HL7Type) PPGPCJPathway {
	v := PPGPCJPathway{}
	v.Pathway = NewPTH(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Variance = NewVARSlice(input.Index(2))
	v.PathwayRole = NewPPGPCJPathwayRoleSlice(input.Index(3))
	v.Goal = NewPPGPCJGoalSlice(input.Index(4))
	return v
}

type PPGPCJPathway struct {
	Pathway          PTH
	NotesAndComments []NTE
	Variance         []VAR
	PathwayRole      []PPGPCJPathwayRole
	Goal             []PPGPCJGoal
}

// NewPPGPCJPathwaySlice will construct a slice of type PPGPCJPathway
func NewPPGPCJPathwaySlice(input hl7.HL7Type) []PPGPCJPathway {
	values := make([]PPGPCJPathway, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPGPCJPathway(input.Index(i))
	}
	return values
}

// NewOULR22Result creates an implementation of OULR22Result
func NewOULR22Result(input hl7.HL7Type) OULR22Result {
	v := OULR22Result{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.TestCodeDetail = NewTCD(input.Index(2))
	v.SubstanceIdentifier = NewSIDSlice(input.Index(3))
	v.NotesAndComments = NewNTESlice(input.Index(4))
	return v
}

type OULR22Result struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	TestCodeDetail           TCD
	SubstanceIdentifier      []SID
	NotesAndComments         []NTE
}

// NewOULR22ResultSlice will construct a slice of type OULR22Result
func NewOULR22ResultSlice(input hl7.HL7Type) []OULR22Result {
	values := make([]OULR22Result, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOULR22Result(input.Index(i))
	}
	return values
}

// NewOMLO35Insurance creates an implementation of OMLO35Insurance
func NewOMLO35Insurance(input hl7.HL7Type) OMLO35Insurance {
	v := OMLO35Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3(input.Index(2))
	return v
}

type OMLO35Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification IN3
}

// NewOMLO35InsuranceSlice will construct a slice of type OMLO35Insurance
func NewOMLO35InsuranceSlice(input hl7.HL7Type) []OMLO35Insurance {
	values := make([]OMLO35Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO35Insurance(input.Index(i))
	}
	return values
}

// NewRRAO18Response creates an implementation of RRAO18Response
func NewRRAO18Response(input hl7.HL7Type) RRAO18Response {
	v := RRAO18Response{}
	v.Patient = NewRRAO18Patient(input.Index(0))
	v.Order = NewRRAO18OrderSlice(input.Index(1))
	return v
}

type RRAO18Response struct {
	Patient RRAO18Patient
	Order   []RRAO18Order
}

// NewRRAO18ResponseSlice will construct a slice of type RRAO18Response
func NewRRAO18ResponseSlice(input hl7.HL7Type) []RRAO18Response {
	values := make([]RRAO18Response, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRRAO18Response(input.Index(i))
	}
	return values
}

// NewPPRPC3PatientVisit creates an implementation of PPRPC3PatientVisit
func NewPPRPC3PatientVisit(input hl7.HL7Type) PPRPC3PatientVisit {
	v := PPRPC3PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	return v
}

type PPRPC3PatientVisit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
}

// NewPPRPC3PatientVisitSlice will construct a slice of type PPRPC3PatientVisit
func NewPPRPC3PatientVisitSlice(input hl7.HL7Type) []PPRPC3PatientVisit {
	values := make([]PPRPC3PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPRPC3PatientVisit(input.Index(i))
	}
	return values
}

// NewQBPZ89Qbp creates an implementation of QBPZ89Qbp
func NewQBPZ89Qbp(input hl7.HL7Type) QBPZ89Qbp {
	v := QBPZ89Qbp{}
	v.AnyHl7Segment = NewHxx(input.Index(0))
	return v
}

type QBPZ89Qbp struct {
	AnyHl7Segment Hxx
}

// NewQBPZ89QbpSlice will construct a slice of type QBPZ89Qbp
func NewQBPZ89QbpSlice(input hl7.HL7Type) []QBPZ89Qbp {
	values := make([]QBPZ89Qbp, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewQBPZ89Qbp(input.Index(i))
	}
	return values
}

// NewCQUI19ProviderContact creates an implementation of CQUI19ProviderContact
func NewCQUI19ProviderContact(input hl7.HL7Type) CQUI19ProviderContact {
	v := CQUI19ProviderContact{}
	v.ProviderData = NewPRD(input.Index(0))
	v.ContactData = NewCTDSlice(input.Index(1))
	return v
}

type CQUI19ProviderContact struct {
	ProviderData PRD
	ContactData  []CTD
}

// NewCQUI19ProviderContactSlice will construct a slice of type CQUI19ProviderContact
func NewCQUI19ProviderContactSlice(input hl7.HL7Type) []CQUI19ProviderContact {
	values := make([]CQUI19ProviderContact, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCQUI19ProviderContact(input.Index(i))
	}
	return values
}

// NewCCRI16GoalObservation creates an implementation of CCRI16GoalObservation
func NewCCRI16GoalObservation(input hl7.HL7Type) CCRI16GoalObservation {
	v := CCRI16GoalObservation{}
	v.ObservationResult = NewOBXSlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CCRI16GoalObservation struct {
	ObservationResult        []OBX
	ParticipationInformation []PRT
}

// NewCCRI16GoalObservationSlice will construct a slice of type CCRI16GoalObservation
func NewCCRI16GoalObservationSlice(input hl7.HL7Type) []CCRI16GoalObservation {
	values := make([]CCRI16GoalObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI16GoalObservation(input.Index(i))
	}
	return values
}

// NewCCUI20ClinicalHistory creates an implementation of CCUI20ClinicalHistory
func NewCCUI20ClinicalHistory(input hl7.HL7Type) CCUI20ClinicalHistory {
	v := CCUI20ClinicalHistory{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ClinicalHistoryDetail = NewCCUI20ClinicalHistoryDetailSlice(input.Index(1))
	v.RoleClinicalHistory = NewCCUI20RoleClinicalHistorySlice(input.Index(2))
	v.ClinicalTrialIdentification = NewCTISlice(input.Index(3))
	return v
}

type CCUI20ClinicalHistory struct {
	CommonOrder                 ORC
	ClinicalHistoryDetail       []CCUI20ClinicalHistoryDetail
	RoleClinicalHistory         []CCUI20RoleClinicalHistory
	ClinicalTrialIdentification []CTI
}

// NewCCUI20ClinicalHistorySlice will construct a slice of type CCUI20ClinicalHistory
func NewCCUI20ClinicalHistorySlice(input hl7.HL7Type) []CCUI20ClinicalHistory {
	values := make([]CCUI20ClinicalHistory, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCUI20ClinicalHistory(input.Index(i))
	}
	return values
}

// NewSRRS10Schedule creates an implementation of SRRS10Schedule
func NewSRRS10Schedule(input hl7.HL7Type) SRRS10Schedule {
	v := SRRS10Schedule{}
	v.SchedulingActivityInformation = NewSCH(input.Index(0))
	v.TimingQuantity = NewTQ1Slice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.Patient = NewSRRS10PatientSlice(input.Index(3))
	v.Resources = NewSRRS10ResourcesSlice(input.Index(4))
	return v
}

type SRRS10Schedule struct {
	SchedulingActivityInformation SCH
	TimingQuantity                []TQ1
	NotesAndComments              []NTE
	Patient                       []SRRS10Patient
	Resources                     []SRRS10Resources
}

// NewSRRS10ScheduleSlice will construct a slice of type SRRS10Schedule
func NewSRRS10ScheduleSlice(input hl7.HL7Type) []SRRS10Schedule {
	values := make([]SRRS10Schedule, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS10Schedule(input.Index(i))
	}
	return values
}

// NewCCRI17Insurance creates an implementation of CCRI17Insurance
func NewCCRI17Insurance(input hl7.HL7Type) CCRI17Insurance {
	v := CCRI17Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3(input.Index(2))
	return v
}

type CCRI17Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification IN3
}

// NewCCRI17InsuranceSlice will construct a slice of type CCRI17Insurance
func NewCCRI17InsuranceSlice(input hl7.HL7Type) []CCRI17Insurance {
	values := make([]CCRI17Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI17Insurance(input.Index(i))
	}
	return values
}

// NewORUR30Visit creates an implementation of ORUR30Visit
func NewORUR30Visit(input hl7.HL7Type) ORUR30Visit {
	v := ORUR30Visit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	return v
}

type ORUR30Visit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ParticipationInformation          []PRT
}

// NewORUR30VisitSlice will construct a slice of type ORUR30Visit
func NewORUR30VisitSlice(input hl7.HL7Type) []ORUR30Visit {
	values := make([]ORUR30Visit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORUR30Visit(input.Index(i))
	}
	return values
}

// NewSSUU03Specimen creates an implementation of SSUU03Specimen
func NewSSUU03Specimen(input hl7.HL7Type) SSUU03Specimen {
	v := SSUU03Specimen{}
	v.Specimen = NewSPM(input.Index(0))
	v.ObservationResult = NewOBXSlice(input.Index(1))
	return v
}

type SSUU03Specimen struct {
	Specimen          SPM
	ObservationResult []OBX
}

// NewSSUU03SpecimenSlice will construct a slice of type SSUU03Specimen
func NewSSUU03SpecimenSlice(input hl7.HL7Type) []SSUU03Specimen {
	values := make([]SSUU03Specimen, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSSUU03Specimen(input.Index(i))
	}
	return values
}

// NewCCUI20ProblemObservation creates an implementation of CCUI20ProblemObservation
func NewCCUI20ProblemObservation(input hl7.HL7Type) CCUI20ProblemObservation {
	v := CCUI20ProblemObservation{}
	v.ObservationResult = NewOBXSlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CCUI20ProblemObservation struct {
	ObservationResult        []OBX
	ParticipationInformation []PRT
}

// NewCCUI20ProblemObservationSlice will construct a slice of type CCUI20ProblemObservation
func NewCCUI20ProblemObservationSlice(input hl7.HL7Type) []CCUI20ProblemObservation {
	values := make([]CCUI20ProblemObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCUI20ProblemObservation(input.Index(i))
	}
	return values
}

// NewPPPPCDPathwayRole creates an implementation of PPPPCDPathwayRole
func NewPPPPCDPathwayRole(input hl7.HL7Type) PPPPCDPathwayRole {
	v := PPPPCDPathwayRole{}
	v.Role = NewROL(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type PPPPCDPathwayRole struct {
	Role     ROL
	Variance []VAR
}

// NewPPPPCDPathwayRoleSlice will construct a slice of type PPPPCDPathwayRole
func NewPPPPCDPathwayRoleSlice(input hl7.HL7Type) []PPPPCDPathwayRole {
	values := make([]PPPPCDPathwayRole, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPPPCDPathwayRole(input.Index(i))
	}
	return values
}

// NewRRAO18Order creates an implementation of RRAO18Order
func NewRRAO18Order(input hl7.HL7Type) RRAO18Order {
	v := RRAO18Order{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.Timing = NewRRAO18TimingSlice(input.Index(2))
	v.Administration = NewRRAO18Administration(input.Index(3))
	return v
}

type RRAO18Order struct {
	CommonOrder              ORC
	ParticipationInformation []PRT
	Timing                   []RRAO18Timing
	Administration           RRAO18Administration
}

// NewRRAO18OrderSlice will construct a slice of type RRAO18Order
func NewRRAO18OrderSlice(input hl7.HL7Type) []RRAO18Order {
	values := make([]RRAO18Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRRAO18Order(input.Index(i))
	}
	return values
}

// NewVXUV04Observation creates an implementation of VXUV04Observation
func NewVXUV04Observation(input hl7.HL7Type) VXUV04Observation {
	v := VXUV04Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type VXUV04Observation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewVXUV04ObservationSlice will construct a slice of type VXUV04Observation
func NewVXUV04ObservationSlice(input hl7.HL7Type) []VXUV04Observation {
	values := make([]VXUV04Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewVXUV04Observation(input.Index(i))
	}
	return values
}

// NewPEXP07Nk1TimingQty creates an implementation of PEXP07Nk1TimingQty
func NewPEXP07Nk1TimingQty(input hl7.HL7Type) PEXP07Nk1TimingQty {
	v := PEXP07Nk1TimingQty{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type PEXP07Nk1TimingQty struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewPEXP07Nk1TimingQtySlice will construct a slice of type PEXP07Nk1TimingQty
func NewPEXP07Nk1TimingQtySlice(input hl7.HL7Type) []PEXP07Nk1TimingQty {
	values := make([]PEXP07Nk1TimingQty, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPEXP07Nk1TimingQty(input.Index(i))
	}
	return values
}

// NewEHCE01Diagnosis creates an implementation of EHCE01Diagnosis
func NewEHCE01Diagnosis(input hl7.HL7Type) EHCE01Diagnosis {
	v := EHCE01Diagnosis{}
	v.Diagnosis = NewDG1(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type EHCE01Diagnosis struct {
	Diagnosis        DG1
	NotesAndComments []NTE
}

// NewEHCE01DiagnosisSlice will construct a slice of type EHCE01Diagnosis
func NewEHCE01DiagnosisSlice(input hl7.HL7Type) []EHCE01Diagnosis {
	values := make([]EHCE01Diagnosis, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewEHCE01Diagnosis(input.Index(i))
	}
	return values
}

// NewRSPZ90Visit creates an implementation of RSPZ90Visit
func NewRSPZ90Visit(input hl7.HL7Type) RSPZ90Visit {
	v := RSPZ90Visit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	return v
}

type RSPZ90Visit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
}

// NewRSPZ90VisitSlice will construct a slice of type RSPZ90Visit
func NewRSPZ90VisitSlice(input hl7.HL7Type) []RSPZ90Visit {
	values := make([]RSPZ90Visit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPZ90Visit(input.Index(i))
	}
	return values
}

// NewSIUS18LocationResource creates an implementation of SIUS18LocationResource
func NewSIUS18LocationResource(input hl7.HL7Type) SIUS18LocationResource {
	v := SIUS18LocationResource{}
	v.AppointmentInformationLocationResource = NewAIL(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS18LocationResource struct {
	AppointmentInformationLocationResource AIL
	NotesAndComments                       []NTE
}

// NewSIUS18LocationResourceSlice will construct a slice of type SIUS18LocationResource
func NewSIUS18LocationResourceSlice(input hl7.HL7Type) []SIUS18LocationResource {
	values := make([]SIUS18LocationResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS18LocationResource(input.Index(i))
	}
	return values
}

// NewCCRI16Insurance creates an implementation of CCRI16Insurance
func NewCCRI16Insurance(input hl7.HL7Type) CCRI16Insurance {
	v := CCRI16Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3(input.Index(2))
	return v
}

type CCRI16Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification IN3
}

// NewCCRI16InsuranceSlice will construct a slice of type CCRI16Insurance
func NewCCRI16InsuranceSlice(input hl7.HL7Type) []CCRI16Insurance {
	values := make([]CCRI16Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI16Insurance(input.Index(i))
	}
	return values
}

// NewSRRS07PersonnelResource creates an implementation of SRRS07PersonnelResource
func NewSRRS07PersonnelResource(input hl7.HL7Type) SRRS07PersonnelResource {
	v := SRRS07PersonnelResource{}
	v.AppointmentInformationPersonnelResource = NewAIP(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SRRS07PersonnelResource struct {
	AppointmentInformationPersonnelResource AIP
	NotesAndComments                        []NTE
}

// NewSRRS07PersonnelResourceSlice will construct a slice of type SRRS07PersonnelResource
func NewSRRS07PersonnelResourceSlice(input hl7.HL7Type) []SRRS07PersonnelResource {
	values := make([]SRRS07PersonnelResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS07PersonnelResource(input.Index(i))
	}
	return values
}

// NewCCRI18ResourceDetail creates an implementation of CCRI18ResourceDetail
func NewCCRI18ResourceDetail(input hl7.HL7Type) CCRI18ResourceDetail {
	v := CCRI18ResourceDetail{}
	v.ResourceObject = NewCCRI18ResourceObject(input.Index(0))
	v.ResourceObservation = NewCCRI18ResourceObservationSlice(input.Index(1))
	return v
}

type CCRI18ResourceDetail struct {
	ResourceObject      CCRI18ResourceObject
	ResourceObservation []CCRI18ResourceObservation
}

// NewCCRI18ResourceDetailSlice will construct a slice of type CCRI18ResourceDetail
func NewCCRI18ResourceDetailSlice(input hl7.HL7Type) []CCRI18ResourceDetail {
	values := make([]CCRI18ResourceDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI18ResourceDetail(input.Index(i))
	}
	return values
}

// NewCCRI16ClinicalHistoryObservation creates an implementation of CCRI16ClinicalHistoryObservation
func NewCCRI16ClinicalHistoryObservation(input hl7.HL7Type) CCRI16ClinicalHistoryObservation {
	v := CCRI16ClinicalHistoryObservation{}
	v.ObservationResult = NewOBXSlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CCRI16ClinicalHistoryObservation struct {
	ObservationResult        []OBX
	ParticipationInformation []PRT
}

// NewCCRI16ClinicalHistoryObservationSlice will construct a slice of type CCRI16ClinicalHistoryObservation
func NewCCRI16ClinicalHistoryObservationSlice(input hl7.HL7Type) []CCRI16ClinicalHistoryObservation {
	values := make([]CCRI16ClinicalHistoryObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI16ClinicalHistoryObservation(input.Index(i))
	}
	return values
}

// NewEHCE15ProductServiceSection creates an implementation of EHCE15ProductServiceSection
func NewEHCE15ProductServiceSection(input hl7.HL7Type) EHCE15ProductServiceSection {
	v := EHCE15ProductServiceSection{}
	v.ProductServiceSection = NewPSS(input.Index(0))
	v.ProductServiceGroup = NewEHCE15ProductServiceGroupSlice(input.Index(1))
	return v
}

type EHCE15ProductServiceSection struct {
	ProductServiceSection PSS
	ProductServiceGroup   []EHCE15ProductServiceGroup
}

// NewEHCE15ProductServiceSectionSlice will construct a slice of type EHCE15ProductServiceSection
func NewEHCE15ProductServiceSectionSlice(input hl7.HL7Type) []EHCE15ProductServiceSection {
	values := make([]EHCE15ProductServiceSection, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewEHCE15ProductServiceSection(input.Index(i))
	}
	return values
}

// NewSIUS18PersonnelResource creates an implementation of SIUS18PersonnelResource
func NewSIUS18PersonnelResource(input hl7.HL7Type) SIUS18PersonnelResource {
	v := SIUS18PersonnelResource{}
	v.AppointmentInformationPersonnelResource = NewAIP(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS18PersonnelResource struct {
	AppointmentInformationPersonnelResource AIP
	NotesAndComments                        []NTE
}

// NewSIUS18PersonnelResourceSlice will construct a slice of type SIUS18PersonnelResource
func NewSIUS18PersonnelResourceSlice(input hl7.HL7Type) []SIUS18PersonnelResource {
	values := make([]SIUS18PersonnelResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS18PersonnelResource(input.Index(i))
	}
	return values
}

// NewCRMC04PatientVisit creates an implementation of CRMC04PatientVisit
func NewCRMC04PatientVisit(input hl7.HL7Type) CRMC04PatientVisit {
	v := CRMC04PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CRMC04PatientVisit struct {
	PatientVisit             PV1
	ParticipationInformation []PRT
}

// NewCRMC04PatientVisitSlice will construct a slice of type CRMC04PatientVisit
func NewCRMC04PatientVisitSlice(input hl7.HL7Type) []CRMC04PatientVisit {
	values := make([]CRMC04PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCRMC04PatientVisit(input.Index(i))
	}
	return values
}

// NewOULR24Container creates an implementation of OULR24Container
func NewOULR24Container(input hl7.HL7Type) OULR24Container {
	v := OULR24Container{}
	v.SpecimenContainerDetail = NewSAC(input.Index(0))
	v.InventoryDetail = NewINV(input.Index(1))
	return v
}

type OULR24Container struct {
	SpecimenContainerDetail SAC
	InventoryDetail         INV
}

// NewOULR24ContainerSlice will construct a slice of type OULR24Container
func NewOULR24ContainerSlice(input hl7.HL7Type) []OULR24Container {
	values := make([]OULR24Container, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOULR24Container(input.Index(i))
	}
	return values
}

// NewCCUI20RolePathway creates an implementation of CCUI20RolePathway
func NewCCUI20RolePathway(input hl7.HL7Type) CCUI20RolePathway {
	v := CCUI20RolePathway{}
	v.RolePathwayObject = NewCCUI20RolePathwayObject(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type CCUI20RolePathway struct {
	RolePathwayObject CCUI20RolePathwayObject
	Variance          []VAR
}

// NewCCUI20RolePathwaySlice will construct a slice of type CCUI20RolePathway
func NewCCUI20RolePathwaySlice(input hl7.HL7Type) []CCUI20RolePathway {
	values := make([]CCUI20RolePathway, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCUI20RolePathway(input.Index(i))
	}
	return values
}

// NewOMGO19Timing creates an implementation of OMGO19Timing
func NewOMGO19Timing(input hl7.HL7Type) OMGO19Timing {
	v := OMGO19Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type OMGO19Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewOMGO19TimingSlice will construct a slice of type OMGO19Timing
func NewOMGO19TimingSlice(input hl7.HL7Type) []OMGO19Timing {
	values := make([]OMGO19Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMGO19Timing(input.Index(i))
	}
	return values
}

// NewSRMS08LocationResource creates an implementation of SRMS08LocationResource
func NewSRMS08LocationResource(input hl7.HL7Type) SRMS08LocationResource {
	v := SRMS08LocationResource{}
	v.AppointmentInformationLocationResource = NewAIL(input.Index(0))
	v.AppointmentPreferences = NewAPR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type SRMS08LocationResource struct {
	AppointmentInformationLocationResource AIL
	AppointmentPreferences                 APR
	NotesAndComments                       []NTE
}

// NewSRMS08LocationResourceSlice will construct a slice of type SRMS08LocationResource
func NewSRMS08LocationResourceSlice(input hl7.HL7Type) []SRMS08LocationResource {
	values := make([]SRMS08LocationResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS08LocationResource(input.Index(i))
	}
	return values
}

// NewRSPZ84SegmentPattern creates an implementation of RSPZ84SegmentPattern
func NewRSPZ84SegmentPattern(input hl7.HL7Type) RSPZ84SegmentPattern {
	v := RSPZ84SegmentPattern{}
	v.AnyHl7Segment = NewHxx(input.Index(0))
	return v
}

type RSPZ84SegmentPattern struct {
	AnyHl7Segment Hxx
}

// NewRSPZ84SegmentPatternSlice will construct a slice of type RSPZ84SegmentPattern
func NewRSPZ84SegmentPatternSlice(input hl7.HL7Type) []RSPZ84SegmentPattern {
	values := make([]RSPZ84SegmentPattern, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPZ84SegmentPattern(input.Index(i))
	}
	return values
}

// NewCSUC12Visit creates an implementation of CSUC12Visit
func NewCSUC12Visit(input hl7.HL7Type) CSUC12Visit {
	v := CSUC12Visit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	return v
}

type CSUC12Visit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ParticipationInformation          []PRT
}

// NewCSUC12VisitSlice will construct a slice of type CSUC12Visit
func NewCSUC12VisitSlice(input hl7.HL7Type) []CSUC12Visit {
	values := make([]CSUC12Visit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCSUC12Visit(input.Index(i))
	}
	return values
}

// NewOMSO05Timing creates an implementation of OMSO05Timing
func NewOMSO05Timing(input hl7.HL7Type) OMSO05Timing {
	v := OMSO05Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type OMSO05Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewOMSO05TimingSlice will construct a slice of type OMSO05Timing
func NewOMSO05TimingSlice(input hl7.HL7Type) []OMSO05Timing {
	values := make([]OMSO05Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMSO05Timing(input.Index(i))
	}
	return values
}

// NewCCII22ClinicalHistoryDetail creates an implementation of CCII22ClinicalHistoryDetail
func NewCCII22ClinicalHistoryDetail(input hl7.HL7Type) CCII22ClinicalHistoryDetail {
	v := CCII22ClinicalHistoryDetail{}
	v.ClinicalHistoryObject = NewCCII22ClinicalHistoryObject(input.Index(0))
	v.ObservationResult = NewOBXSlice(input.Index(1))
	return v
}

type CCII22ClinicalHistoryDetail struct {
	ClinicalHistoryObject CCII22ClinicalHistoryObject
	ObservationResult     []OBX
}

// NewCCII22ClinicalHistoryDetailSlice will construct a slice of type CCII22ClinicalHistoryDetail
func NewCCII22ClinicalHistoryDetailSlice(input hl7.HL7Type) []CCII22ClinicalHistoryDetail {
	values := make([]CCII22ClinicalHistoryDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCII22ClinicalHistoryDetail(input.Index(i))
	}
	return values
}

// NewCCUI20MedicationAdministrationObservation creates an implementation of CCUI20MedicationAdministrationObservation
func NewCCUI20MedicationAdministrationObservation(input hl7.HL7Type) CCUI20MedicationAdministrationObservation {
	v := CCUI20MedicationAdministrationObservation{}
	v.ObservationResult = NewOBXSlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CCUI20MedicationAdministrationObservation struct {
	ObservationResult        []OBX
	ParticipationInformation []PRT
}

// NewCCUI20MedicationAdministrationObservationSlice will construct a slice of type CCUI20MedicationAdministrationObservation
func NewCCUI20MedicationAdministrationObservationSlice(input hl7.HL7Type) []CCUI20MedicationAdministrationObservation {
	values := make([]CCUI20MedicationAdministrationObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCUI20MedicationAdministrationObservation(input.Index(i))
	}
	return values
}

// NewRGVO15Encoding creates an implementation of RGVO15Encoding
func NewRGVO15Encoding(input hl7.HL7Type) RGVO15Encoding {
	v := RGVO15Encoding{}
	v.PharmacyTreatmentEncodedOrder = NewRXE(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.TimingEncoded = NewRGVO15TimingEncodedSlice(input.Index(3))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(4))
	v.PharmacyTreatmentComponentOrder = NewRXCSlice(input.Index(5))
	return v
}

type RGVO15Encoding struct {
	PharmacyTreatmentEncodedOrder   RXE
	ParticipationInformation        []PRT
	NotesAndComments                []NTE
	TimingEncoded                   []RGVO15TimingEncoded
	PharmacyTreatmentRoute          []RXR
	PharmacyTreatmentComponentOrder []RXC
}

// NewRGVO15EncodingSlice will construct a slice of type RGVO15Encoding
func NewRGVO15EncodingSlice(input hl7.HL7Type) []RGVO15Encoding {
	values := make([]RGVO15Encoding, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRGVO15Encoding(input.Index(i))
	}
	return values
}

// NewRQPI04Provider creates an implementation of RQPI04Provider
func NewRQPI04Provider(input hl7.HL7Type) RQPI04Provider {
	v := RQPI04Provider{}
	v.ProviderData = NewPRD(input.Index(0))
	v.ContactData = NewCTDSlice(input.Index(1))
	return v
}

type RQPI04Provider struct {
	ProviderData PRD
	ContactData  []CTD
}

// NewRQPI04ProviderSlice will construct a slice of type RQPI04Provider
func NewRQPI04ProviderSlice(input hl7.HL7Type) []RQPI04Provider {
	values := make([]RQPI04Provider, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQPI04Provider(input.Index(i))
	}
	return values
}

// NewSIUS22PersonnelResource creates an implementation of SIUS22PersonnelResource
func NewSIUS22PersonnelResource(input hl7.HL7Type) SIUS22PersonnelResource {
	v := SIUS22PersonnelResource{}
	v.AppointmentInformationPersonnelResource = NewAIP(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS22PersonnelResource struct {
	AppointmentInformationPersonnelResource AIP
	NotesAndComments                        []NTE
}

// NewSIUS22PersonnelResourceSlice will construct a slice of type SIUS22PersonnelResource
func NewSIUS22PersonnelResourceSlice(input hl7.HL7Type) []SIUS22PersonnelResource {
	values := make([]SIUS22PersonnelResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS22PersonnelResource(input.Index(i))
	}
	return values
}

// NewPPGPCGProblem creates an implementation of PPGPCGProblem
func NewPPGPCGProblem(input hl7.HL7Type) PPGPCGProblem {
	v := PPGPCGProblem{}
	v.ProblemDetails = NewPRB(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Variance = NewVARSlice(input.Index(2))
	v.ProblemRole = NewPPGPCGProblemRoleSlice(input.Index(3))
	v.ProblemObservation = NewPPGPCGProblemObservationSlice(input.Index(4))
	return v
}

type PPGPCGProblem struct {
	ProblemDetails     PRB
	NotesAndComments   []NTE
	Variance           []VAR
	ProblemRole        []PPGPCGProblemRole
	ProblemObservation []PPGPCGProblemObservation
}

// NewPPGPCGProblemSlice will construct a slice of type PPGPCGProblem
func NewPPGPCGProblemSlice(input hl7.HL7Type) []PPGPCGProblem {
	values := make([]PPGPCGProblem, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPGPCGProblem(input.Index(i))
	}
	return values
}

// NewOPLO37Order creates an implementation of OPLO37Order
func NewOPLO37Order(input hl7.HL7Type) OPLO37Order {
	v := OPLO37Order{}
	v.NextOfKinAssociatedParties = NewNK1Slice(input.Index(0))
	v.Patient = NewOPLO37Patient(input.Index(1))
	v.Specimen = NewOPLO37SpecimenSlice(input.Index(2))
	v.PriorResult = NewOPLO37PriorResult(input.Index(3))
	v.FinancialTransaction = NewFT1Slice(input.Index(4))
	v.ClinicalTrialIdentification = NewCTISlice(input.Index(5))
	v.Billing = NewBLG(input.Index(6))
	return v
}

type OPLO37Order struct {
	NextOfKinAssociatedParties  []NK1
	Patient                     OPLO37Patient
	Specimen                    []OPLO37Specimen
	PriorResult                 OPLO37PriorResult
	FinancialTransaction        []FT1
	ClinicalTrialIdentification []CTI
	Billing                     BLG
}

// NewOPLO37OrderSlice will construct a slice of type OPLO37Order
func NewOPLO37OrderSlice(input hl7.HL7Type) []OPLO37Order {
	values := make([]OPLO37Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOPLO37Order(input.Index(i))
	}
	return values
}

// NewRDSO13Component creates an implementation of RDSO13Component
func NewRDSO13Component(input hl7.HL7Type) RDSO13Component {
	v := RDSO13Component{}
	v.PharmacyTreatmentComponentOrder = NewRXC(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type RDSO13Component struct {
	PharmacyTreatmentComponentOrder RXC
	NotesAndComments                []NTE
}

// NewRDSO13ComponentSlice will construct a slice of type RDSO13Component
func NewRDSO13ComponentSlice(input hl7.HL7Type) []RDSO13Component {
	values := make([]RDSO13Component, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRDSO13Component(input.Index(i))
	}
	return values
}

// NewOPRO38Specimen creates an implementation of OPRO38Specimen
func NewOPRO38Specimen(input hl7.HL7Type) OPRO38Specimen {
	v := OPRO38Specimen{}
	v.Specimen = NewSPM(input.Index(0))
	v.SpecimenObservation = NewOPRO38SpecimenObservationSlice(input.Index(1))
	v.SpecimenContainerDetail = NewSACSlice(input.Index(2))
	v.ObservationRequest = NewOPRO38ObservationRequestSlice(input.Index(3))
	v.Timing = NewOPRO38TimingSlice(input.Index(4))
	return v
}

type OPRO38Specimen struct {
	Specimen                SPM
	SpecimenObservation     []OPRO38SpecimenObservation
	SpecimenContainerDetail []SAC
	ObservationRequest      []OPRO38ObservationRequest
	Timing                  []OPRO38Timing
}

// NewOPRO38SpecimenSlice will construct a slice of type OPRO38Specimen
func NewOPRO38SpecimenSlice(input hl7.HL7Type) []OPRO38Specimen {
	values := make([]OPRO38Specimen, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOPRO38Specimen(input.Index(i))
	}
	return values
}

// NewPGLPC7Problem creates an implementation of PGLPC7Problem
func NewPGLPC7Problem(input hl7.HL7Type) PGLPC7Problem {
	v := PGLPC7Problem{}
	v.ProblemDetails = NewPRB(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Variance = NewVARSlice(input.Index(2))
	v.ProblemRole = NewPGLPC7ProblemRoleSlice(input.Index(3))
	v.ProblemObservation = NewPGLPC7ProblemObservationSlice(input.Index(4))
	return v
}

type PGLPC7Problem struct {
	ProblemDetails     PRB
	NotesAndComments   []NTE
	Variance           []VAR
	ProblemRole        []PGLPC7ProblemRole
	ProblemObservation []PGLPC7ProblemObservation
}

// NewPGLPC7ProblemSlice will construct a slice of type PGLPC7Problem
func NewPGLPC7ProblemSlice(input hl7.HL7Type) []PGLPC7Problem {
	values := make([]PGLPC7Problem, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPGLPC7Problem(input.Index(i))
	}
	return values
}

// NewRQII03Provider creates an implementation of RQII03Provider
func NewRQII03Provider(input hl7.HL7Type) RQII03Provider {
	v := RQII03Provider{}
	v.ProviderData = NewPRD(input.Index(0))
	v.ContactData = NewCTDSlice(input.Index(1))
	return v
}

type RQII03Provider struct {
	ProviderData PRD
	ContactData  []CTD
}

// NewRQII03ProviderSlice will construct a slice of type RQII03Provider
func NewRQII03ProviderSlice(input hl7.HL7Type) []RQII03Provider {
	values := make([]RQII03Provider, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQII03Provider(input.Index(i))
	}
	return values
}

// NewCCUI20ClinicalHistoryDetail creates an implementation of CCUI20ClinicalHistoryDetail
func NewCCUI20ClinicalHistoryDetail(input hl7.HL7Type) CCUI20ClinicalHistoryDetail {
	v := CCUI20ClinicalHistoryDetail{}
	v.ClinicalHistoryObject = NewCCUI20ClinicalHistoryObject(input.Index(0))
	v.ClinicalHistoryObservation = NewCCUI20ClinicalHistoryObservationSlice(input.Index(1))
	return v
}

type CCUI20ClinicalHistoryDetail struct {
	ClinicalHistoryObject      CCUI20ClinicalHistoryObject
	ClinicalHistoryObservation []CCUI20ClinicalHistoryObservation
}

// NewCCUI20ClinicalHistoryDetailSlice will construct a slice of type CCUI20ClinicalHistoryDetail
func NewCCUI20ClinicalHistoryDetailSlice(input hl7.HL7Type) []CCUI20ClinicalHistoryDetail {
	values := make([]CCUI20ClinicalHistoryDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCUI20ClinicalHistoryDetail(input.Index(i))
	}
	return values
}

// NewCCMI21ClinicalHistoryDetail creates an implementation of CCMI21ClinicalHistoryDetail
func NewCCMI21ClinicalHistoryDetail(input hl7.HL7Type) CCMI21ClinicalHistoryDetail {
	v := CCMI21ClinicalHistoryDetail{}
	v.ClinicalHistoryObject = NewCCMI21ClinicalHistoryObject(input.Index(0))
	v.ClinicalHistoryObservation = NewCCMI21ClinicalHistoryObservationSlice(input.Index(1))
	return v
}

type CCMI21ClinicalHistoryDetail struct {
	ClinicalHistoryObject      CCMI21ClinicalHistoryObject
	ClinicalHistoryObservation []CCMI21ClinicalHistoryObservation
}

// NewCCMI21ClinicalHistoryDetailSlice will construct a slice of type CCMI21ClinicalHistoryDetail
func NewCCMI21ClinicalHistoryDetailSlice(input hl7.HL7Type) []CCMI21ClinicalHistoryDetail {
	values := make([]CCMI21ClinicalHistoryDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCMI21ClinicalHistoryDetail(input.Index(i))
	}
	return values
}

// NewCCRI18RolePathwayObject creates an implementation of CCRI18RolePathwayObject
func NewCCRI18RolePathwayObject(input hl7.HL7Type) CCRI18RolePathwayObject {
	v := CCRI18RolePathwayObject{}
	v.Role = NewROL(input.Index(0))
	v.ProviderData = NewPRD(input.Index(1))
	return v
}

type CCRI18RolePathwayObject struct {
	Role         ROL
	ProviderData PRD
}

// NewCCRI18RolePathwayObjectSlice will construct a slice of type CCRI18RolePathwayObject
func NewCCRI18RolePathwayObjectSlice(input hl7.HL7Type) []CCRI18RolePathwayObject {
	values := make([]CCRI18RolePathwayObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI18RolePathwayObject(input.Index(i))
	}
	return values
}

// NewRSPK11SegmentPattern creates an implementation of RSPK11SegmentPattern
func NewRSPK11SegmentPattern(input hl7.HL7Type) RSPK11SegmentPattern {
	v := RSPK11SegmentPattern{}
	v.AnyHl7Segment = NewHxx(input.Index(0))
	return v
}

type RSPK11SegmentPattern struct {
	AnyHl7Segment Hxx
}

// NewRSPK11SegmentPatternSlice will construct a slice of type RSPK11SegmentPattern
func NewRSPK11SegmentPatternSlice(input hl7.HL7Type) []RSPK11SegmentPattern {
	values := make([]RSPK11SegmentPattern, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPK11SegmentPattern(input.Index(i))
	}
	return values
}

// NewOMGO19PatientPrior creates an implementation of OMGO19PatientPrior
func NewOMGO19PatientPrior(input hl7.HL7Type) OMGO19PatientPrior {
	v := OMGO19PatientPrior{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.AccessRestriction = NewARVSlice(input.Index(2))
	v.ParticipationInformation = NewPRTSlice(input.Index(3))
	return v
}

type OMGO19PatientPrior struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	AccessRestriction            []ARV
	ParticipationInformation     []PRT
}

// NewOMGO19PatientPriorSlice will construct a slice of type OMGO19PatientPrior
func NewOMGO19PatientPriorSlice(input hl7.HL7Type) []OMGO19PatientPrior {
	values := make([]OMGO19PatientPrior, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMGO19PatientPrior(input.Index(i))
	}
	return values
}

// NewCCMI21RoleGoalObject creates an implementation of CCMI21RoleGoalObject
func NewCCMI21RoleGoalObject(input hl7.HL7Type) CCMI21RoleGoalObject {
	v := CCMI21RoleGoalObject{}
	v.Role = NewROL(input.Index(0))
	v.ProviderData = NewPRD(input.Index(1))
	return v
}

type CCMI21RoleGoalObject struct {
	Role         ROL
	ProviderData PRD
}

// NewCCMI21RoleGoalObjectSlice will construct a slice of type CCMI21RoleGoalObject
func NewCCMI21RoleGoalObjectSlice(input hl7.HL7Type) []CCMI21RoleGoalObject {
	values := make([]CCMI21RoleGoalObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCMI21RoleGoalObject(input.Index(i))
	}
	return values
}

// NewDFTP03FinancialCommonOrder creates an implementation of DFTP03FinancialCommonOrder
func NewDFTP03FinancialCommonOrder(input hl7.HL7Type) DFTP03FinancialCommonOrder {
	v := DFTP03FinancialCommonOrder{}
	v.CommonOrder = NewORC(input.Index(0))
	v.FinancialTimingQuantity = NewDFTP03FinancialTimingQuantitySlice(input.Index(1))
	v.FinancialOrder = NewDFTP03FinancialOrder(input.Index(2))
	v.FinancialObservation = NewDFTP03FinancialObservationSlice(input.Index(3))
	return v
}

type DFTP03FinancialCommonOrder struct {
	CommonOrder             ORC
	FinancialTimingQuantity []DFTP03FinancialTimingQuantity
	FinancialOrder          DFTP03FinancialOrder
	FinancialObservation    []DFTP03FinancialObservation
}

// NewDFTP03FinancialCommonOrderSlice will construct a slice of type DFTP03FinancialCommonOrder
func NewDFTP03FinancialCommonOrderSlice(input hl7.HL7Type) []DFTP03FinancialCommonOrder {
	values := make([]DFTP03FinancialCommonOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewDFTP03FinancialCommonOrder(input.Index(i))
	}
	return values
}

// NewREFI13ProviderContact creates an implementation of REFI13ProviderContact
func NewREFI13ProviderContact(input hl7.HL7Type) REFI13ProviderContact {
	v := REFI13ProviderContact{}
	v.ProviderData = NewPRD(input.Index(0))
	v.ContactData = NewCTDSlice(input.Index(1))
	return v
}

type REFI13ProviderContact struct {
	ProviderData PRD
	ContactData  []CTD
}

// NewREFI13ProviderContactSlice will construct a slice of type REFI13ProviderContact
func NewREFI13ProviderContactSlice(input hl7.HL7Type) []REFI13ProviderContact {
	values := make([]REFI13ProviderContact, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewREFI13ProviderContact(input.Index(i))
	}
	return values
}

// NewCCRI17GoalObservation creates an implementation of CCRI17GoalObservation
func NewCCRI17GoalObservation(input hl7.HL7Type) CCRI17GoalObservation {
	v := CCRI17GoalObservation{}
	v.ObservationResult = NewOBXSlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CCRI17GoalObservation struct {
	ObservationResult        []OBX
	ParticipationInformation []PRT
}

// NewCCRI17GoalObservationSlice will construct a slice of type CCRI17GoalObservation
func NewCCRI17GoalObservationSlice(input hl7.HL7Type) []CCRI17GoalObservation {
	values := make([]CCRI17GoalObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI17GoalObservation(input.Index(i))
	}
	return values
}

// NewPEXP08RxAdministration creates an implementation of PEXP08RxAdministration
func NewPEXP08RxAdministration(input hl7.HL7Type) PEXP08RxAdministration {
	v := PEXP08RxAdministration{}
	v.PharmacyTreatmentAdministration = NewRXA(input.Index(0))
	v.PharmacyTreatmentRoute = NewRXR(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	return v
}

type PEXP08RxAdministration struct {
	PharmacyTreatmentAdministration RXA
	PharmacyTreatmentRoute          RXR
	ParticipationInformation        []PRT
}

// NewPEXP08RxAdministrationSlice will construct a slice of type PEXP08RxAdministration
func NewPEXP08RxAdministrationSlice(input hl7.HL7Type) []PEXP08RxAdministration {
	values := make([]PEXP08RxAdministration, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPEXP08RxAdministration(input.Index(i))
	}
	return values
}

// NewCQUI19Goal creates an implementation of CQUI19Goal
func NewCQUI19Goal(input hl7.HL7Type) CQUI19Goal {
	v := CQUI19Goal{}
	v.GoalDetail = NewGOL(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	v.RoleGoal = NewCQUI19RoleGoalSlice(input.Index(2))
	v.GoalObservation = NewCQUI19GoalObservationSlice(input.Index(3))
	return v
}

type CQUI19Goal struct {
	GoalDetail      GOL
	Variance        []VAR
	RoleGoal        []CQUI19RoleGoal
	GoalObservation []CQUI19GoalObservation
}

// NewCQUI19GoalSlice will construct a slice of type CQUI19Goal
func NewCQUI19GoalSlice(input hl7.HL7Type) []CQUI19Goal {
	values := make([]CQUI19Goal, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCQUI19Goal(input.Index(i))
	}
	return values
}

// NewOPLO37PatientVisitPrior creates an implementation of OPLO37PatientVisitPrior
func NewOPLO37PatientVisitPrior(input hl7.HL7Type) OPLO37PatientVisitPrior {
	v := OPLO37PatientVisitPrior{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	return v
}

type OPLO37PatientVisitPrior struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ParticipationInformation          []PRT
}

// NewOPLO37PatientVisitPriorSlice will construct a slice of type OPLO37PatientVisitPrior
func NewOPLO37PatientVisitPriorSlice(input hl7.HL7Type) []OPLO37PatientVisitPrior {
	values := make([]OPLO37PatientVisitPrior, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOPLO37PatientVisitPrior(input.Index(i))
	}
	return values
}

// NewRGVO15Observation creates an implementation of RGVO15Observation
func NewRGVO15Observation(input hl7.HL7Type) RGVO15Observation {
	v := RGVO15Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type RGVO15Observation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewRGVO15ObservationSlice will construct a slice of type RGVO15Observation
func NewRGVO15ObservationSlice(input hl7.HL7Type) []RGVO15Observation {
	values := make([]RGVO15Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRGVO15Observation(input.Index(i))
	}
	return values
}

// NewSIUS15Resources creates an implementation of SIUS15Resources
func NewSIUS15Resources(input hl7.HL7Type) SIUS15Resources {
	v := SIUS15Resources{}
	v.ResourceGroup = NewRGS(input.Index(0))
	v.Service = NewSIUS15ServiceSlice(input.Index(1))
	v.GeneralResource = NewSIUS15GeneralResourceSlice(input.Index(2))
	v.LocationResource = NewSIUS15LocationResourceSlice(input.Index(3))
	v.PersonnelResource = NewSIUS15PersonnelResourceSlice(input.Index(4))
	return v
}

type SIUS15Resources struct {
	ResourceGroup     RGS
	Service           []SIUS15Service
	GeneralResource   []SIUS15GeneralResource
	LocationResource  []SIUS15LocationResource
	PersonnelResource []SIUS15PersonnelResource
}

// NewSIUS15ResourcesSlice will construct a slice of type SIUS15Resources
func NewSIUS15ResourcesSlice(input hl7.HL7Type) []SIUS15Resources {
	values := make([]SIUS15Resources, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS15Resources(input.Index(i))
	}
	return values
}

// NewORBO28Timing creates an implementation of ORBO28Timing
func NewORBO28Timing(input hl7.HL7Type) ORBO28Timing {
	v := ORBO28Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type ORBO28Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewORBO28TimingSlice will construct a slice of type ORBO28Timing
func NewORBO28TimingSlice(input hl7.HL7Type) []ORBO28Timing {
	values := make([]ORBO28Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORBO28Timing(input.Index(i))
	}
	return values
}

// NewSIUS15LocationResource creates an implementation of SIUS15LocationResource
func NewSIUS15LocationResource(input hl7.HL7Type) SIUS15LocationResource {
	v := SIUS15LocationResource{}
	v.AppointmentInformationLocationResource = NewAIL(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS15LocationResource struct {
	AppointmentInformationLocationResource AIL
	NotesAndComments                       []NTE
}

// NewSIUS15LocationResourceSlice will construct a slice of type SIUS15LocationResource
func NewSIUS15LocationResourceSlice(input hl7.HL7Type) []SIUS15LocationResource {
	values := make([]SIUS15LocationResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS15LocationResource(input.Index(i))
	}
	return values
}

// NewPPRPC1OrderDetail creates an implementation of PPRPC1OrderDetail
func NewPPRPC1OrderDetail(input hl7.HL7Type) PPRPC1OrderDetail {
	v := PPRPC1OrderDetail{}
	v.Choice = NewPPRPC1Choice(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Variance = NewVARSlice(input.Index(2))
	v.OrderObservation = NewPPRPC1OrderObservationSlice(input.Index(3))
	return v
}

type PPRPC1OrderDetail struct {
	Choice           PPRPC1Choice
	NotesAndComments []NTE
	Variance         []VAR
	OrderObservation []PPRPC1OrderObservation
}

// NewPPRPC1OrderDetailSlice will construct a slice of type PPRPC1OrderDetail
func NewPPRPC1OrderDetailSlice(input hl7.HL7Type) []PPRPC1OrderDetail {
	values := make([]PPRPC1OrderDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPRPC1OrderDetail(input.Index(i))
	}
	return values
}

// NewCCMI21RoleProblemObject creates an implementation of CCMI21RoleProblemObject
func NewCCMI21RoleProblemObject(input hl7.HL7Type) CCMI21RoleProblemObject {
	v := CCMI21RoleProblemObject{}
	v.Role = NewROL(input.Index(0))
	v.ProviderData = NewPRD(input.Index(1))
	return v
}

type CCMI21RoleProblemObject struct {
	Role         ROL
	ProviderData PRD
}

// NewCCMI21RoleProblemObjectSlice will construct a slice of type CCMI21RoleProblemObject
func NewCCMI21RoleProblemObjectSlice(input hl7.HL7Type) []CCMI21RoleProblemObject {
	values := make([]CCMI21RoleProblemObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCMI21RoleProblemObject(input.Index(i))
	}
	return values
}

// NewRASO17TimingEncoded creates an implementation of RASO17TimingEncoded
func NewRASO17TimingEncoded(input hl7.HL7Type) RASO17TimingEncoded {
	v := RASO17TimingEncoded{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type RASO17TimingEncoded struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewRASO17TimingEncodedSlice will construct a slice of type RASO17TimingEncoded
func NewRASO17TimingEncodedSlice(input hl7.HL7Type) []RASO17TimingEncoded {
	values := make([]RASO17TimingEncoded, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRASO17TimingEncoded(input.Index(i))
	}
	return values
}

// NewCRMC07PatientVisit creates an implementation of CRMC07PatientVisit
func NewCRMC07PatientVisit(input hl7.HL7Type) CRMC07PatientVisit {
	v := CRMC07PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CRMC07PatientVisit struct {
	PatientVisit             PV1
	ParticipationInformation []PRT
}

// NewCRMC07PatientVisitSlice will construct a slice of type CRMC07PatientVisit
func NewCRMC07PatientVisitSlice(input hl7.HL7Type) []CRMC07PatientVisit {
	values := make([]CRMC07PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCRMC07PatientVisit(input.Index(i))
	}
	return values
}

// NewDRGO43Donnor creates an implementation of DRGO43Donnor
func NewDRGO43Donnor(input hl7.HL7Type) DRGO43Donnor {
	v := DRGO43Donnor{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.ObservationResult = NewOBXSlice(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	v.PatientAllergyInformation = NewAL1Slice(input.Index(4))
	v.AccessRestriction = NewARVSlice(input.Index(5))
	v.DonorRegistration = NewDRGO43DonorRegistration(input.Index(6))
	return v
}

type DRGO43Donnor struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	ObservationResult            []OBX
	NotesAndComments             []NTE
	PatientAllergyInformation    []AL1
	AccessRestriction            []ARV
	DonorRegistration            DRGO43DonorRegistration
}

// NewDRGO43DonnorSlice will construct a slice of type DRGO43Donnor
func NewDRGO43DonnorSlice(input hl7.HL7Type) []DRGO43Donnor {
	values := make([]DRGO43Donnor, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewDRGO43Donnor(input.Index(i))
	}
	return values
}

// NewSIUS24Patient creates an implementation of SIUS24Patient
func NewSIUS24Patient(input hl7.HL7Type) SIUS24Patient {
	v := SIUS24Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.PatientVisit = NewPV1(input.Index(2))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(3))
	v.ObservationResult = NewOBXSlice(input.Index(4))
	v.Diagnosis = NewDG1Slice(input.Index(5))
	return v
}

type SIUS24Patient struct {
	PatientIdentification             PID
	PatientAdditionalDemographic      PD1
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ObservationResult                 []OBX
	Diagnosis                         []DG1
}

// NewSIUS24PatientSlice will construct a slice of type SIUS24Patient
func NewSIUS24PatientSlice(input hl7.HL7Type) []SIUS24Patient {
	values := make([]SIUS24Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS24Patient(input.Index(i))
	}
	return values
}

// NewADTA45MergeInfo creates an implementation of ADTA45MergeInfo
func NewADTA45MergeInfo(input hl7.HL7Type) ADTA45MergeInfo {
	v := ADTA45MergeInfo{}
	v.MergePatientInformation = NewMRG(input.Index(0))
	v.PatientVisit = NewPV1(input.Index(1))
	return v
}

type ADTA45MergeInfo struct {
	MergePatientInformation MRG
	PatientVisit            PV1
}

// NewADTA45MergeInfoSlice will construct a slice of type ADTA45MergeInfo
func NewADTA45MergeInfoSlice(input hl7.HL7Type) []ADTA45MergeInfo {
	values := make([]ADTA45MergeInfo, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewADTA45MergeInfo(input.Index(i))
	}
	return values
}

// NewOULR23Specimen creates an implementation of OULR23Specimen
func NewOULR23Specimen(input hl7.HL7Type) OULR23Specimen {
	v := OULR23Specimen{}
	v.Specimen = NewSPM(input.Index(0))
	v.SpecimenObservation = NewOULR23SpecimenObservationSlice(input.Index(1))
	v.Container = NewOULR23ContainerSlice(input.Index(2))
	return v
}

type OULR23Specimen struct {
	Specimen            SPM
	SpecimenObservation []OULR23SpecimenObservation
	Container           []OULR23Container
}

// NewOULR23SpecimenSlice will construct a slice of type OULR23Specimen
func NewOULR23SpecimenSlice(input hl7.HL7Type) []OULR23Specimen {
	values := make([]OULR23Specimen, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOULR23Specimen(input.Index(i))
	}
	return values
}

// NewCCMI21MedicationAdministrationDetail creates an implementation of CCMI21MedicationAdministrationDetail
func NewCCMI21MedicationAdministrationDetail(input hl7.HL7Type) CCMI21MedicationAdministrationDetail {
	v := CCMI21MedicationAdministrationDetail{}
	v.PharmacyTreatmentAdministration = NewRXASlice(input.Index(0))
	v.PharmacyTreatmentRoute = NewRXR(input.Index(1))
	v.ObservationResult = NewOBXSlice(input.Index(2))
	v.MedicationAdministrationObservation = NewCCMI21MedicationAdministrationObservationSlice(input.Index(3))
	return v
}

type CCMI21MedicationAdministrationDetail struct {
	PharmacyTreatmentAdministration     []RXA
	PharmacyTreatmentRoute              RXR
	ObservationResult                   []OBX
	MedicationAdministrationObservation []CCMI21MedicationAdministrationObservation
}

// NewCCMI21MedicationAdministrationDetailSlice will construct a slice of type CCMI21MedicationAdministrationDetail
func NewCCMI21MedicationAdministrationDetailSlice(input hl7.HL7Type) []CCMI21MedicationAdministrationDetail {
	values := make([]CCMI21MedicationAdministrationDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCMI21MedicationAdministrationDetail(input.Index(i))
	}
	return values
}

// NewOMGO19Patient creates an implementation of OMGO19Patient
func NewOMGO19Patient(input hl7.HL7Type) OMGO19Patient {
	v := OMGO19Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	v.NextOfKinAssociatedParties = NewNK1Slice(input.Index(4))
	v.AccessRestriction = NewARVSlice(input.Index(5))
	v.PatientVisit = NewOMGO19PatientVisit(input.Index(6))
	v.Insurance = NewOMGO19InsuranceSlice(input.Index(7))
	v.Guarantor = NewGT1(input.Index(8))
	v.PatientAllergyInformation = NewAL1Slice(input.Index(9))
	return v
}

type OMGO19Patient struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	ParticipationInformation     []PRT
	NotesAndComments             []NTE
	NextOfKinAssociatedParties   []NK1
	AccessRestriction            []ARV
	PatientVisit                 OMGO19PatientVisit
	Insurance                    []OMGO19Insurance
	Guarantor                    GT1
	PatientAllergyInformation    []AL1
}

// NewOMGO19PatientSlice will construct a slice of type OMGO19Patient
func NewOMGO19PatientSlice(input hl7.HL7Type) []OMGO19Patient {
	values := make([]OMGO19Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMGO19Patient(input.Index(i))
	}
	return values
}

// NewEHCE20PatInfo creates an implementation of EHCE20PatInfo
func NewEHCE20PatInfo(input hl7.HL7Type) EHCE20PatInfo {
	v := EHCE20PatInfo{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.Accident = NewACCSlice(input.Index(1))
	v.Insurance = NewEHCE20InsuranceSlice(input.Index(2))
	v.Diagnosis = NewEHCE20Diagnosis(input.Index(3))
	v.ObservationResult = NewOBXSlice(input.Index(4))
	return v
}

type EHCE20PatInfo struct {
	PatientIdentification PID
	Accident              []ACC
	Insurance             []EHCE20Insurance
	Diagnosis             EHCE20Diagnosis
	ObservationResult     []OBX
}

// NewEHCE20PatInfoSlice will construct a slice of type EHCE20PatInfo
func NewEHCE20PatInfoSlice(input hl7.HL7Type) []EHCE20PatInfo {
	values := make([]EHCE20PatInfo, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewEHCE20PatInfo(input.Index(i))
	}
	return values
}

// NewRSPZ82QueryResponse creates an implementation of RSPZ82QueryResponse
func NewRSPZ82QueryResponse(input hl7.HL7Type) RSPZ82QueryResponse {
	v := RSPZ82QueryResponse{}
	v.Patient = NewRSPZ82Patient(input.Index(0))
	v.CommonOrder = NewRSPZ82CommonOrderSlice(input.Index(1))
	return v
}

type RSPZ82QueryResponse struct {
	Patient     RSPZ82Patient
	CommonOrder []RSPZ82CommonOrder
}

// NewRSPZ82QueryResponseSlice will construct a slice of type RSPZ82QueryResponse
func NewRSPZ82QueryResponseSlice(input hl7.HL7Type) []RSPZ82QueryResponse {
	values := make([]RSPZ82QueryResponse, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPZ82QueryResponse(input.Index(i))
	}
	return values
}

// NewRSPZ88CommonOrder creates an implementation of RSPZ88CommonOrder
func NewRSPZ88CommonOrder(input hl7.HL7Type) RSPZ88CommonOrder {
	v := RSPZ88CommonOrder{}
	v.CommonOrder = NewORC(input.Index(0))
	v.Timing = NewRSPZ88TimingSlice(input.Index(1))
	v.OrderDetail = NewRSPZ88OrderDetail(input.Index(2))
	v.OrderEncoded = NewRSPZ88OrderEncoded(input.Index(3))
	v.PharmacyTreatmentDispense = NewRXD(input.Index(4))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(5))
	v.PharmacyTreatmentComponentOrder = NewRXCSlice(input.Index(6))
	v.Observation = NewRSPZ88ObservationSlice(input.Index(7))
	return v
}

type RSPZ88CommonOrder struct {
	CommonOrder                     ORC
	Timing                          []RSPZ88Timing
	OrderDetail                     RSPZ88OrderDetail
	OrderEncoded                    RSPZ88OrderEncoded
	PharmacyTreatmentDispense       RXD
	PharmacyTreatmentRoute          []RXR
	PharmacyTreatmentComponentOrder []RXC
	Observation                     []RSPZ88Observation
}

// NewRSPZ88CommonOrderSlice will construct a slice of type RSPZ88CommonOrder
func NewRSPZ88CommonOrderSlice(input hl7.HL7Type) []RSPZ88CommonOrder {
	values := make([]RSPZ88CommonOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPZ88CommonOrder(input.Index(i))
	}
	return values
}

// NewOMLO21SpecimenObservation creates an implementation of OMLO21SpecimenObservation
func NewOMLO21SpecimenObservation(input hl7.HL7Type) OMLO21SpecimenObservation {
	v := OMLO21SpecimenObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type OMLO21SpecimenObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewOMLO21SpecimenObservationSlice will construct a slice of type OMLO21SpecimenObservation
func NewOMLO21SpecimenObservationSlice(input hl7.HL7Type) []OMLO21SpecimenObservation {
	values := make([]OMLO21SpecimenObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO21SpecimenObservation(input.Index(i))
	}
	return values
}

// NewOSMR26Package creates an implementation of OSMR26Package
func NewOSMR26Package(input hl7.HL7Type) OSMR26Package {
	v := OSMR26Package{}
	v.ShipmentPackage = NewPAC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.Specimen = NewOSMR26SpecimenSlice(input.Index(2))
	return v
}

type OSMR26Package struct {
	ShipmentPackage          PAC
	ParticipationInformation []PRT
	Specimen                 []OSMR26Specimen
}

// NewOSMR26PackageSlice will construct a slice of type OSMR26Package
func NewOSMR26PackageSlice(input hl7.HL7Type) []OSMR26Package {
	values := make([]OSMR26Package, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOSMR26Package(input.Index(i))
	}
	return values
}

// NewPPPPCDProblemRole creates an implementation of PPPPCDProblemRole
func NewPPPPCDProblemRole(input hl7.HL7Type) PPPPCDProblemRole {
	v := PPPPCDProblemRole{}
	v.Role = NewROL(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type PPPPCDProblemRole struct {
	Role     ROL
	Variance []VAR
}

// NewPPPPCDProblemRoleSlice will construct a slice of type PPPPCDProblemRole
func NewPPPPCDProblemRoleSlice(input hl7.HL7Type) []PPPPCDProblemRole {
	values := make([]PPPPCDProblemRole, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPPPCDProblemRole(input.Index(i))
	}
	return values
}

// NewSRMS07Resources creates an implementation of SRMS07Resources
func NewSRMS07Resources(input hl7.HL7Type) SRMS07Resources {
	v := SRMS07Resources{}
	v.ResourceGroup = NewRGS(input.Index(0))
	v.Service = NewSRMS07ServiceSlice(input.Index(1))
	v.GeneralResource = NewSRMS07GeneralResourceSlice(input.Index(2))
	v.LocationResource = NewSRMS07LocationResourceSlice(input.Index(3))
	v.PersonnelResource = NewSRMS07PersonnelResourceSlice(input.Index(4))
	return v
}

type SRMS07Resources struct {
	ResourceGroup     RGS
	Service           []SRMS07Service
	GeneralResource   []SRMS07GeneralResource
	LocationResource  []SRMS07LocationResource
	PersonnelResource []SRMS07PersonnelResource
}

// NewSRMS07ResourcesSlice will construct a slice of type SRMS07Resources
func NewSRMS07ResourcesSlice(input hl7.HL7Type) []SRMS07Resources {
	values := make([]SRMS07Resources, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS07Resources(input.Index(i))
	}
	return values
}

// NewCCRI17ClinicalOrderObservation creates an implementation of CCRI17ClinicalOrderObservation
func NewCCRI17ClinicalOrderObservation(input hl7.HL7Type) CCRI17ClinicalOrderObservation {
	v := CCRI17ClinicalOrderObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CCRI17ClinicalOrderObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewCCRI17ClinicalOrderObservationSlice will construct a slice of type CCRI17ClinicalOrderObservation
func NewCCRI17ClinicalOrderObservationSlice(input hl7.HL7Type) []CCRI17ClinicalOrderObservation {
	values := make([]CCRI17ClinicalOrderObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI17ClinicalOrderObservation(input.Index(i))
	}
	return values
}

// NewEHCE01ProductServiceGroup creates an implementation of EHCE01ProductServiceGroup
func NewEHCE01ProductServiceGroup(input hl7.HL7Type) EHCE01ProductServiceGroup {
	v := EHCE01ProductServiceGroup{}
	v.ProductServiceGroup = NewPSG(input.Index(0))
	v.LocationIdentification = NewLOCSlice(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.Role = NewROLSlice(input.Index(3))
	v.PatientInfo = NewEHCE01PatientInfoSlice(input.Index(4))
	v.ProductServiceLineItem = NewEHCE01ProductServiceLineItemSlice(input.Index(5))
	v.Procedure = NewEHCE01ProcedureSlice(input.Index(6))
	v.InvoiceProcessingResults = NewIPRSlice(input.Index(7))
	return v
}

type EHCE01ProductServiceGroup struct {
	ProductServiceGroup      PSG
	LocationIdentification   []LOC
	ParticipationInformation []PRT
	Role                     []ROL
	PatientInfo              []EHCE01PatientInfo
	ProductServiceLineItem   []EHCE01ProductServiceLineItem
	Procedure                []EHCE01Procedure
	InvoiceProcessingResults []IPR
}

// NewEHCE01ProductServiceGroupSlice will construct a slice of type EHCE01ProductServiceGroup
func NewEHCE01ProductServiceGroupSlice(input hl7.HL7Type) []EHCE01ProductServiceGroup {
	values := make([]EHCE01ProductServiceGroup, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewEHCE01ProductServiceGroup(input.Index(i))
	}
	return values
}

// NewTCUU10TestConfiguration creates an implementation of TCUU10TestConfiguration
func NewTCUU10TestConfiguration(input hl7.HL7Type) TCUU10TestConfiguration {
	v := TCUU10TestConfiguration{}
	v.Specimen = NewSPM(input.Index(0))
	v.TestCodeConfiguration = NewTCCSlice(input.Index(1))
	return v
}

type TCUU10TestConfiguration struct {
	Specimen              SPM
	TestCodeConfiguration []TCC
}

// NewTCUU10TestConfigurationSlice will construct a slice of type TCUU10TestConfiguration
func NewTCUU10TestConfigurationSlice(input hl7.HL7Type) []TCUU10TestConfiguration {
	values := make([]TCUU10TestConfiguration, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewTCUU10TestConfiguration(input.Index(i))
	}
	return values
}

// NewPPRPC1Choice creates an implementation of PPRPC1Choice
func NewPPRPC1Choice(input hl7.HL7Type) PPRPC1Choice {
	v := PPRPC1Choice{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.AnyHl7Segment = NewHxx(input.Index(1))
	return v
}

type PPRPC1Choice struct {
	ObservationRequest OBR
	AnyHl7Segment      Hxx
}

// NewPPRPC1ChoiceSlice will construct a slice of type PPRPC1Choice
func NewPPRPC1ChoiceSlice(input hl7.HL7Type) []PPRPC1Choice {
	values := make([]PPRPC1Choice, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPRPC1Choice(input.Index(i))
	}
	return values
}

// NewRSPK34Donnor creates an implementation of RSPK34Donnor
func NewRSPK34Donnor(input hl7.HL7Type) RSPK34Donnor {
	v := RSPK34Donnor{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.ObservationResult = NewOBXSlice(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	v.PatientAllergyInformation = NewAL1Slice(input.Index(4))
	v.AccessRestriction = NewARVSlice(input.Index(5))
	v.DonnorRegistration = NewRSPK34DonnorRegistration(input.Index(6))
	return v
}

type RSPK34Donnor struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	ObservationResult            []OBX
	NotesAndComments             []NTE
	PatientAllergyInformation    []AL1
	AccessRestriction            []ARV
	DonnorRegistration           RSPK34DonnorRegistration
}

// NewRSPK34DonnorSlice will construct a slice of type RSPK34Donnor
func NewRSPK34DonnorSlice(input hl7.HL7Type) []RSPK34Donnor {
	values := make([]RSPK34Donnor, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPK34Donnor(input.Index(i))
	}
	return values
}

// NewSIUS26Patient creates an implementation of SIUS26Patient
func NewSIUS26Patient(input hl7.HL7Type) SIUS26Patient {
	v := SIUS26Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.PatientVisit = NewPV1(input.Index(2))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(3))
	v.ObservationResult = NewOBXSlice(input.Index(4))
	v.Diagnosis = NewDG1Slice(input.Index(5))
	return v
}

type SIUS26Patient struct {
	PatientIdentification             PID
	PatientAdditionalDemographic      PD1
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ObservationResult                 []OBX
	Diagnosis                         []DG1
}

// NewSIUS26PatientSlice will construct a slice of type SIUS26Patient
func NewSIUS26PatientSlice(input hl7.HL7Type) []SIUS26Patient {
	values := make([]SIUS26Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS26Patient(input.Index(i))
	}
	return values
}

// NewCSUC10TimingQty creates an implementation of CSUC10TimingQty
func NewCSUC10TimingQty(input hl7.HL7Type) CSUC10TimingQty {
	v := CSUC10TimingQty{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type CSUC10TimingQty struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewCSUC10TimingQtySlice will construct a slice of type CSUC10TimingQty
func NewCSUC10TimingQtySlice(input hl7.HL7Type) []CSUC10TimingQty {
	values := make([]CSUC10TimingQty, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCSUC10TimingQty(input.Index(i))
	}
	return values
}

// NewRSPK31Patient creates an implementation of RSPK31Patient
func NewRSPK31Patient(input hl7.HL7Type) RSPK31Patient {
	v := RSPK31Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.AdditionalDemographics = NewRSPK31AdditionalDemographics(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.PatientAllergyInformation = NewAL1Slice(input.Index(3))
	v.PatientVisit = NewRSPK31PatientVisit(input.Index(4))
	return v
}

type RSPK31Patient struct {
	PatientIdentification     PID
	AdditionalDemographics    RSPK31AdditionalDemographics
	NotesAndComments          []NTE
	PatientAllergyInformation []AL1
	PatientVisit              RSPK31PatientVisit
}

// NewRSPK31PatientSlice will construct a slice of type RSPK31Patient
func NewRSPK31PatientSlice(input hl7.HL7Type) []RSPK31Patient {
	values := make([]RSPK31Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPK31Patient(input.Index(i))
	}
	return values
}

// NewSRMS03Observation creates an implementation of SRMS03Observation
func NewSRMS03Observation(input hl7.HL7Type) SRMS03Observation {
	v := SRMS03Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type SRMS03Observation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewSRMS03ObservationSlice will construct a slice of type SRMS03Observation
func NewSRMS03ObservationSlice(input hl7.HL7Type) []SRMS03Observation {
	values := make([]SRMS03Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS03Observation(input.Index(i))
	}
	return values
}

// NewSRMS03Service creates an implementation of SRMS03Service
func NewSRMS03Service(input hl7.HL7Type) SRMS03Service {
	v := SRMS03Service{}
	v.AppointmentInformation = NewAIS(input.Index(0))
	v.AppointmentPreferences = NewAPR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type SRMS03Service struct {
	AppointmentInformation AIS
	AppointmentPreferences APR
	NotesAndComments       []NTE
}

// NewSRMS03ServiceSlice will construct a slice of type SRMS03Service
func NewSRMS03ServiceSlice(input hl7.HL7Type) []SRMS03Service {
	values := make([]SRMS03Service, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS03Service(input.Index(i))
	}
	return values
}

// NewCQUI19MedicationAdministrationDetail creates an implementation of CQUI19MedicationAdministrationDetail
func NewCQUI19MedicationAdministrationDetail(input hl7.HL7Type) CQUI19MedicationAdministrationDetail {
	v := CQUI19MedicationAdministrationDetail{}
	v.PharmacyTreatmentAdministration = NewRXASlice(input.Index(0))
	v.PharmacyTreatmentRoute = NewRXR(input.Index(1))
	v.MedicationAdministrationObservation = NewCQUI19MedicationAdministrationObservationSlice(input.Index(2))
	return v
}

type CQUI19MedicationAdministrationDetail struct {
	PharmacyTreatmentAdministration     []RXA
	PharmacyTreatmentRoute              RXR
	MedicationAdministrationObservation []CQUI19MedicationAdministrationObservation
}

// NewCQUI19MedicationAdministrationDetailSlice will construct a slice of type CQUI19MedicationAdministrationDetail
func NewCQUI19MedicationAdministrationDetailSlice(input hl7.HL7Type) []CQUI19MedicationAdministrationDetail {
	values := make([]CQUI19MedicationAdministrationDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCQUI19MedicationAdministrationDetail(input.Index(i))
	}
	return values
}

// NewCCRI16AppointmentHistory creates an implementation of CCRI16AppointmentHistory
func NewCCRI16AppointmentHistory(input hl7.HL7Type) CCRI16AppointmentHistory {
	v := CCRI16AppointmentHistory{}
	v.SchedulingActivityInformation = NewSCH(input.Index(0))
	v.Resources = NewCCRI16ResourcesSlice(input.Index(1))
	return v
}

type CCRI16AppointmentHistory struct {
	SchedulingActivityInformation SCH
	Resources                     []CCRI16Resources
}

// NewCCRI16AppointmentHistorySlice will construct a slice of type CCRI16AppointmentHistory
func NewCCRI16AppointmentHistorySlice(input hl7.HL7Type) []CCRI16AppointmentHistory {
	values := make([]CCRI16AppointmentHistory, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI16AppointmentHistory(input.Index(i))
	}
	return values
}

// NewCCRI17RoleClinicalHistoryObject creates an implementation of CCRI17RoleClinicalHistoryObject
func NewCCRI17RoleClinicalHistoryObject(input hl7.HL7Type) CCRI17RoleClinicalHistoryObject {
	v := CCRI17RoleClinicalHistoryObject{}
	v.Role = NewROL(input.Index(0))
	v.ProviderData = NewPRD(input.Index(1))
	return v
}

type CCRI17RoleClinicalHistoryObject struct {
	Role         ROL
	ProviderData PRD
}

// NewCCRI17RoleClinicalHistoryObjectSlice will construct a slice of type CCRI17RoleClinicalHistoryObject
func NewCCRI17RoleClinicalHistoryObjectSlice(input hl7.HL7Type) []CCRI17RoleClinicalHistoryObject {
	values := make([]CCRI17RoleClinicalHistoryObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI17RoleClinicalHistoryObject(input.Index(i))
	}
	return values
}

// NewPPPPCCGoalRole creates an implementation of PPPPCCGoalRole
func NewPPPPCCGoalRole(input hl7.HL7Type) PPPPCCGoalRole {
	v := PPPPCCGoalRole{}
	v.Role = NewROL(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type PPPPCCGoalRole struct {
	Role     ROL
	Variance []VAR
}

// NewPPPPCCGoalRoleSlice will construct a slice of type PPPPCCGoalRole
func NewPPPPCCGoalRoleSlice(input hl7.HL7Type) []PPPPCCGoalRole {
	values := make([]PPPPCCGoalRole, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPPPCCGoalRole(input.Index(i))
	}
	return values
}

// NewCCRI16MedicationAdministrationDetail creates an implementation of CCRI16MedicationAdministrationDetail
func NewCCRI16MedicationAdministrationDetail(input hl7.HL7Type) CCRI16MedicationAdministrationDetail {
	v := CCRI16MedicationAdministrationDetail{}
	v.PharmacyTreatmentAdministration = NewRXASlice(input.Index(0))
	v.PharmacyTreatmentRoute = NewRXR(input.Index(1))
	v.MedicationAdministrationObservation = NewCCRI16MedicationAdministrationObservationSlice(input.Index(2))
	return v
}

type CCRI16MedicationAdministrationDetail struct {
	PharmacyTreatmentAdministration     []RXA
	PharmacyTreatmentRoute              RXR
	MedicationAdministrationObservation []CCRI16MedicationAdministrationObservation
}

// NewCCRI16MedicationAdministrationDetailSlice will construct a slice of type CCRI16MedicationAdministrationDetail
func NewCCRI16MedicationAdministrationDetailSlice(input hl7.HL7Type) []CCRI16MedicationAdministrationDetail {
	values := make([]CCRI16MedicationAdministrationDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI16MedicationAdministrationDetail(input.Index(i))
	}
	return values
}

// NewOULR23Container creates an implementation of OULR23Container
func NewOULR23Container(input hl7.HL7Type) OULR23Container {
	v := OULR23Container{}
	v.SpecimenContainerDetail = NewSAC(input.Index(0))
	v.InventoryDetail = NewINV(input.Index(1))
	v.Order = NewOULR23OrderSlice(input.Index(2))
	return v
}

type OULR23Container struct {
	SpecimenContainerDetail SAC
	InventoryDetail         INV
	Order                   []OULR23Order
}

// NewOULR23ContainerSlice will construct a slice of type OULR23Container
func NewOULR23ContainerSlice(input hl7.HL7Type) []OULR23Container {
	values := make([]OULR23Container, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOULR23Container(input.Index(i))
	}
	return values
}

// NewCCUI20GoalObservation creates an implementation of CCUI20GoalObservation
func NewCCUI20GoalObservation(input hl7.HL7Type) CCUI20GoalObservation {
	v := CCUI20GoalObservation{}
	v.ObservationResult = NewOBXSlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CCUI20GoalObservation struct {
	ObservationResult        []OBX
	ParticipationInformation []PRT
}

// NewCCUI20GoalObservationSlice will construct a slice of type CCUI20GoalObservation
func NewCCUI20GoalObservationSlice(input hl7.HL7Type) []CCUI20GoalObservation {
	values := make([]CCUI20GoalObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCUI20GoalObservation(input.Index(i))
	}
	return values
}

// NewCCRI18RoleProblem creates an implementation of CCRI18RoleProblem
func NewCCRI18RoleProblem(input hl7.HL7Type) CCRI18RoleProblem {
	v := CCRI18RoleProblem{}
	v.RoleProblemObject = NewCCRI18RoleProblemObject(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type CCRI18RoleProblem struct {
	RoleProblemObject CCRI18RoleProblemObject
	Variance          []VAR
}

// NewCCRI18RoleProblemSlice will construct a slice of type CCRI18RoleProblem
func NewCCRI18RoleProblemSlice(input hl7.HL7Type) []CCRI18RoleProblem {
	values := make([]CCRI18RoleProblem, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI18RoleProblem(input.Index(i))
	}
	return values
}

// NewRQAI09Provider creates an implementation of RQAI09Provider
func NewRQAI09Provider(input hl7.HL7Type) RQAI09Provider {
	v := RQAI09Provider{}
	v.ProviderData = NewPRD(input.Index(0))
	v.ContactData = NewCTDSlice(input.Index(1))
	return v
}

type RQAI09Provider struct {
	ProviderData PRD
	ContactData  []CTD
}

// NewRQAI09ProviderSlice will construct a slice of type RQAI09Provider
func NewRQAI09ProviderSlice(input hl7.HL7Type) []RQAI09Provider {
	values := make([]RQAI09Provider, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQAI09Provider(input.Index(i))
	}
	return values
}

// NewSIUS23PersonnelResource creates an implementation of SIUS23PersonnelResource
func NewSIUS23PersonnelResource(input hl7.HL7Type) SIUS23PersonnelResource {
	v := SIUS23PersonnelResource{}
	v.AppointmentInformationPersonnelResource = NewAIP(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS23PersonnelResource struct {
	AppointmentInformationPersonnelResource AIP
	NotesAndComments                        []NTE
}

// NewSIUS23PersonnelResourceSlice will construct a slice of type SIUS23PersonnelResource
func NewSIUS23PersonnelResourceSlice(input hl7.HL7Type) []SIUS23PersonnelResource {
	values := make([]SIUS23PersonnelResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS23PersonnelResource(input.Index(i))
	}
	return values
}

// NewCRMC01PatientVisit creates an implementation of CRMC01PatientVisit
func NewCRMC01PatientVisit(input hl7.HL7Type) CRMC01PatientVisit {
	v := CRMC01PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CRMC01PatientVisit struct {
	PatientVisit             PV1
	ParticipationInformation []PRT
}

// NewCRMC01PatientVisitSlice will construct a slice of type CRMC01PatientVisit
func NewCRMC01PatientVisitSlice(input hl7.HL7Type) []CRMC01PatientVisit {
	values := make([]CRMC01PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCRMC01PatientVisit(input.Index(i))
	}
	return values
}

// NewRDEO25Timing creates an implementation of RDEO25Timing
func NewRDEO25Timing(input hl7.HL7Type) RDEO25Timing {
	v := RDEO25Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type RDEO25Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewRDEO25TimingSlice will construct a slice of type RDEO25Timing
func NewRDEO25TimingSlice(input hl7.HL7Type) []RDEO25Timing {
	values := make([]RDEO25Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRDEO25Timing(input.Index(i))
	}
	return values
}

// NewCCRI16RoleGoal creates an implementation of CCRI16RoleGoal
func NewCCRI16RoleGoal(input hl7.HL7Type) CCRI16RoleGoal {
	v := CCRI16RoleGoal{}
	v.RoleGoalObject = NewCCRI16RoleGoalObject(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type CCRI16RoleGoal struct {
	RoleGoalObject CCRI16RoleGoalObject
	Variance       []VAR
}

// NewCCRI16RoleGoalSlice will construct a slice of type CCRI16RoleGoal
func NewCCRI16RoleGoalSlice(input hl7.HL7Type) []CCRI16RoleGoal {
	values := make([]CCRI16RoleGoal, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI16RoleGoal(input.Index(i))
	}
	return values
}

// NewCCRI18MedicationEncodingObservation creates an implementation of CCRI18MedicationEncodingObservation
func NewCCRI18MedicationEncodingObservation(input hl7.HL7Type) CCRI18MedicationEncodingObservation {
	v := CCRI18MedicationEncodingObservation{}
	v.ObservationResult = NewOBXSlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CCRI18MedicationEncodingObservation struct {
	ObservationResult        []OBX
	ParticipationInformation []PRT
}

// NewCCRI18MedicationEncodingObservationSlice will construct a slice of type CCRI18MedicationEncodingObservation
func NewCCRI18MedicationEncodingObservationSlice(input hl7.HL7Type) []CCRI18MedicationEncodingObservation {
	values := make([]CCRI18MedicationEncodingObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI18MedicationEncodingObservation(input.Index(i))
	}
	return values
}

// NewBTSO31ProductStatus creates an implementation of BTSO31ProductStatus
func NewBTSO31ProductStatus(input hl7.HL7Type) BTSO31ProductStatus {
	v := BTSO31ProductStatus{}
	v.BloodProductTransfusiondisposition = NewBTX(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type BTSO31ProductStatus struct {
	BloodProductTransfusiondisposition BTX
	NotesAndComments                   []NTE
}

// NewBTSO31ProductStatusSlice will construct a slice of type BTSO31ProductStatus
func NewBTSO31ProductStatusSlice(input hl7.HL7Type) []BTSO31ProductStatus {
	values := make([]BTSO31ProductStatus, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewBTSO31ProductStatus(input.Index(i))
	}
	return values
}

// NewSRRS01PersonnelResource creates an implementation of SRRS01PersonnelResource
func NewSRRS01PersonnelResource(input hl7.HL7Type) SRRS01PersonnelResource {
	v := SRRS01PersonnelResource{}
	v.AppointmentInformationPersonnelResource = NewAIP(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SRRS01PersonnelResource struct {
	AppointmentInformationPersonnelResource AIP
	NotesAndComments                        []NTE
}

// NewSRRS01PersonnelResourceSlice will construct a slice of type SRRS01PersonnelResource
func NewSRRS01PersonnelResourceSlice(input hl7.HL7Type) []SRRS01PersonnelResource {
	values := make([]SRRS01PersonnelResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS01PersonnelResource(input.Index(i))
	}
	return values
}

// NewSRRS11GeneralResource creates an implementation of SRRS11GeneralResource
func NewSRRS11GeneralResource(input hl7.HL7Type) SRRS11GeneralResource {
	v := SRRS11GeneralResource{}
	v.AppointmentInformationGeneralResource = NewAIG(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SRRS11GeneralResource struct {
	AppointmentInformationGeneralResource AIG
	NotesAndComments                      []NTE
}

// NewSRRS11GeneralResourceSlice will construct a slice of type SRRS11GeneralResource
func NewSRRS11GeneralResourceSlice(input hl7.HL7Type) []SRRS11GeneralResource {
	values := make([]SRRS11GeneralResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS11GeneralResource(input.Index(i))
	}
	return values
}

// NewPPPPCBGoal creates an implementation of PPPPCBGoal
func NewPPPPCBGoal(input hl7.HL7Type) PPPPCBGoal {
	v := PPPPCBGoal{}
	v.GoalDetail = NewGOL(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Variance = NewVARSlice(input.Index(2))
	v.GoalRole = NewPPPPCBGoalRoleSlice(input.Index(3))
	v.GoalObservation = NewPPPPCBGoalObservationSlice(input.Index(4))
	return v
}

type PPPPCBGoal struct {
	GoalDetail       GOL
	NotesAndComments []NTE
	Variance         []VAR
	GoalRole         []PPPPCBGoalRole
	GoalObservation  []PPPPCBGoalObservation
}

// NewPPPPCBGoalSlice will construct a slice of type PPPPCBGoal
func NewPPPPCBGoalSlice(input hl7.HL7Type) []PPPPCBGoal {
	values := make([]PPPPCBGoal, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPPPCBGoal(input.Index(i))
	}
	return values
}

// NewOMBO27PatientVisit creates an implementation of OMBO27PatientVisit
func NewOMBO27PatientVisit(input hl7.HL7Type) OMBO27PatientVisit {
	v := OMBO27PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	return v
}

type OMBO27PatientVisit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
}

// NewOMBO27PatientVisitSlice will construct a slice of type OMBO27PatientVisit
func NewOMBO27PatientVisitSlice(input hl7.HL7Type) []OMBO27PatientVisit {
	values := make([]OMBO27PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMBO27PatientVisit(input.Index(i))
	}
	return values
}

// NewRQAI09Observation creates an implementation of RQAI09Observation
func NewRQAI09Observation(input hl7.HL7Type) RQAI09Observation {
	v := RQAI09Observation{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Results = NewRQAI09ResultsSlice(input.Index(2))
	return v
}

type RQAI09Observation struct {
	ObservationRequest OBR
	NotesAndComments   []NTE
	Results            []RQAI09Results
}

// NewRQAI09ObservationSlice will construct a slice of type RQAI09Observation
func NewRQAI09ObservationSlice(input hl7.HL7Type) []RQAI09Observation {
	values := make([]RQAI09Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQAI09Observation(input.Index(i))
	}
	return values
}

// NewOMLO21Insurance creates an implementation of OMLO21Insurance
func NewOMLO21Insurance(input hl7.HL7Type) OMLO21Insurance {
	v := OMLO21Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3(input.Index(2))
	return v
}

type OMLO21Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification IN3
}

// NewOMLO21InsuranceSlice will construct a slice of type OMLO21Insurance
func NewOMLO21InsuranceSlice(input hl7.HL7Type) []OMLO21Insurance {
	values := make([]OMLO21Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO21Insurance(input.Index(i))
	}
	return values
}

// NewOMGO19OrderPrior creates an implementation of OMGO19OrderPrior
func NewOMGO19OrderPrior(input hl7.HL7Type) OMGO19OrderPrior {
	v := OMGO19OrderPrior{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.ObservationRequest = NewOBR(input.Index(2))
	v.TimingPrior = NewOMGO19TimingPriorSlice(input.Index(3))
	v.NotesAndComments = NewNTESlice(input.Index(4))
	v.AdditionalParticipationInformation = NewPRTSlice(input.Index(5))
	v.ContactData = NewCTD(input.Index(6))
	v.ObservationPrior = NewOMGO19ObservationPriorSlice(input.Index(7))
	return v
}

type OMGO19OrderPrior struct {
	CommonOrder                        ORC
	ParticipationInformation           []PRT
	ObservationRequest                 OBR
	TimingPrior                        []OMGO19TimingPrior
	NotesAndComments                   []NTE
	AdditionalParticipationInformation []PRT
	ContactData                        CTD
	ObservationPrior                   []OMGO19ObservationPrior
}

// NewOMGO19OrderPriorSlice will construct a slice of type OMGO19OrderPrior
func NewOMGO19OrderPriorSlice(input hl7.HL7Type) []OMGO19OrderPrior {
	values := make([]OMGO19OrderPrior, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMGO19OrderPrior(input.Index(i))
	}
	return values
}

// NewRRII15ProviderContact creates an implementation of RRII15ProviderContact
func NewRRII15ProviderContact(input hl7.HL7Type) RRII15ProviderContact {
	v := RRII15ProviderContact{}
	v.ProviderData = NewPRD(input.Index(0))
	v.ContactData = NewCTDSlice(input.Index(1))
	return v
}

type RRII15ProviderContact struct {
	ProviderData PRD
	ContactData  []CTD
}

// NewRRII15ProviderContactSlice will construct a slice of type RRII15ProviderContact
func NewRRII15ProviderContactSlice(input hl7.HL7Type) []RRII15ProviderContact {
	values := make([]RRII15ProviderContact, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRRII15ProviderContact(input.Index(i))
	}
	return values
}

// NewPPRPC1Order creates an implementation of PPRPC1Order
func NewPPRPC1Order(input hl7.HL7Type) PPRPC1Order {
	v := PPRPC1Order{}
	v.CommonOrder = NewORC(input.Index(0))
	v.OrderDetail = NewPPRPC1OrderDetail(input.Index(1))
	return v
}

type PPRPC1Order struct {
	CommonOrder ORC
	OrderDetail PPRPC1OrderDetail
}

// NewPPRPC1OrderSlice will construct a slice of type PPRPC1Order
func NewPPRPC1OrderSlice(input hl7.HL7Type) []PPRPC1Order {
	values := make([]PPRPC1Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPRPC1Order(input.Index(i))
	}
	return values
}

// NewPGLPC8OrderDetail creates an implementation of PGLPC8OrderDetail
func NewPGLPC8OrderDetail(input hl7.HL7Type) PGLPC8OrderDetail {
	v := PGLPC8OrderDetail{}
	v.Choice = NewPGLPC8Choice(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Variance = NewVARSlice(input.Index(2))
	v.OrderObservation = NewPGLPC8OrderObservationSlice(input.Index(3))
	return v
}

type PGLPC8OrderDetail struct {
	Choice           PGLPC8Choice
	NotesAndComments []NTE
	Variance         []VAR
	OrderObservation []PGLPC8OrderObservation
}

// NewPGLPC8OrderDetailSlice will construct a slice of type PGLPC8OrderDetail
func NewPGLPC8OrderDetailSlice(input hl7.HL7Type) []PGLPC8OrderDetail {
	values := make([]PGLPC8OrderDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPGLPC8OrderDetail(input.Index(i))
	}
	return values
}

// NewADTA16Insurance creates an implementation of ADTA16Insurance
func NewADTA16Insurance(input hl7.HL7Type) ADTA16Insurance {
	v := ADTA16Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3Slice(input.Index(2))
	v.Role = NewROLSlice(input.Index(3))
	v.AuthorizationInformation = NewAUTSlice(input.Index(4))
	v.ReferralInformation = NewRF1Slice(input.Index(5))
	return v
}

type ADTA16Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification []IN3
	Role                                        []ROL
	AuthorizationInformation                    []AUT
	ReferralInformation                         []RF1
}

// NewADTA16InsuranceSlice will construct a slice of type ADTA16Insurance
func NewADTA16InsuranceSlice(input hl7.HL7Type) []ADTA16Insurance {
	values := make([]ADTA16Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewADTA16Insurance(input.Index(i))
	}
	return values
}

// NewPPGPCJGoal creates an implementation of PPGPCJGoal
func NewPPGPCJGoal(input hl7.HL7Type) PPGPCJGoal {
	v := PPGPCJGoal{}
	v.GoalDetail = NewGOL(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Variance = NewVARSlice(input.Index(2))
	v.GoalRole = NewPPGPCJGoalRoleSlice(input.Index(3))
	v.GoalObservation = NewPPGPCJGoalObservationSlice(input.Index(4))
	v.Problem = NewPPGPCJProblemSlice(input.Index(5))
	v.Order = NewPPGPCJOrderSlice(input.Index(6))
	return v
}

type PPGPCJGoal struct {
	GoalDetail       GOL
	NotesAndComments []NTE
	Variance         []VAR
	GoalRole         []PPGPCJGoalRole
	GoalObservation  []PPGPCJGoalObservation
	Problem          []PPGPCJProblem
	Order            []PPGPCJOrder
}

// NewPPGPCJGoalSlice will construct a slice of type PPGPCJGoal
func NewPPGPCJGoalSlice(input hl7.HL7Type) []PPGPCJGoal {
	values := make([]PPGPCJGoal, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPGPCJGoal(input.Index(i))
	}
	return values
}

// NewOMIO23Order creates an implementation of OMIO23Order
func NewOMIO23Order(input hl7.HL7Type) OMIO23Order {
	v := OMIO23Order{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.Timing = NewOMIO23TimingSlice(input.Index(2))
	v.ObservationRequest = NewOBR(input.Index(3))
	v.NotesAndComments = NewNTESlice(input.Index(4))
	v.AdditionalParticipationInformation = NewPRTSlice(input.Index(5))
	v.ContactData = NewCTD(input.Index(6))
	v.Diagnosis = NewDG1Slice(input.Index(7))
	v.Observation = NewOMIO23ObservationSlice(input.Index(8))
	v.ImagingProcedureControlSegment = NewIPCSlice(input.Index(9))
	return v
}

type OMIO23Order struct {
	CommonOrder                        ORC
	ParticipationInformation           []PRT
	Timing                             []OMIO23Timing
	ObservationRequest                 OBR
	NotesAndComments                   []NTE
	AdditionalParticipationInformation []PRT
	ContactData                        CTD
	Diagnosis                          []DG1
	Observation                        []OMIO23Observation
	ImagingProcedureControlSegment     []IPC
}

// NewOMIO23OrderSlice will construct a slice of type OMIO23Order
func NewOMIO23OrderSlice(input hl7.HL7Type) []OMIO23Order {
	values := make([]OMIO23Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMIO23Order(input.Index(i))
	}
	return values
}

// NewOULR22Order creates an implementation of OULR22Order
func NewOULR22Order(input hl7.HL7Type) OULR22Order {
	v := OULR22Order{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.CommonOrder = NewOULR22CommonOrder(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	v.AdditionalParticipationInformation = NewPRTSlice(input.Index(4))
	v.TimingQty = NewOULR22TimingQtySlice(input.Index(5))
	v.Result = NewOULR22ResultSlice(input.Index(6))
	v.ClinicalTrialIdentification = NewCTISlice(input.Index(7))
	return v
}

type OULR22Order struct {
	ObservationRequest                 OBR
	ParticipationInformation           []PRT
	CommonOrder                        OULR22CommonOrder
	NotesAndComments                   []NTE
	AdditionalParticipationInformation []PRT
	TimingQty                          []OULR22TimingQty
	Result                             []OULR22Result
	ClinicalTrialIdentification        []CTI
}

// NewOULR22OrderSlice will construct a slice of type OULR22Order
func NewOULR22OrderSlice(input hl7.HL7Type) []OULR22Order {
	values := make([]OULR22Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOULR22Order(input.Index(i))
	}
	return values
}

// NewOMLO39Order creates an implementation of OMLO39Order
func NewOMLO39Order(input hl7.HL7Type) OMLO39Order {
	v := OMLO39Order{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.Timing = NewOMLO39TimingSlice(input.Index(2))
	v.ObservationRequest = NewOMLO39ObservationRequest(input.Index(3))
	v.FinancialTransaction = NewFT1Slice(input.Index(4))
	v.ClinicalTrialIdentification = NewCTISlice(input.Index(5))
	v.Billing = NewBLG(input.Index(6))
	return v
}

type OMLO39Order struct {
	CommonOrder                 ORC
	ParticipationInformation    []PRT
	Timing                      []OMLO39Timing
	ObservationRequest          OMLO39ObservationRequest
	FinancialTransaction        []FT1
	ClinicalTrialIdentification []CTI
	Billing                     BLG
}

// NewOMLO39OrderSlice will construct a slice of type OMLO39Order
func NewOMLO39OrderSlice(input hl7.HL7Type) []OMLO39Order {
	values := make([]OMLO39Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO39Order(input.Index(i))
	}
	return values
}

// NewCCRI17ProblemObservation creates an implementation of CCRI17ProblemObservation
func NewCCRI17ProblemObservation(input hl7.HL7Type) CCRI17ProblemObservation {
	v := CCRI17ProblemObservation{}
	v.ObservationResult = NewOBXSlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CCRI17ProblemObservation struct {
	ObservationResult        []OBX
	ParticipationInformation []PRT
}

// NewCCRI17ProblemObservationSlice will construct a slice of type CCRI17ProblemObservation
func NewCCRI17ProblemObservationSlice(input hl7.HL7Type) []CCRI17ProblemObservation {
	values := make([]CCRI17ProblemObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI17ProblemObservation(input.Index(i))
	}
	return values
}

// NewCCRI18ClinicalHistoryObservation creates an implementation of CCRI18ClinicalHistoryObservation
func NewCCRI18ClinicalHistoryObservation(input hl7.HL7Type) CCRI18ClinicalHistoryObservation {
	v := CCRI18ClinicalHistoryObservation{}
	v.ObservationResult = NewOBXSlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CCRI18ClinicalHistoryObservation struct {
	ObservationResult        []OBX
	ParticipationInformation []PRT
}

// NewCCRI18ClinicalHistoryObservationSlice will construct a slice of type CCRI18ClinicalHistoryObservation
func NewCCRI18ClinicalHistoryObservationSlice(input hl7.HL7Type) []CCRI18ClinicalHistoryObservation {
	values := make([]CCRI18ClinicalHistoryObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI18ClinicalHistoryObservation(input.Index(i))
	}
	return values
}

// NewOMLO39Observation creates an implementation of OMLO39Observation
func NewOMLO39Observation(input hl7.HL7Type) OMLO39Observation {
	v := OMLO39Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.TestCodeDetail = NewTCD(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	return v
}

type OMLO39Observation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	TestCodeDetail           TCD
	NotesAndComments         []NTE
}

// NewOMLO39ObservationSlice will construct a slice of type OMLO39Observation
func NewOMLO39ObservationSlice(input hl7.HL7Type) []OMLO39Observation {
	values := make([]OMLO39Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO39Observation(input.Index(i))
	}
	return values
}

// NewBRPO30Response creates an implementation of BRPO30Response
func NewBRPO30Response(input hl7.HL7Type) BRPO30Response {
	v := BRPO30Response{}
	v.Patient = NewBRPO30Patient(input.Index(0))
	return v
}

type BRPO30Response struct {
	Patient BRPO30Patient
}

// NewBRPO30ResponseSlice will construct a slice of type BRPO30Response
func NewBRPO30ResponseSlice(input hl7.HL7Type) []BRPO30Response {
	values := make([]BRPO30Response, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewBRPO30Response(input.Index(i))
	}
	return values
}

// NewSRMS04Observation creates an implementation of SRMS04Observation
func NewSRMS04Observation(input hl7.HL7Type) SRMS04Observation {
	v := SRMS04Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type SRMS04Observation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewSRMS04ObservationSlice will construct a slice of type SRMS04Observation
func NewSRMS04ObservationSlice(input hl7.HL7Type) []SRMS04Observation {
	values := make([]SRMS04Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS04Observation(input.Index(i))
	}
	return values
}

// NewCQUI19ClinicalHistoryObservation creates an implementation of CQUI19ClinicalHistoryObservation
func NewCQUI19ClinicalHistoryObservation(input hl7.HL7Type) CQUI19ClinicalHistoryObservation {
	v := CQUI19ClinicalHistoryObservation{}
	v.ObservationResult = NewOBXSlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CQUI19ClinicalHistoryObservation struct {
	ObservationResult        []OBX
	ParticipationInformation []PRT
}

// NewCQUI19ClinicalHistoryObservationSlice will construct a slice of type CQUI19ClinicalHistoryObservation
func NewCQUI19ClinicalHistoryObservationSlice(input hl7.HL7Type) []CQUI19ClinicalHistoryObservation {
	values := make([]CQUI19ClinicalHistoryObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCQUI19ClinicalHistoryObservation(input.Index(i))
	}
	return values
}

// NewCCRI16ProblemObservation creates an implementation of CCRI16ProblemObservation
func NewCCRI16ProblemObservation(input hl7.HL7Type) CCRI16ProblemObservation {
	v := CCRI16ProblemObservation{}
	v.ObservationResult = NewOBXSlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CCRI16ProblemObservation struct {
	ObservationResult        []OBX
	ParticipationInformation []PRT
}

// NewCCRI16ProblemObservationSlice will construct a slice of type CCRI16ProblemObservation
func NewCCRI16ProblemObservationSlice(input hl7.HL7Type) []CCRI16ProblemObservation {
	values := make([]CCRI16ProblemObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI16ProblemObservation(input.Index(i))
	}
	return values
}

// NewPPRPC2Choice creates an implementation of PPRPC2Choice
func NewPPRPC2Choice(input hl7.HL7Type) PPRPC2Choice {
	v := PPRPC2Choice{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.AnyHl7Segment = NewHxx(input.Index(1))
	return v
}

type PPRPC2Choice struct {
	ObservationRequest OBR
	AnyHl7Segment      Hxx
}

// NewPPRPC2ChoiceSlice will construct a slice of type PPRPC2Choice
func NewPPRPC2ChoiceSlice(input hl7.HL7Type) []PPRPC2Choice {
	values := make([]PPRPC2Choice, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPRPC2Choice(input.Index(i))
	}
	return values
}

// NewSIUS22Patient creates an implementation of SIUS22Patient
func NewSIUS22Patient(input hl7.HL7Type) SIUS22Patient {
	v := SIUS22Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.PatientVisit = NewPV1(input.Index(2))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(3))
	v.ObservationResult = NewOBXSlice(input.Index(4))
	v.Diagnosis = NewDG1Slice(input.Index(5))
	return v
}

type SIUS22Patient struct {
	PatientIdentification             PID
	PatientAdditionalDemographic      PD1
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ObservationResult                 []OBX
	Diagnosis                         []DG1
}

// NewSIUS22PatientSlice will construct a slice of type SIUS22Patient
func NewSIUS22PatientSlice(input hl7.HL7Type) []SIUS22Patient {
	values := make([]SIUS22Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS22Patient(input.Index(i))
	}
	return values
}

// NewEHCE02InvoiceInformationCancel creates an implementation of EHCE02InvoiceInformationCancel
func NewEHCE02InvoiceInformationCancel(input hl7.HL7Type) EHCE02InvoiceInformationCancel {
	v := EHCE02InvoiceInformationCancel{}
	v.InvoiceSegment = NewIVC(input.Index(0))
	v.PayeeInformation = NewPYE(input.Index(1))
	v.ContactData = NewCTDSlice(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	v.ProductServiceSection = NewEHCE02ProductServiceSectionSlice(input.Index(4))
	return v
}

type EHCE02InvoiceInformationCancel struct {
	InvoiceSegment        IVC
	PayeeInformation      PYE
	ContactData           []CTD
	NotesAndComments      []NTE
	ProductServiceSection []EHCE02ProductServiceSection
}

// NewEHCE02InvoiceInformationCancelSlice will construct a slice of type EHCE02InvoiceInformationCancel
func NewEHCE02InvoiceInformationCancelSlice(input hl7.HL7Type) []EHCE02InvoiceInformationCancel {
	values := make([]EHCE02InvoiceInformationCancel, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewEHCE02InvoiceInformationCancel(input.Index(i))
	}
	return values
}

// NewADTA05Insurance creates an implementation of ADTA05Insurance
func NewADTA05Insurance(input hl7.HL7Type) ADTA05Insurance {
	v := ADTA05Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3Slice(input.Index(2))
	v.Role = NewROLSlice(input.Index(3))
	v.AuthorizationInformation = NewAUTSlice(input.Index(4))
	v.ReferralInformation = NewRF1Slice(input.Index(5))
	return v
}

type ADTA05Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification []IN3
	Role                                        []ROL
	AuthorizationInformation                    []AUT
	ReferralInformation                         []RF1
}

// NewADTA05InsuranceSlice will construct a slice of type ADTA05Insurance
func NewADTA05InsuranceSlice(input hl7.HL7Type) []ADTA05Insurance {
	values := make([]ADTA05Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewADTA05Insurance(input.Index(i))
	}
	return values
}

// NewORXO43Order creates an implementation of ORXO43Order
func NewORXO43Order(input hl7.HL7Type) ORXO43Order {
	v := ORXO43Order{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.TranscriptionDocumentHeader = NewTXA(input.Index(2))
	v.ClinicalTrialIdentification = NewCTISlice(input.Index(3))
	return v
}

type ORXO43Order struct {
	CommonOrder                 ORC
	ParticipationInformation    []PRT
	TranscriptionDocumentHeader TXA
	ClinicalTrialIdentification []CTI
}

// NewORXO43OrderSlice will construct a slice of type ORXO43Order
func NewORXO43OrderSlice(input hl7.HL7Type) []ORXO43Order {
	values := make([]ORXO43Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORXO43Order(input.Index(i))
	}
	return values
}

// NewOPLO37Patient creates an implementation of OPLO37Patient
func NewOPLO37Patient(input hl7.HL7Type) OPLO37Patient {
	v := OPLO37Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.AccessRestriction = NewARVSlice(input.Index(3))
	v.ObservationsOnPatient = NewOPLO37ObservationsOnPatientSlice(input.Index(4))
	v.Insurance = NewOPLO37InsuranceSlice(input.Index(5))
	v.PatientAllergyInformation = NewAL1Slice(input.Index(6))
	return v
}

type OPLO37Patient struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	ParticipationInformation     []PRT
	AccessRestriction            []ARV
	ObservationsOnPatient        []OPLO37ObservationsOnPatient
	Insurance                    []OPLO37Insurance
	PatientAllergyInformation    []AL1
}

// NewOPLO37PatientSlice will construct a slice of type OPLO37Patient
func NewOPLO37PatientSlice(input hl7.HL7Type) []OPLO37Patient {
	values := make([]OPLO37Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOPLO37Patient(input.Index(i))
	}
	return values
}

// NewRSPZ86CommonOrder creates an implementation of RSPZ86CommonOrder
func NewRSPZ86CommonOrder(input hl7.HL7Type) RSPZ86CommonOrder {
	v := RSPZ86CommonOrder{}
	v.CommonOrder = NewORC(input.Index(0))
	v.Timing = NewRSPZ86TimingSlice(input.Index(1))
	v.OrderDetail = NewRSPZ86OrderDetail(input.Index(2))
	v.EncodedOrder = NewRSPZ86EncodedOrder(input.Index(3))
	v.Dispense = NewRSPZ86Dispense(input.Index(4))
	v.Give = NewRSPZ86Give(input.Index(5))
	v.Administration = NewRSPZ86Administration(input.Index(6))
	v.Observation = NewRSPZ86ObservationSlice(input.Index(7))
	return v
}

type RSPZ86CommonOrder struct {
	CommonOrder    ORC
	Timing         []RSPZ86Timing
	OrderDetail    RSPZ86OrderDetail
	EncodedOrder   RSPZ86EncodedOrder
	Dispense       RSPZ86Dispense
	Give           RSPZ86Give
	Administration RSPZ86Administration
	Observation    []RSPZ86Observation
}

// NewRSPZ86CommonOrderSlice will construct a slice of type RSPZ86CommonOrder
func NewRSPZ86CommonOrderSlice(input hl7.HL7Type) []RSPZ86CommonOrder {
	values := make([]RSPZ86CommonOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPZ86CommonOrder(input.Index(i))
	}
	return values
}

// NewOMSO05Order creates an implementation of OMSO05Order
func NewOMSO05Order(input hl7.HL7Type) OMSO05Order {
	v := OMSO05Order{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRT(input.Index(1))
	v.Timing = NewOMSO05TimingSlice(input.Index(2))
	v.RequisitionDetail = NewRQD(input.Index(3))
	v.RequisitionDetail1 = NewRQ1(input.Index(4))
	v.NotesAndComments = NewNTESlice(input.Index(5))
	v.Observation = NewOMSO05ObservationSlice(input.Index(6))
	v.Billing = NewBLG(input.Index(7))
	return v
}

type OMSO05Order struct {
	CommonOrder              ORC
	ParticipationInformation PRT
	Timing                   []OMSO05Timing
	RequisitionDetail        RQD
	RequisitionDetail1       RQ1
	NotesAndComments         []NTE
	Observation              []OMSO05Observation
	Billing                  BLG
}

// NewOMSO05OrderSlice will construct a slice of type OMSO05Order
func NewOMSO05OrderSlice(input hl7.HL7Type) []OMSO05Order {
	values := make([]OMSO05Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMSO05Order(input.Index(i))
	}
	return values
}

// NewCCRI18MedicationAdministrationObservation creates an implementation of CCRI18MedicationAdministrationObservation
func NewCCRI18MedicationAdministrationObservation(input hl7.HL7Type) CCRI18MedicationAdministrationObservation {
	v := CCRI18MedicationAdministrationObservation{}
	v.ObservationResult = NewOBXSlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CCRI18MedicationAdministrationObservation struct {
	ObservationResult        []OBX
	ParticipationInformation []PRT
}

// NewCCRI18MedicationAdministrationObservationSlice will construct a slice of type CCRI18MedicationAdministrationObservation
func NewCCRI18MedicationAdministrationObservationSlice(input hl7.HL7Type) []CCRI18MedicationAdministrationObservation {
	values := make([]CCRI18MedicationAdministrationObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI18MedicationAdministrationObservation(input.Index(i))
	}
	return values
}

// NewCSUC09Patient creates an implementation of CSUC09Patient
func NewCSUC09Patient(input hl7.HL7Type) CSUC09Patient {
	v := CSUC09Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.AccessRestriction = NewARVSlice(input.Index(3))
	v.NotesAndComments = NewNTESlice(input.Index(4))
	v.Visit = NewCSUC09Visit(input.Index(5))
	v.ClinicalStudyRegistration = NewCSR(input.Index(6))
	v.StudyPhase = NewCSUC09StudyPhaseSlice(input.Index(7))
	return v
}

type CSUC09Patient struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	ParticipationInformation     []PRT
	AccessRestriction            []ARV
	NotesAndComments             []NTE
	Visit                        CSUC09Visit
	ClinicalStudyRegistration    CSR
	StudyPhase                   []CSUC09StudyPhase
}

// NewCSUC09PatientSlice will construct a slice of type CSUC09Patient
func NewCSUC09PatientSlice(input hl7.HL7Type) []CSUC09Patient {
	values := make([]CSUC09Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCSUC09Patient(input.Index(i))
	}
	return values
}

// NewRPAI09Authorization2 creates an implementation of RPAI09Authorization2
func NewRPAI09Authorization2(input hl7.HL7Type) RPAI09Authorization2 {
	v := RPAI09Authorization2{}
	v.AuthorizationInformation = NewAUT(input.Index(0))
	v.ContactData = NewCTD(input.Index(1))
	return v
}

type RPAI09Authorization2 struct {
	AuthorizationInformation AUT
	ContactData              CTD
}

// NewRPAI09Authorization2Slice will construct a slice of type RPAI09Authorization2
func NewRPAI09Authorization2Slice(input hl7.HL7Type) []RPAI09Authorization2 {
	values := make([]RPAI09Authorization2, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRPAI09Authorization2(input.Index(i))
	}
	return values
}

// NewSIUS12Patient creates an implementation of SIUS12Patient
func NewSIUS12Patient(input hl7.HL7Type) SIUS12Patient {
	v := SIUS12Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.PatientVisit = NewPV1(input.Index(2))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(3))
	v.ObservationResult = NewOBXSlice(input.Index(4))
	v.Diagnosis = NewDG1Slice(input.Index(5))
	return v
}

type SIUS12Patient struct {
	PatientIdentification             PID
	PatientAdditionalDemographic      PD1
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ObservationResult                 []OBX
	Diagnosis                         []DG1
}

// NewSIUS12PatientSlice will construct a slice of type SIUS12Patient
func NewSIUS12PatientSlice(input hl7.HL7Type) []SIUS12Patient {
	values := make([]SIUS12Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS12Patient(input.Index(i))
	}
	return values
}

// NewOPLO37Timing creates an implementation of OPLO37Timing
func NewOPLO37Timing(input hl7.HL7Type) OPLO37Timing {
	v := OPLO37Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type OPLO37Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewOPLO37TimingSlice will construct a slice of type OPLO37Timing
func NewOPLO37TimingSlice(input hl7.HL7Type) []OPLO37Timing {
	values := make([]OPLO37Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOPLO37Timing(input.Index(i))
	}
	return values
}

// NewADTA07Procedure creates an implementation of ADTA07Procedure
func NewADTA07Procedure(input hl7.HL7Type) ADTA07Procedure {
	v := ADTA07Procedure{}
	v.Procedures = NewPR1(input.Index(0))
	v.Role = NewROLSlice(input.Index(1))
	return v
}

type ADTA07Procedure struct {
	Procedures PR1
	Role       []ROL
}

// NewADTA07ProcedureSlice will construct a slice of type ADTA07Procedure
func NewADTA07ProcedureSlice(input hl7.HL7Type) []ADTA07Procedure {
	values := make([]ADTA07Procedure, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewADTA07Procedure(input.Index(i))
	}
	return values
}

// NewOMQO42ObservationPrior creates an implementation of OMQO42ObservationPrior
func NewOMQO42ObservationPrior(input hl7.HL7Type) OMQO42ObservationPrior {
	v := OMQO42ObservationPrior{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type OMQO42ObservationPrior struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewOMQO42ObservationPriorSlice will construct a slice of type OMQO42ObservationPrior
func NewOMQO42ObservationPriorSlice(input hl7.HL7Type) []OMQO42ObservationPrior {
	values := make([]OMQO42ObservationPrior, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMQO42ObservationPrior(input.Index(i))
	}
	return values
}

// NewRPRI03Provider creates an implementation of RPRI03Provider
func NewRPRI03Provider(input hl7.HL7Type) RPRI03Provider {
	v := RPRI03Provider{}
	v.ProviderData = NewPRD(input.Index(0))
	v.ContactData = NewCTDSlice(input.Index(1))
	return v
}

type RPRI03Provider struct {
	ProviderData PRD
	ContactData  []CTD
}

// NewRPRI03ProviderSlice will construct a slice of type RPRI03Provider
func NewRPRI03ProviderSlice(input hl7.HL7Type) []RPRI03Provider {
	values := make([]RPRI03Provider, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRPRI03Provider(input.Index(i))
	}
	return values
}

// NewREFI15PatientVisit creates an implementation of REFI15PatientVisit
func NewREFI15PatientVisit(input hl7.HL7Type) REFI15PatientVisit {
	v := REFI15PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	return v
}

type REFI15PatientVisit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
}

// NewREFI15PatientVisitSlice will construct a slice of type REFI15PatientVisit
func NewREFI15PatientVisitSlice(input hl7.HL7Type) []REFI15PatientVisit {
	values := make([]REFI15PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewREFI15PatientVisit(input.Index(i))
	}
	return values
}

// NewSRMS11GeneralResource creates an implementation of SRMS11GeneralResource
func NewSRMS11GeneralResource(input hl7.HL7Type) SRMS11GeneralResource {
	v := SRMS11GeneralResource{}
	v.AppointmentInformationGeneralResource = NewAIG(input.Index(0))
	v.AppointmentPreferences = NewAPR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type SRMS11GeneralResource struct {
	AppointmentInformationGeneralResource AIG
	AppointmentPreferences                APR
	NotesAndComments                      []NTE
}

// NewSRMS11GeneralResourceSlice will construct a slice of type SRMS11GeneralResource
func NewSRMS11GeneralResourceSlice(input hl7.HL7Type) []SRMS11GeneralResource {
	values := make([]SRMS11GeneralResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS11GeneralResource(input.Index(i))
	}
	return values
}

// NewEHCE02Psg creates an implementation of EHCE02Psg
func NewEHCE02Psg(input hl7.HL7Type) EHCE02Psg {
	v := EHCE02Psg{}
	v.ProductServiceGroup = NewPSG(input.Index(0))
	v.ProductServiceLineItem = NewPSLSlice(input.Index(1))
	return v
}

type EHCE02Psg struct {
	ProductServiceGroup    PSG
	ProductServiceLineItem []PSL
}

// NewEHCE02PsgSlice will construct a slice of type EHCE02Psg
func NewEHCE02PsgSlice(input hl7.HL7Type) []EHCE02Psg {
	values := make([]EHCE02Psg, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewEHCE02Psg(input.Index(i))
	}
	return values
}

// NewSIUS23Patient creates an implementation of SIUS23Patient
func NewSIUS23Patient(input hl7.HL7Type) SIUS23Patient {
	v := SIUS23Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.PatientVisit = NewPV1(input.Index(2))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(3))
	v.ObservationResult = NewOBXSlice(input.Index(4))
	v.Diagnosis = NewDG1Slice(input.Index(5))
	return v
}

type SIUS23Patient struct {
	PatientIdentification             PID
	PatientAdditionalDemographic      PD1
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ObservationResult                 []OBX
	Diagnosis                         []DG1
}

// NewSIUS23PatientSlice will construct a slice of type SIUS23Patient
func NewSIUS23PatientSlice(input hl7.HL7Type) []SIUS23Patient {
	values := make([]SIUS23Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS23Patient(input.Index(i))
	}
	return values
}

// NewDFTP11FinancialCommonOrder creates an implementation of DFTP11FinancialCommonOrder
func NewDFTP11FinancialCommonOrder(input hl7.HL7Type) DFTP11FinancialCommonOrder {
	v := DFTP11FinancialCommonOrder{}
	v.CommonOrder = NewORC(input.Index(0))
	v.FinancialTimingQuantity = NewDFTP11FinancialTimingQuantitySlice(input.Index(1))
	v.FinancialOrder = NewDFTP11FinancialOrder(input.Index(2))
	v.FinancialObservation = NewDFTP11FinancialObservationSlice(input.Index(3))
	return v
}

type DFTP11FinancialCommonOrder struct {
	CommonOrder             ORC
	FinancialTimingQuantity []DFTP11FinancialTimingQuantity
	FinancialOrder          DFTP11FinancialOrder
	FinancialObservation    []DFTP11FinancialObservation
}

// NewDFTP11FinancialCommonOrderSlice will construct a slice of type DFTP11FinancialCommonOrder
func NewDFTP11FinancialCommonOrderSlice(input hl7.HL7Type) []DFTP11FinancialCommonOrder {
	values := make([]DFTP11FinancialCommonOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewDFTP11FinancialCommonOrder(input.Index(i))
	}
	return values
}

// NewPPPPCBPathwayRole creates an implementation of PPPPCBPathwayRole
func NewPPPPCBPathwayRole(input hl7.HL7Type) PPPPCBPathwayRole {
	v := PPPPCBPathwayRole{}
	v.Role = NewROL(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type PPPPCBPathwayRole struct {
	Role     ROL
	Variance []VAR
}

// NewPPPPCBPathwayRoleSlice will construct a slice of type PPPPCBPathwayRole
func NewPPPPCBPathwayRoleSlice(input hl7.HL7Type) []PPPPCBPathwayRole {
	values := make([]PPPPCBPathwayRole, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPPPCBPathwayRole(input.Index(i))
	}
	return values
}

// NewOSMR26SubjectPersonAnimalIdentification creates an implementation of OSMR26SubjectPersonAnimalIdentification
func NewOSMR26SubjectPersonAnimalIdentification(input hl7.HL7Type) OSMR26SubjectPersonAnimalIdentification {
	v := OSMR26SubjectPersonAnimalIdentification{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.AccessRestriction = NewARVSlice(input.Index(2))
	v.PatientObservation = NewOSMR26PatientObservationSlice(input.Index(3))
	v.NextOfKinAssociatedParties = NewNK1Slice(input.Index(4))
	return v
}

type OSMR26SubjectPersonAnimalIdentification struct {
	PatientIdentification      PID
	ParticipationInformation   []PRT
	AccessRestriction          []ARV
	PatientObservation         []OSMR26PatientObservation
	NextOfKinAssociatedParties []NK1
}

// NewOSMR26SubjectPersonAnimalIdentificationSlice will construct a slice of type OSMR26SubjectPersonAnimalIdentification
func NewOSMR26SubjectPersonAnimalIdentificationSlice(input hl7.HL7Type) []OSMR26SubjectPersonAnimalIdentification {
	values := make([]OSMR26SubjectPersonAnimalIdentification, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOSMR26SubjectPersonAnimalIdentification(input.Index(i))
	}
	return values
}

// NewCCUI20PathwayObservation creates an implementation of CCUI20PathwayObservation
func NewCCUI20PathwayObservation(input hl7.HL7Type) CCUI20PathwayObservation {
	v := CCUI20PathwayObservation{}
	v.ObservationResult = NewOBXSlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CCUI20PathwayObservation struct {
	ObservationResult        []OBX
	ParticipationInformation []PRT
}

// NewCCUI20PathwayObservationSlice will construct a slice of type CCUI20PathwayObservation
func NewCCUI20PathwayObservationSlice(input hl7.HL7Type) []CCUI20PathwayObservation {
	values := make([]CCUI20PathwayObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCUI20PathwayObservation(input.Index(i))
	}
	return values
}

// NewORUR01PatientObservation creates an implementation of ORUR01PatientObservation
func NewORUR01PatientObservation(input hl7.HL7Type) ORUR01PatientObservation {
	v := ORUR01PatientObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type ORUR01PatientObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewORUR01PatientObservationSlice will construct a slice of type ORUR01PatientObservation
func NewORUR01PatientObservationSlice(input hl7.HL7Type) []ORUR01PatientObservation {
	values := make([]ORUR01PatientObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORUR01PatientObservation(input.Index(i))
	}
	return values
}

// NewOMDO03Observation creates an implementation of OMDO03Observation
func NewOMDO03Observation(input hl7.HL7Type) OMDO03Observation {
	v := OMDO03Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type OMDO03Observation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewOMDO03ObservationSlice will construct a slice of type OMDO03Observation
func NewOMDO03ObservationSlice(input hl7.HL7Type) []OMDO03Observation {
	values := make([]OMDO03Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMDO03Observation(input.Index(i))
	}
	return values
}

// NewMDMT04Timing creates an implementation of MDMT04Timing
func NewMDMT04Timing(input hl7.HL7Type) MDMT04Timing {
	v := MDMT04Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type MDMT04Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewMDMT04TimingSlice will construct a slice of type MDMT04Timing
func NewMDMT04TimingSlice(input hl7.HL7Type) []MDMT04Timing {
	values := make([]MDMT04Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMDMT04Timing(input.Index(i))
	}
	return values
}

// NewREFI15Procedure creates an implementation of REFI15Procedure
func NewREFI15Procedure(input hl7.HL7Type) REFI15Procedure {
	v := REFI15Procedure{}
	v.Procedures = NewPR1(input.Index(0))
	v.AuthorizationContact2 = NewREFI15AuthorizationContact2(input.Index(1))
	return v
}

type REFI15Procedure struct {
	Procedures            PR1
	AuthorizationContact2 REFI15AuthorizationContact2
}

// NewREFI15ProcedureSlice will construct a slice of type REFI15Procedure
func NewREFI15ProcedureSlice(input hl7.HL7Type) []REFI15Procedure {
	values := make([]REFI15Procedure, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewREFI15Procedure(input.Index(i))
	}
	return values
}

// NewOMLO33PatientPrior creates an implementation of OMLO33PatientPrior
func NewOMLO33PatientPrior(input hl7.HL7Type) OMLO33PatientPrior {
	v := OMLO33PatientPrior{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.AccessRestriction = NewARVSlice(input.Index(3))
	return v
}

type OMLO33PatientPrior struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	ParticipationInformation     []PRT
	AccessRestriction            []ARV
}

// NewOMLO33PatientPriorSlice will construct a slice of type OMLO33PatientPrior
func NewOMLO33PatientPriorSlice(input hl7.HL7Type) []OMLO33PatientPrior {
	values := make([]OMLO33PatientPrior, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO33PatientPrior(input.Index(i))
	}
	return values
}

// NewPPGPCJOrderDetail creates an implementation of PPGPCJOrderDetail
func NewPPGPCJOrderDetail(input hl7.HL7Type) PPGPCJOrderDetail {
	v := PPGPCJOrderDetail{}
	v.Choice = NewPPGPCJChoice(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Variance = NewVARSlice(input.Index(2))
	v.OrderObservation = NewPPGPCJOrderObservationSlice(input.Index(3))
	return v
}

type PPGPCJOrderDetail struct {
	Choice           PPGPCJChoice
	NotesAndComments []NTE
	Variance         []VAR
	OrderObservation []PPGPCJOrderObservation
}

// NewPPGPCJOrderDetailSlice will construct a slice of type PPGPCJOrderDetail
func NewPPGPCJOrderDetailSlice(input hl7.HL7Type) []PPGPCJOrderDetail {
	values := make([]PPGPCJOrderDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPGPCJOrderDetail(input.Index(i))
	}
	return values
}

// NewQBPZ81Qbp creates an implementation of QBPZ81Qbp
func NewQBPZ81Qbp(input hl7.HL7Type) QBPZ81Qbp {
	v := QBPZ81Qbp{}
	v.AnyHl7Segment = NewHxx(input.Index(0))
	return v
}

type QBPZ81Qbp struct {
	AnyHl7Segment Hxx
}

// NewQBPZ81QbpSlice will construct a slice of type QBPZ81Qbp
func NewQBPZ81QbpSlice(input hl7.HL7Type) []QBPZ81Qbp {
	values := make([]QBPZ81Qbp, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewQBPZ81Qbp(input.Index(i))
	}
	return values
}

// NewCCRI16ProviderContact creates an implementation of CCRI16ProviderContact
func NewCCRI16ProviderContact(input hl7.HL7Type) CCRI16ProviderContact {
	v := CCRI16ProviderContact{}
	v.ProviderData = NewPRD(input.Index(0))
	v.ContactData = NewCTDSlice(input.Index(1))
	return v
}

type CCRI16ProviderContact struct {
	ProviderData PRD
	ContactData  []CTD
}

// NewCCRI16ProviderContactSlice will construct a slice of type CCRI16ProviderContact
func NewCCRI16ProviderContactSlice(input hl7.HL7Type) []CCRI16ProviderContact {
	values := make([]CCRI16ProviderContact, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI16ProviderContact(input.Index(i))
	}
	return values
}

// NewCCRI16RoleClinicalHistory creates an implementation of CCRI16RoleClinicalHistory
func NewCCRI16RoleClinicalHistory(input hl7.HL7Type) CCRI16RoleClinicalHistory {
	v := CCRI16RoleClinicalHistory{}
	v.RoleClinicalHistoryObject = NewCCRI16RoleClinicalHistoryObject(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type CCRI16RoleClinicalHistory struct {
	RoleClinicalHistoryObject CCRI16RoleClinicalHistoryObject
	Variance                  []VAR
}

// NewCCRI16RoleClinicalHistorySlice will construct a slice of type CCRI16RoleClinicalHistory
func NewCCRI16RoleClinicalHistorySlice(input hl7.HL7Type) []CCRI16RoleClinicalHistory {
	values := make([]CCRI16RoleClinicalHistory, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI16RoleClinicalHistory(input.Index(i))
	}
	return values
}

// NewDPRO48DonnorOrder creates an implementation of DPRO48DonnorOrder
func NewDPRO48DonnorOrder(input hl7.HL7Type) DPRO48DonnorOrder {
	v := DPRO48DonnorOrder{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type DPRO48DonnorOrder struct {
	ObservationRequest OBR
	NotesAndComments   []NTE
}

// NewDPRO48DonnorOrderSlice will construct a slice of type DPRO48DonnorOrder
func NewDPRO48DonnorOrderSlice(input hl7.HL7Type) []DPRO48DonnorOrder {
	values := make([]DPRO48DonnorOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewDPRO48DonnorOrder(input.Index(i))
	}
	return values
}

// NewSIUS20LocationResource creates an implementation of SIUS20LocationResource
func NewSIUS20LocationResource(input hl7.HL7Type) SIUS20LocationResource {
	v := SIUS20LocationResource{}
	v.AppointmentInformationLocationResource = NewAIL(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS20LocationResource struct {
	AppointmentInformationLocationResource AIL
	NotesAndComments                       []NTE
}

// NewSIUS20LocationResourceSlice will construct a slice of type SIUS20LocationResource
func NewSIUS20LocationResourceSlice(input hl7.HL7Type) []SIUS20LocationResource {
	values := make([]SIUS20LocationResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS20LocationResource(input.Index(i))
	}
	return values
}

// NewMFNM04MfCdm creates an implementation of MFNM04MfCdm
func NewMFNM04MfCdm(input hl7.HL7Type) MFNM04MfCdm {
	v := MFNM04MfCdm{}
	v.MasterFileEntry = NewMFE(input.Index(0))
	v.ChargeDescriptionMaster = NewCDM(input.Index(1))
	v.Pricing = NewPRCSlice(input.Index(2))
	return v
}

type MFNM04MfCdm struct {
	MasterFileEntry         MFE
	ChargeDescriptionMaster CDM
	Pricing                 []PRC
}

// NewMFNM04MfCdmSlice will construct a slice of type MFNM04MfCdm
func NewMFNM04MfCdmSlice(input hl7.HL7Type) []MFNM04MfCdm {
	values := make([]MFNM04MfCdm, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMFNM04MfCdm(input.Index(i))
	}
	return values
}

// NewPGLPC6ProblemRole creates an implementation of PGLPC6ProblemRole
func NewPGLPC6ProblemRole(input hl7.HL7Type) PGLPC6ProblemRole {
	v := PGLPC6ProblemRole{}
	v.Role = NewROL(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type PGLPC6ProblemRole struct {
	Role     ROL
	Variance []VAR
}

// NewPGLPC6ProblemRoleSlice will construct a slice of type PGLPC6ProblemRole
func NewPGLPC6ProblemRoleSlice(input hl7.HL7Type) []PGLPC6ProblemRole {
	values := make([]PGLPC6ProblemRole, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPGLPC6ProblemRole(input.Index(i))
	}
	return values
}

// NewPPPPCDChoice creates an implementation of PPPPCDChoice
func NewPPPPCDChoice(input hl7.HL7Type) PPPPCDChoice {
	v := PPPPCDChoice{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.AnyHl7Segment = NewHxx(input.Index(1))
	return v
}

type PPPPCDChoice struct {
	ObservationRequest OBR
	AnyHl7Segment      Hxx
}

// NewPPPPCDChoiceSlice will construct a slice of type PPPPCDChoice
func NewPPPPCDChoiceSlice(input hl7.HL7Type) []PPPPCDChoice {
	values := make([]PPPPCDChoice, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPPPCDChoice(input.Index(i))
	}
	return values
}

// NewSDNS36AntiMicrobialDeviceData creates an implementation of SDNS36AntiMicrobialDeviceData
func NewSDNS36AntiMicrobialDeviceData(input hl7.HL7Type) SDNS36AntiMicrobialDeviceData {
	v := SDNS36AntiMicrobialDeviceData{}
	v.SterilizationDeviceData = NewSDD(input.Index(0))
	v.AntiMicrobialCycleData = NewSCDSlice(input.Index(1))
	return v
}

type SDNS36AntiMicrobialDeviceData struct {
	SterilizationDeviceData SDD
	AntiMicrobialCycleData  []SCD
}

// NewSDNS36AntiMicrobialDeviceDataSlice will construct a slice of type SDNS36AntiMicrobialDeviceData
func NewSDNS36AntiMicrobialDeviceDataSlice(input hl7.HL7Type) []SDNS36AntiMicrobialDeviceData {
	values := make([]SDNS36AntiMicrobialDeviceData, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSDNS36AntiMicrobialDeviceData(input.Index(i))
	}
	return values
}

// NewSRRS07Schedule creates an implementation of SRRS07Schedule
func NewSRRS07Schedule(input hl7.HL7Type) SRRS07Schedule {
	v := SRRS07Schedule{}
	v.SchedulingActivityInformation = NewSCH(input.Index(0))
	v.TimingQuantity = NewTQ1Slice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.Patient = NewSRRS07PatientSlice(input.Index(3))
	v.Resources = NewSRRS07ResourcesSlice(input.Index(4))
	return v
}

type SRRS07Schedule struct {
	SchedulingActivityInformation SCH
	TimingQuantity                []TQ1
	NotesAndComments              []NTE
	Patient                       []SRRS07Patient
	Resources                     []SRRS07Resources
}

// NewSRRS07ScheduleSlice will construct a slice of type SRRS07Schedule
func NewSRRS07ScheduleSlice(input hl7.HL7Type) []SRRS07Schedule {
	values := make([]SRRS07Schedule, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS07Schedule(input.Index(i))
	}
	return values
}

// NewMDMT09Timing creates an implementation of MDMT09Timing
func NewMDMT09Timing(input hl7.HL7Type) MDMT09Timing {
	v := MDMT09Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type MDMT09Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewMDMT09TimingSlice will construct a slice of type MDMT09Timing
func NewMDMT09TimingSlice(input hl7.HL7Type) []MDMT09Timing {
	values := make([]MDMT09Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMDMT09Timing(input.Index(i))
	}
	return values
}

// NewPGLPC6GoalRole creates an implementation of PGLPC6GoalRole
func NewPGLPC6GoalRole(input hl7.HL7Type) PGLPC6GoalRole {
	v := PGLPC6GoalRole{}
	v.Role = NewROL(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type PGLPC6GoalRole struct {
	Role     ROL
	Variance []VAR
}

// NewPGLPC6GoalRoleSlice will construct a slice of type PGLPC6GoalRole
func NewPGLPC6GoalRoleSlice(input hl7.HL7Type) []PGLPC6GoalRole {
	values := make([]PGLPC6GoalRole, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPGLPC6GoalRole(input.Index(i))
	}
	return values
}

// NewSRRS03Patient creates an implementation of SRRS03Patient
func NewSRRS03Patient(input hl7.HL7Type) SRRS03Patient {
	v := SRRS03Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientVisit = NewPV1(input.Index(1))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(2))
	v.Diagnosis = NewDG1Slice(input.Index(3))
	return v
}

type SRRS03Patient struct {
	PatientIdentification             PID
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	Diagnosis                         []DG1
}

// NewSRRS03PatientSlice will construct a slice of type SRRS03Patient
func NewSRRS03PatientSlice(input hl7.HL7Type) []SRRS03Patient {
	values := make([]SRRS03Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS03Patient(input.Index(i))
	}
	return values
}

// NewPGLPC8Goal creates an implementation of PGLPC8Goal
func NewPGLPC8Goal(input hl7.HL7Type) PGLPC8Goal {
	v := PGLPC8Goal{}
	v.GoalDetail = NewGOL(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Variance = NewVARSlice(input.Index(2))
	v.GoalRole = NewPGLPC8GoalRoleSlice(input.Index(3))
	v.Pathway = NewPGLPC8PathwaySlice(input.Index(4))
	v.Observation = NewPGLPC8ObservationSlice(input.Index(5))
	v.Problem = NewPGLPC8ProblemSlice(input.Index(6))
	v.Order = NewPGLPC8OrderSlice(input.Index(7))
	return v
}

type PGLPC8Goal struct {
	GoalDetail       GOL
	NotesAndComments []NTE
	Variance         []VAR
	GoalRole         []PGLPC8GoalRole
	Pathway          []PGLPC8Pathway
	Observation      []PGLPC8Observation
	Problem          []PGLPC8Problem
	Order            []PGLPC8Order
}

// NewPGLPC8GoalSlice will construct a slice of type PGLPC8Goal
func NewPGLPC8GoalSlice(input hl7.HL7Type) []PGLPC8Goal {
	values := make([]PGLPC8Goal, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPGLPC8Goal(input.Index(i))
	}
	return values
}

// NewSRMS09Patient creates an implementation of SRMS09Patient
func NewSRMS09Patient(input hl7.HL7Type) SRMS09Patient {
	v := SRMS09Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientVisit = NewPV1(input.Index(1))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(2))
	v.Observation = NewSRMS09ObservationSlice(input.Index(3))
	v.Diagnosis = NewDG1Slice(input.Index(4))
	return v
}

type SRMS09Patient struct {
	PatientIdentification             PID
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	Observation                       []SRMS09Observation
	Diagnosis                         []DG1
}

// NewSRMS09PatientSlice will construct a slice of type SRMS09Patient
func NewSRMS09PatientSlice(input hl7.HL7Type) []SRMS09Patient {
	values := make([]SRMS09Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS09Patient(input.Index(i))
	}
	return values
}

// NewRDRRDRTiming creates an implementation of RDRRDRTiming
func NewRDRRDRTiming(input hl7.HL7Type) RDRRDRTiming {
	v := RDRRDRTiming{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type RDRRDRTiming struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewRDRRDRTimingSlice will construct a slice of type RDRRDRTiming
func NewRDRRDRTimingSlice(input hl7.HL7Type) []RDRRDRTiming {
	values := make([]RDRRDRTiming, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRDRRDRTiming(input.Index(i))
	}
	return values
}

// NewMFNM08MfTestNumeric creates an implementation of MFNM08MfTestNumeric
func NewMFNM08MfTestNumeric(input hl7.HL7Type) MFNM08MfTestNumeric {
	v := MFNM08MfTestNumeric{}
	v.MasterFileEntry = NewMFE(input.Index(0))
	v.GeneralSegment = NewOM1(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.NumericObservation = NewOM2(input.Index(3))
	v.CategoricalServicetestobservation = NewOM3(input.Index(4))
	v.ObservationsThatRequireSpecimens = NewOM4Slice(input.Index(5))
	return v
}

type MFNM08MfTestNumeric struct {
	MasterFileEntry                   MFE
	GeneralSegment                    OM1
	ParticipationInformation          []PRT
	NumericObservation                OM2
	CategoricalServicetestobservation OM3
	ObservationsThatRequireSpecimens  []OM4
}

// NewMFNM08MfTestNumericSlice will construct a slice of type MFNM08MfTestNumeric
func NewMFNM08MfTestNumericSlice(input hl7.HL7Type) []MFNM08MfTestNumeric {
	values := make([]MFNM08MfTestNumeric, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMFNM08MfTestNumeric(input.Index(i))
	}
	return values
}

// NewSRRS07GeneralResource creates an implementation of SRRS07GeneralResource
func NewSRRS07GeneralResource(input hl7.HL7Type) SRRS07GeneralResource {
	v := SRRS07GeneralResource{}
	v.AppointmentInformationGeneralResource = NewAIG(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SRRS07GeneralResource struct {
	AppointmentInformationGeneralResource AIG
	NotesAndComments                      []NTE
}

// NewSRRS07GeneralResourceSlice will construct a slice of type SRRS07GeneralResource
func NewSRRS07GeneralResourceSlice(input hl7.HL7Type) []SRRS07GeneralResource {
	values := make([]SRRS07GeneralResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS07GeneralResource(input.Index(i))
	}
	return values
}

// NewORUR40Observation creates an implementation of ORUR40Observation
func NewORUR40Observation(input hl7.HL7Type) ORUR40Observation {
	v := ORUR40Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type ORUR40Observation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewORUR40ObservationSlice will construct a slice of type ORUR40Observation
func NewORUR40ObservationSlice(input hl7.HL7Type) []ORUR40Observation {
	values := make([]ORUR40Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORUR40Observation(input.Index(i))
	}
	return values
}

// NewCCRI18ClinicalHistoryObject creates an implementation of CCRI18ClinicalHistoryObject
func NewCCRI18ClinicalHistoryObject(input hl7.HL7Type) CCRI18ClinicalHistoryObject {
	v := CCRI18ClinicalHistoryObject{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.DietaryOrdersSupplementsAndPreferences = NewODS(input.Index(1))
	v.Procedures = NewPR1(input.Index(2))
	v.ReferralInformation = NewRF1(input.Index(3))
	v.PatientAllergyInformation = NewAL1(input.Index(4))
	v.PatientAdverseReactionInformation = NewIAM(input.Index(5))
	v.Accident = NewACC(input.Index(6))
	v.RiskManagementIncident = NewRMI(input.Index(7))
	v.Disability = NewDB1(input.Index(8))
	v.Diagnosis = NewDG1(input.Index(9))
	v.DiagnosisRelatedGroup = NewDRG(input.Index(10))
	return v
}

type CCRI18ClinicalHistoryObject struct {
	ObservationRequest                     OBR
	DietaryOrdersSupplementsAndPreferences ODS
	Procedures                             PR1
	ReferralInformation                    RF1
	PatientAllergyInformation              AL1
	PatientAdverseReactionInformation      IAM
	Accident                               ACC
	RiskManagementIncident                 RMI
	Disability                             DB1
	Diagnosis                              DG1
	DiagnosisRelatedGroup                  DRG
}

// NewCCRI18ClinicalHistoryObjectSlice will construct a slice of type CCRI18ClinicalHistoryObject
func NewCCRI18ClinicalHistoryObjectSlice(input hl7.HL7Type) []CCRI18ClinicalHistoryObject {
	values := make([]CCRI18ClinicalHistoryObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI18ClinicalHistoryObject(input.Index(i))
	}
	return values
}

// NewSIUS24LocationResource creates an implementation of SIUS24LocationResource
func NewSIUS24LocationResource(input hl7.HL7Type) SIUS24LocationResource {
	v := SIUS24LocationResource{}
	v.AppointmentInformationLocationResource = NewAIL(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS24LocationResource struct {
	AppointmentInformationLocationResource AIL
	NotesAndComments                       []NTE
}

// NewSIUS24LocationResourceSlice will construct a slice of type SIUS24LocationResource
func NewSIUS24LocationResourceSlice(input hl7.HL7Type) []SIUS24LocationResource {
	values := make([]SIUS24LocationResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS24LocationResource(input.Index(i))
	}
	return values
}

// NewSIUS21Patient creates an implementation of SIUS21Patient
func NewSIUS21Patient(input hl7.HL7Type) SIUS21Patient {
	v := SIUS21Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.PatientVisit = NewPV1(input.Index(2))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(3))
	v.ObservationResult = NewOBXSlice(input.Index(4))
	v.Diagnosis = NewDG1Slice(input.Index(5))
	return v
}

type SIUS21Patient struct {
	PatientIdentification             PID
	PatientAdditionalDemographic      PD1
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ObservationResult                 []OBX
	Diagnosis                         []DG1
}

// NewSIUS21PatientSlice will construct a slice of type SIUS21Patient
func NewSIUS21PatientSlice(input hl7.HL7Type) []SIUS21Patient {
	values := make([]SIUS21Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS21Patient(input.Index(i))
	}
	return values
}

// NewSRMS02Service creates an implementation of SRMS02Service
func NewSRMS02Service(input hl7.HL7Type) SRMS02Service {
	v := SRMS02Service{}
	v.AppointmentInformation = NewAIS(input.Index(0))
	v.AppointmentPreferences = NewAPR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type SRMS02Service struct {
	AppointmentInformation AIS
	AppointmentPreferences APR
	NotesAndComments       []NTE
}

// NewSRMS02ServiceSlice will construct a slice of type SRMS02Service
func NewSRMS02ServiceSlice(input hl7.HL7Type) []SRMS02Service {
	values := make([]SRMS02Service, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS02Service(input.Index(i))
	}
	return values
}

// NewCCUI20MedicationAdministrationDetail creates an implementation of CCUI20MedicationAdministrationDetail
func NewCCUI20MedicationAdministrationDetail(input hl7.HL7Type) CCUI20MedicationAdministrationDetail {
	v := CCUI20MedicationAdministrationDetail{}
	v.PharmacyTreatmentAdministration = NewRXASlice(input.Index(0))
	v.PharmacyTreatmentRoute = NewRXR(input.Index(1))
	v.MedicationAdministrationObservation = NewCCUI20MedicationAdministrationObservationSlice(input.Index(2))
	return v
}

type CCUI20MedicationAdministrationDetail struct {
	PharmacyTreatmentAdministration     []RXA
	PharmacyTreatmentRoute              RXR
	MedicationAdministrationObservation []CCUI20MedicationAdministrationObservation
}

// NewCCUI20MedicationAdministrationDetailSlice will construct a slice of type CCUI20MedicationAdministrationDetail
func NewCCUI20MedicationAdministrationDetailSlice(input hl7.HL7Type) []CCUI20MedicationAdministrationDetail {
	values := make([]CCUI20MedicationAdministrationDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCUI20MedicationAdministrationDetail(input.Index(i))
	}
	return values
}

// NewRPAI10Observation creates an implementation of RPAI10Observation
func NewRPAI10Observation(input hl7.HL7Type) RPAI10Observation {
	v := RPAI10Observation{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Results = NewRPAI10ResultsSlice(input.Index(2))
	return v
}

type RPAI10Observation struct {
	ObservationRequest OBR
	NotesAndComments   []NTE
	Results            []RPAI10Results
}

// NewRPAI10ObservationSlice will construct a slice of type RPAI10Observation
func NewRPAI10ObservationSlice(input hl7.HL7Type) []RPAI10Observation {
	values := make([]RPAI10Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRPAI10Observation(input.Index(i))
	}
	return values
}

// NewCCRI17MedicationAdministrationDetail creates an implementation of CCRI17MedicationAdministrationDetail
func NewCCRI17MedicationAdministrationDetail(input hl7.HL7Type) CCRI17MedicationAdministrationDetail {
	v := CCRI17MedicationAdministrationDetail{}
	v.PharmacyTreatmentAdministration = NewRXASlice(input.Index(0))
	v.PharmacyTreatmentRoute = NewRXR(input.Index(1))
	v.MedicationAdministrationObservation = NewCCRI17MedicationAdministrationObservationSlice(input.Index(2))
	return v
}

type CCRI17MedicationAdministrationDetail struct {
	PharmacyTreatmentAdministration     []RXA
	PharmacyTreatmentRoute              RXR
	MedicationAdministrationObservation []CCRI17MedicationAdministrationObservation
}

// NewCCRI17MedicationAdministrationDetailSlice will construct a slice of type CCRI17MedicationAdministrationDetail
func NewCCRI17MedicationAdministrationDetailSlice(input hl7.HL7Type) []CCRI17MedicationAdministrationDetail {
	values := make([]CCRI17MedicationAdministrationDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI17MedicationAdministrationDetail(input.Index(i))
	}
	return values
}

// NewRPAI11Results creates an implementation of RPAI11Results
func NewRPAI11Results(input hl7.HL7Type) RPAI11Results {
	v := RPAI11Results{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type RPAI11Results struct {
	ObservationResult OBX
	NotesAndComments  []NTE
}

// NewRPAI11ResultsSlice will construct a slice of type RPAI11Results
func NewRPAI11ResultsSlice(input hl7.HL7Type) []RPAI11Results {
	values := make([]RPAI11Results, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRPAI11Results(input.Index(i))
	}
	return values
}

// NewDPRO48BloodUnit creates an implementation of DPRO48BloodUnit
func NewDPRO48BloodUnit(input hl7.HL7Type) DPRO48BloodUnit {
	v := DPRO48BloodUnit{}
	v.BloodUnitInformationSegment = NewBUISlice(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type DPRO48BloodUnit struct {
	BloodUnitInformationSegment []BUI
	NotesAndComments            []NTE
}

// NewDPRO48BloodUnitSlice will construct a slice of type DPRO48BloodUnit
func NewDPRO48BloodUnitSlice(input hl7.HL7Type) []DPRO48BloodUnit {
	values := make([]DPRO48BloodUnit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewDPRO48BloodUnit(input.Index(i))
	}
	return values
}

// NewNMDN02AppStatus creates an implementation of NMDN02AppStatus
func NewNMDN02AppStatus(input hl7.HL7Type) NMDN02AppStatus {
	v := NMDN02AppStatus{}
	v.ApplicationStatusChange = NewNSC(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type NMDN02AppStatus struct {
	ApplicationStatusChange NSC
	NotesAndComments        []NTE
}

// NewNMDN02AppStatusSlice will construct a slice of type NMDN02AppStatus
func NewNMDN02AppStatusSlice(input hl7.HL7Type) []NMDN02AppStatus {
	values := make([]NMDN02AppStatus, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewNMDN02AppStatus(input.Index(i))
	}
	return values
}

// NewPPGPCGProblemObservation creates an implementation of PPGPCGProblemObservation
func NewPPGPCGProblemObservation(input hl7.HL7Type) PPGPCGProblemObservation {
	v := PPGPCGProblemObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type PPGPCGProblemObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewPPGPCGProblemObservationSlice will construct a slice of type PPGPCGProblemObservation
func NewPPGPCGProblemObservationSlice(input hl7.HL7Type) []PPGPCGProblemObservation {
	values := make([]PPGPCGProblemObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPGPCGProblemObservation(input.Index(i))
	}
	return values
}

// NewSIUS22Resources creates an implementation of SIUS22Resources
func NewSIUS22Resources(input hl7.HL7Type) SIUS22Resources {
	v := SIUS22Resources{}
	v.ResourceGroup = NewRGS(input.Index(0))
	v.Service = NewSIUS22ServiceSlice(input.Index(1))
	v.GeneralResource = NewSIUS22GeneralResourceSlice(input.Index(2))
	v.LocationResource = NewSIUS22LocationResourceSlice(input.Index(3))
	v.PersonnelResource = NewSIUS22PersonnelResourceSlice(input.Index(4))
	return v
}

type SIUS22Resources struct {
	ResourceGroup     RGS
	Service           []SIUS22Service
	GeneralResource   []SIUS22GeneralResource
	LocationResource  []SIUS22LocationResource
	PersonnelResource []SIUS22PersonnelResource
}

// NewSIUS22ResourcesSlice will construct a slice of type SIUS22Resources
func NewSIUS22ResourcesSlice(input hl7.HL7Type) []SIUS22Resources {
	values := make([]SIUS22Resources, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS22Resources(input.Index(i))
	}
	return values
}

// NewORDO04Response creates an implementation of ORDO04Response
func NewORDO04Response(input hl7.HL7Type) ORDO04Response {
	v := ORDO04Response{}
	v.Patient = NewORDO04Patient(input.Index(0))
	v.OrderDiet = NewORDO04OrderDietSlice(input.Index(1))
	v.OrderTray = NewORDO04OrderTraySlice(input.Index(2))
	return v
}

type ORDO04Response struct {
	Patient   ORDO04Patient
	OrderDiet []ORDO04OrderDiet
	OrderTray []ORDO04OrderTray
}

// NewORDO04ResponseSlice will construct a slice of type ORDO04Response
func NewORDO04ResponseSlice(input hl7.HL7Type) []ORDO04Response {
	values := make([]ORDO04Response, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORDO04Response(input.Index(i))
	}
	return values
}

// NewORPO10Patient creates an implementation of ORPO10Patient
func NewORPO10Patient(input hl7.HL7Type) ORPO10Patient {
	v := ORPO10Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type ORPO10Patient struct {
	PatientIdentification PID
	NotesAndComments      []NTE
}

// NewORPO10PatientSlice will construct a slice of type ORPO10Patient
func NewORPO10PatientSlice(input hl7.HL7Type) []ORPO10Patient {
	values := make([]ORPO10Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORPO10Patient(input.Index(i))
	}
	return values
}

// NewBARP05Procedure creates an implementation of BARP05Procedure
func NewBARP05Procedure(input hl7.HL7Type) BARP05Procedure {
	v := BARP05Procedure{}
	v.Procedures = NewPR1(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.Role = NewROLSlice(input.Index(2))
	return v
}

type BARP05Procedure struct {
	Procedures               PR1
	ParticipationInformation []PRT
	Role                     []ROL
}

// NewBARP05ProcedureSlice will construct a slice of type BARP05Procedure
func NewBARP05ProcedureSlice(input hl7.HL7Type) []BARP05Procedure {
	values := make([]BARP05Procedure, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewBARP05Procedure(input.Index(i))
	}
	return values
}

// NewADTA28Procedure creates an implementation of ADTA28Procedure
func NewADTA28Procedure(input hl7.HL7Type) ADTA28Procedure {
	v := ADTA28Procedure{}
	v.Procedures = NewPR1(input.Index(0))
	v.Role = NewROLSlice(input.Index(1))
	return v
}

type ADTA28Procedure struct {
	Procedures PR1
	Role       []ROL
}

// NewADTA28ProcedureSlice will construct a slice of type ADTA28Procedure
func NewADTA28ProcedureSlice(input hl7.HL7Type) []ADTA28Procedure {
	values := make([]ADTA28Procedure, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewADTA28Procedure(input.Index(i))
	}
	return values
}

// NewDRCO47DonorRegistration creates an implementation of DRCO47DonorRegistration
func NewDRCO47DonorRegistration(input hl7.HL7Type) DRCO47DonorRegistration {
	v := DRCO47DonorRegistration{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type DRCO47DonorRegistration struct {
	PatientVisit     PV1
	NotesAndComments []NTE
}

// NewDRCO47DonorRegistrationSlice will construct a slice of type DRCO47DonorRegistration
func NewDRCO47DonorRegistrationSlice(input hl7.HL7Type) []DRCO47DonorRegistration {
	values := make([]DRCO47DonorRegistration, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewDRCO47DonorRegistration(input.Index(i))
	}
	return values
}

// NewORBO28Order creates an implementation of ORBO28Order
func NewORBO28Order(input hl7.HL7Type) ORBO28Order {
	v := ORBO28Order{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.Timing = NewORBO28TimingSlice(input.Index(2))
	v.BloodProductOrder = NewBPO(input.Index(3))
	return v
}

type ORBO28Order struct {
	CommonOrder              ORC
	ParticipationInformation []PRT
	Timing                   []ORBO28Timing
	BloodProductOrder        BPO
}

// NewORBO28OrderSlice will construct a slice of type ORBO28Order
func NewORBO28OrderSlice(input hl7.HL7Type) []ORBO28Order {
	values := make([]ORBO28Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORBO28Order(input.Index(i))
	}
	return values
}

// NewRQAI09Visit creates an implementation of RQAI09Visit
func NewRQAI09Visit(input hl7.HL7Type) RQAI09Visit {
	v := RQAI09Visit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	return v
}

type RQAI09Visit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
}

// NewRQAI09VisitSlice will construct a slice of type RQAI09Visit
func NewRQAI09VisitSlice(input hl7.HL7Type) []RQAI09Visit {
	values := make([]RQAI09Visit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQAI09Visit(input.Index(i))
	}
	return values
}

// NewOMLO21PatientVisit creates an implementation of OMLO21PatientVisit
func NewOMLO21PatientVisit(input hl7.HL7Type) OMLO21PatientVisit {
	v := OMLO21PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	return v
}

type OMLO21PatientVisit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ParticipationInformation          []PRT
}

// NewOMLO21PatientVisitSlice will construct a slice of type OMLO21PatientVisit
func NewOMLO21PatientVisitSlice(input hl7.HL7Type) []OMLO21PatientVisit {
	values := make([]OMLO21PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO21PatientVisit(input.Index(i))
	}
	return values
}

// NewPPRPC1PatientVisit creates an implementation of PPRPC1PatientVisit
func NewPPRPC1PatientVisit(input hl7.HL7Type) PPRPC1PatientVisit {
	v := PPRPC1PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	return v
}

type PPRPC1PatientVisit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
}

// NewPPRPC1PatientVisitSlice will construct a slice of type PPRPC1PatientVisit
func NewPPRPC1PatientVisitSlice(input hl7.HL7Type) []PPRPC1PatientVisit {
	values := make([]PPRPC1PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPRPC1PatientVisit(input.Index(i))
	}
	return values
}

// NewCRMC07Patient creates an implementation of CRMC07Patient
func NewCRMC07Patient(input hl7.HL7Type) CRMC07Patient {
	v := CRMC07Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.AccessRestriction = NewARVSlice(input.Index(2))
	v.PatientVisit = NewCRMC07PatientVisit(input.Index(3))
	v.ClinicalStudyRegistration = NewCSR(input.Index(4))
	v.ClinicalStudyPhase = NewCSPSlice(input.Index(5))
	return v
}

type CRMC07Patient struct {
	PatientIdentification     PID
	ParticipationInformation  []PRT
	AccessRestriction         []ARV
	PatientVisit              CRMC07PatientVisit
	ClinicalStudyRegistration CSR
	ClinicalStudyPhase        []CSP
}

// NewCRMC07PatientSlice will construct a slice of type CRMC07Patient
func NewCRMC07PatientSlice(input hl7.HL7Type) []CRMC07Patient {
	values := make([]CRMC07Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCRMC07Patient(input.Index(i))
	}
	return values
}

// NewEHCE15PaymentRemittanceHeaderInfo creates an implementation of EHCE15PaymentRemittanceHeaderInfo
func NewEHCE15PaymentRemittanceHeaderInfo(input hl7.HL7Type) EHCE15PaymentRemittanceHeaderInfo {
	v := EHCE15PaymentRemittanceHeaderInfo{}
	v.PaymentInformation = NewPMTSlice(input.Index(0))
	v.PayeeInformation = NewPYE(input.Index(1))
	return v
}

type EHCE15PaymentRemittanceHeaderInfo struct {
	PaymentInformation []PMT
	PayeeInformation   PYE
}

// NewEHCE15PaymentRemittanceHeaderInfoSlice will construct a slice of type EHCE15PaymentRemittanceHeaderInfo
func NewEHCE15PaymentRemittanceHeaderInfoSlice(input hl7.HL7Type) []EHCE15PaymentRemittanceHeaderInfo {
	values := make([]EHCE15PaymentRemittanceHeaderInfo, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewEHCE15PaymentRemittanceHeaderInfo(input.Index(i))
	}
	return values
}

// NewRDEO11Component creates an implementation of RDEO11Component
func NewRDEO11Component(input hl7.HL7Type) RDEO11Component {
	v := RDEO11Component{}
	v.PharmacyTreatmentComponentOrder = NewRXC(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type RDEO11Component struct {
	PharmacyTreatmentComponentOrder RXC
	NotesAndComments                []NTE
}

// NewRDEO11ComponentSlice will construct a slice of type RDEO11Component
func NewRDEO11ComponentSlice(input hl7.HL7Type) []RDEO11Component {
	values := make([]RDEO11Component, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRDEO11Component(input.Index(i))
	}
	return values
}

// NewOMLO33SpecimenObservation creates an implementation of OMLO33SpecimenObservation
func NewOMLO33SpecimenObservation(input hl7.HL7Type) OMLO33SpecimenObservation {
	v := OMLO33SpecimenObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type OMLO33SpecimenObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewOMLO33SpecimenObservationSlice will construct a slice of type OMLO33SpecimenObservation
func NewOMLO33SpecimenObservationSlice(input hl7.HL7Type) []OMLO33SpecimenObservation {
	values := make([]OMLO33SpecimenObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO33SpecimenObservation(input.Index(i))
	}
	return values
}

// NewRSPZ82Visit creates an implementation of RSPZ82Visit
func NewRSPZ82Visit(input hl7.HL7Type) RSPZ82Visit {
	v := RSPZ82Visit{}
	v.PatientAllergyInformation = NewAL1Slice(input.Index(0))
	v.PatientVisit = NewPV1(input.Index(1))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(2))
	return v
}

type RSPZ82Visit struct {
	PatientAllergyInformation         []AL1
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
}

// NewRSPZ82VisitSlice will construct a slice of type RSPZ82Visit
func NewRSPZ82VisitSlice(input hl7.HL7Type) []RSPZ82Visit {
	values := make([]RSPZ82Visit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPZ82Visit(input.Index(i))
	}
	return values
}

// NewMDMT04CommonOrder creates an implementation of MDMT04CommonOrder
func NewMDMT04CommonOrder(input hl7.HL7Type) MDMT04CommonOrder {
	v := MDMT04CommonOrder{}
	v.CommonOrder = NewORC(input.Index(0))
	v.Timing = NewMDMT04TimingSlice(input.Index(1))
	v.ObservationRequest = NewOBR(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	return v
}

type MDMT04CommonOrder struct {
	CommonOrder        ORC
	Timing             []MDMT04Timing
	ObservationRequest OBR
	NotesAndComments   []NTE
}

// NewMDMT04CommonOrderSlice will construct a slice of type MDMT04CommonOrder
func NewMDMT04CommonOrderSlice(input hl7.HL7Type) []MDMT04CommonOrder {
	values := make([]MDMT04CommonOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMDMT04CommonOrder(input.Index(i))
	}
	return values
}

// NewRRAO18Patient creates an implementation of RRAO18Patient
func NewRRAO18Patient(input hl7.HL7Type) RRAO18Patient {
	v := RRAO18Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type RRAO18Patient struct {
	PatientIdentification PID
	NotesAndComments      []NTE
}

// NewRRAO18PatientSlice will construct a slice of type RRAO18Patient
func NewRRAO18PatientSlice(input hl7.HL7Type) []RRAO18Patient {
	values := make([]RRAO18Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRRAO18Patient(input.Index(i))
	}
	return values
}

// NewPPPPCBGoalRole creates an implementation of PPPPCBGoalRole
func NewPPPPCBGoalRole(input hl7.HL7Type) PPPPCBGoalRole {
	v := PPPPCBGoalRole{}
	v.Role = NewROL(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type PPPPCBGoalRole struct {
	Role     ROL
	Variance []VAR
}

// NewPPPPCBGoalRoleSlice will construct a slice of type PPPPCBGoalRole
func NewPPPPCBGoalRoleSlice(input hl7.HL7Type) []PPPPCBGoalRole {
	values := make([]PPPPCBGoalRole, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPPPCBGoalRole(input.Index(i))
	}
	return values
}

// NewMDMT02Observation creates an implementation of MDMT02Observation
func NewMDMT02Observation(input hl7.HL7Type) MDMT02Observation {
	v := MDMT02Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type MDMT02Observation struct {
	ObservationResult OBX
	NotesAndComments  []NTE
}

// NewMDMT02ObservationSlice will construct a slice of type MDMT02Observation
func NewMDMT02ObservationSlice(input hl7.HL7Type) []MDMT02Observation {
	values := make([]MDMT02Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMDMT02Observation(input.Index(i))
	}
	return values
}

// NewCCRI17MedicationHistory creates an implementation of CCRI17MedicationHistory
func NewCCRI17MedicationHistory(input hl7.HL7Type) CCRI17MedicationHistory {
	v := CCRI17MedicationHistory{}
	v.CommonOrder = NewORC(input.Index(0))
	v.MedicationOrderDetail = NewCCRI17MedicationOrderDetail(input.Index(1))
	v.MedicationEncodingDetail = NewCCRI17MedicationEncodingDetail(input.Index(2))
	v.MedicationAdministrationDetail = NewCCRI17MedicationAdministrationDetailSlice(input.Index(3))
	v.ClinicalTrialIdentification = NewCTISlice(input.Index(4))
	return v
}

type CCRI17MedicationHistory struct {
	CommonOrder                    ORC
	MedicationOrderDetail          CCRI17MedicationOrderDetail
	MedicationEncodingDetail       CCRI17MedicationEncodingDetail
	MedicationAdministrationDetail []CCRI17MedicationAdministrationDetail
	ClinicalTrialIdentification    []CTI
}

// NewCCRI17MedicationHistorySlice will construct a slice of type CCRI17MedicationHistory
func NewCCRI17MedicationHistorySlice(input hl7.HL7Type) []CCRI17MedicationHistory {
	values := make([]CCRI17MedicationHistory, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI17MedicationHistory(input.Index(i))
	}
	return values
}

// NewOMLO39PatientVisit creates an implementation of OMLO39PatientVisit
func NewOMLO39PatientVisit(input hl7.HL7Type) OMLO39PatientVisit {
	v := OMLO39PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	return v
}

type OMLO39PatientVisit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ParticipationInformation          []PRT
}

// NewOMLO39PatientVisitSlice will construct a slice of type OMLO39PatientVisit
func NewOMLO39PatientVisitSlice(input hl7.HL7Type) []OMLO39PatientVisit {
	values := make([]OMLO39PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO39PatientVisit(input.Index(i))
	}
	return values
}

// NewORUR40Patient creates an implementation of ORUR40Patient
func NewORUR40Patient(input hl7.HL7Type) ORUR40Patient {
	v := ORUR40Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	v.NextOfKinAssociatedParties = NewNK1Slice(input.Index(4))
	v.AccessRestriction = NewARVSlice(input.Index(5))
	v.PatientObservation = NewORUR40PatientObservationSlice(input.Index(6))
	v.Visit = NewORUR40Visit(input.Index(7))
	return v
}

type ORUR40Patient struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	ParticipationInformation     []PRT
	NotesAndComments             []NTE
	NextOfKinAssociatedParties   []NK1
	AccessRestriction            []ARV
	PatientObservation           []ORUR40PatientObservation
	Visit                        ORUR40Visit
}

// NewORUR40PatientSlice will construct a slice of type ORUR40Patient
func NewORUR40PatientSlice(input hl7.HL7Type) []ORUR40Patient {
	values := make([]ORUR40Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORUR40Patient(input.Index(i))
	}
	return values
}

// NewEARU08SpecimenContainer creates an implementation of EARU08SpecimenContainer
func NewEARU08SpecimenContainer(input hl7.HL7Type) EARU08SpecimenContainer {
	v := EARU08SpecimenContainer{}
	v.SpecimenContainerDetail = NewSAC(input.Index(0))
	v.Specimen = NewSPMSlice(input.Index(1))
	return v
}

type EARU08SpecimenContainer struct {
	SpecimenContainerDetail SAC
	Specimen                []SPM
}

// NewEARU08SpecimenContainerSlice will construct a slice of type EARU08SpecimenContainer
func NewEARU08SpecimenContainerSlice(input hl7.HL7Type) []EARU08SpecimenContainer {
	values := make([]EARU08SpecimenContainer, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewEARU08SpecimenContainer(input.Index(i))
	}
	return values
}

// NewORLO36SpecimenObservation creates an implementation of ORLO36SpecimenObservation
func NewORLO36SpecimenObservation(input hl7.HL7Type) ORLO36SpecimenObservation {
	v := ORLO36SpecimenObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type ORLO36SpecimenObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewORLO36SpecimenObservationSlice will construct a slice of type ORLO36SpecimenObservation
func NewORLO36SpecimenObservationSlice(input hl7.HL7Type) []ORLO36SpecimenObservation {
	values := make([]ORLO36SpecimenObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORLO36SpecimenObservation(input.Index(i))
	}
	return values
}

// NewCSUC12CommonOrder creates an implementation of CSUC12CommonOrder
func NewCSUC12CommonOrder(input hl7.HL7Type) CSUC12CommonOrder {
	v := CSUC12CommonOrder{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CSUC12CommonOrder struct {
	CommonOrder              ORC
	ParticipationInformation []PRT
}

// NewCSUC12CommonOrderSlice will construct a slice of type CSUC12CommonOrder
func NewCSUC12CommonOrderSlice(input hl7.HL7Type) []CSUC12CommonOrder {
	values := make([]CSUC12CommonOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCSUC12CommonOrder(input.Index(i))
	}
	return values
}

// NewOPLO37ObservationsOnPatient creates an implementation of OPLO37ObservationsOnPatient
func NewOPLO37ObservationsOnPatient(input hl7.HL7Type) OPLO37ObservationsOnPatient {
	v := OPLO37ObservationsOnPatient{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type OPLO37ObservationsOnPatient struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewOPLO37ObservationsOnPatientSlice will construct a slice of type OPLO37ObservationsOnPatient
func NewOPLO37ObservationsOnPatientSlice(input hl7.HL7Type) []OPLO37ObservationsOnPatient {
	values := make([]OPLO37ObservationsOnPatient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOPLO37ObservationsOnPatient(input.Index(i))
	}
	return values
}

// NewCCII22ClinicalHistory creates an implementation of CCII22ClinicalHistory
func NewCCII22ClinicalHistory(input hl7.HL7Type) CCII22ClinicalHistory {
	v := CCII22ClinicalHistory{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ClinicalHistoryDetail = NewCCII22ClinicalHistoryDetailSlice(input.Index(1))
	v.RoleClinicalHistory = NewCCII22RoleClinicalHistorySlice(input.Index(2))
	v.ClinicalTrialIdentification = NewCTISlice(input.Index(3))
	return v
}

type CCII22ClinicalHistory struct {
	CommonOrder                 ORC
	ClinicalHistoryDetail       []CCII22ClinicalHistoryDetail
	RoleClinicalHistory         []CCII22RoleClinicalHistory
	ClinicalTrialIdentification []CTI
}

// NewCCII22ClinicalHistorySlice will construct a slice of type CCII22ClinicalHistory
func NewCCII22ClinicalHistorySlice(input hl7.HL7Type) []CCII22ClinicalHistory {
	values := make([]CCII22ClinicalHistory, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCII22ClinicalHistory(input.Index(i))
	}
	return values
}

// NewADTA07Insurance creates an implementation of ADTA07Insurance
func NewADTA07Insurance(input hl7.HL7Type) ADTA07Insurance {
	v := ADTA07Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3Slice(input.Index(2))
	v.Role = NewROLSlice(input.Index(3))
	return v
}

type ADTA07Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification []IN3
	Role                                        []ROL
}

// NewADTA07InsuranceSlice will construct a slice of type ADTA07Insurance
func NewADTA07InsuranceSlice(input hl7.HL7Type) []ADTA07Insurance {
	values := make([]ADTA07Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewADTA07Insurance(input.Index(i))
	}
	return values
}

// NewMFNM16MaterialLocation creates an implementation of MFNM16MaterialLocation
func NewMFNM16MaterialLocation(input hl7.HL7Type) MFNM16MaterialLocation {
	v := MFNM16MaterialLocation{}
	v.MaterialLocation = NewIVT(input.Index(0))
	v.MaterialLot = NewILTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type MFNM16MaterialLocation struct {
	MaterialLocation IVT
	MaterialLot      []ILT
	NotesAndComments []NTE
}

// NewMFNM16MaterialLocationSlice will construct a slice of type MFNM16MaterialLocation
func NewMFNM16MaterialLocationSlice(input hl7.HL7Type) []MFNM16MaterialLocation {
	values := make([]MFNM16MaterialLocation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMFNM16MaterialLocation(input.Index(i))
	}
	return values
}

// NewMDMT10CommonOrder creates an implementation of MDMT10CommonOrder
func NewMDMT10CommonOrder(input hl7.HL7Type) MDMT10CommonOrder {
	v := MDMT10CommonOrder{}
	v.CommonOrder = NewORC(input.Index(0))
	v.Timing = NewMDMT10TimingSlice(input.Index(1))
	v.ObservationRequest = NewOBR(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	return v
}

type MDMT10CommonOrder struct {
	CommonOrder        ORC
	Timing             []MDMT10Timing
	ObservationRequest OBR
	NotesAndComments   []NTE
}

// NewMDMT10CommonOrderSlice will construct a slice of type MDMT10CommonOrder
func NewMDMT10CommonOrderSlice(input hl7.HL7Type) []MDMT10CommonOrder {
	values := make([]MDMT10CommonOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMDMT10CommonOrder(input.Index(i))
	}
	return values
}

// NewCCRI17ResourceObject creates an implementation of CCRI17ResourceObject
func NewCCRI17ResourceObject(input hl7.HL7Type) CCRI17ResourceObject {
	v := CCRI17ResourceObject{}
	v.AppointmentInformation = NewAIS(input.Index(0))
	v.AppointmentInformationGeneralResource = NewAIG(input.Index(1))
	v.AppointmentInformationLocationResource = NewAIL(input.Index(2))
	v.AppointmentInformationPersonnelResource = NewAIP(input.Index(3))
	return v
}

type CCRI17ResourceObject struct {
	AppointmentInformation                  AIS
	AppointmentInformationGeneralResource   AIG
	AppointmentInformationLocationResource  AIL
	AppointmentInformationPersonnelResource AIP
}

// NewCCRI17ResourceObjectSlice will construct a slice of type CCRI17ResourceObject
func NewCCRI17ResourceObjectSlice(input hl7.HL7Type) []CCRI17ResourceObject {
	values := make([]CCRI17ResourceObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI17ResourceObject(input.Index(i))
	}
	return values
}

// NewORLO22Timing creates an implementation of ORLO22Timing
func NewORLO22Timing(input hl7.HL7Type) ORLO22Timing {
	v := ORLO22Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type ORLO22Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewORLO22TimingSlice will construct a slice of type ORLO22Timing
func NewORLO22TimingSlice(input hl7.HL7Type) []ORLO22Timing {
	values := make([]ORLO22Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORLO22Timing(input.Index(i))
	}
	return values
}

// NewEHCE01PatientInfo creates an implementation of EHCE01PatientInfo
func NewEHCE01PatientInfo(input hl7.HL7Type) EHCE01PatientInfo {
	v := EHCE01PatientInfo{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientVisit = NewPV1(input.Index(1))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(2))
	v.Accident = NewACCSlice(input.Index(3))
	v.Insurance = NewEHCE01InsuranceSlice(input.Index(4))
	v.Diagnosis = NewEHCE01DiagnosisSlice(input.Index(5))
	v.ObservationResult = NewOBXSlice(input.Index(6))
	return v
}

type EHCE01PatientInfo struct {
	PatientIdentification             PID
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	Accident                          []ACC
	Insurance                         []EHCE01Insurance
	Diagnosis                         []EHCE01Diagnosis
	ObservationResult                 []OBX
}

// NewEHCE01PatientInfoSlice will construct a slice of type EHCE01PatientInfo
func NewEHCE01PatientInfoSlice(input hl7.HL7Type) []EHCE01PatientInfo {
	values := make([]EHCE01PatientInfo, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewEHCE01PatientInfo(input.Index(i))
	}
	return values
}

// NewOPRO38Timing creates an implementation of OPRO38Timing
func NewOPRO38Timing(input hl7.HL7Type) OPRO38Timing {
	v := OPRO38Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type OPRO38Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewOPRO38TimingSlice will construct a slice of type OPRO38Timing
func NewOPRO38TimingSlice(input hl7.HL7Type) []OPRO38Timing {
	values := make([]OPRO38Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOPRO38Timing(input.Index(i))
	}
	return values
}

// NewCCRI16PatientVisits creates an implementation of CCRI16PatientVisits
func NewCCRI16PatientVisits(input hl7.HL7Type) CCRI16PatientVisits {
	v := CCRI16PatientVisits{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	return v
}

type CCRI16PatientVisits struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
}

// NewCCRI16PatientVisitsSlice will construct a slice of type CCRI16PatientVisits
func NewCCRI16PatientVisitsSlice(input hl7.HL7Type) []CCRI16PatientVisits {
	values := make([]CCRI16PatientVisits, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI16PatientVisits(input.Index(i))
	}
	return values
}

// NewRRGO16TimingGive creates an implementation of RRGO16TimingGive
func NewRRGO16TimingGive(input hl7.HL7Type) RRGO16TimingGive {
	v := RRGO16TimingGive{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type RRGO16TimingGive struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewRRGO16TimingGiveSlice will construct a slice of type RRGO16TimingGive
func NewRRGO16TimingGiveSlice(input hl7.HL7Type) []RRGO16TimingGive {
	values := make([]RRGO16TimingGive, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRRGO16TimingGive(input.Index(i))
	}
	return values
}

// NewRSPK24QueryResponse creates an implementation of RSPK24QueryResponse
func NewRSPK24QueryResponse(input hl7.HL7Type) RSPK24QueryResponse {
	v := RSPK24QueryResponse{}
	v.PatientIdentification = NewPID(input.Index(0))
	return v
}

type RSPK24QueryResponse struct {
	PatientIdentification PID
}

// NewRSPK24QueryResponseSlice will construct a slice of type RSPK24QueryResponse
func NewRSPK24QueryResponseSlice(input hl7.HL7Type) []RSPK24QueryResponse {
	values := make([]RSPK24QueryResponse, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPK24QueryResponse(input.Index(i))
	}
	return values
}

// NewCQUI19PathwayObservation creates an implementation of CQUI19PathwayObservation
func NewCQUI19PathwayObservation(input hl7.HL7Type) CQUI19PathwayObservation {
	v := CQUI19PathwayObservation{}
	v.ObservationResult = NewOBXSlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CQUI19PathwayObservation struct {
	ObservationResult        []OBX
	ParticipationInformation []PRT
}

// NewCQUI19PathwayObservationSlice will construct a slice of type CQUI19PathwayObservation
func NewCQUI19PathwayObservationSlice(input hl7.HL7Type) []CQUI19PathwayObservation {
	values := make([]CQUI19PathwayObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCQUI19PathwayObservation(input.Index(i))
	}
	return values
}

// NewOMPO09PatientVisit creates an implementation of OMPO09PatientVisit
func NewOMPO09PatientVisit(input hl7.HL7Type) OMPO09PatientVisit {
	v := OMPO09PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.AccessRestriction = NewARVSlice(input.Index(3))
	return v
}

type OMPO09PatientVisit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ParticipationInformation          []PRT
	AccessRestriction                 []ARV
}

// NewOMPO09PatientVisitSlice will construct a slice of type OMPO09PatientVisit
func NewOMPO09PatientVisitSlice(input hl7.HL7Type) []OMPO09PatientVisit {
	values := make([]OMPO09PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMPO09PatientVisit(input.Index(i))
	}
	return values
}

// NewCCMI21PathwayObservation creates an implementation of CCMI21PathwayObservation
func NewCCMI21PathwayObservation(input hl7.HL7Type) CCMI21PathwayObservation {
	v := CCMI21PathwayObservation{}
	v.ObservationResult = NewOBXSlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CCMI21PathwayObservation struct {
	ObservationResult        []OBX
	ParticipationInformation []PRT
}

// NewCCMI21PathwayObservationSlice will construct a slice of type CCMI21PathwayObservation
func NewCCMI21PathwayObservationSlice(input hl7.HL7Type) []CCMI21PathwayObservation {
	values := make([]CCMI21PathwayObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCMI21PathwayObservation(input.Index(i))
	}
	return values
}

// NewCCII22RolePathway creates an implementation of CCII22RolePathway
func NewCCII22RolePathway(input hl7.HL7Type) CCII22RolePathway {
	v := CCII22RolePathway{}
	v.RolePathwayObject = NewCCII22RolePathwayObject(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type CCII22RolePathway struct {
	RolePathwayObject CCII22RolePathwayObject
	Variance          []VAR
}

// NewCCII22RolePathwaySlice will construct a slice of type CCII22RolePathway
func NewCCII22RolePathwaySlice(input hl7.HL7Type) []CCII22RolePathway {
	values := make([]CCII22RolePathway, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCII22RolePathway(input.Index(i))
	}
	return values
}

// NewRRGO16Give creates an implementation of RRGO16Give
func NewRRGO16Give(input hl7.HL7Type) RRGO16Give {
	v := RRGO16Give{}
	v.PharmacyTreatmentGive = NewRXG(input.Index(0))
	v.TimingGive = NewRRGO16TimingGiveSlice(input.Index(1))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(2))
	v.PharmacyTreatmentComponentOrder = NewRXCSlice(input.Index(3))
	return v
}

type RRGO16Give struct {
	PharmacyTreatmentGive           RXG
	TimingGive                      []RRGO16TimingGive
	PharmacyTreatmentRoute          []RXR
	PharmacyTreatmentComponentOrder []RXC
}

// NewRRGO16GiveSlice will construct a slice of type RRGO16Give
func NewRRGO16GiveSlice(input hl7.HL7Type) []RRGO16Give {
	values := make([]RRGO16Give, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRRGO16Give(input.Index(i))
	}
	return values
}

// NewSRMS07Service creates an implementation of SRMS07Service
func NewSRMS07Service(input hl7.HL7Type) SRMS07Service {
	v := SRMS07Service{}
	v.AppointmentInformation = NewAIS(input.Index(0))
	v.AppointmentPreferences = NewAPR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type SRMS07Service struct {
	AppointmentInformation AIS
	AppointmentPreferences APR
	NotesAndComments       []NTE
}

// NewSRMS07ServiceSlice will construct a slice of type SRMS07Service
func NewSRMS07ServiceSlice(input hl7.HL7Type) []SRMS07Service {
	values := make([]SRMS07Service, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS07Service(input.Index(i))
	}
	return values
}

// NewSIUS13PersonnelResource creates an implementation of SIUS13PersonnelResource
func NewSIUS13PersonnelResource(input hl7.HL7Type) SIUS13PersonnelResource {
	v := SIUS13PersonnelResource{}
	v.AppointmentInformationPersonnelResource = NewAIP(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS13PersonnelResource struct {
	AppointmentInformationPersonnelResource AIP
	NotesAndComments                        []NTE
}

// NewSIUS13PersonnelResourceSlice will construct a slice of type SIUS13PersonnelResource
func NewSIUS13PersonnelResourceSlice(input hl7.HL7Type) []SIUS13PersonnelResource {
	values := make([]SIUS13PersonnelResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS13PersonnelResource(input.Index(i))
	}
	return values
}

// NewPGLPC7GoalRole creates an implementation of PGLPC7GoalRole
func NewPGLPC7GoalRole(input hl7.HL7Type) PGLPC7GoalRole {
	v := PGLPC7GoalRole{}
	v.Role = NewROL(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type PGLPC7GoalRole struct {
	Role     ROL
	Variance []VAR
}

// NewPGLPC7GoalRoleSlice will construct a slice of type PGLPC7GoalRole
func NewPGLPC7GoalRoleSlice(input hl7.HL7Type) []PGLPC7GoalRole {
	values := make([]PGLPC7GoalRole, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPGLPC7GoalRole(input.Index(i))
	}
	return values
}

// NewCCUI20PatientVisits creates an implementation of CCUI20PatientVisits
func NewCCUI20PatientVisits(input hl7.HL7Type) CCUI20PatientVisits {
	v := CCUI20PatientVisits{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	return v
}

type CCUI20PatientVisits struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
}

// NewCCUI20PatientVisitsSlice will construct a slice of type CCUI20PatientVisits
func NewCCUI20PatientVisitsSlice(input hl7.HL7Type) []CCUI20PatientVisits {
	values := make([]CCUI20PatientVisits, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCUI20PatientVisits(input.Index(i))
	}
	return values
}

// NewOMLO35PatientVisit creates an implementation of OMLO35PatientVisit
func NewOMLO35PatientVisit(input hl7.HL7Type) OMLO35PatientVisit {
	v := OMLO35PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	return v
}

type OMLO35PatientVisit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ParticipationInformation          []PRT
}

// NewOMLO35PatientVisitSlice will construct a slice of type OMLO35PatientVisit
func NewOMLO35PatientVisitSlice(input hl7.HL7Type) []OMLO35PatientVisit {
	values := make([]OMLO35PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO35PatientVisit(input.Index(i))
	}
	return values
}

// NewRDRRDRDispense creates an implementation of RDRRDRDispense
func NewRDRRDRDispense(input hl7.HL7Type) RDRRDRDispense {
	v := RDRRDRDispense{}
	v.PharmacyTreatmentDispense = NewRXD(input.Index(0))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(1))
	v.PharmacyTreatmentComponentOrder = NewRXCSlice(input.Index(2))
	return v
}

type RDRRDRDispense struct {
	PharmacyTreatmentDispense       RXD
	PharmacyTreatmentRoute          []RXR
	PharmacyTreatmentComponentOrder []RXC
}

// NewRDRRDRDispenseSlice will construct a slice of type RDRRDRDispense
func NewRDRRDRDispenseSlice(input hl7.HL7Type) []RDRRDRDispense {
	values := make([]RDRRDRDispense, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRDRRDRDispense(input.Index(i))
	}
	return values
}

// NewMDMT06Timing creates an implementation of MDMT06Timing
func NewMDMT06Timing(input hl7.HL7Type) MDMT06Timing {
	v := MDMT06Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type MDMT06Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewMDMT06TimingSlice will construct a slice of type MDMT06Timing
func NewMDMT06TimingSlice(input hl7.HL7Type) []MDMT06Timing {
	values := make([]MDMT06Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMDMT06Timing(input.Index(i))
	}
	return values
}

// NewRDEO11Order creates an implementation of RDEO11Order
func NewRDEO11Order(input hl7.HL7Type) RDEO11Order {
	v := RDEO11Order{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.Timing = NewRDEO11TimingSlice(input.Index(2))
	v.OrderDetail = NewRDEO11OrderDetail(input.Index(3))
	v.PharmacyTreatmentEncodedOrder = NewRXE(input.Index(4))
	v.AdditionalParticipationInformation = NewPRTSlice(input.Index(5))
	v.NotesAndComments = NewNTESlice(input.Index(6))
	v.TimingEncoded = NewRDEO11TimingEncodedSlice(input.Index(7))
	v.InfusionOrder = NewRDEO11InfusionOrder(input.Index(8))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(9))
	v.PharmacyTreatmentComponentOrder = NewRXCSlice(input.Index(10))
	v.CumulativeDosage = NewCDOSlice(input.Index(11))
	v.Observation = NewRDEO11ObservationSlice(input.Index(12))
	v.FinancialTransaction = NewFT1Slice(input.Index(13))
	v.Billing = NewBLG(input.Index(14))
	v.ClinicalTrialIdentification = NewCTISlice(input.Index(15))
	return v
}

type RDEO11Order struct {
	CommonOrder                        ORC
	ParticipationInformation           []PRT
	Timing                             []RDEO11Timing
	OrderDetail                        RDEO11OrderDetail
	PharmacyTreatmentEncodedOrder      RXE
	AdditionalParticipationInformation []PRT
	NotesAndComments                   []NTE
	TimingEncoded                      []RDEO11TimingEncoded
	InfusionOrder                      RDEO11InfusionOrder
	PharmacyTreatmentRoute             []RXR
	PharmacyTreatmentComponentOrder    []RXC
	CumulativeDosage                   []CDO
	Observation                        []RDEO11Observation
	FinancialTransaction               []FT1
	Billing                            BLG
	ClinicalTrialIdentification        []CTI
}

// NewRDEO11OrderSlice will construct a slice of type RDEO11Order
func NewRDEO11OrderSlice(input hl7.HL7Type) []RDEO11Order {
	values := make([]RDEO11Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRDEO11Order(input.Index(i))
	}
	return values
}

// NewCCMI21ResourceObject creates an implementation of CCMI21ResourceObject
func NewCCMI21ResourceObject(input hl7.HL7Type) CCMI21ResourceObject {
	v := CCMI21ResourceObject{}
	v.AppointmentInformation = NewAIS(input.Index(0))
	v.AppointmentInformationGeneralResource = NewAIG(input.Index(1))
	v.AppointmentInformationLocationResource = NewAIL(input.Index(2))
	v.AppointmentInformationPersonnelResource = NewAIP(input.Index(3))
	return v
}

type CCMI21ResourceObject struct {
	AppointmentInformation                  AIS
	AppointmentInformationGeneralResource   AIG
	AppointmentInformationLocationResource  AIL
	AppointmentInformationPersonnelResource AIP
}

// NewCCMI21ResourceObjectSlice will construct a slice of type CCMI21ResourceObject
func NewCCMI21ResourceObjectSlice(input hl7.HL7Type) []CCMI21ResourceObject {
	values := make([]CCMI21ResourceObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCMI21ResourceObject(input.Index(i))
	}
	return values
}

// NewPPGPCJOrderObservation creates an implementation of PPGPCJOrderObservation
func NewPPGPCJOrderObservation(input hl7.HL7Type) PPGPCJOrderObservation {
	v := PPGPCJOrderObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.Variance = NewVARSlice(input.Index(3))
	return v
}

type PPGPCJOrderObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
	Variance                 []VAR
}

// NewPPGPCJOrderObservationSlice will construct a slice of type PPGPCJOrderObservation
func NewPPGPCJOrderObservationSlice(input hl7.HL7Type) []PPGPCJOrderObservation {
	values := make([]PPGPCJOrderObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPGPCJOrderObservation(input.Index(i))
	}
	return values
}

// NewSIUS13Resources creates an implementation of SIUS13Resources
func NewSIUS13Resources(input hl7.HL7Type) SIUS13Resources {
	v := SIUS13Resources{}
	v.ResourceGroup = NewRGS(input.Index(0))
	v.Service = NewSIUS13ServiceSlice(input.Index(1))
	v.GeneralResource = NewSIUS13GeneralResourceSlice(input.Index(2))
	v.LocationResource = NewSIUS13LocationResourceSlice(input.Index(3))
	v.PersonnelResource = NewSIUS13PersonnelResourceSlice(input.Index(4))
	return v
}

type SIUS13Resources struct {
	ResourceGroup     RGS
	Service           []SIUS13Service
	GeneralResource   []SIUS13GeneralResource
	LocationResource  []SIUS13LocationResource
	PersonnelResource []SIUS13PersonnelResource
}

// NewSIUS13ResourcesSlice will construct a slice of type SIUS13Resources
func NewSIUS13ResourcesSlice(input hl7.HL7Type) []SIUS13Resources {
	values := make([]SIUS13Resources, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS13Resources(input.Index(i))
	}
	return values
}

// NewSRRS11PersonnelResource creates an implementation of SRRS11PersonnelResource
func NewSRRS11PersonnelResource(input hl7.HL7Type) SRRS11PersonnelResource {
	v := SRRS11PersonnelResource{}
	v.AppointmentInformationPersonnelResource = NewAIP(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SRRS11PersonnelResource struct {
	AppointmentInformationPersonnelResource AIP
	NotesAndComments                        []NTE
}

// NewSRRS11PersonnelResourceSlice will construct a slice of type SRRS11PersonnelResource
func NewSRRS11PersonnelResourceSlice(input hl7.HL7Type) []SRRS11PersonnelResource {
	values := make([]SRRS11PersonnelResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS11PersonnelResource(input.Index(i))
	}
	return values
}

// NewORLO36Order creates an implementation of ORLO36Order
func NewORLO36Order(input hl7.HL7Type) ORLO36Order {
	v := ORLO36Order{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.Timing = NewORLO36TimingSlice(input.Index(2))
	v.ObservationRequest = NewORLO36ObservationRequest(input.Index(3))
	return v
}

type ORLO36Order struct {
	CommonOrder              ORC
	ParticipationInformation []PRT
	Timing                   []ORLO36Timing
	ObservationRequest       ORLO36ObservationRequest
}

// NewORLO36OrderSlice will construct a slice of type ORLO36Order
func NewORLO36OrderSlice(input hl7.HL7Type) []ORLO36Order {
	values := make([]ORLO36Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORLO36Order(input.Index(i))
	}
	return values
}

// NewDFTP11Financial creates an implementation of DFTP11Financial
func NewDFTP11Financial(input hl7.HL7Type) DFTP11Financial {
	v := DFTP11Financial{}
	v.FinancialTransaction = NewFT1(input.Index(0))
	v.FinancialProcedure = NewDFTP11FinancialProcedureSlice(input.Index(1))
	v.FinancialCommonOrder = NewDFTP11FinancialCommonOrderSlice(input.Index(2))
	v.Diagnosis = NewDG1Slice(input.Index(3))
	v.DiagnosisRelatedGroup = NewDRG(input.Index(4))
	v.Guarantor = NewGT1Slice(input.Index(5))
	v.FinancialInsurance = NewDFTP11FinancialInsuranceSlice(input.Index(6))
	return v
}

type DFTP11Financial struct {
	FinancialTransaction  FT1
	FinancialProcedure    []DFTP11FinancialProcedure
	FinancialCommonOrder  []DFTP11FinancialCommonOrder
	Diagnosis             []DG1
	DiagnosisRelatedGroup DRG
	Guarantor             []GT1
	FinancialInsurance    []DFTP11FinancialInsurance
}

// NewDFTP11FinancialSlice will construct a slice of type DFTP11Financial
func NewDFTP11FinancialSlice(input hl7.HL7Type) []DFTP11Financial {
	values := make([]DFTP11Financial, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewDFTP11Financial(input.Index(i))
	}
	return values
}

// NewOMPO09Patient creates an implementation of OMPO09Patient
func NewOMPO09Patient(input hl7.HL7Type) OMPO09Patient {
	v := OMPO09Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.AdditionalDemographics = NewOMPO09AdditionalDemographics(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.AccessRestriction = NewARVSlice(input.Index(3))
	v.PatientVisit = NewOMPO09PatientVisit(input.Index(4))
	v.Insurance = NewOMPO09InsuranceSlice(input.Index(5))
	v.Guarantor = NewGT1(input.Index(6))
	v.PatientAllergyInformation = NewAL1Slice(input.Index(7))
	return v
}

type OMPO09Patient struct {
	PatientIdentification     PID
	AdditionalDemographics    OMPO09AdditionalDemographics
	NotesAndComments          []NTE
	AccessRestriction         []ARV
	PatientVisit              OMPO09PatientVisit
	Insurance                 []OMPO09Insurance
	Guarantor                 GT1
	PatientAllergyInformation []AL1
}

// NewOMPO09PatientSlice will construct a slice of type OMPO09Patient
func NewOMPO09PatientSlice(input hl7.HL7Type) []OMPO09Patient {
	values := make([]OMPO09Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMPO09Patient(input.Index(i))
	}
	return values
}

// NewSIUS13Patient creates an implementation of SIUS13Patient
func NewSIUS13Patient(input hl7.HL7Type) SIUS13Patient {
	v := SIUS13Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.PatientVisit = NewPV1(input.Index(2))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(3))
	v.ObservationResult = NewOBXSlice(input.Index(4))
	v.Diagnosis = NewDG1Slice(input.Index(5))
	return v
}

type SIUS13Patient struct {
	PatientIdentification             PID
	PatientAdditionalDemographic      PD1
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ObservationResult                 []OBX
	Diagnosis                         []DG1
}

// NewSIUS13PatientSlice will construct a slice of type SIUS13Patient
func NewSIUS13PatientSlice(input hl7.HL7Type) []SIUS13Patient {
	values := make([]SIUS13Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS13Patient(input.Index(i))
	}
	return values
}

// NewPPPPCCPathway creates an implementation of PPPPCCPathway
func NewPPPPCCPathway(input hl7.HL7Type) PPPPCCPathway {
	v := PPPPCCPathway{}
	v.Pathway = NewPTH(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Variance = NewVARSlice(input.Index(2))
	v.PathwayRole = NewPPPPCCPathwayRoleSlice(input.Index(3))
	v.Problem = NewPPPPCCProblemSlice(input.Index(4))
	return v
}

type PPPPCCPathway struct {
	Pathway          PTH
	NotesAndComments []NTE
	Variance         []VAR
	PathwayRole      []PPPPCCPathwayRole
	Problem          []PPPPCCProblem
}

// NewPPPPCCPathwaySlice will construct a slice of type PPPPCCPathway
func NewPPPPCCPathwaySlice(input hl7.HL7Type) []PPPPCCPathway {
	values := make([]PPPPCCPathway, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPPPCCPathway(input.Index(i))
	}
	return values
}

// NewPGLPC6Observation creates an implementation of PGLPC6Observation
func NewPGLPC6Observation(input hl7.HL7Type) PGLPC6Observation {
	v := PGLPC6Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type PGLPC6Observation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewPGLPC6ObservationSlice will construct a slice of type PGLPC6Observation
func NewPGLPC6ObservationSlice(input hl7.HL7Type) []PGLPC6Observation {
	values := make([]PGLPC6Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPGLPC6Observation(input.Index(i))
	}
	return values
}

// NewORSO06Patient creates an implementation of ORSO06Patient
func NewORSO06Patient(input hl7.HL7Type) ORSO06Patient {
	v := ORSO06Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.AccessRestriction = NewARVSlice(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	return v
}

type ORSO06Patient struct {
	PatientIdentification    PID
	ParticipationInformation []PRT
	AccessRestriction        []ARV
	NotesAndComments         []NTE
}

// NewORSO06PatientSlice will construct a slice of type ORSO06Patient
func NewORSO06PatientSlice(input hl7.HL7Type) []ORSO06Patient {
	values := make([]ORSO06Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORSO06Patient(input.Index(i))
	}
	return values
}

// NewCCRI17MedicationEncodingObservation creates an implementation of CCRI17MedicationEncodingObservation
func NewCCRI17MedicationEncodingObservation(input hl7.HL7Type) CCRI17MedicationEncodingObservation {
	v := CCRI17MedicationEncodingObservation{}
	v.ObservationResult = NewOBXSlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CCRI17MedicationEncodingObservation struct {
	ObservationResult        []OBX
	ParticipationInformation []PRT
}

// NewCCRI17MedicationEncodingObservationSlice will construct a slice of type CCRI17MedicationEncodingObservation
func NewCCRI17MedicationEncodingObservationSlice(input hl7.HL7Type) []CCRI17MedicationEncodingObservation {
	values := make([]CCRI17MedicationEncodingObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI17MedicationEncodingObservation(input.Index(i))
	}
	return values
}

// NewSIUS22GeneralResource creates an implementation of SIUS22GeneralResource
func NewSIUS22GeneralResource(input hl7.HL7Type) SIUS22GeneralResource {
	v := SIUS22GeneralResource{}
	v.AppointmentInformationGeneralResource = NewAIG(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS22GeneralResource struct {
	AppointmentInformationGeneralResource AIG
	NotesAndComments                      []NTE
}

// NewSIUS22GeneralResourceSlice will construct a slice of type SIUS22GeneralResource
func NewSIUS22GeneralResourceSlice(input hl7.HL7Type) []SIUS22GeneralResource {
	values := make([]SIUS22GeneralResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS22GeneralResource(input.Index(i))
	}
	return values
}

// NewOPUR25Result creates an implementation of OPUR25Result
func NewOPUR25Result(input hl7.HL7Type) OPUR25Result {
	v := OPUR25Result{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type OPUR25Result struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewOPUR25ResultSlice will construct a slice of type OPUR25Result
func NewOPUR25ResultSlice(input hl7.HL7Type) []OPUR25Result {
	values := make([]OPUR25Result, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOPUR25Result(input.Index(i))
	}
	return values
}

// NewRQII02Insurance creates an implementation of RQII02Insurance
func NewRQII02Insurance(input hl7.HL7Type) RQII02Insurance {
	v := RQII02Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3(input.Index(2))
	return v
}

type RQII02Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification IN3
}

// NewRQII02InsuranceSlice will construct a slice of type RQII02Insurance
func NewRQII02InsuranceSlice(input hl7.HL7Type) []RQII02Insurance {
	values := make([]RQII02Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQII02Insurance(input.Index(i))
	}
	return values
}

// NewREFI14ProviderContact creates an implementation of REFI14ProviderContact
func NewREFI14ProviderContact(input hl7.HL7Type) REFI14ProviderContact {
	v := REFI14ProviderContact{}
	v.ProviderData = NewPRD(input.Index(0))
	v.ContactData = NewCTDSlice(input.Index(1))
	return v
}

type REFI14ProviderContact struct {
	ProviderData PRD
	ContactData  []CTD
}

// NewREFI14ProviderContactSlice will construct a slice of type REFI14ProviderContact
func NewREFI14ProviderContactSlice(input hl7.HL7Type) []REFI14ProviderContact {
	values := make([]REFI14ProviderContact, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewREFI14ProviderContact(input.Index(i))
	}
	return values
}

// NewSIUS17LocationResource creates an implementation of SIUS17LocationResource
func NewSIUS17LocationResource(input hl7.HL7Type) SIUS17LocationResource {
	v := SIUS17LocationResource{}
	v.AppointmentInformationLocationResource = NewAIL(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS17LocationResource struct {
	AppointmentInformationLocationResource AIL
	NotesAndComments                       []NTE
}

// NewSIUS17LocationResourceSlice will construct a slice of type SIUS17LocationResource
func NewSIUS17LocationResourceSlice(input hl7.HL7Type) []SIUS17LocationResource {
	values := make([]SIUS17LocationResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS17LocationResource(input.Index(i))
	}
	return values
}

// NewPPGPCHOrderObservation creates an implementation of PPGPCHOrderObservation
func NewPPGPCHOrderObservation(input hl7.HL7Type) PPGPCHOrderObservation {
	v := PPGPCHOrderObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.Variance = NewVARSlice(input.Index(3))
	return v
}

type PPGPCHOrderObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
	Variance                 []VAR
}

// NewPPGPCHOrderObservationSlice will construct a slice of type PPGPCHOrderObservation
func NewPPGPCHOrderObservationSlice(input hl7.HL7Type) []PPGPCHOrderObservation {
	values := make([]PPGPCHOrderObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPGPCHOrderObservation(input.Index(i))
	}
	return values
}

// NewRQII01Provider creates an implementation of RQII01Provider
func NewRQII01Provider(input hl7.HL7Type) RQII01Provider {
	v := RQII01Provider{}
	v.ProviderData = NewPRD(input.Index(0))
	v.ContactData = NewCTDSlice(input.Index(1))
	return v
}

type RQII01Provider struct {
	ProviderData PRD
	ContactData  []CTD
}

// NewRQII01ProviderSlice will construct a slice of type RQII01Provider
func NewRQII01ProviderSlice(input hl7.HL7Type) []RQII01Provider {
	values := make([]RQII01Provider, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQII01Provider(input.Index(i))
	}
	return values
}

// NewCCII22ResourceObject creates an implementation of CCII22ResourceObject
func NewCCII22ResourceObject(input hl7.HL7Type) CCII22ResourceObject {
	v := CCII22ResourceObject{}
	v.AppointmentInformation = NewAIS(input.Index(0))
	v.AppointmentInformationGeneralResource = NewAIG(input.Index(1))
	v.AppointmentInformationLocationResource = NewAIL(input.Index(2))
	v.AppointmentInformationPersonnelResource = NewAIP(input.Index(3))
	return v
}

type CCII22ResourceObject struct {
	AppointmentInformation                  AIS
	AppointmentInformationGeneralResource   AIG
	AppointmentInformationLocationResource  AIL
	AppointmentInformationPersonnelResource AIP
}

// NewCCII22ResourceObjectSlice will construct a slice of type CCII22ResourceObject
func NewCCII22ResourceObjectSlice(input hl7.HL7Type) []CCII22ResourceObject {
	values := make([]CCII22ResourceObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCII22ResourceObject(input.Index(i))
	}
	return values
}

// NewSRMS08Service creates an implementation of SRMS08Service
func NewSRMS08Service(input hl7.HL7Type) SRMS08Service {
	v := SRMS08Service{}
	v.AppointmentInformation = NewAIS(input.Index(0))
	v.AppointmentPreferences = NewAPR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type SRMS08Service struct {
	AppointmentInformation AIS
	AppointmentPreferences APR
	NotesAndComments       []NTE
}

// NewSRMS08ServiceSlice will construct a slice of type SRMS08Service
func NewSRMS08ServiceSlice(input hl7.HL7Type) []SRMS08Service {
	values := make([]SRMS08Service, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS08Service(input.Index(i))
	}
	return values
}

// NewRSPZ88TimingEncoded creates an implementation of RSPZ88TimingEncoded
func NewRSPZ88TimingEncoded(input hl7.HL7Type) RSPZ88TimingEncoded {
	v := RSPZ88TimingEncoded{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type RSPZ88TimingEncoded struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewRSPZ88TimingEncodedSlice will construct a slice of type RSPZ88TimingEncoded
func NewRSPZ88TimingEncodedSlice(input hl7.HL7Type) []RSPZ88TimingEncoded {
	values := make([]RSPZ88TimingEncoded, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPZ88TimingEncoded(input.Index(i))
	}
	return values
}

// NewSRRS07Patient creates an implementation of SRRS07Patient
func NewSRRS07Patient(input hl7.HL7Type) SRRS07Patient {
	v := SRRS07Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientVisit = NewPV1(input.Index(1))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(2))
	v.Diagnosis = NewDG1Slice(input.Index(3))
	return v
}

type SRRS07Patient struct {
	PatientIdentification             PID
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	Diagnosis                         []DG1
}

// NewSRRS07PatientSlice will construct a slice of type SRRS07Patient
func NewSRRS07PatientSlice(input hl7.HL7Type) []SRRS07Patient {
	values := make([]SRRS07Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS07Patient(input.Index(i))
	}
	return values
}

// NewPPRPC2PatientVisit creates an implementation of PPRPC2PatientVisit
func NewPPRPC2PatientVisit(input hl7.HL7Type) PPRPC2PatientVisit {
	v := PPRPC2PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	return v
}

type PPRPC2PatientVisit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
}

// NewPPRPC2PatientVisitSlice will construct a slice of type PPRPC2PatientVisit
func NewPPRPC2PatientVisitSlice(input hl7.HL7Type) []PPRPC2PatientVisit {
	values := make([]PPRPC2PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPRPC2PatientVisit(input.Index(i))
	}
	return values
}

// NewRDEO25TimingEncoded creates an implementation of RDEO25TimingEncoded
func NewRDEO25TimingEncoded(input hl7.HL7Type) RDEO25TimingEncoded {
	v := RDEO25TimingEncoded{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type RDEO25TimingEncoded struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewRDEO25TimingEncodedSlice will construct a slice of type RDEO25TimingEncoded
func NewRDEO25TimingEncodedSlice(input hl7.HL7Type) []RDEO25TimingEncoded {
	values := make([]RDEO25TimingEncoded, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRDEO25TimingEncoded(input.Index(i))
	}
	return values
}

// NewCQUI19MedicationHistory creates an implementation of CQUI19MedicationHistory
func NewCQUI19MedicationHistory(input hl7.HL7Type) CQUI19MedicationHistory {
	v := CQUI19MedicationHistory{}
	v.CommonOrder = NewORC(input.Index(0))
	v.MedicationOrderDetail = NewCQUI19MedicationOrderDetail(input.Index(1))
	v.MedicationEncodingDetail = NewCQUI19MedicationEncodingDetail(input.Index(2))
	v.MedicationAdministrationDetail = NewCQUI19MedicationAdministrationDetailSlice(input.Index(3))
	v.ClinicalTrialIdentification = NewCTISlice(input.Index(4))
	return v
}

type CQUI19MedicationHistory struct {
	CommonOrder                    ORC
	MedicationOrderDetail          CQUI19MedicationOrderDetail
	MedicationEncodingDetail       CQUI19MedicationEncodingDetail
	MedicationAdministrationDetail []CQUI19MedicationAdministrationDetail
	ClinicalTrialIdentification    []CTI
}

// NewCQUI19MedicationHistorySlice will construct a slice of type CQUI19MedicationHistory
func NewCQUI19MedicationHistorySlice(input hl7.HL7Type) []CQUI19MedicationHistory {
	values := make([]CQUI19MedicationHistory, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCQUI19MedicationHistory(input.Index(i))
	}
	return values
}

// NewCQUI19RolePathway creates an implementation of CQUI19RolePathway
func NewCQUI19RolePathway(input hl7.HL7Type) CQUI19RolePathway {
	v := CQUI19RolePathway{}
	v.RolePathwayObject = NewCQUI19RolePathwayObject(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type CQUI19RolePathway struct {
	RolePathwayObject CQUI19RolePathwayObject
	Variance          []VAR
}

// NewCQUI19RolePathwaySlice will construct a slice of type CQUI19RolePathway
func NewCQUI19RolePathwaySlice(input hl7.HL7Type) []CQUI19RolePathway {
	values := make([]CQUI19RolePathway, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCQUI19RolePathway(input.Index(i))
	}
	return values
}

// NewOMQO42PriorResult creates an implementation of OMQO42PriorResult
func NewOMQO42PriorResult(input hl7.HL7Type) OMQO42PriorResult {
	v := OMQO42PriorResult{}
	v.PatientPrior = NewOMQO42PatientPrior(input.Index(0))
	v.PatientVisitPrior = NewOMQO42PatientVisitPrior(input.Index(1))
	v.PatientAllergyInformation = NewAL1Slice(input.Index(2))
	v.OrderPrior = NewOMQO42OrderPriorSlice(input.Index(3))
	return v
}

type OMQO42PriorResult struct {
	PatientPrior              OMQO42PatientPrior
	PatientVisitPrior         OMQO42PatientVisitPrior
	PatientAllergyInformation []AL1
	OrderPrior                []OMQO42OrderPrior
}

// NewOMQO42PriorResultSlice will construct a slice of type OMQO42PriorResult
func NewOMQO42PriorResultSlice(input hl7.HL7Type) []OMQO42PriorResult {
	values := make([]OMQO42PriorResult, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMQO42PriorResult(input.Index(i))
	}
	return values
}

// NewPGLPC7OrderDetail creates an implementation of PGLPC7OrderDetail
func NewPGLPC7OrderDetail(input hl7.HL7Type) PGLPC7OrderDetail {
	v := PGLPC7OrderDetail{}
	v.Choice = NewPGLPC7Choice(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Variance = NewVARSlice(input.Index(2))
	v.OrderObservation = NewPGLPC7OrderObservationSlice(input.Index(3))
	return v
}

type PGLPC7OrderDetail struct {
	Choice           PGLPC7Choice
	NotesAndComments []NTE
	Variance         []VAR
	OrderObservation []PGLPC7OrderObservation
}

// NewPGLPC7OrderDetailSlice will construct a slice of type PGLPC7OrderDetail
func NewPGLPC7OrderDetailSlice(input hl7.HL7Type) []PGLPC7OrderDetail {
	values := make([]PGLPC7OrderDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPGLPC7OrderDetail(input.Index(i))
	}
	return values
}

// NewPPGPCGOrder creates an implementation of PPGPCGOrder
func NewPPGPCGOrder(input hl7.HL7Type) PPGPCGOrder {
	v := PPGPCGOrder{}
	v.CommonOrder = NewORC(input.Index(0))
	v.OrderDetail = NewPPGPCGOrderDetail(input.Index(1))
	return v
}

type PPGPCGOrder struct {
	CommonOrder ORC
	OrderDetail PPGPCGOrderDetail
}

// NewPPGPCGOrderSlice will construct a slice of type PPGPCGOrder
func NewPPGPCGOrderSlice(input hl7.HL7Type) []PPGPCGOrder {
	values := make([]PPGPCGOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPGPCGOrder(input.Index(i))
	}
	return values
}

// NewOMLO35Order creates an implementation of OMLO35Order
func NewOMLO35Order(input hl7.HL7Type) OMLO35Order {
	v := OMLO35Order{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.Timing = NewOMLO35TimingSlice(input.Index(2))
	v.ObservationRequest = NewOMLO35ObservationRequest(input.Index(3))
	v.FinancialTransaction = NewFT1Slice(input.Index(4))
	v.ClinicalTrialIdentification = NewCTISlice(input.Index(5))
	v.Billing = NewBLG(input.Index(6))
	return v
}

type OMLO35Order struct {
	CommonOrder                 ORC
	ParticipationInformation    []PRT
	Timing                      []OMLO35Timing
	ObservationRequest          OMLO35ObservationRequest
	FinancialTransaction        []FT1
	ClinicalTrialIdentification []CTI
	Billing                     BLG
}

// NewOMLO35OrderSlice will construct a slice of type OMLO35Order
func NewOMLO35OrderSlice(input hl7.HL7Type) []OMLO35Order {
	values := make([]OMLO35Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO35Order(input.Index(i))
	}
	return values
}

// NewOMGO19Order creates an implementation of OMGO19Order
func NewOMGO19Order(input hl7.HL7Type) OMGO19Order {
	v := OMGO19Order{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.Timing = NewOMGO19TimingSlice(input.Index(2))
	v.ObservationRequest = NewOBR(input.Index(3))
	v.NotesAndComments = NewNTESlice(input.Index(4))
	v.AdditionalParticipationInformation = NewPRTSlice(input.Index(5))
	v.ContactData = NewCTD(input.Index(6))
	v.Diagnosis = NewDG1Slice(input.Index(7))
	v.Observation = NewOMGO19ObservationSlice(input.Index(8))
	v.Specimen = NewOMGO19SpecimenSlice(input.Index(9))
	v.PriorResult = NewOMGO19PriorResultSlice(input.Index(10))
	v.FinancialTransaction = NewFT1Slice(input.Index(11))
	v.ClinicalTrialIdentification = NewCTISlice(input.Index(12))
	v.Billing = NewBLG(input.Index(13))
	return v
}

type OMGO19Order struct {
	CommonOrder                        ORC
	ParticipationInformation           []PRT
	Timing                             []OMGO19Timing
	ObservationRequest                 OBR
	NotesAndComments                   []NTE
	AdditionalParticipationInformation []PRT
	ContactData                        CTD
	Diagnosis                          []DG1
	Observation                        []OMGO19Observation
	Specimen                           []OMGO19Specimen
	PriorResult                        []OMGO19PriorResult
	FinancialTransaction               []FT1
	ClinicalTrialIdentification        []CTI
	Billing                            BLG
}

// NewOMGO19OrderSlice will construct a slice of type OMGO19Order
func NewOMGO19OrderSlice(input hl7.HL7Type) []OMGO19Order {
	values := make([]OMGO19Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMGO19Order(input.Index(i))
	}
	return values
}

// NewOMLO33Order creates an implementation of OMLO33Order
func NewOMLO33Order(input hl7.HL7Type) OMLO33Order {
	v := OMLO33Order{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.Timing = NewOMLO33TimingSlice(input.Index(2))
	v.ObservationRequest = NewOMLO33ObservationRequest(input.Index(3))
	v.FinancialTransaction = NewFT1Slice(input.Index(4))
	v.ClinicalTrialIdentification = NewCTISlice(input.Index(5))
	v.Billing = NewBLG(input.Index(6))
	return v
}

type OMLO33Order struct {
	CommonOrder                 ORC
	ParticipationInformation    []PRT
	Timing                      []OMLO33Timing
	ObservationRequest          OMLO33ObservationRequest
	FinancialTransaction        []FT1
	ClinicalTrialIdentification []CTI
	Billing                     BLG
}

// NewOMLO33OrderSlice will construct a slice of type OMLO33Order
func NewOMLO33OrderSlice(input hl7.HL7Type) []OMLO33Order {
	values := make([]OMLO33Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO33Order(input.Index(i))
	}
	return values
}

// NewPGLPC8GoalRole creates an implementation of PGLPC8GoalRole
func NewPGLPC8GoalRole(input hl7.HL7Type) PGLPC8GoalRole {
	v := PGLPC8GoalRole{}
	v.Role = NewROL(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type PGLPC8GoalRole struct {
	Role     ROL
	Variance []VAR
}

// NewPGLPC8GoalRoleSlice will construct a slice of type PGLPC8GoalRole
func NewPGLPC8GoalRoleSlice(input hl7.HL7Type) []PGLPC8GoalRole {
	values := make([]PGLPC8GoalRole, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPGLPC8GoalRole(input.Index(i))
	}
	return values
}

// NewRRAO18Administration creates an implementation of RRAO18Administration
func NewRRAO18Administration(input hl7.HL7Type) RRAO18Administration {
	v := RRAO18Administration{}
	v.Treatment = NewRRAO18TreatmentSlice(input.Index(0))
	v.PharmacyTreatmentRoute = NewRXR(input.Index(1))
	return v
}

type RRAO18Administration struct {
	Treatment              []RRAO18Treatment
	PharmacyTreatmentRoute RXR
}

// NewRRAO18AdministrationSlice will construct a slice of type RRAO18Administration
func NewRRAO18AdministrationSlice(input hl7.HL7Type) []RRAO18Administration {
	values := make([]RRAO18Administration, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRRAO18Administration(input.Index(i))
	}
	return values
}

// NewSIUS27LocationResource creates an implementation of SIUS27LocationResource
func NewSIUS27LocationResource(input hl7.HL7Type) SIUS27LocationResource {
	v := SIUS27LocationResource{}
	v.AppointmentInformationLocationResource = NewAIL(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS27LocationResource struct {
	AppointmentInformationLocationResource AIL
	NotesAndComments                       []NTE
}

// NewSIUS27LocationResourceSlice will construct a slice of type SIUS27LocationResource
func NewSIUS27LocationResourceSlice(input hl7.HL7Type) []SIUS27LocationResource {
	values := make([]SIUS27LocationResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS27LocationResource(input.Index(i))
	}
	return values
}

// NewOMQO42Insurance creates an implementation of OMQO42Insurance
func NewOMQO42Insurance(input hl7.HL7Type) OMQO42Insurance {
	v := OMQO42Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3(input.Index(2))
	return v
}

type OMQO42Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification IN3
}

// NewOMQO42InsuranceSlice will construct a slice of type OMQO42Insurance
func NewOMQO42InsuranceSlice(input hl7.HL7Type) []OMQO42Insurance {
	values := make([]OMQO42Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMQO42Insurance(input.Index(i))
	}
	return values
}

// NewPGLPC7ProblemObservation creates an implementation of PGLPC7ProblemObservation
func NewPGLPC7ProblemObservation(input hl7.HL7Type) PGLPC7ProblemObservation {
	v := PGLPC7ProblemObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type PGLPC7ProblemObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewPGLPC7ProblemObservationSlice will construct a slice of type PGLPC7ProblemObservation
func NewPGLPC7ProblemObservationSlice(input hl7.HL7Type) []PGLPC7ProblemObservation {
	values := make([]PGLPC7ProblemObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPGLPC7ProblemObservation(input.Index(i))
	}
	return values
}

// NewEHCE02ProductServiceSection creates an implementation of EHCE02ProductServiceSection
func NewEHCE02ProductServiceSection(input hl7.HL7Type) EHCE02ProductServiceSection {
	v := EHCE02ProductServiceSection{}
	v.ProductServiceSection = NewPSS(input.Index(0))
	v.Psg = NewEHCE02PsgSlice(input.Index(1))
	return v
}

type EHCE02ProductServiceSection struct {
	ProductServiceSection PSS
	Psg                   []EHCE02Psg
}

// NewEHCE02ProductServiceSectionSlice will construct a slice of type EHCE02ProductServiceSection
func NewEHCE02ProductServiceSectionSlice(input hl7.HL7Type) []EHCE02ProductServiceSection {
	values := make([]EHCE02ProductServiceSection, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewEHCE02ProductServiceSection(input.Index(i))
	}
	return values
}

// NewDPRO48Donation creates an implementation of DPRO48Donation
func NewDPRO48Donation(input hl7.HL7Type) DPRO48Donation {
	v := DPRO48Donation{}
	v.DonationSegment = NewDON(input.Index(0))
	v.ObservationResult = NewOBXSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.BloodUnit = NewDPRO48BloodUnit(input.Index(3))
	return v
}

type DPRO48Donation struct {
	DonationSegment   DON
	ObservationResult []OBX
	NotesAndComments  []NTE
	BloodUnit         DPRO48BloodUnit
}

// NewDPRO48DonationSlice will construct a slice of type DPRO48Donation
func NewDPRO48DonationSlice(input hl7.HL7Type) []DPRO48Donation {
	values := make([]DPRO48Donation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewDPRO48Donation(input.Index(i))
	}
	return values
}

// NewOMDO03Patient creates an implementation of OMDO03Patient
func NewOMDO03Patient(input hl7.HL7Type) OMDO03Patient {
	v := OMDO03Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.AccessRestriction = NewARVSlice(input.Index(3))
	v.NotesAndComments = NewNTESlice(input.Index(4))
	v.PatientVisit = NewOMDO03PatientVisit(input.Index(5))
	v.Insurance = NewOMDO03InsuranceSlice(input.Index(6))
	v.Guarantor = NewGT1(input.Index(7))
	v.PatientAllergyInformation = NewAL1Slice(input.Index(8))
	return v
}

type OMDO03Patient struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	ParticipationInformation     []PRT
	AccessRestriction            []ARV
	NotesAndComments             []NTE
	PatientVisit                 OMDO03PatientVisit
	Insurance                    []OMDO03Insurance
	Guarantor                    GT1
	PatientAllergyInformation    []AL1
}

// NewOMDO03PatientSlice will construct a slice of type OMDO03Patient
func NewOMDO03PatientSlice(input hl7.HL7Type) []OMDO03Patient {
	values := make([]OMDO03Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMDO03Patient(input.Index(i))
	}
	return values
}

// NewSIUS20Patient creates an implementation of SIUS20Patient
func NewSIUS20Patient(input hl7.HL7Type) SIUS20Patient {
	v := SIUS20Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.PatientVisit = NewPV1(input.Index(2))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(3))
	v.ObservationResult = NewOBXSlice(input.Index(4))
	v.Diagnosis = NewDG1Slice(input.Index(5))
	return v
}

type SIUS20Patient struct {
	PatientIdentification             PID
	PatientAdditionalDemographic      PD1
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ObservationResult                 []OBX
	Diagnosis                         []DG1
}

// NewSIUS20PatientSlice will construct a slice of type SIUS20Patient
func NewSIUS20PatientSlice(input hl7.HL7Type) []SIUS20Patient {
	values := make([]SIUS20Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS20Patient(input.Index(i))
	}
	return values
}

// NewRPII04Provider creates an implementation of RPII04Provider
func NewRPII04Provider(input hl7.HL7Type) RPII04Provider {
	v := RPII04Provider{}
	v.ProviderData = NewPRD(input.Index(0))
	v.ContactData = NewCTDSlice(input.Index(1))
	return v
}

type RPII04Provider struct {
	ProviderData PRD
	ContactData  []CTD
}

// NewRPII04ProviderSlice will construct a slice of type RPII04Provider
func NewRPII04ProviderSlice(input hl7.HL7Type) []RPII04Provider {
	values := make([]RPII04Provider, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRPII04Provider(input.Index(i))
	}
	return values
}

// NewOULR24Specimen creates an implementation of OULR24Specimen
func NewOULR24Specimen(input hl7.HL7Type) OULR24Specimen {
	v := OULR24Specimen{}
	v.Specimen = NewSPM(input.Index(0))
	v.SpecimenObservation = NewOULR24SpecimenObservationSlice(input.Index(1))
	v.Container = NewOULR24ContainerSlice(input.Index(2))
	return v
}

type OULR24Specimen struct {
	Specimen            SPM
	SpecimenObservation []OULR24SpecimenObservation
	Container           []OULR24Container
}

// NewOULR24SpecimenSlice will construct a slice of type OULR24Specimen
func NewOULR24SpecimenSlice(input hl7.HL7Type) []OULR24Specimen {
	values := make([]OULR24Specimen, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOULR24Specimen(input.Index(i))
	}
	return values
}

// NewREFI13AuthorizationContact2 creates an implementation of REFI13AuthorizationContact2
func NewREFI13AuthorizationContact2(input hl7.HL7Type) REFI13AuthorizationContact2 {
	v := REFI13AuthorizationContact2{}
	v.AuthorizationInformation = NewAUT(input.Index(0))
	v.ContactData = NewCTD(input.Index(1))
	return v
}

type REFI13AuthorizationContact2 struct {
	AuthorizationInformation AUT
	ContactData              CTD
}

// NewREFI13AuthorizationContact2Slice will construct a slice of type REFI13AuthorizationContact2
func NewREFI13AuthorizationContact2Slice(input hl7.HL7Type) []REFI13AuthorizationContact2 {
	values := make([]REFI13AuthorizationContact2, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewREFI13AuthorizationContact2(input.Index(i))
	}
	return values
}

// NewOMLO35Patient creates an implementation of OMLO35Patient
func NewOMLO35Patient(input hl7.HL7Type) OMLO35Patient {
	v := OMLO35Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	v.NextOfKinAssociatedParties = NewNK1Slice(input.Index(4))
	v.AccessRestriction = NewARVSlice(input.Index(5))
	v.PatientVisit = NewOMLO35PatientVisit(input.Index(6))
	v.Insurance = NewOMLO35InsuranceSlice(input.Index(7))
	v.Guarantor = NewGT1(input.Index(8))
	v.PatientAllergyInformation = NewAL1Slice(input.Index(9))
	return v
}

type OMLO35Patient struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	ParticipationInformation     []PRT
	NotesAndComments             []NTE
	NextOfKinAssociatedParties   []NK1
	AccessRestriction            []ARV
	PatientVisit                 OMLO35PatientVisit
	Insurance                    []OMLO35Insurance
	Guarantor                    GT1
	PatientAllergyInformation    []AL1
}

// NewOMLO35PatientSlice will construct a slice of type OMLO35Patient
func NewOMLO35PatientSlice(input hl7.HL7Type) []OMLO35Patient {
	values := make([]OMLO35Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO35Patient(input.Index(i))
	}
	return values
}

// NewPINI07GuarantorInsurance creates an implementation of PINI07GuarantorInsurance
func NewPINI07GuarantorInsurance(input hl7.HL7Type) PINI07GuarantorInsurance {
	v := PINI07GuarantorInsurance{}
	v.Guarantor = NewGT1Slice(input.Index(0))
	v.Insurance = NewPINI07InsuranceSlice(input.Index(1))
	return v
}

type PINI07GuarantorInsurance struct {
	Guarantor []GT1
	Insurance []PINI07Insurance
}

// NewPINI07GuarantorInsuranceSlice will construct a slice of type PINI07GuarantorInsurance
func NewPINI07GuarantorInsuranceSlice(input hl7.HL7Type) []PINI07GuarantorInsurance {
	values := make([]PINI07GuarantorInsurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPINI07GuarantorInsurance(input.Index(i))
	}
	return values
}

// NewOMIO23Observation creates an implementation of OMIO23Observation
func NewOMIO23Observation(input hl7.HL7Type) OMIO23Observation {
	v := OMIO23Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type OMIO23Observation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewOMIO23ObservationSlice will construct a slice of type OMIO23Observation
func NewOMIO23ObservationSlice(input hl7.HL7Type) []OMIO23Observation {
	values := make([]OMIO23Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMIO23Observation(input.Index(i))
	}
	return values
}

// NewORLO36Timing creates an implementation of ORLO36Timing
func NewORLO36Timing(input hl7.HL7Type) ORLO36Timing {
	v := ORLO36Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type ORLO36Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewORLO36TimingSlice will construct a slice of type ORLO36Timing
func NewORLO36TimingSlice(input hl7.HL7Type) []ORLO36Timing {
	values := make([]ORLO36Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORLO36Timing(input.Index(i))
	}
	return values
}

// NewCCRI18MedicationEncodingDetail creates an implementation of CCRI18MedicationEncodingDetail
func NewCCRI18MedicationEncodingDetail(input hl7.HL7Type) CCRI18MedicationEncodingDetail {
	v := CCRI18MedicationEncodingDetail{}
	v.PharmacyTreatmentEncodedOrder = NewRXE(input.Index(0))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(1))
	v.PharmacyTreatmentComponentOrder = NewRXCSlice(input.Index(2))
	v.MedicationEncodingObservation = NewCCRI18MedicationEncodingObservationSlice(input.Index(3))
	return v
}

type CCRI18MedicationEncodingDetail struct {
	PharmacyTreatmentEncodedOrder   RXE
	PharmacyTreatmentRoute          []RXR
	PharmacyTreatmentComponentOrder []RXC
	MedicationEncodingObservation   []CCRI18MedicationEncodingObservation
}

// NewCCRI18MedicationEncodingDetailSlice will construct a slice of type CCRI18MedicationEncodingDetail
func NewCCRI18MedicationEncodingDetailSlice(input hl7.HL7Type) []CCRI18MedicationEncodingDetail {
	values := make([]CCRI18MedicationEncodingDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI18MedicationEncodingDetail(input.Index(i))
	}
	return values
}

// NewPGLPC8Order creates an implementation of PGLPC8Order
func NewPGLPC8Order(input hl7.HL7Type) PGLPC8Order {
	v := PGLPC8Order{}
	v.CommonOrder = NewORC(input.Index(0))
	v.OrderDetail = NewPGLPC8OrderDetail(input.Index(1))
	return v
}

type PGLPC8Order struct {
	CommonOrder ORC
	OrderDetail PGLPC8OrderDetail
}

// NewPGLPC8OrderSlice will construct a slice of type PGLPC8Order
func NewPGLPC8OrderSlice(input hl7.HL7Type) []PGLPC8Order {
	values := make([]PGLPC8Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPGLPC8Order(input.Index(i))
	}
	return values
}

// NewSRRS10Patient creates an implementation of SRRS10Patient
func NewSRRS10Patient(input hl7.HL7Type) SRRS10Patient {
	v := SRRS10Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientVisit = NewPV1(input.Index(1))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(2))
	v.Diagnosis = NewDG1Slice(input.Index(3))
	return v
}

type SRRS10Patient struct {
	PatientIdentification             PID
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	Diagnosis                         []DG1
}

// NewSRRS10PatientSlice will construct a slice of type SRRS10Patient
func NewSRRS10PatientSlice(input hl7.HL7Type) []SRRS10Patient {
	values := make([]SRRS10Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS10Patient(input.Index(i))
	}
	return values
}

// NewQBPE03QueryInformation creates an implementation of QBPE03QueryInformation
func NewQBPE03QueryInformation(input hl7.HL7Type) QBPE03QueryInformation {
	v := QBPE03QueryInformation{}
	v.QueryParameterDefinition = NewQPD(input.Index(0))
	v.ResponseControlParameter = NewRCP(input.Index(1))
	return v
}

type QBPE03QueryInformation struct {
	QueryParameterDefinition QPD
	ResponseControlParameter RCP
}

// NewQBPE03QueryInformationSlice will construct a slice of type QBPE03QueryInformation
func NewQBPE03QueryInformationSlice(input hl7.HL7Type) []QBPE03QueryInformation {
	values := make([]QBPE03QueryInformation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewQBPE03QueryInformation(input.Index(i))
	}
	return values
}

// NewOPLO37Timing2 creates an implementation of OPLO37Timing2
func NewOPLO37Timing2(input hl7.HL7Type) OPLO37Timing2 {
	v := OPLO37Timing2{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type OPLO37Timing2 struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewOPLO37Timing2Slice will construct a slice of type OPLO37Timing2
func NewOPLO37Timing2Slice(input hl7.HL7Type) []OPLO37Timing2 {
	values := make([]OPLO37Timing2, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOPLO37Timing2(input.Index(i))
	}
	return values
}

// NewCCUI20ResourceDetail creates an implementation of CCUI20ResourceDetail
func NewCCUI20ResourceDetail(input hl7.HL7Type) CCUI20ResourceDetail {
	v := CCUI20ResourceDetail{}
	v.ResourceObject = NewCCUI20ResourceObject(input.Index(0))
	v.ResourceObservation = NewCCUI20ResourceObservationSlice(input.Index(1))
	return v
}

type CCUI20ResourceDetail struct {
	ResourceObject      CCUI20ResourceObject
	ResourceObservation []CCUI20ResourceObservation
}

// NewCCUI20ResourceDetailSlice will construct a slice of type CCUI20ResourceDetail
func NewCCUI20ResourceDetailSlice(input hl7.HL7Type) []CCUI20ResourceDetail {
	values := make([]CCUI20ResourceDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCUI20ResourceDetail(input.Index(i))
	}
	return values
}

// NewCCRI18Resources creates an implementation of CCRI18Resources
func NewCCRI18Resources(input hl7.HL7Type) CCRI18Resources {
	v := CCRI18Resources{}
	v.ResourceGroup = NewRGS(input.Index(0))
	v.ResourceDetail = NewCCRI18ResourceDetailSlice(input.Index(1))
	return v
}

type CCRI18Resources struct {
	ResourceGroup  RGS
	ResourceDetail []CCRI18ResourceDetail
}

// NewCCRI18ResourcesSlice will construct a slice of type CCRI18Resources
func NewCCRI18ResourcesSlice(input hl7.HL7Type) []CCRI18Resources {
	values := make([]CCRI18Resources, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI18Resources(input.Index(i))
	}
	return values
}

// NewSRRS06PersonnelResource creates an implementation of SRRS06PersonnelResource
func NewSRRS06PersonnelResource(input hl7.HL7Type) SRRS06PersonnelResource {
	v := SRRS06PersonnelResource{}
	v.AppointmentInformationPersonnelResource = NewAIP(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SRRS06PersonnelResource struct {
	AppointmentInformationPersonnelResource AIP
	NotesAndComments                        []NTE
}

// NewSRRS06PersonnelResourceSlice will construct a slice of type SRRS06PersonnelResource
func NewSRRS06PersonnelResourceSlice(input hl7.HL7Type) []SRRS06PersonnelResource {
	values := make([]SRRS06PersonnelResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS06PersonnelResource(input.Index(i))
	}
	return values
}

// NewADTA14Procedure creates an implementation of ADTA14Procedure
func NewADTA14Procedure(input hl7.HL7Type) ADTA14Procedure {
	v := ADTA14Procedure{}
	v.Procedures = NewPR1(input.Index(0))
	v.Role = NewROLSlice(input.Index(1))
	return v
}

type ADTA14Procedure struct {
	Procedures PR1
	Role       []ROL
}

// NewADTA14ProcedureSlice will construct a slice of type ADTA14Procedure
func NewADTA14ProcedureSlice(input hl7.HL7Type) []ADTA14Procedure {
	values := make([]ADTA14Procedure, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewADTA14Procedure(input.Index(i))
	}
	return values
}

// NewSIUS15PersonnelResource creates an implementation of SIUS15PersonnelResource
func NewSIUS15PersonnelResource(input hl7.HL7Type) SIUS15PersonnelResource {
	v := SIUS15PersonnelResource{}
	v.AppointmentInformationPersonnelResource = NewAIP(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS15PersonnelResource struct {
	AppointmentInformationPersonnelResource AIP
	NotesAndComments                        []NTE
}

// NewSIUS15PersonnelResourceSlice will construct a slice of type SIUS15PersonnelResource
func NewSIUS15PersonnelResourceSlice(input hl7.HL7Type) []SIUS15PersonnelResource {
	values := make([]SIUS15PersonnelResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS15PersonnelResource(input.Index(i))
	}
	return values
}

// NewBTSO31PatientVisit creates an implementation of BTSO31PatientVisit
func NewBTSO31PatientVisit(input hl7.HL7Type) BTSO31PatientVisit {
	v := BTSO31PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	return v
}

type BTSO31PatientVisit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ParticipationInformation          []PRT
}

// NewBTSO31PatientVisitSlice will construct a slice of type BTSO31PatientVisit
func NewBTSO31PatientVisitSlice(input hl7.HL7Type) []BTSO31PatientVisit {
	values := make([]BTSO31PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewBTSO31PatientVisit(input.Index(i))
	}
	return values
}

// NewPPPPCCGoal creates an implementation of PPPPCCGoal
func NewPPPPCCGoal(input hl7.HL7Type) PPPPCCGoal {
	v := PPPPCCGoal{}
	v.GoalDetail = NewGOL(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Variance = NewVARSlice(input.Index(2))
	v.GoalRole = NewPPPPCCGoalRoleSlice(input.Index(3))
	v.GoalObservation = NewPPPPCCGoalObservationSlice(input.Index(4))
	return v
}

type PPPPCCGoal struct {
	GoalDetail       GOL
	NotesAndComments []NTE
	Variance         []VAR
	GoalRole         []PPPPCCGoalRole
	GoalObservation  []PPPPCCGoalObservation
}

// NewPPPPCCGoalSlice will construct a slice of type PPPPCCGoal
func NewPPPPCCGoalSlice(input hl7.HL7Type) []PPPPCCGoal {
	values := make([]PPPPCCGoal, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPPPCCGoal(input.Index(i))
	}
	return values
}

// NewPGLPC8Problem creates an implementation of PGLPC8Problem
func NewPGLPC8Problem(input hl7.HL7Type) PGLPC8Problem {
	v := PGLPC8Problem{}
	v.ProblemDetails = NewPRB(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Variance = NewVARSlice(input.Index(2))
	v.ProblemRole = NewPGLPC8ProblemRoleSlice(input.Index(3))
	v.ProblemObservation = NewPGLPC8ProblemObservationSlice(input.Index(4))
	return v
}

type PGLPC8Problem struct {
	ProblemDetails     PRB
	NotesAndComments   []NTE
	Variance           []VAR
	ProblemRole        []PGLPC8ProblemRole
	ProblemObservation []PGLPC8ProblemObservation
}

// NewPGLPC8ProblemSlice will construct a slice of type PGLPC8Problem
func NewPGLPC8ProblemSlice(input hl7.HL7Type) []PGLPC8Problem {
	values := make([]PGLPC8Problem, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPGLPC8Problem(input.Index(i))
	}
	return values
}

// NewRSPK31Observation creates an implementation of RSPK31Observation
func NewRSPK31Observation(input hl7.HL7Type) RSPK31Observation {
	v := RSPK31Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type RSPK31Observation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewRSPK31ObservationSlice will construct a slice of type RSPK31Observation
func NewRSPK31ObservationSlice(input hl7.HL7Type) []RSPK31Observation {
	values := make([]RSPK31Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPK31Observation(input.Index(i))
	}
	return values
}

// NewRPAI09Provider creates an implementation of RPAI09Provider
func NewRPAI09Provider(input hl7.HL7Type) RPAI09Provider {
	v := RPAI09Provider{}
	v.ProviderData = NewPRD(input.Index(0))
	v.ContactData = NewCTDSlice(input.Index(1))
	return v
}

type RPAI09Provider struct {
	ProviderData PRD
	ContactData  []CTD
}

// NewRPAI09ProviderSlice will construct a slice of type RPAI09Provider
func NewRPAI09ProviderSlice(input hl7.HL7Type) []RPAI09Provider {
	values := make([]RPAI09Provider, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRPAI09Provider(input.Index(i))
	}
	return values
}

// NewRPAI09Procedure creates an implementation of RPAI09Procedure
func NewRPAI09Procedure(input hl7.HL7Type) RPAI09Procedure {
	v := RPAI09Procedure{}
	v.Procedures = NewPR1(input.Index(0))
	v.Authorization2 = NewRPAI09Authorization2(input.Index(1))
	return v
}

type RPAI09Procedure struct {
	Procedures     PR1
	Authorization2 RPAI09Authorization2
}

// NewRPAI09ProcedureSlice will construct a slice of type RPAI09Procedure
func NewRPAI09ProcedureSlice(input hl7.HL7Type) []RPAI09Procedure {
	values := make([]RPAI09Procedure, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRPAI09Procedure(input.Index(i))
	}
	return values
}

// NewPGLPC6OrderDetail creates an implementation of PGLPC6OrderDetail
func NewPGLPC6OrderDetail(input hl7.HL7Type) PGLPC6OrderDetail {
	v := PGLPC6OrderDetail{}
	v.Choice = NewPGLPC6Choice(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Variance = NewVARSlice(input.Index(2))
	v.OrderObservation = NewPGLPC6OrderObservationSlice(input.Index(3))
	return v
}

type PGLPC6OrderDetail struct {
	Choice           PGLPC6Choice
	NotesAndComments []NTE
	Variance         []VAR
	OrderObservation []PGLPC6OrderObservation
}

// NewPGLPC6OrderDetailSlice will construct a slice of type PGLPC6OrderDetail
func NewPGLPC6OrderDetailSlice(input hl7.HL7Type) []PGLPC6OrderDetail {
	values := make([]PGLPC6OrderDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPGLPC6OrderDetail(input.Index(i))
	}
	return values
}

// NewCCRI18ClinicalOrderObject creates an implementation of CCRI18ClinicalOrderObject
func NewCCRI18ClinicalOrderObject(input hl7.HL7Type) CCRI18ClinicalOrderObject {
	v := CCRI18ClinicalOrderObject{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.PharmacyTreatmentOrder = NewRXO(input.Index(1))
	v.DietaryOrdersSupplementsAndPreferences = NewODS(input.Index(2))
	v.Procedures = NewPR1(input.Index(3))
	return v
}

type CCRI18ClinicalOrderObject struct {
	ObservationRequest                     OBR
	PharmacyTreatmentOrder                 RXO
	DietaryOrdersSupplementsAndPreferences ODS
	Procedures                             PR1
}

// NewCCRI18ClinicalOrderObjectSlice will construct a slice of type CCRI18ClinicalOrderObject
func NewCCRI18ClinicalOrderObjectSlice(input hl7.HL7Type) []CCRI18ClinicalOrderObject {
	values := make([]CCRI18ClinicalOrderObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI18ClinicalOrderObject(input.Index(i))
	}
	return values
}

// NewSIUS19Patient creates an implementation of SIUS19Patient
func NewSIUS19Patient(input hl7.HL7Type) SIUS19Patient {
	v := SIUS19Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.PatientVisit = NewPV1(input.Index(2))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(3))
	v.ObservationResult = NewOBXSlice(input.Index(4))
	v.Diagnosis = NewDG1Slice(input.Index(5))
	return v
}

type SIUS19Patient struct {
	PatientIdentification             PID
	PatientAdditionalDemographic      PD1
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ObservationResult                 []OBX
	Diagnosis                         []DG1
}

// NewSIUS19PatientSlice will construct a slice of type SIUS19Patient
func NewSIUS19PatientSlice(input hl7.HL7Type) []SIUS19Patient {
	values := make([]SIUS19Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS19Patient(input.Index(i))
	}
	return values
}

// NewPGLPC8ProblemRole creates an implementation of PGLPC8ProblemRole
func NewPGLPC8ProblemRole(input hl7.HL7Type) PGLPC8ProblemRole {
	v := PGLPC8ProblemRole{}
	v.Role = NewROL(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type PGLPC8ProblemRole struct {
	Role     ROL
	Variance []VAR
}

// NewPGLPC8ProblemRoleSlice will construct a slice of type PGLPC8ProblemRole
func NewPGLPC8ProblemRoleSlice(input hl7.HL7Type) []PGLPC8ProblemRole {
	values := make([]PGLPC8ProblemRole, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPGLPC8ProblemRole(input.Index(i))
	}
	return values
}

// NewOMGO19ObservationPrior creates an implementation of OMGO19ObservationPrior
func NewOMGO19ObservationPrior(input hl7.HL7Type) OMGO19ObservationPrior {
	v := OMGO19ObservationPrior{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type OMGO19ObservationPrior struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewOMGO19ObservationPriorSlice will construct a slice of type OMGO19ObservationPrior
func NewOMGO19ObservationPriorSlice(input hl7.HL7Type) []OMGO19ObservationPrior {
	values := make([]OMGO19ObservationPrior, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMGO19ObservationPrior(input.Index(i))
	}
	return values
}

// NewSIUS23GeneralResource creates an implementation of SIUS23GeneralResource
func NewSIUS23GeneralResource(input hl7.HL7Type) SIUS23GeneralResource {
	v := SIUS23GeneralResource{}
	v.AppointmentInformationGeneralResource = NewAIG(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS23GeneralResource struct {
	AppointmentInformationGeneralResource AIG
	NotesAndComments                      []NTE
}

// NewSIUS23GeneralResourceSlice will construct a slice of type SIUS23GeneralResource
func NewSIUS23GeneralResourceSlice(input hl7.HL7Type) []SIUS23GeneralResource {
	values := make([]SIUS23GeneralResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS23GeneralResource(input.Index(i))
	}
	return values
}

// NewCCRI18MedicationAdministrationDetail creates an implementation of CCRI18MedicationAdministrationDetail
func NewCCRI18MedicationAdministrationDetail(input hl7.HL7Type) CCRI18MedicationAdministrationDetail {
	v := CCRI18MedicationAdministrationDetail{}
	v.PharmacyTreatmentAdministration = NewRXASlice(input.Index(0))
	v.PharmacyTreatmentRoute = NewRXR(input.Index(1))
	v.MedicationAdministrationObservation = NewCCRI18MedicationAdministrationObservationSlice(input.Index(2))
	return v
}

type CCRI18MedicationAdministrationDetail struct {
	PharmacyTreatmentAdministration     []RXA
	PharmacyTreatmentRoute              RXR
	MedicationAdministrationObservation []CCRI18MedicationAdministrationObservation
}

// NewCCRI18MedicationAdministrationDetailSlice will construct a slice of type CCRI18MedicationAdministrationDetail
func NewCCRI18MedicationAdministrationDetailSlice(input hl7.HL7Type) []CCRI18MedicationAdministrationDetail {
	values := make([]CCRI18MedicationAdministrationDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI18MedicationAdministrationDetail(input.Index(i))
	}
	return values
}

// NewCCUI20RoleGoalObject creates an implementation of CCUI20RoleGoalObject
func NewCCUI20RoleGoalObject(input hl7.HL7Type) CCUI20RoleGoalObject {
	v := CCUI20RoleGoalObject{}
	v.Role = NewROL(input.Index(0))
	v.ProviderData = NewPRD(input.Index(1))
	return v
}

type CCUI20RoleGoalObject struct {
	Role         ROL
	ProviderData PRD
}

// NewCCUI20RoleGoalObjectSlice will construct a slice of type CCUI20RoleGoalObject
func NewCCUI20RoleGoalObjectSlice(input hl7.HL7Type) []CCUI20RoleGoalObject {
	values := make([]CCUI20RoleGoalObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCUI20RoleGoalObject(input.Index(i))
	}
	return values
}

// NewORSO06Response creates an implementation of ORSO06Response
func NewORSO06Response(input hl7.HL7Type) ORSO06Response {
	v := ORSO06Response{}
	v.Patient = NewORSO06Patient(input.Index(0))
	v.Order = NewORSO06OrderSlice(input.Index(1))
	return v
}

type ORSO06Response struct {
	Patient ORSO06Patient
	Order   []ORSO06Order
}

// NewORSO06ResponseSlice will construct a slice of type ORSO06Response
func NewORSO06ResponseSlice(input hl7.HL7Type) []ORSO06Response {
	values := make([]ORSO06Response, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORSO06Response(input.Index(i))
	}
	return values
}

// NewORDO04Patient creates an implementation of ORDO04Patient
func NewORDO04Patient(input hl7.HL7Type) ORDO04Patient {
	v := ORDO04Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.AccessRestriction = NewARVSlice(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	return v
}

type ORDO04Patient struct {
	PatientIdentification    PID
	ParticipationInformation []PRT
	AccessRestriction        []ARV
	NotesAndComments         []NTE
}

// NewORDO04PatientSlice will construct a slice of type ORDO04Patient
func NewORDO04PatientSlice(input hl7.HL7Type) []ORDO04Patient {
	values := make([]ORDO04Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORDO04Patient(input.Index(i))
	}
	return values
}

// NewDRCO47DonnorOrder creates an implementation of DRCO47DonnorOrder
func NewDRCO47DonnorOrder(input hl7.HL7Type) DRCO47DonnorOrder {
	v := DRCO47DonnorOrder{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type DRCO47DonnorOrder struct {
	ObservationRequest OBR
	NotesAndComments   []NTE
}

// NewDRCO47DonnorOrderSlice will construct a slice of type DRCO47DonnorOrder
func NewDRCO47DonnorOrderSlice(input hl7.HL7Type) []DRCO47DonnorOrder {
	values := make([]DRCO47DonnorOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewDRCO47DonnorOrder(input.Index(i))
	}
	return values
}

// NewCQUI19ClinicalHistoryObject creates an implementation of CQUI19ClinicalHistoryObject
func NewCQUI19ClinicalHistoryObject(input hl7.HL7Type) CQUI19ClinicalHistoryObject {
	v := CQUI19ClinicalHistoryObject{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.DietaryOrdersSupplementsAndPreferences = NewODS(input.Index(1))
	v.Procedures = NewPR1(input.Index(2))
	v.ReferralInformation = NewRF1(input.Index(3))
	v.PatientAllergyInformation = NewAL1(input.Index(4))
	v.PatientAdverseReactionInformation = NewIAM(input.Index(5))
	v.Accident = NewACC(input.Index(6))
	v.RiskManagementIncident = NewRMI(input.Index(7))
	v.Disability = NewDB1(input.Index(8))
	v.Diagnosis = NewDG1(input.Index(9))
	v.DiagnosisRelatedGroup = NewDRG(input.Index(10))
	v.PatientDeathAndAutopsy = NewPDA(input.Index(11))
	return v
}

type CQUI19ClinicalHistoryObject struct {
	ObservationRequest                     OBR
	DietaryOrdersSupplementsAndPreferences ODS
	Procedures                             PR1
	ReferralInformation                    RF1
	PatientAllergyInformation              AL1
	PatientAdverseReactionInformation      IAM
	Accident                               ACC
	RiskManagementIncident                 RMI
	Disability                             DB1
	Diagnosis                              DG1
	DiagnosisRelatedGroup                  DRG
	PatientDeathAndAutopsy                 PDA
}

// NewCQUI19ClinicalHistoryObjectSlice will construct a slice of type CQUI19ClinicalHistoryObject
func NewCQUI19ClinicalHistoryObjectSlice(input hl7.HL7Type) []CQUI19ClinicalHistoryObject {
	values := make([]CQUI19ClinicalHistoryObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCQUI19ClinicalHistoryObject(input.Index(i))
	}
	return values
}

// NewSIUS12GeneralResource creates an implementation of SIUS12GeneralResource
func NewSIUS12GeneralResource(input hl7.HL7Type) SIUS12GeneralResource {
	v := SIUS12GeneralResource{}
	v.AppointmentInformationGeneralResource = NewAIG(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS12GeneralResource struct {
	AppointmentInformationGeneralResource AIG
	NotesAndComments                      []NTE
}

// NewSIUS12GeneralResourceSlice will construct a slice of type SIUS12GeneralResource
func NewSIUS12GeneralResourceSlice(input hl7.HL7Type) []SIUS12GeneralResource {
	values := make([]SIUS12GeneralResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS12GeneralResource(input.Index(i))
	}
	return values
}

// NewPPGPCHPatientVisit creates an implementation of PPGPCHPatientVisit
func NewPPGPCHPatientVisit(input hl7.HL7Type) PPGPCHPatientVisit {
	v := PPGPCHPatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	return v
}

type PPGPCHPatientVisit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
}

// NewPPGPCHPatientVisitSlice will construct a slice of type PPGPCHPatientVisit
func NewPPGPCHPatientVisitSlice(input hl7.HL7Type) []PPGPCHPatientVisit {
	values := make([]PPGPCHPatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPGPCHPatientVisit(input.Index(i))
	}
	return values
}

// NewCCMI21MedicationAdministrationObservation creates an implementation of CCMI21MedicationAdministrationObservation
func NewCCMI21MedicationAdministrationObservation(input hl7.HL7Type) CCMI21MedicationAdministrationObservation {
	v := CCMI21MedicationAdministrationObservation{}
	v.ObservationResult = NewOBXSlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CCMI21MedicationAdministrationObservation struct {
	ObservationResult        []OBX
	ParticipationInformation []PRT
}

// NewCCMI21MedicationAdministrationObservationSlice will construct a slice of type CCMI21MedicationAdministrationObservation
func NewCCMI21MedicationAdministrationObservationSlice(input hl7.HL7Type) []CCMI21MedicationAdministrationObservation {
	values := make([]CCMI21MedicationAdministrationObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCMI21MedicationAdministrationObservation(input.Index(i))
	}
	return values
}

// NewMDMT09CommonOrder creates an implementation of MDMT09CommonOrder
func NewMDMT09CommonOrder(input hl7.HL7Type) MDMT09CommonOrder {
	v := MDMT09CommonOrder{}
	v.CommonOrder = NewORC(input.Index(0))
	v.Timing = NewMDMT09TimingSlice(input.Index(1))
	v.ObservationRequest = NewOBR(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	return v
}

type MDMT09CommonOrder struct {
	CommonOrder        ORC
	Timing             []MDMT09Timing
	ObservationRequest OBR
	NotesAndComments   []NTE
}

// NewMDMT09CommonOrderSlice will construct a slice of type MDMT09CommonOrder
func NewMDMT09CommonOrderSlice(input hl7.HL7Type) []MDMT09CommonOrder {
	values := make([]MDMT09CommonOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMDMT09CommonOrder(input.Index(i))
	}
	return values
}

// NewRREO12Timing creates an implementation of RREO12Timing
func NewRREO12Timing(input hl7.HL7Type) RREO12Timing {
	v := RREO12Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type RREO12Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewRREO12TimingSlice will construct a slice of type RREO12Timing
func NewRREO12TimingSlice(input hl7.HL7Type) []RREO12Timing {
	values := make([]RREO12Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRREO12Timing(input.Index(i))
	}
	return values
}

// NewSRMS02Resources creates an implementation of SRMS02Resources
func NewSRMS02Resources(input hl7.HL7Type) SRMS02Resources {
	v := SRMS02Resources{}
	v.ResourceGroup = NewRGS(input.Index(0))
	v.Service = NewSRMS02ServiceSlice(input.Index(1))
	v.GeneralResource = NewSRMS02GeneralResourceSlice(input.Index(2))
	v.LocationResource = NewSRMS02LocationResourceSlice(input.Index(3))
	v.PersonnelResource = NewSRMS02PersonnelResourceSlice(input.Index(4))
	return v
}

type SRMS02Resources struct {
	ResourceGroup     RGS
	Service           []SRMS02Service
	GeneralResource   []SRMS02GeneralResource
	LocationResource  []SRMS02LocationResource
	PersonnelResource []SRMS02PersonnelResource
}

// NewSRMS02ResourcesSlice will construct a slice of type SRMS02Resources
func NewSRMS02ResourcesSlice(input hl7.HL7Type) []SRMS02Resources {
	values := make([]SRMS02Resources, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS02Resources(input.Index(i))
	}
	return values
}

// NewORLO40SpecimenContainerInPackage creates an implementation of ORLO40SpecimenContainerInPackage
func NewORLO40SpecimenContainerInPackage(input hl7.HL7Type) ORLO40SpecimenContainerInPackage {
	v := ORLO40SpecimenContainerInPackage{}
	v.SpecimenContainerDetail = NewSAC(input.Index(0))
	return v
}

type ORLO40SpecimenContainerInPackage struct {
	SpecimenContainerDetail SAC
}

// NewORLO40SpecimenContainerInPackageSlice will construct a slice of type ORLO40SpecimenContainerInPackage
func NewORLO40SpecimenContainerInPackageSlice(input hl7.HL7Type) []ORLO40SpecimenContainerInPackage {
	values := make([]ORLO40SpecimenContainerInPackage, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORLO40SpecimenContainerInPackage(input.Index(i))
	}
	return values
}

// NewADTA14Insurance creates an implementation of ADTA14Insurance
func NewADTA14Insurance(input hl7.HL7Type) ADTA14Insurance {
	v := ADTA14Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3Slice(input.Index(2))
	v.Role = NewROLSlice(input.Index(3))
	v.AuthorizationInformation = NewAUTSlice(input.Index(4))
	v.ReferralInformation = NewRF1Slice(input.Index(5))
	return v
}

type ADTA14Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification []IN3
	Role                                        []ROL
	AuthorizationInformation                    []AUT
	ReferralInformation                         []RF1
}

// NewADTA14InsuranceSlice will construct a slice of type ADTA14Insurance
func NewADTA14InsuranceSlice(input hl7.HL7Type) []ADTA14Insurance {
	values := make([]ADTA14Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewADTA14Insurance(input.Index(i))
	}
	return values
}

// NewRSPE03QueryAckIpr creates an implementation of RSPE03QueryAckIpr
func NewRSPE03QueryAckIpr(input hl7.HL7Type) RSPE03QueryAckIpr {
	v := RSPE03QueryAckIpr{}
	v.QueryAcknowledgment = NewQAK(input.Index(0))
	v.QueryParameterDefinition = NewQPD(input.Index(1))
	v.InvoiceProcessingResults = NewIPRSlice(input.Index(2))
	return v
}

type RSPE03QueryAckIpr struct {
	QueryAcknowledgment      QAK
	QueryParameterDefinition QPD
	InvoiceProcessingResults []IPR
}

// NewRSPE03QueryAckIprSlice will construct a slice of type RSPE03QueryAckIpr
func NewRSPE03QueryAckIprSlice(input hl7.HL7Type) []RSPE03QueryAckIpr {
	values := make([]RSPE03QueryAckIpr, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPE03QueryAckIpr(input.Index(i))
	}
	return values
}

// NewOMNO07Insurance creates an implementation of OMNO07Insurance
func NewOMNO07Insurance(input hl7.HL7Type) OMNO07Insurance {
	v := OMNO07Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3(input.Index(2))
	return v
}

type OMNO07Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification IN3
}

// NewOMNO07InsuranceSlice will construct a slice of type OMNO07Insurance
func NewOMNO07InsuranceSlice(input hl7.HL7Type) []OMNO07Insurance {
	values := make([]OMNO07Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMNO07Insurance(input.Index(i))
	}
	return values
}

// NewSIUS19Resources creates an implementation of SIUS19Resources
func NewSIUS19Resources(input hl7.HL7Type) SIUS19Resources {
	v := SIUS19Resources{}
	v.ResourceGroup = NewRGS(input.Index(0))
	v.Service = NewSIUS19ServiceSlice(input.Index(1))
	v.GeneralResource = NewSIUS19GeneralResourceSlice(input.Index(2))
	v.LocationResource = NewSIUS19LocationResourceSlice(input.Index(3))
	v.PersonnelResource = NewSIUS19PersonnelResourceSlice(input.Index(4))
	return v
}

type SIUS19Resources struct {
	ResourceGroup     RGS
	Service           []SIUS19Service
	GeneralResource   []SIUS19GeneralResource
	LocationResource  []SIUS19LocationResource
	PersonnelResource []SIUS19PersonnelResource
}

// NewSIUS19ResourcesSlice will construct a slice of type SIUS19Resources
func NewSIUS19ResourcesSlice(input hl7.HL7Type) []SIUS19Resources {
	values := make([]SIUS19Resources, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS19Resources(input.Index(i))
	}
	return values
}

// NewRSPK21QueryResponse creates an implementation of RSPK21QueryResponse
func NewRSPK21QueryResponse(input hl7.HL7Type) RSPK21QueryResponse {
	v := RSPK21QueryResponse{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.AccessRestriction = NewARVSlice(input.Index(2))
	v.NextOfKinAssociatedParties = NewNK1Slice(input.Index(3))
	v.QueryResponseInstance = NewQRI(input.Index(4))
	return v
}

type RSPK21QueryResponse struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	AccessRestriction            []ARV
	NextOfKinAssociatedParties   []NK1
	QueryResponseInstance        QRI
}

// NewRSPK21QueryResponseSlice will construct a slice of type RSPK21QueryResponse
func NewRSPK21QueryResponseSlice(input hl7.HL7Type) []RSPK21QueryResponse {
	values := make([]RSPK21QueryResponse, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPK21QueryResponse(input.Index(i))
	}
	return values
}

// NewQBPZ87Qbp creates an implementation of QBPZ87Qbp
func NewQBPZ87Qbp(input hl7.HL7Type) QBPZ87Qbp {
	v := QBPZ87Qbp{}
	v.AnyHl7Segment = NewHxx(input.Index(0))
	return v
}

type QBPZ87Qbp struct {
	AnyHl7Segment Hxx
}

// NewQBPZ87QbpSlice will construct a slice of type QBPZ87Qbp
func NewQBPZ87QbpSlice(input hl7.HL7Type) []QBPZ87Qbp {
	values := make([]QBPZ87Qbp, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewQBPZ87Qbp(input.Index(i))
	}
	return values
}

// NewSIUS17Service creates an implementation of SIUS17Service
func NewSIUS17Service(input hl7.HL7Type) SIUS17Service {
	v := SIUS17Service{}
	v.AppointmentInformation = NewAIS(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS17Service struct {
	AppointmentInformation AIS
	NotesAndComments       []NTE
}

// NewSIUS17ServiceSlice will construct a slice of type SIUS17Service
func NewSIUS17ServiceSlice(input hl7.HL7Type) []SIUS17Service {
	values := make([]SIUS17Service, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS17Service(input.Index(i))
	}
	return values
}

// NewCQUI19MedicationOrderObservation creates an implementation of CQUI19MedicationOrderObservation
func NewCQUI19MedicationOrderObservation(input hl7.HL7Type) CQUI19MedicationOrderObservation {
	v := CQUI19MedicationOrderObservation{}
	v.ObservationResult = NewOBXSlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CQUI19MedicationOrderObservation struct {
	ObservationResult        []OBX
	ParticipationInformation []PRT
}

// NewCQUI19MedicationOrderObservationSlice will construct a slice of type CQUI19MedicationOrderObservation
func NewCQUI19MedicationOrderObservationSlice(input hl7.HL7Type) []CQUI19MedicationOrderObservation {
	values := make([]CQUI19MedicationOrderObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCQUI19MedicationOrderObservation(input.Index(i))
	}
	return values
}

// NewQBPZ75Qbp creates an implementation of QBPZ75Qbp
func NewQBPZ75Qbp(input hl7.HL7Type) QBPZ75Qbp {
	v := QBPZ75Qbp{}
	v.AnyHl7Segment = NewHxx(input.Index(0))
	return v
}

type QBPZ75Qbp struct {
	AnyHl7Segment Hxx
}

// NewQBPZ75QbpSlice will construct a slice of type QBPZ75Qbp
func NewQBPZ75QbpSlice(input hl7.HL7Type) []QBPZ75Qbp {
	values := make([]QBPZ75Qbp, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewQBPZ75Qbp(input.Index(i))
	}
	return values
}

// NewRDSO13AdditionalDemographics creates an implementation of RDSO13AdditionalDemographics
func NewRDSO13AdditionalDemographics(input hl7.HL7Type) RDSO13AdditionalDemographics {
	v := RDSO13AdditionalDemographics{}
	v.PatientAdditionalDemographic = NewPD1(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.AccessRestriction = NewARVSlice(input.Index(2))
	return v
}

type RDSO13AdditionalDemographics struct {
	PatientAdditionalDemographic PD1
	ParticipationInformation     []PRT
	AccessRestriction            []ARV
}

// NewRDSO13AdditionalDemographicsSlice will construct a slice of type RDSO13AdditionalDemographics
func NewRDSO13AdditionalDemographicsSlice(input hl7.HL7Type) []RDSO13AdditionalDemographics {
	values := make([]RDSO13AdditionalDemographics, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRDSO13AdditionalDemographics(input.Index(i))
	}
	return values
}

// NewORDO04OrderDiet creates an implementation of ORDO04OrderDiet
func NewORDO04OrderDiet(input hl7.HL7Type) ORDO04OrderDiet {
	v := ORDO04OrderDiet{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.TimingDiet = NewORDO04TimingDietSlice(input.Index(2))
	v.DietaryOrdersSupplementsAndPreferences = NewODSSlice(input.Index(3))
	v.NotesAndComments = NewNTESlice(input.Index(4))
	return v
}

type ORDO04OrderDiet struct {
	CommonOrder                            ORC
	ParticipationInformation               []PRT
	TimingDiet                             []ORDO04TimingDiet
	DietaryOrdersSupplementsAndPreferences []ODS
	NotesAndComments                       []NTE
}

// NewORDO04OrderDietSlice will construct a slice of type ORDO04OrderDiet
func NewORDO04OrderDietSlice(input hl7.HL7Type) []ORDO04OrderDiet {
	values := make([]ORDO04OrderDiet, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORDO04OrderDiet(input.Index(i))
	}
	return values
}

// NewRRII14ProviderContact creates an implementation of RRII14ProviderContact
func NewRRII14ProviderContact(input hl7.HL7Type) RRII14ProviderContact {
	v := RRII14ProviderContact{}
	v.ProviderData = NewPRD(input.Index(0))
	v.ContactData = NewCTDSlice(input.Index(1))
	return v
}

type RRII14ProviderContact struct {
	ProviderData PRD
	ContactData  []CTD
}

// NewRRII14ProviderContactSlice will construct a slice of type RRII14ProviderContact
func NewRRII14ProviderContactSlice(input hl7.HL7Type) []RRII14ProviderContact {
	values := make([]RRII14ProviderContact, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRRII14ProviderContact(input.Index(i))
	}
	return values
}

// NewMFNM05MfLocation creates an implementation of MFNM05MfLocation
func NewMFNM05MfLocation(input hl7.HL7Type) MFNM05MfLocation {
	v := MFNM05MfLocation{}
	v.MasterFileEntry = NewMFE(input.Index(0))
	v.LocationIdentification = NewLOC(input.Index(1))
	v.LocationCharacteristic = NewLCHSlice(input.Index(2))
	v.LocationRelationship = NewLRLSlice(input.Index(3))
	v.MfLocDept = NewMFNM05MfLocDeptSlice(input.Index(4))
	return v
}

type MFNM05MfLocation struct {
	MasterFileEntry        MFE
	LocationIdentification LOC
	LocationCharacteristic []LCH
	LocationRelationship   []LRL
	MfLocDept              []MFNM05MfLocDept
}

// NewMFNM05MfLocationSlice will construct a slice of type MFNM05MfLocation
func NewMFNM05MfLocationSlice(input hl7.HL7Type) []MFNM05MfLocation {
	values := make([]MFNM05MfLocation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMFNM05MfLocation(input.Index(i))
	}
	return values
}

// NewCCRI17Goal creates an implementation of CCRI17Goal
func NewCCRI17Goal(input hl7.HL7Type) CCRI17Goal {
	v := CCRI17Goal{}
	v.GoalDetail = NewGOL(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	v.RoleGoal = NewCCRI17RoleGoalSlice(input.Index(2))
	v.GoalObservation = NewCCRI17GoalObservationSlice(input.Index(3))
	return v
}

type CCRI17Goal struct {
	GoalDetail      GOL
	Variance        []VAR
	RoleGoal        []CCRI17RoleGoal
	GoalObservation []CCRI17GoalObservation
}

// NewCCRI17GoalSlice will construct a slice of type CCRI17Goal
func NewCCRI17GoalSlice(input hl7.HL7Type) []CCRI17Goal {
	values := make([]CCRI17Goal, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI17Goal(input.Index(i))
	}
	return values
}

// NewNMDN02Clock creates an implementation of NMDN02Clock
func NewNMDN02Clock(input hl7.HL7Type) NMDN02Clock {
	v := NMDN02Clock{}
	v.SystemClock = NewNCK(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type NMDN02Clock struct {
	SystemClock      NCK
	NotesAndComments []NTE
}

// NewNMDN02ClockSlice will construct a slice of type NMDN02Clock
func NewNMDN02ClockSlice(input hl7.HL7Type) []NMDN02Clock {
	values := make([]NMDN02Clock, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewNMDN02Clock(input.Index(i))
	}
	return values
}

// NewRSPZ88QueryResponse creates an implementation of RSPZ88QueryResponse
func NewRSPZ88QueryResponse(input hl7.HL7Type) RSPZ88QueryResponse {
	v := RSPZ88QueryResponse{}
	v.Patient = NewRSPZ88Patient(input.Index(0))
	v.CommonOrder = NewRSPZ88CommonOrderSlice(input.Index(1))
	return v
}

type RSPZ88QueryResponse struct {
	Patient     RSPZ88Patient
	CommonOrder []RSPZ88CommonOrder
}

// NewRSPZ88QueryResponseSlice will construct a slice of type RSPZ88QueryResponse
func NewRSPZ88QueryResponseSlice(input hl7.HL7Type) []RSPZ88QueryResponse {
	values := make([]RSPZ88QueryResponse, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPZ88QueryResponse(input.Index(i))
	}
	return values
}

// NewSRRS05GeneralResource creates an implementation of SRRS05GeneralResource
func NewSRRS05GeneralResource(input hl7.HL7Type) SRRS05GeneralResource {
	v := SRRS05GeneralResource{}
	v.AppointmentInformationGeneralResource = NewAIG(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SRRS05GeneralResource struct {
	AppointmentInformationGeneralResource AIG
	NotesAndComments                      []NTE
}

// NewSRRS05GeneralResourceSlice will construct a slice of type SRRS05GeneralResource
func NewSRRS05GeneralResourceSlice(input hl7.HL7Type) []SRRS05GeneralResource {
	values := make([]SRRS05GeneralResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS05GeneralResource(input.Index(i))
	}
	return values
}

// NewORLO40Patient creates an implementation of ORLO40Patient
func NewORLO40Patient(input hl7.HL7Type) ORLO40Patient {
	v := ORLO40Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.AccessRestriction = NewARVSlice(input.Index(2))
	v.Order = NewORLO40OrderSlice(input.Index(3))
	return v
}

type ORLO40Patient struct {
	PatientIdentification    PID
	ParticipationInformation []PRT
	AccessRestriction        []ARV
	Order                    []ORLO40Order
}

// NewORLO40PatientSlice will construct a slice of type ORLO40Patient
func NewORLO40PatientSlice(input hl7.HL7Type) []ORLO40Patient {
	values := make([]ORLO40Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORLO40Patient(input.Index(i))
	}
	return values
}

// NewRREO26Response creates an implementation of RREO26Response
func NewRREO26Response(input hl7.HL7Type) RREO26Response {
	v := RREO26Response{}
	v.Patient = NewRREO26Patient(input.Index(0))
	v.Order = NewRREO26OrderSlice(input.Index(1))
	return v
}

type RREO26Response struct {
	Patient RREO26Patient
	Order   []RREO26Order
}

// NewRREO26ResponseSlice will construct a slice of type RREO26Response
func NewRREO26ResponseSlice(input hl7.HL7Type) []RREO26Response {
	values := make([]RREO26Response, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRREO26Response(input.Index(i))
	}
	return values
}

// NewCRMC08PatientVisit creates an implementation of CRMC08PatientVisit
func NewCRMC08PatientVisit(input hl7.HL7Type) CRMC08PatientVisit {
	v := CRMC08PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CRMC08PatientVisit struct {
	PatientVisit             PV1
	ParticipationInformation []PRT
}

// NewCRMC08PatientVisitSlice will construct a slice of type CRMC08PatientVisit
func NewCRMC08PatientVisitSlice(input hl7.HL7Type) []CRMC08PatientVisit {
	values := make([]CRMC08PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCRMC08PatientVisit(input.Index(i))
	}
	return values
}

// NewORLO36ObservationRequest creates an implementation of ORLO36ObservationRequest
func NewORLO36ObservationRequest(input hl7.HL7Type) ORLO36ObservationRequest {
	v := ORLO36ObservationRequest{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type ORLO36ObservationRequest struct {
	ObservationRequest       OBR
	ParticipationInformation []PRT
}

// NewORLO36ObservationRequestSlice will construct a slice of type ORLO36ObservationRequest
func NewORLO36ObservationRequestSlice(input hl7.HL7Type) []ORLO36ObservationRequest {
	values := make([]ORLO36ObservationRequest, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORLO36ObservationRequest(input.Index(i))
	}
	return values
}

// NewPPPPCDGoalRole creates an implementation of PPPPCDGoalRole
func NewPPPPCDGoalRole(input hl7.HL7Type) PPPPCDGoalRole {
	v := PPPPCDGoalRole{}
	v.Role = NewROL(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type PPPPCDGoalRole struct {
	Role     ROL
	Variance []VAR
}

// NewPPPPCDGoalRoleSlice will construct a slice of type PPPPCDGoalRole
func NewPPPPCDGoalRoleSlice(input hl7.HL7Type) []PPPPCDGoalRole {
	values := make([]PPPPCDGoalRole, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPPPCDGoalRole(input.Index(i))
	}
	return values
}

// NewDERO44DonnorOrder creates an implementation of DERO44DonnorOrder
func NewDERO44DonnorOrder(input hl7.HL7Type) DERO44DonnorOrder {
	v := DERO44DonnorOrder{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type DERO44DonnorOrder struct {
	ObservationRequest OBR
	NotesAndComments   []NTE
}

// NewDERO44DonnorOrderSlice will construct a slice of type DERO44DonnorOrder
func NewDERO44DonnorOrderSlice(input hl7.HL7Type) []DERO44DonnorOrder {
	values := make([]DERO44DonnorOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewDERO44DonnorOrder(input.Index(i))
	}
	return values
}

// NewCQUI19PatientVisit creates an implementation of CQUI19PatientVisit
func NewCQUI19PatientVisit(input hl7.HL7Type) CQUI19PatientVisit {
	v := CQUI19PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	return v
}

type CQUI19PatientVisit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
}

// NewCQUI19PatientVisitSlice will construct a slice of type CQUI19PatientVisit
func NewCQUI19PatientVisitSlice(input hl7.HL7Type) []CQUI19PatientVisit {
	values := make([]CQUI19PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCQUI19PatientVisit(input.Index(i))
	}
	return values
}

// NewBPSO29Patient creates an implementation of BPSO29Patient
func NewBPSO29Patient(input hl7.HL7Type) BPSO29Patient {
	v := BPSO29Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.AccessRestriction = NewARVSlice(input.Index(3))
	v.NotesAndComments = NewNTESlice(input.Index(4))
	v.PatientVisit = NewBPSO29PatientVisit(input.Index(5))
	return v
}

type BPSO29Patient struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	ParticipationInformation     []PRT
	AccessRestriction            []ARV
	NotesAndComments             []NTE
	PatientVisit                 BPSO29PatientVisit
}

// NewBPSO29PatientSlice will construct a slice of type BPSO29Patient
func NewBPSO29PatientSlice(input hl7.HL7Type) []BPSO29Patient {
	values := make([]BPSO29Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewBPSO29Patient(input.Index(i))
	}
	return values
}

// NewSRRS11Service creates an implementation of SRRS11Service
func NewSRRS11Service(input hl7.HL7Type) SRRS11Service {
	v := SRRS11Service{}
	v.AppointmentInformation = NewAIS(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SRRS11Service struct {
	AppointmentInformation AIS
	NotesAndComments       []NTE
}

// NewSRRS11ServiceSlice will construct a slice of type SRRS11Service
func NewSRRS11ServiceSlice(input hl7.HL7Type) []SRRS11Service {
	values := make([]SRRS11Service, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS11Service(input.Index(i))
	}
	return values
}

// NewRQAI11Provider creates an implementation of RQAI11Provider
func NewRQAI11Provider(input hl7.HL7Type) RQAI11Provider {
	v := RQAI11Provider{}
	v.ProviderData = NewPRD(input.Index(0))
	v.ContactData = NewCTDSlice(input.Index(1))
	return v
}

type RQAI11Provider struct {
	ProviderData PRD
	ContactData  []CTD
}

// NewRQAI11ProviderSlice will construct a slice of type RQAI11Provider
func NewRQAI11ProviderSlice(input hl7.HL7Type) []RQAI11Provider {
	values := make([]RQAI11Provider, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQAI11Provider(input.Index(i))
	}
	return values
}

// NewMFNM15MfInvItem creates an implementation of MFNM15MfInvItem
func NewMFNM15MfInvItem(input hl7.HL7Type) MFNM15MfInvItem {
	v := MFNM15MfInvItem{}
	v.MasterFileEntry = NewMFE(input.Index(0))
	v.InventoryItemMaster = NewIIM(input.Index(1))
	return v
}

type MFNM15MfInvItem struct {
	MasterFileEntry     MFE
	InventoryItemMaster IIM
}

// NewMFNM15MfInvItemSlice will construct a slice of type MFNM15MfInvItem
func NewMFNM15MfInvItemSlice(input hl7.HL7Type) []MFNM15MfInvItem {
	values := make([]MFNM15MfInvItem, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMFNM15MfInvItem(input.Index(i))
	}
	return values
}

// NewSRMS06PersonnelResource creates an implementation of SRMS06PersonnelResource
func NewSRMS06PersonnelResource(input hl7.HL7Type) SRMS06PersonnelResource {
	v := SRMS06PersonnelResource{}
	v.AppointmentInformationPersonnelResource = NewAIP(input.Index(0))
	v.AppointmentPreferences = NewAPR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type SRMS06PersonnelResource struct {
	AppointmentInformationPersonnelResource AIP
	AppointmentPreferences                  APR
	NotesAndComments                        []NTE
}

// NewSRMS06PersonnelResourceSlice will construct a slice of type SRMS06PersonnelResource
func NewSRMS06PersonnelResourceSlice(input hl7.HL7Type) []SRMS06PersonnelResource {
	values := make([]SRMS06PersonnelResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS06PersonnelResource(input.Index(i))
	}
	return values
}

// NewSRMS01LocationResource creates an implementation of SRMS01LocationResource
func NewSRMS01LocationResource(input hl7.HL7Type) SRMS01LocationResource {
	v := SRMS01LocationResource{}
	v.AppointmentInformationLocationResource = NewAIL(input.Index(0))
	v.AppointmentPreferences = NewAPR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type SRMS01LocationResource struct {
	AppointmentInformationLocationResource AIL
	AppointmentPreferences                 APR
	NotesAndComments                       []NTE
}

// NewSRMS01LocationResourceSlice will construct a slice of type SRMS01LocationResource
func NewSRMS01LocationResourceSlice(input hl7.HL7Type) []SRMS01LocationResource {
	values := make([]SRMS01LocationResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS01LocationResource(input.Index(i))
	}
	return values
}

// NewSIUS17PersonnelResource creates an implementation of SIUS17PersonnelResource
func NewSIUS17PersonnelResource(input hl7.HL7Type) SIUS17PersonnelResource {
	v := SIUS17PersonnelResource{}
	v.AppointmentInformationPersonnelResource = NewAIP(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS17PersonnelResource struct {
	AppointmentInformationPersonnelResource AIP
	NotesAndComments                        []NTE
}

// NewSIUS17PersonnelResourceSlice will construct a slice of type SIUS17PersonnelResource
func NewSIUS17PersonnelResourceSlice(input hl7.HL7Type) []SIUS17PersonnelResource {
	values := make([]SIUS17PersonnelResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS17PersonnelResource(input.Index(i))
	}
	return values
}

// NewRRII15ResultsNotes creates an implementation of RRII15ResultsNotes
func NewRRII15ResultsNotes(input hl7.HL7Type) RRII15ResultsNotes {
	v := RRII15ResultsNotes{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type RRII15ResultsNotes struct {
	ObservationResult OBX
	NotesAndComments  []NTE
}

// NewRRII15ResultsNotesSlice will construct a slice of type RRII15ResultsNotes
func NewRRII15ResultsNotesSlice(input hl7.HL7Type) []RRII15ResultsNotes {
	values := make([]RRII15ResultsNotes, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRRII15ResultsNotes(input.Index(i))
	}
	return values
}

// NewEHCE10ProductServiceLineInfo creates an implementation of EHCE10ProductServiceLineInfo
func NewEHCE10ProductServiceLineInfo(input hl7.HL7Type) EHCE10ProductServiceLineInfo {
	v := EHCE10ProductServiceLineInfo{}
	v.ProductServiceLineItem = NewPSL(input.Index(0))
	v.Adjustment = NewADJSlice(input.Index(1))
	return v
}

type EHCE10ProductServiceLineInfo struct {
	ProductServiceLineItem PSL
	Adjustment             []ADJ
}

// NewEHCE10ProductServiceLineInfoSlice will construct a slice of type EHCE10ProductServiceLineInfo
func NewEHCE10ProductServiceLineInfoSlice(input hl7.HL7Type) []EHCE10ProductServiceLineInfo {
	values := make([]EHCE10ProductServiceLineInfo, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewEHCE10ProductServiceLineInfo(input.Index(i))
	}
	return values
}

// NewBTSO31Order creates an implementation of BTSO31Order
func NewBTSO31Order(input hl7.HL7Type) BTSO31Order {
	v := BTSO31Order{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.Timing = NewBTSO31TimingSlice(input.Index(2))
	v.BloodProductOrder = NewBPO(input.Index(3))
	v.NotesAndComments = NewNTESlice(input.Index(4))
	v.ProductStatus = NewBTSO31ProductStatusSlice(input.Index(5))
	return v
}

type BTSO31Order struct {
	CommonOrder              ORC
	ParticipationInformation []PRT
	Timing                   []BTSO31Timing
	BloodProductOrder        BPO
	NotesAndComments         []NTE
	ProductStatus            []BTSO31ProductStatus
}

// NewBTSO31OrderSlice will construct a slice of type BTSO31Order
func NewBTSO31OrderSlice(input hl7.HL7Type) []BTSO31Order {
	values := make([]BTSO31Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewBTSO31Order(input.Index(i))
	}
	return values
}

// NewORIO24Patient creates an implementation of ORIO24Patient
func NewORIO24Patient(input hl7.HL7Type) ORIO24Patient {
	v := ORIO24Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.AccessRestriction = NewARVSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.ParticipationInformation = NewPRTSlice(input.Index(3))
	return v
}

type ORIO24Patient struct {
	PatientIdentification    PID
	AccessRestriction        []ARV
	NotesAndComments         []NTE
	ParticipationInformation []PRT
}

// NewORIO24PatientSlice will construct a slice of type ORIO24Patient
func NewORIO24PatientSlice(input hl7.HL7Type) []ORIO24Patient {
	values := make([]ORIO24Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORIO24Patient(input.Index(i))
	}
	return values
}

// NewSRMS07GeneralResource creates an implementation of SRMS07GeneralResource
func NewSRMS07GeneralResource(input hl7.HL7Type) SRMS07GeneralResource {
	v := SRMS07GeneralResource{}
	v.AppointmentInformationGeneralResource = NewAIG(input.Index(0))
	v.AppointmentPreferences = NewAPR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type SRMS07GeneralResource struct {
	AppointmentInformationGeneralResource AIG
	AppointmentPreferences                APR
	NotesAndComments                      []NTE
}

// NewSRMS07GeneralResourceSlice will construct a slice of type SRMS07GeneralResource
func NewSRMS07GeneralResourceSlice(input hl7.HL7Type) []SRMS07GeneralResource {
	values := make([]SRMS07GeneralResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS07GeneralResource(input.Index(i))
	}
	return values
}

// NewOULR23TimingQty creates an implementation of OULR23TimingQty
func NewOULR23TimingQty(input hl7.HL7Type) OULR23TimingQty {
	v := OULR23TimingQty{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type OULR23TimingQty struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewOULR23TimingQtySlice will construct a slice of type OULR23TimingQty
func NewOULR23TimingQtySlice(input hl7.HL7Type) []OULR23TimingQty {
	values := make([]OULR23TimingQty, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOULR23TimingQty(input.Index(i))
	}
	return values
}

// NewCCRI18RoleClinicalHistoryObject creates an implementation of CCRI18RoleClinicalHistoryObject
func NewCCRI18RoleClinicalHistoryObject(input hl7.HL7Type) CCRI18RoleClinicalHistoryObject {
	v := CCRI18RoleClinicalHistoryObject{}
	v.Role = NewROL(input.Index(0))
	v.ProviderData = NewPRD(input.Index(1))
	return v
}

type CCRI18RoleClinicalHistoryObject struct {
	Role         ROL
	ProviderData PRD
}

// NewCCRI18RoleClinicalHistoryObjectSlice will construct a slice of type CCRI18RoleClinicalHistoryObject
func NewCCRI18RoleClinicalHistoryObjectSlice(input hl7.HL7Type) []CCRI18RoleClinicalHistoryObject {
	values := make([]CCRI18RoleClinicalHistoryObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI18RoleClinicalHistoryObject(input.Index(i))
	}
	return values
}

// NewCSUC11StudyObservation creates an implementation of CSUC11StudyObservation
func NewCSUC11StudyObservation(input hl7.HL7Type) CSUC11StudyObservation {
	v := CSUC11StudyObservation{}
	v.CommonOrder = NewCSUC11CommonOrder(input.Index(0))
	v.ObservationRequest = NewOBR(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.TimingQty = NewCSUC11TimingQtySlice(input.Index(3))
	v.ObservationResult = NewOBX(input.Index(4))
	v.AdditionalParticipationInformation = NewPRTSlice(input.Index(5))
	return v
}

type CSUC11StudyObservation struct {
	CommonOrder                        CSUC11CommonOrder
	ObservationRequest                 OBR
	ParticipationInformation           []PRT
	TimingQty                          []CSUC11TimingQty
	ObservationResult                  OBX
	AdditionalParticipationInformation []PRT
}

// NewCSUC11StudyObservationSlice will construct a slice of type CSUC11StudyObservation
func NewCSUC11StudyObservationSlice(input hl7.HL7Type) []CSUC11StudyObservation {
	values := make([]CSUC11StudyObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCSUC11StudyObservation(input.Index(i))
	}
	return values
}

// NewOMGO19Specimen creates an implementation of OMGO19Specimen
func NewOMGO19Specimen(input hl7.HL7Type) OMGO19Specimen {
	v := OMGO19Specimen{}
	v.Specimen = NewSPM(input.Index(0))
	v.SpecimenObservation = NewOMGO19SpecimenObservationSlice(input.Index(1))
	v.Container = NewOMGO19ContainerSlice(input.Index(2))
	return v
}

type OMGO19Specimen struct {
	Specimen            SPM
	SpecimenObservation []OMGO19SpecimenObservation
	Container           []OMGO19Container
}

// NewOMGO19SpecimenSlice will construct a slice of type OMGO19Specimen
func NewOMGO19SpecimenSlice(input hl7.HL7Type) []OMGO19Specimen {
	values := make([]OMGO19Specimen, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMGO19Specimen(input.Index(i))
	}
	return values
}

// NewCCMI21RolePathway creates an implementation of CCMI21RolePathway
func NewCCMI21RolePathway(input hl7.HL7Type) CCMI21RolePathway {
	v := CCMI21RolePathway{}
	v.RolePathwayObject = NewCCMI21RolePathwayObject(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type CCMI21RolePathway struct {
	RolePathwayObject CCMI21RolePathwayObject
	Variance          []VAR
}

// NewCCMI21RolePathwaySlice will construct a slice of type CCMI21RolePathway
func NewCCMI21RolePathwaySlice(input hl7.HL7Type) []CCMI21RolePathway {
	values := make([]CCMI21RolePathway, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCMI21RolePathway(input.Index(i))
	}
	return values
}

// NewPPRPC3Pathway creates an implementation of PPRPC3Pathway
func NewPPRPC3Pathway(input hl7.HL7Type) PPRPC3Pathway {
	v := PPRPC3Pathway{}
	v.Pathway = NewPTH(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type PPRPC3Pathway struct {
	Pathway  PTH
	Variance []VAR
}

// NewPPRPC3PathwaySlice will construct a slice of type PPRPC3Pathway
func NewPPRPC3PathwaySlice(input hl7.HL7Type) []PPRPC3Pathway {
	values := make([]PPRPC3Pathway, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPRPC3Pathway(input.Index(i))
	}
	return values
}

// NewOMQO42ContainerObservation creates an implementation of OMQO42ContainerObservation
func NewOMQO42ContainerObservation(input hl7.HL7Type) OMQO42ContainerObservation {
	v := OMQO42ContainerObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type OMQO42ContainerObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewOMQO42ContainerObservationSlice will construct a slice of type OMQO42ContainerObservation
func NewOMQO42ContainerObservationSlice(input hl7.HL7Type) []OMQO42ContainerObservation {
	values := make([]OMQO42ContainerObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMQO42ContainerObservation(input.Index(i))
	}
	return values
}

// NewSIUS24Service creates an implementation of SIUS24Service
func NewSIUS24Service(input hl7.HL7Type) SIUS24Service {
	v := SIUS24Service{}
	v.AppointmentInformation = NewAIS(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS24Service struct {
	AppointmentInformation AIS
	NotesAndComments       []NTE
}

// NewSIUS24ServiceSlice will construct a slice of type SIUS24Service
func NewSIUS24ServiceSlice(input hl7.HL7Type) []SIUS24Service {
	values := make([]SIUS24Service, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS24Service(input.Index(i))
	}
	return values
}

// NewORSO06Timing creates an implementation of ORSO06Timing
func NewORSO06Timing(input hl7.HL7Type) ORSO06Timing {
	v := ORSO06Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type ORSO06Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewORSO06TimingSlice will construct a slice of type ORSO06Timing
func NewORSO06TimingSlice(input hl7.HL7Type) []ORSO06Timing {
	values := make([]ORSO06Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORSO06Timing(input.Index(i))
	}
	return values
}

// NewORUR40SpecimenObservation creates an implementation of ORUR40SpecimenObservation
func NewORUR40SpecimenObservation(input hl7.HL7Type) ORUR40SpecimenObservation {
	v := ORUR40SpecimenObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type ORUR40SpecimenObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewORUR40SpecimenObservationSlice will construct a slice of type ORUR40SpecimenObservation
func NewORUR40SpecimenObservationSlice(input hl7.HL7Type) []ORUR40SpecimenObservation {
	values := make([]ORUR40SpecimenObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORUR40SpecimenObservation(input.Index(i))
	}
	return values
}

// NewRSPZ86Dispense creates an implementation of RSPZ86Dispense
func NewRSPZ86Dispense(input hl7.HL7Type) RSPZ86Dispense {
	v := RSPZ86Dispense{}
	v.PharmacyTreatmentDispense = NewRXD(input.Index(0))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(1))
	v.PharmacyTreatmentComponentOrder = NewRXCSlice(input.Index(2))
	return v
}

type RSPZ86Dispense struct {
	PharmacyTreatmentDispense       RXD
	PharmacyTreatmentRoute          []RXR
	PharmacyTreatmentComponentOrder []RXC
}

// NewRSPZ86DispenseSlice will construct a slice of type RSPZ86Dispense
func NewRSPZ86DispenseSlice(input hl7.HL7Type) []RSPZ86Dispense {
	values := make([]RSPZ86Dispense, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPZ86Dispense(input.Index(i))
	}
	return values
}

// NewRRII15AuthorizationContact creates an implementation of RRII15AuthorizationContact
func NewRRII15AuthorizationContact(input hl7.HL7Type) RRII15AuthorizationContact {
	v := RRII15AuthorizationContact{}
	v.AuthorizationInformation = NewAUT(input.Index(0))
	v.ContactData = NewCTD(input.Index(1))
	return v
}

type RRII15AuthorizationContact struct {
	AuthorizationInformation AUT
	ContactData              CTD
}

// NewRRII15AuthorizationContactSlice will construct a slice of type RRII15AuthorizationContact
func NewRRII15AuthorizationContactSlice(input hl7.HL7Type) []RRII15AuthorizationContact {
	values := make([]RRII15AuthorizationContact, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRRII15AuthorizationContact(input.Index(i))
	}
	return values
}

// NewCCMI21RoleClinicalHistoryObject creates an implementation of CCMI21RoleClinicalHistoryObject
func NewCCMI21RoleClinicalHistoryObject(input hl7.HL7Type) CCMI21RoleClinicalHistoryObject {
	v := CCMI21RoleClinicalHistoryObject{}
	v.Role = NewROL(input.Index(0))
	v.ProviderData = NewPRD(input.Index(1))
	return v
}

type CCMI21RoleClinicalHistoryObject struct {
	Role         ROL
	ProviderData PRD
}

// NewCCMI21RoleClinicalHistoryObjectSlice will construct a slice of type CCMI21RoleClinicalHistoryObject
func NewCCMI21RoleClinicalHistoryObjectSlice(input hl7.HL7Type) []CCMI21RoleClinicalHistoryObject {
	values := make([]CCMI21RoleClinicalHistoryObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCMI21RoleClinicalHistoryObject(input.Index(i))
	}
	return values
}

// NewSIUS16PersonnelResource creates an implementation of SIUS16PersonnelResource
func NewSIUS16PersonnelResource(input hl7.HL7Type) SIUS16PersonnelResource {
	v := SIUS16PersonnelResource{}
	v.AppointmentInformationPersonnelResource = NewAIP(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS16PersonnelResource struct {
	AppointmentInformationPersonnelResource AIP
	NotesAndComments                        []NTE
}

// NewSIUS16PersonnelResourceSlice will construct a slice of type SIUS16PersonnelResource
func NewSIUS16PersonnelResourceSlice(input hl7.HL7Type) []SIUS16PersonnelResource {
	values := make([]SIUS16PersonnelResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS16PersonnelResource(input.Index(i))
	}
	return values
}

// NewORLO40SpecimenShipment creates an implementation of ORLO40SpecimenShipment
func NewORLO40SpecimenShipment(input hl7.HL7Type) ORLO40SpecimenShipment {
	v := ORLO40SpecimenShipment{}
	v.Shipment = NewSHP(input.Index(0))
	v.Package = NewORLO40PackageSlice(input.Index(1))
	return v
}

type ORLO40SpecimenShipment struct {
	Shipment SHP
	Package  []ORLO40Package
}

// NewORLO40SpecimenShipmentSlice will construct a slice of type ORLO40SpecimenShipment
func NewORLO40SpecimenShipmentSlice(input hl7.HL7Type) []ORLO40SpecimenShipment {
	values := make([]ORLO40SpecimenShipment, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORLO40SpecimenShipment(input.Index(i))
	}
	return values
}

// NewOSMR26PatientVisitObservation creates an implementation of OSMR26PatientVisitObservation
func NewOSMR26PatientVisitObservation(input hl7.HL7Type) OSMR26PatientVisitObservation {
	v := OSMR26PatientVisitObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type OSMR26PatientVisitObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewOSMR26PatientVisitObservationSlice will construct a slice of type OSMR26PatientVisitObservation
func NewOSMR26PatientVisitObservationSlice(input hl7.HL7Type) []OSMR26PatientVisitObservation {
	values := make([]OSMR26PatientVisitObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOSMR26PatientVisitObservation(input.Index(i))
	}
	return values
}

// NewCCII22RoleProblem creates an implementation of CCII22RoleProblem
func NewCCII22RoleProblem(input hl7.HL7Type) CCII22RoleProblem {
	v := CCII22RoleProblem{}
	v.RoleProblemObject = NewCCII22RoleProblemObject(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type CCII22RoleProblem struct {
	RoleProblemObject CCII22RoleProblemObject
	Variance          []VAR
}

// NewCCII22RoleProblemSlice will construct a slice of type CCII22RoleProblem
func NewCCII22RoleProblemSlice(input hl7.HL7Type) []CCII22RoleProblem {
	values := make([]CCII22RoleProblem, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCII22RoleProblem(input.Index(i))
	}
	return values
}

// NewRDEO25Patient creates an implementation of RDEO25Patient
func NewRDEO25Patient(input hl7.HL7Type) RDEO25Patient {
	v := RDEO25Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	v.AccessRestriction = NewARVSlice(input.Index(4))
	v.PatientVisit = NewRDEO25PatientVisit(input.Index(5))
	v.Insurance = NewRDEO25InsuranceSlice(input.Index(6))
	v.Guarantor = NewGT1(input.Index(7))
	v.PatientAllergyInformation = NewAL1Slice(input.Index(8))
	return v
}

type RDEO25Patient struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	ParticipationInformation     []PRT
	NotesAndComments             []NTE
	AccessRestriction            []ARV
	PatientVisit                 RDEO25PatientVisit
	Insurance                    []RDEO25Insurance
	Guarantor                    GT1
	PatientAllergyInformation    []AL1
}

// NewRDEO25PatientSlice will construct a slice of type RDEO25Patient
func NewRDEO25PatientSlice(input hl7.HL7Type) []RDEO25Patient {
	values := make([]RDEO25Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRDEO25Patient(input.Index(i))
	}
	return values
}

// NewCCUI20MedicationEncodingObservation creates an implementation of CCUI20MedicationEncodingObservation
func NewCCUI20MedicationEncodingObservation(input hl7.HL7Type) CCUI20MedicationEncodingObservation {
	v := CCUI20MedicationEncodingObservation{}
	v.ObservationResult = NewOBXSlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CCUI20MedicationEncodingObservation struct {
	ObservationResult        []OBX
	ParticipationInformation []PRT
}

// NewCCUI20MedicationEncodingObservationSlice will construct a slice of type CCUI20MedicationEncodingObservation
func NewCCUI20MedicationEncodingObservationSlice(input hl7.HL7Type) []CCUI20MedicationEncodingObservation {
	values := make([]CCUI20MedicationEncodingObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCUI20MedicationEncodingObservation(input.Index(i))
	}
	return values
}

// NewORUR40OrderDocument creates an implementation of ORUR40OrderDocument
func NewORUR40OrderDocument(input hl7.HL7Type) ORUR40OrderDocument {
	v := ORUR40OrderDocument{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.TranscriptionDocumentHeader = NewTXA(input.Index(2))
	return v
}

type ORUR40OrderDocument struct {
	ObservationResult           OBX
	ParticipationInformation    []PRT
	TranscriptionDocumentHeader TXA
}

// NewORUR40OrderDocumentSlice will construct a slice of type ORUR40OrderDocument
func NewORUR40OrderDocumentSlice(input hl7.HL7Type) []ORUR40OrderDocument {
	values := make([]ORUR40OrderDocument, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORUR40OrderDocument(input.Index(i))
	}
	return values
}

// NewOMLO35PatientVisitPrior creates an implementation of OMLO35PatientVisitPrior
func NewOMLO35PatientVisitPrior(input hl7.HL7Type) OMLO35PatientVisitPrior {
	v := OMLO35PatientVisitPrior{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	return v
}

type OMLO35PatientVisitPrior struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ParticipationInformation          []PRT
}

// NewOMLO35PatientVisitPriorSlice will construct a slice of type OMLO35PatientVisitPrior
func NewOMLO35PatientVisitPriorSlice(input hl7.HL7Type) []OMLO35PatientVisitPrior {
	values := make([]OMLO35PatientVisitPrior, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO35PatientVisitPrior(input.Index(i))
	}
	return values
}

// NewEHCE10ProductServiceSection creates an implementation of EHCE10ProductServiceSection
func NewEHCE10ProductServiceSection(input hl7.HL7Type) EHCE10ProductServiceSection {
	v := EHCE10ProductServiceSection{}
	v.ProductServiceSection = NewPSS(input.Index(0))
	v.ProductServiceGroup = NewEHCE10ProductServiceGroupSlice(input.Index(1))
	return v
}

type EHCE10ProductServiceSection struct {
	ProductServiceSection PSS
	ProductServiceGroup   []EHCE10ProductServiceGroup
}

// NewEHCE10ProductServiceSectionSlice will construct a slice of type EHCE10ProductServiceSection
func NewEHCE10ProductServiceSectionSlice(input hl7.HL7Type) []EHCE10ProductServiceSection {
	values := make([]EHCE10ProductServiceSection, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewEHCE10ProductServiceSection(input.Index(i))
	}
	return values
}

// NewCCRI16ResourceObject creates an implementation of CCRI16ResourceObject
func NewCCRI16ResourceObject(input hl7.HL7Type) CCRI16ResourceObject {
	v := CCRI16ResourceObject{}
	v.AppointmentInformation = NewAIS(input.Index(0))
	v.AppointmentInformationGeneralResource = NewAIG(input.Index(1))
	v.AppointmentInformationLocationResource = NewAIL(input.Index(2))
	v.AppointmentInformationPersonnelResource = NewAIP(input.Index(3))
	return v
}

type CCRI16ResourceObject struct {
	AppointmentInformation                  AIS
	AppointmentInformationGeneralResource   AIG
	AppointmentInformationLocationResource  AIL
	AppointmentInformationPersonnelResource AIP
}

// NewCCRI16ResourceObjectSlice will construct a slice of type CCRI16ResourceObject
func NewCCRI16ResourceObjectSlice(input hl7.HL7Type) []CCRI16ResourceObject {
	values := make([]CCRI16ResourceObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI16ResourceObject(input.Index(i))
	}
	return values
}

// NewORLO22Order creates an implementation of ORLO22Order
func NewORLO22Order(input hl7.HL7Type) ORLO22Order {
	v := ORLO22Order{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.Timing = NewORLO22TimingSlice(input.Index(2))
	v.ObservationRequest = NewORLO22ObservationRequest(input.Index(3))
	return v
}

type ORLO22Order struct {
	CommonOrder              ORC
	ParticipationInformation []PRT
	Timing                   []ORLO22Timing
	ObservationRequest       ORLO22ObservationRequest
}

// NewORLO22OrderSlice will construct a slice of type ORLO22Order
func NewORLO22OrderSlice(input hl7.HL7Type) []ORLO22Order {
	values := make([]ORLO22Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORLO22Order(input.Index(i))
	}
	return values
}

// NewRQAI08Authorization2 creates an implementation of RQAI08Authorization2
func NewRQAI08Authorization2(input hl7.HL7Type) RQAI08Authorization2 {
	v := RQAI08Authorization2{}
	v.AuthorizationInformation = NewAUT(input.Index(0))
	v.ContactData = NewCTD(input.Index(1))
	return v
}

type RQAI08Authorization2 struct {
	AuthorizationInformation AUT
	ContactData              CTD
}

// NewRQAI08Authorization2Slice will construct a slice of type RQAI08Authorization2
func NewRQAI08Authorization2Slice(input hl7.HL7Type) []RQAI08Authorization2 {
	values := make([]RQAI08Authorization2, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQAI08Authorization2(input.Index(i))
	}
	return values
}

// NewOSMR26Container creates an implementation of OSMR26Container
func NewOSMR26Container(input hl7.HL7Type) OSMR26Container {
	v := OSMR26Container{}
	v.SpecimenContainerDetail = NewSAC(input.Index(0))
	v.ContainerObservation = NewOSMR26ContainerObservationSlice(input.Index(1))
	return v
}

type OSMR26Container struct {
	SpecimenContainerDetail SAC
	ContainerObservation    []OSMR26ContainerObservation
}

// NewOSMR26ContainerSlice will construct a slice of type OSMR26Container
func NewOSMR26ContainerSlice(input hl7.HL7Type) []OSMR26Container {
	values := make([]OSMR26Container, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOSMR26Container(input.Index(i))
	}
	return values
}

// NewOMIO23Timing creates an implementation of OMIO23Timing
func NewOMIO23Timing(input hl7.HL7Type) OMIO23Timing {
	v := OMIO23Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type OMIO23Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewOMIO23TimingSlice will construct a slice of type OMIO23Timing
func NewOMIO23TimingSlice(input hl7.HL7Type) []OMIO23Timing {
	values := make([]OMIO23Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMIO23Timing(input.Index(i))
	}
	return values
}

// NewMDMT11Timing creates an implementation of MDMT11Timing
func NewMDMT11Timing(input hl7.HL7Type) MDMT11Timing {
	v := MDMT11Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type MDMT11Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewMDMT11TimingSlice will construct a slice of type MDMT11Timing
func NewMDMT11TimingSlice(input hl7.HL7Type) []MDMT11Timing {
	values := make([]MDMT11Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMDMT11Timing(input.Index(i))
	}
	return values
}

// NewRQAI09GuarantorInsurance creates an implementation of RQAI09GuarantorInsurance
func NewRQAI09GuarantorInsurance(input hl7.HL7Type) RQAI09GuarantorInsurance {
	v := RQAI09GuarantorInsurance{}
	v.Guarantor = NewGT1Slice(input.Index(0))
	v.Insurance = NewRQAI09InsuranceSlice(input.Index(1))
	return v
}

type RQAI09GuarantorInsurance struct {
	Guarantor []GT1
	Insurance []RQAI09Insurance
}

// NewRQAI09GuarantorInsuranceSlice will construct a slice of type RQAI09GuarantorInsurance
func NewRQAI09GuarantorInsuranceSlice(input hl7.HL7Type) []RQAI09GuarantorInsurance {
	values := make([]RQAI09GuarantorInsurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQAI09GuarantorInsurance(input.Index(i))
	}
	return values
}

// NewCQUI19ProblemObservation creates an implementation of CQUI19ProblemObservation
func NewCQUI19ProblemObservation(input hl7.HL7Type) CQUI19ProblemObservation {
	v := CQUI19ProblemObservation{}
	v.ObservationResult = NewOBXSlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CQUI19ProblemObservation struct {
	ObservationResult        []OBX
	ParticipationInformation []PRT
}

// NewCQUI19ProblemObservationSlice will construct a slice of type CQUI19ProblemObservation
func NewCQUI19ProblemObservationSlice(input hl7.HL7Type) []CQUI19ProblemObservation {
	values := make([]CQUI19ProblemObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCQUI19ProblemObservation(input.Index(i))
	}
	return values
}

// NewRDEO25InfusionOrder creates an implementation of RDEO25InfusionOrder
func NewRDEO25InfusionOrder(input hl7.HL7Type) RDEO25InfusionOrder {
	v := RDEO25InfusionOrder{}
	v.PharmacyTreatmentInfusion = NewRXV(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.TimingEncoded = NewRDEO25TimingEncodedSlice(input.Index(3))
	return v
}

type RDEO25InfusionOrder struct {
	PharmacyTreatmentInfusion RXV
	ParticipationInformation  []PRT
	NotesAndComments          []NTE
	TimingEncoded             []RDEO25TimingEncoded
}

// NewRDEO25InfusionOrderSlice will construct a slice of type RDEO25InfusionOrder
func NewRDEO25InfusionOrderSlice(input hl7.HL7Type) []RDEO25InfusionOrder {
	values := make([]RDEO25InfusionOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRDEO25InfusionOrder(input.Index(i))
	}
	return values
}

// NewPPGPCGOrderDetail creates an implementation of PPGPCGOrderDetail
func NewPPGPCGOrderDetail(input hl7.HL7Type) PPGPCGOrderDetail {
	v := PPGPCGOrderDetail{}
	v.Choice = NewPPGPCGChoice(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Variance = NewVARSlice(input.Index(2))
	v.OrderObservation = NewPPGPCGOrderObservationSlice(input.Index(3))
	return v
}

type PPGPCGOrderDetail struct {
	Choice           PPGPCGChoice
	NotesAndComments []NTE
	Variance         []VAR
	OrderObservation []PPGPCGOrderObservation
}

// NewPPGPCGOrderDetailSlice will construct a slice of type PPGPCGOrderDetail
func NewPPGPCGOrderDetailSlice(input hl7.HL7Type) []PPGPCGOrderDetail {
	values := make([]PPGPCGOrderDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPGPCGOrderDetail(input.Index(i))
	}
	return values
}

// NewPPGPCGChoice creates an implementation of PPGPCGChoice
func NewPPGPCGChoice(input hl7.HL7Type) PPGPCGChoice {
	v := PPGPCGChoice{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.AnyHl7Segment = NewHxx(input.Index(1))
	return v
}

type PPGPCGChoice struct {
	ObservationRequest OBR
	AnyHl7Segment      Hxx
}

// NewPPGPCGChoiceSlice will construct a slice of type PPGPCGChoice
func NewPPGPCGChoiceSlice(input hl7.HL7Type) []PPGPCGChoice {
	values := make([]PPGPCGChoice, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPGPCGChoice(input.Index(i))
	}
	return values
}

// NewORDO04TimingTray creates an implementation of ORDO04TimingTray
func NewORDO04TimingTray(input hl7.HL7Type) ORDO04TimingTray {
	v := ORDO04TimingTray{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type ORDO04TimingTray struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewORDO04TimingTraySlice will construct a slice of type ORDO04TimingTray
func NewORDO04TimingTraySlice(input hl7.HL7Type) []ORDO04TimingTray {
	values := make([]ORDO04TimingTray, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORDO04TimingTray(input.Index(i))
	}
	return values
}

// NewOMDO03Diet creates an implementation of OMDO03Diet
func NewOMDO03Diet(input hl7.HL7Type) OMDO03Diet {
	v := OMDO03Diet{}
	v.DietaryOrdersSupplementsAndPreferences = NewODSSlice(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Observation = NewOMDO03ObservationSlice(input.Index(2))
	return v
}

type OMDO03Diet struct {
	DietaryOrdersSupplementsAndPreferences []ODS
	NotesAndComments                       []NTE
	Observation                            []OMDO03Observation
}

// NewOMDO03DietSlice will construct a slice of type OMDO03Diet
func NewOMDO03DietSlice(input hl7.HL7Type) []OMDO03Diet {
	values := make([]OMDO03Diet, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMDO03Diet(input.Index(i))
	}
	return values
}

// NewOMQO42TimingPrior creates an implementation of OMQO42TimingPrior
func NewOMQO42TimingPrior(input hl7.HL7Type) OMQO42TimingPrior {
	v := OMQO42TimingPrior{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type OMQO42TimingPrior struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewOMQO42TimingPriorSlice will construct a slice of type OMQO42TimingPrior
func NewOMQO42TimingPriorSlice(input hl7.HL7Type) []OMQO42TimingPrior {
	values := make([]OMQO42TimingPrior, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMQO42TimingPrior(input.Index(i))
	}
	return values
}

// NewCCMI21Resources creates an implementation of CCMI21Resources
func NewCCMI21Resources(input hl7.HL7Type) CCMI21Resources {
	v := CCMI21Resources{}
	v.ResourceGroup = NewRGS(input.Index(0))
	v.ResourceDetail = NewCCMI21ResourceDetailSlice(input.Index(1))
	return v
}

type CCMI21Resources struct {
	ResourceGroup  RGS
	ResourceDetail []CCMI21ResourceDetail
}

// NewCCMI21ResourcesSlice will construct a slice of type CCMI21Resources
func NewCCMI21ResourcesSlice(input hl7.HL7Type) []CCMI21Resources {
	values := make([]CCMI21Resources, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCMI21Resources(input.Index(i))
	}
	return values
}

// NewSRRS04Schedule creates an implementation of SRRS04Schedule
func NewSRRS04Schedule(input hl7.HL7Type) SRRS04Schedule {
	v := SRRS04Schedule{}
	v.SchedulingActivityInformation = NewSCH(input.Index(0))
	v.TimingQuantity = NewTQ1Slice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.Patient = NewSRRS04PatientSlice(input.Index(3))
	v.Resources = NewSRRS04ResourcesSlice(input.Index(4))
	return v
}

type SRRS04Schedule struct {
	SchedulingActivityInformation SCH
	TimingQuantity                []TQ1
	NotesAndComments              []NTE
	Patient                       []SRRS04Patient
	Resources                     []SRRS04Resources
}

// NewSRRS04ScheduleSlice will construct a slice of type SRRS04Schedule
func NewSRRS04ScheduleSlice(input hl7.HL7Type) []SRRS04Schedule {
	values := make([]SRRS04Schedule, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS04Schedule(input.Index(i))
	}
	return values
}

// NewCCRI18ProviderContact creates an implementation of CCRI18ProviderContact
func NewCCRI18ProviderContact(input hl7.HL7Type) CCRI18ProviderContact {
	v := CCRI18ProviderContact{}
	v.ProviderData = NewPRD(input.Index(0))
	v.ContactData = NewCTDSlice(input.Index(1))
	return v
}

type CCRI18ProviderContact struct {
	ProviderData PRD
	ContactData  []CTD
}

// NewCCRI18ProviderContactSlice will construct a slice of type CCRI18ProviderContact
func NewCCRI18ProviderContactSlice(input hl7.HL7Type) []CCRI18ProviderContact {
	values := make([]CCRI18ProviderContact, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI18ProviderContact(input.Index(i))
	}
	return values
}

// NewCCRI18Insurance creates an implementation of CCRI18Insurance
func NewCCRI18Insurance(input hl7.HL7Type) CCRI18Insurance {
	v := CCRI18Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3(input.Index(2))
	return v
}

type CCRI18Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification IN3
}

// NewCCRI18InsuranceSlice will construct a slice of type CCRI18Insurance
func NewCCRI18InsuranceSlice(input hl7.HL7Type) []CCRI18Insurance {
	values := make([]CCRI18Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI18Insurance(input.Index(i))
	}
	return values
}

// NewOMLO39ObservationRequest creates an implementation of OMLO39ObservationRequest
func NewOMLO39ObservationRequest(input hl7.HL7Type) OMLO39ObservationRequest {
	v := OMLO39ObservationRequest{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.TestCodeDetail = NewTCD(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.ParticipationInformation = NewPRTSlice(input.Index(3))
	v.ContactData = NewCTD(input.Index(4))
	v.Diagnosis = NewDG1Slice(input.Index(5))
	v.Observation = NewOMLO39ObservationSlice(input.Index(6))
	v.SpecimenShipment = NewOMLO39SpecimenShipmentSlice(input.Index(7))
	return v
}

type OMLO39ObservationRequest struct {
	ObservationRequest       OBR
	TestCodeDetail           TCD
	NotesAndComments         []NTE
	ParticipationInformation []PRT
	ContactData              CTD
	Diagnosis                []DG1
	Observation              []OMLO39Observation
	SpecimenShipment         []OMLO39SpecimenShipment
}

// NewOMLO39ObservationRequestSlice will construct a slice of type OMLO39ObservationRequest
func NewOMLO39ObservationRequestSlice(input hl7.HL7Type) []OMLO39ObservationRequest {
	values := make([]OMLO39ObservationRequest, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO39ObservationRequest(input.Index(i))
	}
	return values
}

// NewCCRI18PathwayObservation creates an implementation of CCRI18PathwayObservation
func NewCCRI18PathwayObservation(input hl7.HL7Type) CCRI18PathwayObservation {
	v := CCRI18PathwayObservation{}
	v.ObservationResult = NewOBXSlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CCRI18PathwayObservation struct {
	ObservationResult        []OBX
	ParticipationInformation []PRT
}

// NewCCRI18PathwayObservationSlice will construct a slice of type CCRI18PathwayObservation
func NewCCRI18PathwayObservationSlice(input hl7.HL7Type) []CCRI18PathwayObservation {
	values := make([]CCRI18PathwayObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI18PathwayObservation(input.Index(i))
	}
	return values
}

// NewCSUC12TimingQty creates an implementation of CSUC12TimingQty
func NewCSUC12TimingQty(input hl7.HL7Type) CSUC12TimingQty {
	v := CSUC12TimingQty{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type CSUC12TimingQty struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewCSUC12TimingQtySlice will construct a slice of type CSUC12TimingQty
func NewCSUC12TimingQtySlice(input hl7.HL7Type) []CSUC12TimingQty {
	values := make([]CSUC12TimingQty, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCSUC12TimingQty(input.Index(i))
	}
	return values
}

// NewOMQO42PatientPrior creates an implementation of OMQO42PatientPrior
func NewOMQO42PatientPrior(input hl7.HL7Type) OMQO42PatientPrior {
	v := OMQO42PatientPrior{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.AccessRestriction = NewARVSlice(input.Index(3))
	return v
}

type OMQO42PatientPrior struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	ParticipationInformation     []PRT
	AccessRestriction            []ARV
}

// NewOMQO42PatientPriorSlice will construct a slice of type OMQO42PatientPrior
func NewOMQO42PatientPriorSlice(input hl7.HL7Type) []OMQO42PatientPrior {
	values := make([]OMQO42PatientPrior, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMQO42PatientPrior(input.Index(i))
	}
	return values
}

// NewREFI15AuthorizationContact creates an implementation of REFI15AuthorizationContact
func NewREFI15AuthorizationContact(input hl7.HL7Type) REFI15AuthorizationContact {
	v := REFI15AuthorizationContact{}
	v.AuthorizationInformation = NewAUT(input.Index(0))
	v.ContactData = NewCTD(input.Index(1))
	return v
}

type REFI15AuthorizationContact struct {
	AuthorizationInformation AUT
	ContactData              CTD
}

// NewREFI15AuthorizationContactSlice will construct a slice of type REFI15AuthorizationContact
func NewREFI15AuthorizationContactSlice(input hl7.HL7Type) []REFI15AuthorizationContact {
	values := make([]REFI15AuthorizationContact, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewREFI15AuthorizationContact(input.Index(i))
	}
	return values
}

// NewOPLO37ObservationResultGroup creates an implementation of OPLO37ObservationResultGroup
func NewOPLO37ObservationResultGroup(input hl7.HL7Type) OPLO37ObservationResultGroup {
	v := OPLO37ObservationResultGroup{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type OPLO37ObservationResultGroup struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewOPLO37ObservationResultGroupSlice will construct a slice of type OPLO37ObservationResultGroup
func NewOPLO37ObservationResultGroupSlice(input hl7.HL7Type) []OPLO37ObservationResultGroup {
	values := make([]OPLO37ObservationResultGroup, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOPLO37ObservationResultGroup(input.Index(i))
	}
	return values
}

// NewPEXP07Experience creates an implementation of PEXP07Experience
func NewPEXP07Experience(input hl7.HL7Type) PEXP07Experience {
	v := PEXP07Experience{}
	v.ProductExperienceSender = NewPES(input.Index(0))
	v.PexObservation = NewPEXP07PexObservationSlice(input.Index(1))
	return v
}

type PEXP07Experience struct {
	ProductExperienceSender PES
	PexObservation          []PEXP07PexObservation
}

// NewPEXP07ExperienceSlice will construct a slice of type PEXP07Experience
func NewPEXP07ExperienceSlice(input hl7.HL7Type) []PEXP07Experience {
	values := make([]PEXP07Experience, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPEXP07Experience(input.Index(i))
	}
	return values
}

// NewCQUI19ClinicalHistory creates an implementation of CQUI19ClinicalHistory
func NewCQUI19ClinicalHistory(input hl7.HL7Type) CQUI19ClinicalHistory {
	v := CQUI19ClinicalHistory{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ClinicalHistoryDetail = NewCQUI19ClinicalHistoryDetailSlice(input.Index(1))
	v.RoleClinicalHistory = NewCQUI19RoleClinicalHistorySlice(input.Index(2))
	v.ClinicalTrialIdentification = NewCTISlice(input.Index(3))
	return v
}

type CQUI19ClinicalHistory struct {
	CommonOrder                 ORC
	ClinicalHistoryDetail       []CQUI19ClinicalHistoryDetail
	RoleClinicalHistory         []CQUI19RoleClinicalHistory
	ClinicalTrialIdentification []CTI
}

// NewCQUI19ClinicalHistorySlice will construct a slice of type CQUI19ClinicalHistory
func NewCQUI19ClinicalHistorySlice(input hl7.HL7Type) []CQUI19ClinicalHistory {
	values := make([]CQUI19ClinicalHistory, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCQUI19ClinicalHistory(input.Index(i))
	}
	return values
}

// NewVXUV04Timing creates an implementation of VXUV04Timing
func NewVXUV04Timing(input hl7.HL7Type) VXUV04Timing {
	v := VXUV04Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type VXUV04Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewVXUV04TimingSlice will construct a slice of type VXUV04Timing
func NewVXUV04TimingSlice(input hl7.HL7Type) []VXUV04Timing {
	values := make([]VXUV04Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewVXUV04Timing(input.Index(i))
	}
	return values
}

// NewSRRS04LocationResource creates an implementation of SRRS04LocationResource
func NewSRRS04LocationResource(input hl7.HL7Type) SRRS04LocationResource {
	v := SRRS04LocationResource{}
	v.AppointmentInformationLocationResource = NewAIL(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SRRS04LocationResource struct {
	AppointmentInformationLocationResource AIL
	NotesAndComments                       []NTE
}

// NewSRRS04LocationResourceSlice will construct a slice of type SRRS04LocationResource
func NewSRRS04LocationResourceSlice(input hl7.HL7Type) []SRRS04LocationResource {
	values := make([]SRRS04LocationResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS04LocationResource(input.Index(i))
	}
	return values
}

// NewSRRS03Service creates an implementation of SRRS03Service
func NewSRRS03Service(input hl7.HL7Type) SRRS03Service {
	v := SRRS03Service{}
	v.AppointmentInformation = NewAIS(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SRRS03Service struct {
	AppointmentInformation AIS
	NotesAndComments       []NTE
}

// NewSRRS03ServiceSlice will construct a slice of type SRRS03Service
func NewSRRS03ServiceSlice(input hl7.HL7Type) []SRRS03Service {
	values := make([]SRRS03Service, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS03Service(input.Index(i))
	}
	return values
}

// NewRRII12PatientVisit creates an implementation of RRII12PatientVisit
func NewRRII12PatientVisit(input hl7.HL7Type) RRII12PatientVisit {
	v := RRII12PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	return v
}

type RRII12PatientVisit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
}

// NewRRII12PatientVisitSlice will construct a slice of type RRII12PatientVisit
func NewRRII12PatientVisitSlice(input hl7.HL7Type) []RRII12PatientVisit {
	values := make([]RRII12PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRRII12PatientVisit(input.Index(i))
	}
	return values
}

// NewOMLO21PriorResult creates an implementation of OMLO21PriorResult
func NewOMLO21PriorResult(input hl7.HL7Type) OMLO21PriorResult {
	v := OMLO21PriorResult{}
	v.PatientPrior = NewOMLO21PatientPrior(input.Index(0))
	v.PatientVisitPrior = NewOMLO21PatientVisitPrior(input.Index(1))
	v.PatientAllergyInformation = NewAL1Slice(input.Index(2))
	v.OrderPrior = NewOMLO21OrderPriorSlice(input.Index(3))
	return v
}

type OMLO21PriorResult struct {
	PatientPrior              OMLO21PatientPrior
	PatientVisitPrior         OMLO21PatientVisitPrior
	PatientAllergyInformation []AL1
	OrderPrior                []OMLO21OrderPrior
}

// NewOMLO21PriorResultSlice will construct a slice of type OMLO21PriorResult
func NewOMLO21PriorResultSlice(input hl7.HL7Type) []OMLO21PriorResult {
	values := make([]OMLO21PriorResult, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO21PriorResult(input.Index(i))
	}
	return values
}

// NewPGLPC7Pathway creates an implementation of PGLPC7Pathway
func NewPGLPC7Pathway(input hl7.HL7Type) PGLPC7Pathway {
	v := PGLPC7Pathway{}
	v.Pathway = NewPTH(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type PGLPC7Pathway struct {
	Pathway  PTH
	Variance []VAR
}

// NewPGLPC7PathwaySlice will construct a slice of type PGLPC7Pathway
func NewPGLPC7PathwaySlice(input hl7.HL7Type) []PGLPC7Pathway {
	values := make([]PGLPC7Pathway, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPGLPC7Pathway(input.Index(i))
	}
	return values
}

// NewDFTP03Observation creates an implementation of DFTP03Observation
func NewDFTP03Observation(input hl7.HL7Type) DFTP03Observation {
	v := DFTP03Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type DFTP03Observation struct {
	ObservationResult OBX
	NotesAndComments  []NTE
}

// NewDFTP03ObservationSlice will construct a slice of type DFTP03Observation
func NewDFTP03ObservationSlice(input hl7.HL7Type) []DFTP03Observation {
	values := make([]DFTP03Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewDFTP03Observation(input.Index(i))
	}
	return values
}

// NewRQAI11Visit creates an implementation of RQAI11Visit
func NewRQAI11Visit(input hl7.HL7Type) RQAI11Visit {
	v := RQAI11Visit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	return v
}

type RQAI11Visit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
}

// NewRQAI11VisitSlice will construct a slice of type RQAI11Visit
func NewRQAI11VisitSlice(input hl7.HL7Type) []RQAI11Visit {
	values := make([]RQAI11Visit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQAI11Visit(input.Index(i))
	}
	return values
}

// NewSIUS26Resources creates an implementation of SIUS26Resources
func NewSIUS26Resources(input hl7.HL7Type) SIUS26Resources {
	v := SIUS26Resources{}
	v.ResourceGroup = NewRGS(input.Index(0))
	v.Service = NewSIUS26ServiceSlice(input.Index(1))
	v.GeneralResource = NewSIUS26GeneralResourceSlice(input.Index(2))
	v.LocationResource = NewSIUS26LocationResourceSlice(input.Index(3))
	v.PersonnelResource = NewSIUS26PersonnelResourceSlice(input.Index(4))
	return v
}

type SIUS26Resources struct {
	ResourceGroup     RGS
	Service           []SIUS26Service
	GeneralResource   []SIUS26GeneralResource
	LocationResource  []SIUS26LocationResource
	PersonnelResource []SIUS26PersonnelResource
}

// NewSIUS26ResourcesSlice will construct a slice of type SIUS26Resources
func NewSIUS26ResourcesSlice(input hl7.HL7Type) []SIUS26Resources {
	values := make([]SIUS26Resources, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS26Resources(input.Index(i))
	}
	return values
}

// NewSRMS11Service creates an implementation of SRMS11Service
func NewSRMS11Service(input hl7.HL7Type) SRMS11Service {
	v := SRMS11Service{}
	v.AppointmentInformation = NewAIS(input.Index(0))
	v.AppointmentPreferences = NewAPR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type SRMS11Service struct {
	AppointmentInformation AIS
	AppointmentPreferences APR
	NotesAndComments       []NTE
}

// NewSRMS11ServiceSlice will construct a slice of type SRMS11Service
func NewSRMS11ServiceSlice(input hl7.HL7Type) []SRMS11Service {
	values := make([]SRMS11Service, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS11Service(input.Index(i))
	}
	return values
}

// NewREFI14ResultsNotes creates an implementation of REFI14ResultsNotes
func NewREFI14ResultsNotes(input hl7.HL7Type) REFI14ResultsNotes {
	v := REFI14ResultsNotes{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type REFI14ResultsNotes struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewREFI14ResultsNotesSlice will construct a slice of type REFI14ResultsNotes
func NewREFI14ResultsNotesSlice(input hl7.HL7Type) []REFI14ResultsNotes {
	values := make([]REFI14ResultsNotes, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewREFI14ResultsNotes(input.Index(i))
	}
	return values
}

// NewRTBZ74RowDefinition creates an implementation of RTBZ74RowDefinition
func NewRTBZ74RowDefinition(input hl7.HL7Type) RTBZ74RowDefinition {
	v := RTBZ74RowDefinition{}
	v.TableRowDefinition = NewRDF(input.Index(0))
	v.TableRowData = NewRDTSlice(input.Index(1))
	return v
}

type RTBZ74RowDefinition struct {
	TableRowDefinition RDF
	TableRowData       []RDT
}

// NewRTBZ74RowDefinitionSlice will construct a slice of type RTBZ74RowDefinition
func NewRTBZ74RowDefinitionSlice(input hl7.HL7Type) []RTBZ74RowDefinition {
	values := make([]RTBZ74RowDefinition, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRTBZ74RowDefinition(input.Index(i))
	}
	return values
}

// NewPEXP08PexCause creates an implementation of PEXP08PexCause
func NewPEXP08PexCause(input hl7.HL7Type) PEXP08PexCause {
	v := PEXP08PexCause{}
	v.PossibleCausalRelationship = NewPCR(input.Index(0))
	v.RxOrder = NewPEXP08RxOrder(input.Index(1))
	v.RxAdministration = NewPEXP08RxAdministrationSlice(input.Index(2))
	v.ProblemDetails = NewPRBSlice(input.Index(3))
	v.Observation = NewPEXP08ObservationSlice(input.Index(4))
	v.NotesAndComments = NewNTESlice(input.Index(5))
	v.AssociatedPerson = NewPEXP08AssociatedPerson(input.Index(6))
	v.Study = NewPEXP08StudySlice(input.Index(7))
	return v
}

type PEXP08PexCause struct {
	PossibleCausalRelationship PCR
	RxOrder                    PEXP08RxOrder
	RxAdministration           []PEXP08RxAdministration
	ProblemDetails             []PRB
	Observation                []PEXP08Observation
	NotesAndComments           []NTE
	AssociatedPerson           PEXP08AssociatedPerson
	Study                      []PEXP08Study
}

// NewPEXP08PexCauseSlice will construct a slice of type PEXP08PexCause
func NewPEXP08PexCauseSlice(input hl7.HL7Type) []PEXP08PexCause {
	values := make([]PEXP08PexCause, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPEXP08PexCause(input.Index(i))
	}
	return values
}

// NewPPRPC1OrderObservation creates an implementation of PPRPC1OrderObservation
func NewPPRPC1OrderObservation(input hl7.HL7Type) PPRPC1OrderObservation {
	v := PPRPC1OrderObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.Variance = NewVARSlice(input.Index(3))
	return v
}

type PPRPC1OrderObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
	Variance                 []VAR
}

// NewPPRPC1OrderObservationSlice will construct a slice of type PPRPC1OrderObservation
func NewPPRPC1OrderObservationSlice(input hl7.HL7Type) []PPRPC1OrderObservation {
	values := make([]PPRPC1OrderObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPRPC1OrderObservation(input.Index(i))
	}
	return values
}

// NewCCII22RolePathwayObject creates an implementation of CCII22RolePathwayObject
func NewCCII22RolePathwayObject(input hl7.HL7Type) CCII22RolePathwayObject {
	v := CCII22RolePathwayObject{}
	v.Role = NewROL(input.Index(0))
	v.ProviderData = NewPRD(input.Index(1))
	return v
}

type CCII22RolePathwayObject struct {
	Role         ROL
	ProviderData PRD
}

// NewCCII22RolePathwayObjectSlice will construct a slice of type CCII22RolePathwayObject
func NewCCII22RolePathwayObjectSlice(input hl7.HL7Type) []CCII22RolePathwayObject {
	values := make([]CCII22RolePathwayObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCII22RolePathwayObject(input.Index(i))
	}
	return values
}

// NewOMBO27Timing creates an implementation of OMBO27Timing
func NewOMBO27Timing(input hl7.HL7Type) OMBO27Timing {
	v := OMBO27Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type OMBO27Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewOMBO27TimingSlice will construct a slice of type OMBO27Timing
func NewOMBO27TimingSlice(input hl7.HL7Type) []OMBO27Timing {
	values := make([]OMBO27Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMBO27Timing(input.Index(i))
	}
	return values
}

// NewOMDO03Insurance creates an implementation of OMDO03Insurance
func NewOMDO03Insurance(input hl7.HL7Type) OMDO03Insurance {
	v := OMDO03Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3(input.Index(2))
	return v
}

type OMDO03Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification IN3
}

// NewOMDO03InsuranceSlice will construct a slice of type OMDO03Insurance
func NewOMDO03InsuranceSlice(input hl7.HL7Type) []OMDO03Insurance {
	values := make([]OMDO03Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMDO03Insurance(input.Index(i))
	}
	return values
}

// NewORGO20Response creates an implementation of ORGO20Response
func NewORGO20Response(input hl7.HL7Type) ORGO20Response {
	v := ORGO20Response{}
	v.Patient = NewORGO20Patient(input.Index(0))
	v.Order = NewORGO20OrderSlice(input.Index(1))
	return v
}

type ORGO20Response struct {
	Patient ORGO20Patient
	Order   []ORGO20Order
}

// NewORGO20ResponseSlice will construct a slice of type ORGO20Response
func NewORGO20ResponseSlice(input hl7.HL7Type) []ORGO20Response {
	values := make([]ORGO20Response, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORGO20Response(input.Index(i))
	}
	return values
}

// NewEHCE20AuthorizationRequest creates an implementation of EHCE20AuthorizationRequest
func NewEHCE20AuthorizationRequest(input hl7.HL7Type) EHCE20AuthorizationRequest {
	v := EHCE20AuthorizationRequest{}
	v.InvoiceSegment = NewIVCSlice(input.Index(0))
	v.ContactData = NewCTDSlice(input.Index(1))
	v.LocationIdentification = NewLOCSlice(input.Index(2))
	v.Role = NewROLSlice(input.Index(3))
	v.PatInfo = NewEHCE20PatInfoSlice(input.Index(4))
	v.PslItemInfo = NewEHCE20PslItemInfoSlice(input.Index(5))
	return v
}

type EHCE20AuthorizationRequest struct {
	InvoiceSegment         []IVC
	ContactData            []CTD
	LocationIdentification []LOC
	Role                   []ROL
	PatInfo                []EHCE20PatInfo
	PslItemInfo            []EHCE20PslItemInfo
}

// NewEHCE20AuthorizationRequestSlice will construct a slice of type EHCE20AuthorizationRequest
func NewEHCE20AuthorizationRequestSlice(input hl7.HL7Type) []EHCE20AuthorizationRequest {
	values := make([]EHCE20AuthorizationRequest, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewEHCE20AuthorizationRequest(input.Index(i))
	}
	return values
}

// NewCCRI17RoleGoalObject creates an implementation of CCRI17RoleGoalObject
func NewCCRI17RoleGoalObject(input hl7.HL7Type) CCRI17RoleGoalObject {
	v := CCRI17RoleGoalObject{}
	v.Role = NewROL(input.Index(0))
	v.ProviderData = NewPRD(input.Index(1))
	return v
}

type CCRI17RoleGoalObject struct {
	Role         ROL
	ProviderData PRD
}

// NewCCRI17RoleGoalObjectSlice will construct a slice of type CCRI17RoleGoalObject
func NewCCRI17RoleGoalObjectSlice(input hl7.HL7Type) []CCRI17RoleGoalObject {
	values := make([]CCRI17RoleGoalObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI17RoleGoalObject(input.Index(i))
	}
	return values
}

// NewCQUI19GoalObservation creates an implementation of CQUI19GoalObservation
func NewCQUI19GoalObservation(input hl7.HL7Type) CQUI19GoalObservation {
	v := CQUI19GoalObservation{}
	v.ObservationResult = NewOBXSlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CQUI19GoalObservation struct {
	ObservationResult        []OBX
	ParticipationInformation []PRT
}

// NewCQUI19GoalObservationSlice will construct a slice of type CQUI19GoalObservation
func NewCQUI19GoalObservationSlice(input hl7.HL7Type) []CQUI19GoalObservation {
	values := make([]CQUI19GoalObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCQUI19GoalObservation(input.Index(i))
	}
	return values
}

// NewEANU09Notification creates an implementation of EANU09Notification
func NewEANU09Notification(input hl7.HL7Type) EANU09Notification {
	v := EANU09Notification{}
	v.NotificationDetail = NewNDS(input.Index(0))
	v.NotesAndComments = NewNTE(input.Index(1))
	return v
}

type EANU09Notification struct {
	NotificationDetail NDS
	NotesAndComments   NTE
}

// NewEANU09NotificationSlice will construct a slice of type EANU09Notification
func NewEANU09NotificationSlice(input hl7.HL7Type) []EANU09Notification {
	values := make([]EANU09Notification, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewEANU09Notification(input.Index(i))
	}
	return values
}

// NewBRTO32Order creates an implementation of BRTO32Order
func NewBRTO32Order(input hl7.HL7Type) BRTO32Order {
	v := BRTO32Order{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.Timing = NewBRTO32TimingSlice(input.Index(2))
	v.BloodProductOrder = NewBPO(input.Index(3))
	v.BloodProductTransfusiondisposition = NewBTXSlice(input.Index(4))
	return v
}

type BRTO32Order struct {
	CommonOrder                        ORC
	ParticipationInformation           []PRT
	Timing                             []BRTO32Timing
	BloodProductOrder                  BPO
	BloodProductTransfusiondisposition []BTX
}

// NewBRTO32OrderSlice will construct a slice of type BRTO32Order
func NewBRTO32OrderSlice(input hl7.HL7Type) []BRTO32Order {
	values := make([]BRTO32Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewBRTO32Order(input.Index(i))
	}
	return values
}

// NewORLO40SpecimenInPackage creates an implementation of ORLO40SpecimenInPackage
func NewORLO40SpecimenInPackage(input hl7.HL7Type) ORLO40SpecimenInPackage {
	v := ORLO40SpecimenInPackage{}
	v.Specimen = NewSPM(input.Index(0))
	v.SpecimenContainerInPackage = NewORLO40SpecimenContainerInPackageSlice(input.Index(1))
	return v
}

type ORLO40SpecimenInPackage struct {
	Specimen                   SPM
	SpecimenContainerInPackage []ORLO40SpecimenContainerInPackage
}

// NewORLO40SpecimenInPackageSlice will construct a slice of type ORLO40SpecimenInPackage
func NewORLO40SpecimenInPackageSlice(input hl7.HL7Type) []ORLO40SpecimenInPackage {
	values := make([]ORLO40SpecimenInPackage, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORLO40SpecimenInPackage(input.Index(i))
	}
	return values
}

// NewSRRS01GeneralResource creates an implementation of SRRS01GeneralResource
func NewSRRS01GeneralResource(input hl7.HL7Type) SRRS01GeneralResource {
	v := SRRS01GeneralResource{}
	v.AppointmentInformationGeneralResource = NewAIG(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SRRS01GeneralResource struct {
	AppointmentInformationGeneralResource AIG
	NotesAndComments                      []NTE
}

// NewSRRS01GeneralResourceSlice will construct a slice of type SRRS01GeneralResource
func NewSRRS01GeneralResourceSlice(input hl7.HL7Type) []SRRS01GeneralResource {
	values := make([]SRRS01GeneralResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS01GeneralResource(input.Index(i))
	}
	return values
}

// NewOMLO21PatientPrior creates an implementation of OMLO21PatientPrior
func NewOMLO21PatientPrior(input hl7.HL7Type) OMLO21PatientPrior {
	v := OMLO21PatientPrior{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.AccessRestriction = NewARVSlice(input.Index(3))
	return v
}

type OMLO21PatientPrior struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	ParticipationInformation     []PRT
	AccessRestriction            []ARV
}

// NewOMLO21PatientPriorSlice will construct a slice of type OMLO21PatientPrior
func NewOMLO21PatientPriorSlice(input hl7.HL7Type) []OMLO21PatientPrior {
	values := make([]OMLO21PatientPrior, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO21PatientPrior(input.Index(i))
	}
	return values
}

// NewORUR30TimingQty creates an implementation of ORUR30TimingQty
func NewORUR30TimingQty(input hl7.HL7Type) ORUR30TimingQty {
	v := ORUR30TimingQty{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type ORUR30TimingQty struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewORUR30TimingQtySlice will construct a slice of type ORUR30TimingQty
func NewORUR30TimingQtySlice(input hl7.HL7Type) []ORUR30TimingQty {
	values := make([]ORUR30TimingQty, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORUR30TimingQty(input.Index(i))
	}
	return values
}

// NewOULR23PatientObservation creates an implementation of OULR23PatientObservation
func NewOULR23PatientObservation(input hl7.HL7Type) OULR23PatientObservation {
	v := OULR23PatientObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type OULR23PatientObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewOULR23PatientObservationSlice will construct a slice of type OULR23PatientObservation
func NewOULR23PatientObservationSlice(input hl7.HL7Type) []OULR23PatientObservation {
	values := make([]OULR23PatientObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOULR23PatientObservation(input.Index(i))
	}
	return values
}

// NewRQII01GuarantorInsurance creates an implementation of RQII01GuarantorInsurance
func NewRQII01GuarantorInsurance(input hl7.HL7Type) RQII01GuarantorInsurance {
	v := RQII01GuarantorInsurance{}
	v.Guarantor = NewGT1Slice(input.Index(0))
	v.Insurance = NewRQII01InsuranceSlice(input.Index(1))
	return v
}

type RQII01GuarantorInsurance struct {
	Guarantor []GT1
	Insurance []RQII01Insurance
}

// NewRQII01GuarantorInsuranceSlice will construct a slice of type RQII01GuarantorInsurance
func NewRQII01GuarantorInsuranceSlice(input hl7.HL7Type) []RQII01GuarantorInsurance {
	values := make([]RQII01GuarantorInsurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQII01GuarantorInsurance(input.Index(i))
	}
	return values
}

// NewCCUI20ClinicalHistoryObject creates an implementation of CCUI20ClinicalHistoryObject
func NewCCUI20ClinicalHistoryObject(input hl7.HL7Type) CCUI20ClinicalHistoryObject {
	v := CCUI20ClinicalHistoryObject{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.DietaryOrdersSupplementsAndPreferences = NewODS(input.Index(1))
	v.Procedures = NewPR1(input.Index(2))
	v.ReferralInformation = NewRF1(input.Index(3))
	v.PatientAllergyInformation = NewAL1(input.Index(4))
	v.PatientAdverseReactionInformation = NewIAM(input.Index(5))
	v.Accident = NewACC(input.Index(6))
	v.RiskManagementIncident = NewRMI(input.Index(7))
	v.Disability = NewDB1(input.Index(8))
	v.Diagnosis = NewDG1(input.Index(9))
	v.DiagnosisRelatedGroup = NewDRG(input.Index(10))
	v.PatientDeathAndAutopsy = NewPDA(input.Index(11))
	return v
}

type CCUI20ClinicalHistoryObject struct {
	ObservationRequest                     OBR
	DietaryOrdersSupplementsAndPreferences ODS
	Procedures                             PR1
	ReferralInformation                    RF1
	PatientAllergyInformation              AL1
	PatientAdverseReactionInformation      IAM
	Accident                               ACC
	RiskManagementIncident                 RMI
	Disability                             DB1
	Diagnosis                              DG1
	DiagnosisRelatedGroup                  DRG
	PatientDeathAndAutopsy                 PDA
}

// NewCCUI20ClinicalHistoryObjectSlice will construct a slice of type CCUI20ClinicalHistoryObject
func NewCCUI20ClinicalHistoryObjectSlice(input hl7.HL7Type) []CCUI20ClinicalHistoryObject {
	values := make([]CCUI20ClinicalHistoryObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCUI20ClinicalHistoryObject(input.Index(i))
	}
	return values
}

// NewRRII12ResultsNotes creates an implementation of RRII12ResultsNotes
func NewRRII12ResultsNotes(input hl7.HL7Type) RRII12ResultsNotes {
	v := RRII12ResultsNotes{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type RRII12ResultsNotes struct {
	ObservationResult OBX
	NotesAndComments  []NTE
}

// NewRRII12ResultsNotesSlice will construct a slice of type RRII12ResultsNotes
func NewRRII12ResultsNotesSlice(input hl7.HL7Type) []RRII12ResultsNotes {
	values := make([]RRII12ResultsNotes, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRRII12ResultsNotes(input.Index(i))
	}
	return values
}

// NewPEXP08AssociatedPerson creates an implementation of PEXP08AssociatedPerson
func NewPEXP08AssociatedPerson(input hl7.HL7Type) PEXP08AssociatedPerson {
	v := PEXP08AssociatedPerson{}
	v.NextOfKinAssociatedParties = NewNK1(input.Index(0))
	v.AssociatedRxOrder = NewPEXP08AssociatedRxOrder(input.Index(1))
	v.AssociatedRxAdmin = NewPEXP08AssociatedRxAdminSlice(input.Index(2))
	v.ProblemDetails = NewPRBSlice(input.Index(3))
	v.AssociatedObservation = NewPEXP08AssociatedObservationSlice(input.Index(4))
	return v
}

type PEXP08AssociatedPerson struct {
	NextOfKinAssociatedParties NK1
	AssociatedRxOrder          PEXP08AssociatedRxOrder
	AssociatedRxAdmin          []PEXP08AssociatedRxAdmin
	ProblemDetails             []PRB
	AssociatedObservation      []PEXP08AssociatedObservation
}

// NewPEXP08AssociatedPersonSlice will construct a slice of type PEXP08AssociatedPerson
func NewPEXP08AssociatedPersonSlice(input hl7.HL7Type) []PEXP08AssociatedPerson {
	values := make([]PEXP08AssociatedPerson, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPEXP08AssociatedPerson(input.Index(i))
	}
	return values
}

// NewCCMI21ClinicalHistoryObject creates an implementation of CCMI21ClinicalHistoryObject
func NewCCMI21ClinicalHistoryObject(input hl7.HL7Type) CCMI21ClinicalHistoryObject {
	v := CCMI21ClinicalHistoryObject{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.DietaryOrdersSupplementsAndPreferences = NewODS(input.Index(1))
	v.Procedures = NewPR1(input.Index(2))
	v.ReferralInformation = NewRF1(input.Index(3))
	v.PatientAllergyInformation = NewAL1(input.Index(4))
	v.PatientAdverseReactionInformation = NewIAM(input.Index(5))
	v.Accident = NewACC(input.Index(6))
	v.RiskManagementIncident = NewRMI(input.Index(7))
	v.Disability = NewDB1(input.Index(8))
	v.Diagnosis = NewDG1(input.Index(9))
	v.DiagnosisRelatedGroup = NewDRG(input.Index(10))
	v.PatientDeathAndAutopsy = NewPDA(input.Index(11))
	return v
}

type CCMI21ClinicalHistoryObject struct {
	ObservationRequest                     OBR
	DietaryOrdersSupplementsAndPreferences ODS
	Procedures                             PR1
	ReferralInformation                    RF1
	PatientAllergyInformation              AL1
	PatientAdverseReactionInformation      IAM
	Accident                               ACC
	RiskManagementIncident                 RMI
	Disability                             DB1
	Diagnosis                              DG1
	DiagnosisRelatedGroup                  DRG
	PatientDeathAndAutopsy                 PDA
}

// NewCCMI21ClinicalHistoryObjectSlice will construct a slice of type CCMI21ClinicalHistoryObject
func NewCCMI21ClinicalHistoryObjectSlice(input hl7.HL7Type) []CCMI21ClinicalHistoryObject {
	values := make([]CCMI21ClinicalHistoryObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCMI21ClinicalHistoryObject(input.Index(i))
	}
	return values
}

// NewSRMS03Resources creates an implementation of SRMS03Resources
func NewSRMS03Resources(input hl7.HL7Type) SRMS03Resources {
	v := SRMS03Resources{}
	v.ResourceGroup = NewRGS(input.Index(0))
	v.Service = NewSRMS03ServiceSlice(input.Index(1))
	v.GeneralResource = NewSRMS03GeneralResourceSlice(input.Index(2))
	v.LocationResource = NewSRMS03LocationResourceSlice(input.Index(3))
	v.PersonnelResource = NewSRMS03PersonnelResourceSlice(input.Index(4))
	return v
}

type SRMS03Resources struct {
	ResourceGroup     RGS
	Service           []SRMS03Service
	GeneralResource   []SRMS03GeneralResource
	LocationResource  []SRMS03LocationResource
	PersonnelResource []SRMS03PersonnelResource
}

// NewSRMS03ResourcesSlice will construct a slice of type SRMS03Resources
func NewSRMS03ResourcesSlice(input hl7.HL7Type) []SRMS03Resources {
	values := make([]SRMS03Resources, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS03Resources(input.Index(i))
	}
	return values
}

// NewORNO08Timing creates an implementation of ORNO08Timing
func NewORNO08Timing(input hl7.HL7Type) ORNO08Timing {
	v := ORNO08Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type ORNO08Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewORNO08TimingSlice will construct a slice of type ORNO08Timing
func NewORNO08TimingSlice(input hl7.HL7Type) []ORNO08Timing {
	values := make([]ORNO08Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORNO08Timing(input.Index(i))
	}
	return values
}

// NewSIUS22LocationResource creates an implementation of SIUS22LocationResource
func NewSIUS22LocationResource(input hl7.HL7Type) SIUS22LocationResource {
	v := SIUS22LocationResource{}
	v.AppointmentInformationLocationResource = NewAIL(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS22LocationResource struct {
	AppointmentInformationLocationResource AIL
	NotesAndComments                       []NTE
}

// NewSIUS22LocationResourceSlice will construct a slice of type SIUS22LocationResource
func NewSIUS22LocationResourceSlice(input hl7.HL7Type) []SIUS22LocationResource {
	values := make([]SIUS22LocationResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS22LocationResource(input.Index(i))
	}
	return values
}

// NewSRMS09LocationResource creates an implementation of SRMS09LocationResource
func NewSRMS09LocationResource(input hl7.HL7Type) SRMS09LocationResource {
	v := SRMS09LocationResource{}
	v.AppointmentInformationLocationResource = NewAIL(input.Index(0))
	v.AppointmentPreferences = NewAPR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type SRMS09LocationResource struct {
	AppointmentInformationLocationResource AIL
	AppointmentPreferences                 APR
	NotesAndComments                       []NTE
}

// NewSRMS09LocationResourceSlice will construct a slice of type SRMS09LocationResource
func NewSRMS09LocationResourceSlice(input hl7.HL7Type) []SRMS09LocationResource {
	values := make([]SRMS09LocationResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS09LocationResource(input.Index(i))
	}
	return values
}

// NewRSPZ88Allergy creates an implementation of RSPZ88Allergy
func NewRSPZ88Allergy(input hl7.HL7Type) RSPZ88Allergy {
	v := RSPZ88Allergy{}
	v.PatientAllergyInformation = NewAL1Slice(input.Index(0))
	v.Visit = NewRSPZ88Visit(input.Index(1))
	return v
}

type RSPZ88Allergy struct {
	PatientAllergyInformation []AL1
	Visit                     RSPZ88Visit
}

// NewRSPZ88AllergySlice will construct a slice of type RSPZ88Allergy
func NewRSPZ88AllergySlice(input hl7.HL7Type) []RSPZ88Allergy {
	values := make([]RSPZ88Allergy, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPZ88Allergy(input.Index(i))
	}
	return values
}

// NewBPSO29Order creates an implementation of BPSO29Order
func NewBPSO29Order(input hl7.HL7Type) BPSO29Order {
	v := BPSO29Order{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.Timing = NewBPSO29TimingSlice(input.Index(2))
	v.BloodProductOrder = NewBPO(input.Index(3))
	v.NotesAndComments = NewNTESlice(input.Index(4))
	v.Product = NewBPSO29ProductSlice(input.Index(5))
	return v
}

type BPSO29Order struct {
	CommonOrder              ORC
	ParticipationInformation []PRT
	Timing                   []BPSO29Timing
	BloodProductOrder        BPO
	NotesAndComments         []NTE
	Product                  []BPSO29Product
}

// NewBPSO29OrderSlice will construct a slice of type BPSO29Order
func NewBPSO29OrderSlice(input hl7.HL7Type) []BPSO29Order {
	values := make([]BPSO29Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewBPSO29Order(input.Index(i))
	}
	return values
}

// NewPPGPCGGoalObservation creates an implementation of PPGPCGGoalObservation
func NewPPGPCGGoalObservation(input hl7.HL7Type) PPGPCGGoalObservation {
	v := PPGPCGGoalObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type PPGPCGGoalObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewPPGPCGGoalObservationSlice will construct a slice of type PPGPCGGoalObservation
func NewPPGPCGGoalObservationSlice(input hl7.HL7Type) []PPGPCGGoalObservation {
	values := make([]PPGPCGGoalObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPGPCGGoalObservation(input.Index(i))
	}
	return values
}

// NewADTA06Insurance creates an implementation of ADTA06Insurance
func NewADTA06Insurance(input hl7.HL7Type) ADTA06Insurance {
	v := ADTA06Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3Slice(input.Index(2))
	v.Role = NewROLSlice(input.Index(3))
	return v
}

type ADTA06Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification []IN3
	Role                                        []ROL
}

// NewADTA06InsuranceSlice will construct a slice of type ADTA06Insurance
func NewADTA06InsuranceSlice(input hl7.HL7Type) []ADTA06Insurance {
	values := make([]ADTA06Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewADTA06Insurance(input.Index(i))
	}
	return values
}

// NewMDMT02Timing creates an implementation of MDMT02Timing
func NewMDMT02Timing(input hl7.HL7Type) MDMT02Timing {
	v := MDMT02Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type MDMT02Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewMDMT02TimingSlice will construct a slice of type MDMT02Timing
func NewMDMT02TimingSlice(input hl7.HL7Type) []MDMT02Timing {
	values := make([]MDMT02Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMDMT02Timing(input.Index(i))
	}
	return values
}

// NewRQAI08GuarantorInsurance creates an implementation of RQAI08GuarantorInsurance
func NewRQAI08GuarantorInsurance(input hl7.HL7Type) RQAI08GuarantorInsurance {
	v := RQAI08GuarantorInsurance{}
	v.Guarantor = NewGT1Slice(input.Index(0))
	v.Insurance = NewRQAI08InsuranceSlice(input.Index(1))
	return v
}

type RQAI08GuarantorInsurance struct {
	Guarantor []GT1
	Insurance []RQAI08Insurance
}

// NewRQAI08GuarantorInsuranceSlice will construct a slice of type RQAI08GuarantorInsurance
func NewRQAI08GuarantorInsuranceSlice(input hl7.HL7Type) []RQAI08GuarantorInsurance {
	values := make([]RQAI08GuarantorInsurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQAI08GuarantorInsurance(input.Index(i))
	}
	return values
}

// NewDFTP11FinancialTimingQuantity creates an implementation of DFTP11FinancialTimingQuantity
func NewDFTP11FinancialTimingQuantity(input hl7.HL7Type) DFTP11FinancialTimingQuantity {
	v := DFTP11FinancialTimingQuantity{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type DFTP11FinancialTimingQuantity struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewDFTP11FinancialTimingQuantitySlice will construct a slice of type DFTP11FinancialTimingQuantity
func NewDFTP11FinancialTimingQuantitySlice(input hl7.HL7Type) []DFTP11FinancialTimingQuantity {
	values := make([]DFTP11FinancialTimingQuantity, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewDFTP11FinancialTimingQuantity(input.Index(i))
	}
	return values
}

// NewSIUS17Patient creates an implementation of SIUS17Patient
func NewSIUS17Patient(input hl7.HL7Type) SIUS17Patient {
	v := SIUS17Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.PatientVisit = NewPV1(input.Index(2))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(3))
	v.ObservationResult = NewOBXSlice(input.Index(4))
	v.Diagnosis = NewDG1Slice(input.Index(5))
	return v
}

type SIUS17Patient struct {
	PatientIdentification             PID
	PatientAdditionalDemographic      PD1
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ObservationResult                 []OBX
	Diagnosis                         []DG1
}

// NewSIUS17PatientSlice will construct a slice of type SIUS17Patient
func NewSIUS17PatientSlice(input hl7.HL7Type) []SIUS17Patient {
	values := make([]SIUS17Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS17Patient(input.Index(i))
	}
	return values
}

// NewSCNS37AntiMicrobialDeviceCycleData creates an implementation of SCNS37AntiMicrobialDeviceCycleData
func NewSCNS37AntiMicrobialDeviceCycleData(input hl7.HL7Type) SCNS37AntiMicrobialDeviceCycleData {
	v := SCNS37AntiMicrobialDeviceCycleData{}
	v.SterilizationDeviceData = NewSDD(input.Index(0))
	v.AntiMicrobialCycleData = NewSCDSlice(input.Index(1))
	return v
}

type SCNS37AntiMicrobialDeviceCycleData struct {
	SterilizationDeviceData SDD
	AntiMicrobialCycleData  []SCD
}

// NewSCNS37AntiMicrobialDeviceCycleDataSlice will construct a slice of type SCNS37AntiMicrobialDeviceCycleData
func NewSCNS37AntiMicrobialDeviceCycleDataSlice(input hl7.HL7Type) []SCNS37AntiMicrobialDeviceCycleData {
	values := make([]SCNS37AntiMicrobialDeviceCycleData, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSCNS37AntiMicrobialDeviceCycleData(input.Index(i))
	}
	return values
}

// NewPPPPCDOrderObservation creates an implementation of PPPPCDOrderObservation
func NewPPPPCDOrderObservation(input hl7.HL7Type) PPPPCDOrderObservation {
	v := PPPPCDOrderObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.Variance = NewVARSlice(input.Index(3))
	return v
}

type PPPPCDOrderObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
	Variance                 []VAR
}

// NewPPPPCDOrderObservationSlice will construct a slice of type PPPPCDOrderObservation
func NewPPPPCDOrderObservationSlice(input hl7.HL7Type) []PPPPCDOrderObservation {
	values := make([]PPPPCDOrderObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPPPCDOrderObservation(input.Index(i))
	}
	return values
}

// NewCCRI16ResourceDetail creates an implementation of CCRI16ResourceDetail
func NewCCRI16ResourceDetail(input hl7.HL7Type) CCRI16ResourceDetail {
	v := CCRI16ResourceDetail{}
	v.ResourceObject = NewCCRI16ResourceObject(input.Index(0))
	v.ResourceObservation = NewCCRI16ResourceObservationSlice(input.Index(1))
	return v
}

type CCRI16ResourceDetail struct {
	ResourceObject      CCRI16ResourceObject
	ResourceObservation []CCRI16ResourceObservation
}

// NewCCRI16ResourceDetailSlice will construct a slice of type CCRI16ResourceDetail
func NewCCRI16ResourceDetailSlice(input hl7.HL7Type) []CCRI16ResourceDetail {
	values := make([]CCRI16ResourceDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI16ResourceDetail(input.Index(i))
	}
	return values
}

// NewORUR32Observation creates an implementation of ORUR32Observation
func NewORUR32Observation(input hl7.HL7Type) ORUR32Observation {
	v := ORUR32Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type ORUR32Observation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewORUR32ObservationSlice will construct a slice of type ORUR32Observation
func NewORUR32ObservationSlice(input hl7.HL7Type) []ORUR32Observation {
	values := make([]ORUR32Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORUR32Observation(input.Index(i))
	}
	return values
}

// NewCCRI17ClinicalOrderObject creates an implementation of CCRI17ClinicalOrderObject
func NewCCRI17ClinicalOrderObject(input hl7.HL7Type) CCRI17ClinicalOrderObject {
	v := CCRI17ClinicalOrderObject{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.PharmacyTreatmentOrder = NewRXO(input.Index(1))
	v.DietaryOrdersSupplementsAndPreferences = NewODS(input.Index(2))
	v.Procedures = NewPR1(input.Index(3))
	return v
}

type CCRI17ClinicalOrderObject struct {
	ObservationRequest                     OBR
	PharmacyTreatmentOrder                 RXO
	DietaryOrdersSupplementsAndPreferences ODS
	Procedures                             PR1
}

// NewCCRI17ClinicalOrderObjectSlice will construct a slice of type CCRI17ClinicalOrderObject
func NewCCRI17ClinicalOrderObjectSlice(input hl7.HL7Type) []CCRI17ClinicalOrderObject {
	values := make([]CCRI17ClinicalOrderObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI17ClinicalOrderObject(input.Index(i))
	}
	return values
}

// NewSRRS08PersonnelResource creates an implementation of SRRS08PersonnelResource
func NewSRRS08PersonnelResource(input hl7.HL7Type) SRRS08PersonnelResource {
	v := SRRS08PersonnelResource{}
	v.AppointmentInformationPersonnelResource = NewAIP(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SRRS08PersonnelResource struct {
	AppointmentInformationPersonnelResource AIP
	NotesAndComments                        []NTE
}

// NewSRRS08PersonnelResourceSlice will construct a slice of type SRRS08PersonnelResource
func NewSRRS08PersonnelResourceSlice(input hl7.HL7Type) []SRRS08PersonnelResource {
	values := make([]SRRS08PersonnelResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS08PersonnelResource(input.Index(i))
	}
	return values
}

// NewSRRS03Resources creates an implementation of SRRS03Resources
func NewSRRS03Resources(input hl7.HL7Type) SRRS03Resources {
	v := SRRS03Resources{}
	v.ResourceGroup = NewRGS(input.Index(0))
	v.Service = NewSRRS03ServiceSlice(input.Index(1))
	v.GeneralResource = NewSRRS03GeneralResourceSlice(input.Index(2))
	v.LocationResource = NewSRRS03LocationResourceSlice(input.Index(3))
	v.PersonnelResource = NewSRRS03PersonnelResourceSlice(input.Index(4))
	return v
}

type SRRS03Resources struct {
	ResourceGroup     RGS
	Service           []SRRS03Service
	GeneralResource   []SRRS03GeneralResource
	LocationResource  []SRRS03LocationResource
	PersonnelResource []SRRS03PersonnelResource
}

// NewSRRS03ResourcesSlice will construct a slice of type SRRS03Resources
func NewSRRS03ResourcesSlice(input hl7.HL7Type) []SRRS03Resources {
	values := make([]SRRS03Resources, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS03Resources(input.Index(i))
	}
	return values
}

// NewRRII12AuthorizationContact creates an implementation of RRII12AuthorizationContact
func NewRRII12AuthorizationContact(input hl7.HL7Type) RRII12AuthorizationContact {
	v := RRII12AuthorizationContact{}
	v.AuthorizationInformation = NewAUT(input.Index(0))
	v.ContactData = NewCTD(input.Index(1))
	return v
}

type RRII12AuthorizationContact struct {
	AuthorizationInformation AUT
	ContactData              CTD
}

// NewRRII12AuthorizationContactSlice will construct a slice of type RRII12AuthorizationContact
func NewRRII12AuthorizationContactSlice(input hl7.HL7Type) []RRII12AuthorizationContact {
	values := make([]RRII12AuthorizationContact, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRRII12AuthorizationContact(input.Index(i))
	}
	return values
}

// NewSRRS10LocationResource creates an implementation of SRRS10LocationResource
func NewSRRS10LocationResource(input hl7.HL7Type) SRRS10LocationResource {
	v := SRRS10LocationResource{}
	v.AppointmentInformationLocationResource = NewAIL(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SRRS10LocationResource struct {
	AppointmentInformationLocationResource AIL
	NotesAndComments                       []NTE
}

// NewSRRS10LocationResourceSlice will construct a slice of type SRRS10LocationResource
func NewSRRS10LocationResourceSlice(input hl7.HL7Type) []SRRS10LocationResource {
	values := make([]SRRS10LocationResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS10LocationResource(input.Index(i))
	}
	return values
}

// NewPPGPCHProblemRole creates an implementation of PPGPCHProblemRole
func NewPPGPCHProblemRole(input hl7.HL7Type) PPGPCHProblemRole {
	v := PPGPCHProblemRole{}
	v.Role = NewROL(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type PPGPCHProblemRole struct {
	Role     ROL
	Variance []VAR
}

// NewPPGPCHProblemRoleSlice will construct a slice of type PPGPCHProblemRole
func NewPPGPCHProblemRoleSlice(input hl7.HL7Type) []PPGPCHProblemRole {
	values := make([]PPGPCHProblemRole, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPGPCHProblemRole(input.Index(i))
	}
	return values
}

// NewCCMI21RoleProblem creates an implementation of CCMI21RoleProblem
func NewCCMI21RoleProblem(input hl7.HL7Type) CCMI21RoleProblem {
	v := CCMI21RoleProblem{}
	v.RoleProblemObject = NewCCMI21RoleProblemObject(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type CCMI21RoleProblem struct {
	RoleProblemObject CCMI21RoleProblemObject
	Variance          []VAR
}

// NewCCMI21RoleProblemSlice will construct a slice of type CCMI21RoleProblem
func NewCCMI21RoleProblemSlice(input hl7.HL7Type) []CCMI21RoleProblem {
	values := make([]CCMI21RoleProblem, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCMI21RoleProblem(input.Index(i))
	}
	return values
}

// NewOULR23SpecimenObservation creates an implementation of OULR23SpecimenObservation
func NewOULR23SpecimenObservation(input hl7.HL7Type) OULR23SpecimenObservation {
	v := OULR23SpecimenObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type OULR23SpecimenObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewOULR23SpecimenObservationSlice will construct a slice of type OULR23SpecimenObservation
func NewOULR23SpecimenObservationSlice(input hl7.HL7Type) []OULR23SpecimenObservation {
	values := make([]OULR23SpecimenObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOULR23SpecimenObservation(input.Index(i))
	}
	return values
}

// NewQBPZ99Qbp creates an implementation of QBPZ99Qbp
func NewQBPZ99Qbp(input hl7.HL7Type) QBPZ99Qbp {
	v := QBPZ99Qbp{}
	v.AnyHl7Segment = NewHxx(input.Index(0))
	return v
}

type QBPZ99Qbp struct {
	AnyHl7Segment Hxx
}

// NewQBPZ99QbpSlice will construct a slice of type QBPZ99Qbp
func NewQBPZ99QbpSlice(input hl7.HL7Type) []QBPZ99Qbp {
	values := make([]QBPZ99Qbp, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewQBPZ99Qbp(input.Index(i))
	}
	return values
}

// NewSIUS16LocationResource creates an implementation of SIUS16LocationResource
func NewSIUS16LocationResource(input hl7.HL7Type) SIUS16LocationResource {
	v := SIUS16LocationResource{}
	v.AppointmentInformationLocationResource = NewAIL(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS16LocationResource struct {
	AppointmentInformationLocationResource AIL
	NotesAndComments                       []NTE
}

// NewSIUS16LocationResourceSlice will construct a slice of type SIUS16LocationResource
func NewSIUS16LocationResourceSlice(input hl7.HL7Type) []SIUS16LocationResource {
	values := make([]SIUS16LocationResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS16LocationResource(input.Index(i))
	}
	return values
}

// NewRRII13ResultsNotes creates an implementation of RRII13ResultsNotes
func NewRRII13ResultsNotes(input hl7.HL7Type) RRII13ResultsNotes {
	v := RRII13ResultsNotes{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type RRII13ResultsNotes struct {
	ObservationResult OBX
	NotesAndComments  []NTE
}

// NewRRII13ResultsNotesSlice will construct a slice of type RRII13ResultsNotes
func NewRRII13ResultsNotesSlice(input hl7.HL7Type) []RRII13ResultsNotes {
	values := make([]RRII13ResultsNotes, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRRII13ResultsNotes(input.Index(i))
	}
	return values
}

// NewOMLO39SpecimenInPackage creates an implementation of OMLO39SpecimenInPackage
func NewOMLO39SpecimenInPackage(input hl7.HL7Type) OMLO39SpecimenInPackage {
	v := OMLO39SpecimenInPackage{}
	v.Specimen = NewSPM(input.Index(0))
	v.SpecimenObservation = NewOMLO39SpecimenObservationSlice(input.Index(1))
	v.SpecimenContainerInPackage = NewOMLO39SpecimenContainerInPackageSlice(input.Index(2))
	return v
}

type OMLO39SpecimenInPackage struct {
	Specimen                   SPM
	SpecimenObservation        []OMLO39SpecimenObservation
	SpecimenContainerInPackage []OMLO39SpecimenContainerInPackage
}

// NewOMLO39SpecimenInPackageSlice will construct a slice of type OMLO39SpecimenInPackage
func NewOMLO39SpecimenInPackageSlice(input hl7.HL7Type) []OMLO39SpecimenInPackage {
	values := make([]OMLO39SpecimenInPackage, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO39SpecimenInPackage(input.Index(i))
	}
	return values
}

// NewCSUC10Patient creates an implementation of CSUC10Patient
func NewCSUC10Patient(input hl7.HL7Type) CSUC10Patient {
	v := CSUC10Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.AccessRestriction = NewARVSlice(input.Index(3))
	v.NotesAndComments = NewNTESlice(input.Index(4))
	v.Visit = NewCSUC10Visit(input.Index(5))
	v.ClinicalStudyRegistration = NewCSR(input.Index(6))
	v.StudyPhase = NewCSUC10StudyPhaseSlice(input.Index(7))
	return v
}

type CSUC10Patient struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	ParticipationInformation     []PRT
	AccessRestriction            []ARV
	NotesAndComments             []NTE
	Visit                        CSUC10Visit
	ClinicalStudyRegistration    CSR
	StudyPhase                   []CSUC10StudyPhase
}

// NewCSUC10PatientSlice will construct a slice of type CSUC10Patient
func NewCSUC10PatientSlice(input hl7.HL7Type) []CSUC10Patient {
	values := make([]CSUC10Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCSUC10Patient(input.Index(i))
	}
	return values
}

// NewCCRI17ResourceDetail creates an implementation of CCRI17ResourceDetail
func NewCCRI17ResourceDetail(input hl7.HL7Type) CCRI17ResourceDetail {
	v := CCRI17ResourceDetail{}
	v.ResourceObject = NewCCRI17ResourceObject(input.Index(0))
	v.ResourceObservation = NewCCRI17ResourceObservationSlice(input.Index(1))
	return v
}

type CCRI17ResourceDetail struct {
	ResourceObject      CCRI17ResourceObject
	ResourceObservation []CCRI17ResourceObservation
}

// NewCCRI17ResourceDetailSlice will construct a slice of type CCRI17ResourceDetail
func NewCCRI17ResourceDetailSlice(input hl7.HL7Type) []CCRI17ResourceDetail {
	values := make([]CCRI17ResourceDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI17ResourceDetail(input.Index(i))
	}
	return values
}

// NewCRMC03Patient creates an implementation of CRMC03Patient
func NewCRMC03Patient(input hl7.HL7Type) CRMC03Patient {
	v := CRMC03Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.AccessRestriction = NewARVSlice(input.Index(2))
	v.PatientVisit = NewCRMC03PatientVisit(input.Index(3))
	v.ClinicalStudyRegistration = NewCSR(input.Index(4))
	v.ClinicalStudyPhase = NewCSPSlice(input.Index(5))
	return v
}

type CRMC03Patient struct {
	PatientIdentification     PID
	ParticipationInformation  []PRT
	AccessRestriction         []ARV
	PatientVisit              CRMC03PatientVisit
	ClinicalStudyRegistration CSR
	ClinicalStudyPhase        []CSP
}

// NewCRMC03PatientSlice will construct a slice of type CRMC03Patient
func NewCRMC03PatientSlice(input hl7.HL7Type) []CRMC03Patient {
	values := make([]CRMC03Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCRMC03Patient(input.Index(i))
	}
	return values
}

// NewOPUR25Patient creates an implementation of OPUR25Patient
func NewOPUR25Patient(input hl7.HL7Type) OPUR25Patient {
	v := OPUR25Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.AccessRestriction = NewARVSlice(input.Index(3))
	v.PatientObservation = NewOPUR25PatientObservationSlice(input.Index(4))
	return v
}

type OPUR25Patient struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	ParticipationInformation     []PRT
	AccessRestriction            []ARV
	PatientObservation           []OPUR25PatientObservation
}

// NewOPUR25PatientSlice will construct a slice of type OPUR25Patient
func NewOPUR25PatientSlice(input hl7.HL7Type) []OPUR25Patient {
	values := make([]OPUR25Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOPUR25Patient(input.Index(i))
	}
	return values
}

// NewORLO34Order creates an implementation of ORLO34Order
func NewORLO34Order(input hl7.HL7Type) ORLO34Order {
	v := ORLO34Order{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.Timing = NewORLO34TimingSlice(input.Index(2))
	v.ObservationRequest = NewORLO34ObservationRequest(input.Index(3))
	return v
}

type ORLO34Order struct {
	CommonOrder              ORC
	ParticipationInformation []PRT
	Timing                   []ORLO34Timing
	ObservationRequest       ORLO34ObservationRequest
}

// NewORLO34OrderSlice will construct a slice of type ORLO34Order
func NewORLO34OrderSlice(input hl7.HL7Type) []ORLO34Order {
	values := make([]ORLO34Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORLO34Order(input.Index(i))
	}
	return values
}

// NewOMLO21Timing creates an implementation of OMLO21Timing
func NewOMLO21Timing(input hl7.HL7Type) OMLO21Timing {
	v := OMLO21Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type OMLO21Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewOMLO21TimingSlice will construct a slice of type OMLO21Timing
func NewOMLO21TimingSlice(input hl7.HL7Type) []OMLO21Timing {
	values := make([]OMLO21Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO21Timing(input.Index(i))
	}
	return values
}

// NewBPSO29PatientVisit creates an implementation of BPSO29PatientVisit
func NewBPSO29PatientVisit(input hl7.HL7Type) BPSO29PatientVisit {
	v := BPSO29PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	return v
}

type BPSO29PatientVisit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ParticipationInformation          []PRT
}

// NewBPSO29PatientVisitSlice will construct a slice of type BPSO29PatientVisit
func NewBPSO29PatientVisitSlice(input hl7.HL7Type) []BPSO29PatientVisit {
	values := make([]BPSO29PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewBPSO29PatientVisit(input.Index(i))
	}
	return values
}

// NewREFI15ResultsNotes creates an implementation of REFI15ResultsNotes
func NewREFI15ResultsNotes(input hl7.HL7Type) REFI15ResultsNotes {
	v := REFI15ResultsNotes{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type REFI15ResultsNotes struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewREFI15ResultsNotesSlice will construct a slice of type REFI15ResultsNotes
func NewREFI15ResultsNotesSlice(input hl7.HL7Type) []REFI15ResultsNotes {
	values := make([]REFI15ResultsNotes, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewREFI15ResultsNotes(input.Index(i))
	}
	return values
}

// NewPPRPC3Order creates an implementation of PPRPC3Order
func NewPPRPC3Order(input hl7.HL7Type) PPRPC3Order {
	v := PPRPC3Order{}
	v.CommonOrder = NewORC(input.Index(0))
	v.OrderDetail = NewPPRPC3OrderDetail(input.Index(1))
	return v
}

type PPRPC3Order struct {
	CommonOrder ORC
	OrderDetail PPRPC3OrderDetail
}

// NewPPRPC3OrderSlice will construct a slice of type PPRPC3Order
func NewPPRPC3OrderSlice(input hl7.HL7Type) []PPRPC3Order {
	values := make([]PPRPC3Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPRPC3Order(input.Index(i))
	}
	return values
}

// NewRSPK34DonnorRegistration creates an implementation of RSPK34DonnorRegistration
func NewRSPK34DonnorRegistration(input hl7.HL7Type) RSPK34DonnorRegistration {
	v := RSPK34DonnorRegistration{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type RSPK34DonnorRegistration struct {
	PatientVisit     PV1
	NotesAndComments []NTE
}

// NewRSPK34DonnorRegistrationSlice will construct a slice of type RSPK34DonnorRegistration
func NewRSPK34DonnorRegistrationSlice(input hl7.HL7Type) []RSPK34DonnorRegistration {
	values := make([]RSPK34DonnorRegistration, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPK34DonnorRegistration(input.Index(i))
	}
	return values
}

// NewOMIO23Patient creates an implementation of OMIO23Patient
func NewOMIO23Patient(input hl7.HL7Type) OMIO23Patient {
	v := OMIO23Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.AccessRestriction = NewARVSlice(input.Index(3))
	v.NotesAndComments = NewNTESlice(input.Index(4))
	v.PatientVisit = NewOMIO23PatientVisit(input.Index(5))
	v.Insurance = NewOMIO23InsuranceSlice(input.Index(6))
	v.Guarantor = NewGT1(input.Index(7))
	v.PatientAllergyInformation = NewAL1Slice(input.Index(8))
	return v
}

type OMIO23Patient struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	ParticipationInformation     []PRT
	AccessRestriction            []ARV
	NotesAndComments             []NTE
	PatientVisit                 OMIO23PatientVisit
	Insurance                    []OMIO23Insurance
	Guarantor                    GT1
	PatientAllergyInformation    []AL1
}

// NewOMIO23PatientSlice will construct a slice of type OMIO23Patient
func NewOMIO23PatientSlice(input hl7.HL7Type) []OMIO23Patient {
	values := make([]OMIO23Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMIO23Patient(input.Index(i))
	}
	return values
}

// NewORUR01Specimen creates an implementation of ORUR01Specimen
func NewORUR01Specimen(input hl7.HL7Type) ORUR01Specimen {
	v := ORUR01Specimen{}
	v.Specimen = NewSPM(input.Index(0))
	v.SpecimenObservation = NewORUR01SpecimenObservationSlice(input.Index(1))
	return v
}

type ORUR01Specimen struct {
	Specimen            SPM
	SpecimenObservation []ORUR01SpecimenObservation
}

// NewORUR01SpecimenSlice will construct a slice of type ORUR01Specimen
func NewORUR01SpecimenSlice(input hl7.HL7Type) []ORUR01Specimen {
	values := make([]ORUR01Specimen, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORUR01Specimen(input.Index(i))
	}
	return values
}

// NewPEXP07Observation creates an implementation of PEXP07Observation
func NewPEXP07Observation(input hl7.HL7Type) PEXP07Observation {
	v := PEXP07Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type PEXP07Observation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewPEXP07ObservationSlice will construct a slice of type PEXP07Observation
func NewPEXP07ObservationSlice(input hl7.HL7Type) []PEXP07Observation {
	values := make([]PEXP07Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPEXP07Observation(input.Index(i))
	}
	return values
}

// NewOMSO05Observation creates an implementation of OMSO05Observation
func NewOMSO05Observation(input hl7.HL7Type) OMSO05Observation {
	v := OMSO05Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type OMSO05Observation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewOMSO05ObservationSlice will construct a slice of type OMSO05Observation
func NewOMSO05ObservationSlice(input hl7.HL7Type) []OMSO05Observation {
	values := make([]OMSO05Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMSO05Observation(input.Index(i))
	}
	return values
}

// NewPPRPC3Choice creates an implementation of PPRPC3Choice
func NewPPRPC3Choice(input hl7.HL7Type) PPRPC3Choice {
	v := PPRPC3Choice{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.AnyHl7Segment = NewHxx(input.Index(1))
	return v
}

type PPRPC3Choice struct {
	ObservationRequest OBR
	AnyHl7Segment      Hxx
}

// NewPPRPC3ChoiceSlice will construct a slice of type PPRPC3Choice
func NewPPRPC3ChoiceSlice(input hl7.HL7Type) []PPRPC3Choice {
	values := make([]PPRPC3Choice, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPRPC3Choice(input.Index(i))
	}
	return values
}

// NewSIUS14Resources creates an implementation of SIUS14Resources
func NewSIUS14Resources(input hl7.HL7Type) SIUS14Resources {
	v := SIUS14Resources{}
	v.ResourceGroup = NewRGS(input.Index(0))
	v.Service = NewSIUS14ServiceSlice(input.Index(1))
	v.GeneralResource = NewSIUS14GeneralResourceSlice(input.Index(2))
	v.LocationResource = NewSIUS14LocationResourceSlice(input.Index(3))
	v.PersonnelResource = NewSIUS14PersonnelResourceSlice(input.Index(4))
	return v
}

type SIUS14Resources struct {
	ResourceGroup     RGS
	Service           []SIUS14Service
	GeneralResource   []SIUS14GeneralResource
	LocationResource  []SIUS14LocationResource
	PersonnelResource []SIUS14PersonnelResource
}

// NewSIUS14ResourcesSlice will construct a slice of type SIUS14Resources
func NewSIUS14ResourcesSlice(input hl7.HL7Type) []SIUS14Resources {
	values := make([]SIUS14Resources, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS14Resources(input.Index(i))
	}
	return values
}

// NewCCII22ClinicalHistoryObject creates an implementation of CCII22ClinicalHistoryObject
func NewCCII22ClinicalHistoryObject(input hl7.HL7Type) CCII22ClinicalHistoryObject {
	v := CCII22ClinicalHistoryObject{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.DietaryOrdersSupplementsAndPreferences = NewODS(input.Index(1))
	v.Procedures = NewPR1(input.Index(2))
	v.ReferralInformation = NewRF1(input.Index(3))
	v.PatientAllergyInformation = NewAL1(input.Index(4))
	v.PatientAdverseReactionInformation = NewIAM(input.Index(5))
	v.Accident = NewACC(input.Index(6))
	v.RiskManagementIncident = NewRMI(input.Index(7))
	v.Disability = NewDB1(input.Index(8))
	v.Diagnosis = NewDG1(input.Index(9))
	v.DiagnosisRelatedGroup = NewDRG(input.Index(10))
	v.PatientDeathAndAutopsy = NewPDA(input.Index(11))
	return v
}

type CCII22ClinicalHistoryObject struct {
	ObservationRequest                     OBR
	DietaryOrdersSupplementsAndPreferences ODS
	Procedures                             PR1
	ReferralInformation                    RF1
	PatientAllergyInformation              AL1
	PatientAdverseReactionInformation      IAM
	Accident                               ACC
	RiskManagementIncident                 RMI
	Disability                             DB1
	Diagnosis                              DG1
	DiagnosisRelatedGroup                  DRG
	PatientDeathAndAutopsy                 PDA
}

// NewCCII22ClinicalHistoryObjectSlice will construct a slice of type CCII22ClinicalHistoryObject
func NewCCII22ClinicalHistoryObjectSlice(input hl7.HL7Type) []CCII22ClinicalHistoryObject {
	values := make([]CCII22ClinicalHistoryObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCII22ClinicalHistoryObject(input.Index(i))
	}
	return values
}

// NewRSPK31TimingEncoded creates an implementation of RSPK31TimingEncoded
func NewRSPK31TimingEncoded(input hl7.HL7Type) RSPK31TimingEncoded {
	v := RSPK31TimingEncoded{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type RSPK31TimingEncoded struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewRSPK31TimingEncodedSlice will construct a slice of type RSPK31TimingEncoded
func NewRSPK31TimingEncodedSlice(input hl7.HL7Type) []RSPK31TimingEncoded {
	values := make([]RSPK31TimingEncoded, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPK31TimingEncoded(input.Index(i))
	}
	return values
}

// NewSRMS10LocationResource creates an implementation of SRMS10LocationResource
func NewSRMS10LocationResource(input hl7.HL7Type) SRMS10LocationResource {
	v := SRMS10LocationResource{}
	v.AppointmentInformationLocationResource = NewAIL(input.Index(0))
	v.AppointmentPreferences = NewAPR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type SRMS10LocationResource struct {
	AppointmentInformationLocationResource AIL
	AppointmentPreferences                 APR
	NotesAndComments                       []NTE
}

// NewSRMS10LocationResourceSlice will construct a slice of type SRMS10LocationResource
func NewSRMS10LocationResourceSlice(input hl7.HL7Type) []SRMS10LocationResource {
	values := make([]SRMS10LocationResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS10LocationResource(input.Index(i))
	}
	return values
}

// NewRSPZ82TimingEncoded creates an implementation of RSPZ82TimingEncoded
func NewRSPZ82TimingEncoded(input hl7.HL7Type) RSPZ82TimingEncoded {
	v := RSPZ82TimingEncoded{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type RSPZ82TimingEncoded struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewRSPZ82TimingEncodedSlice will construct a slice of type RSPZ82TimingEncoded
func NewRSPZ82TimingEncodedSlice(input hl7.HL7Type) []RSPZ82TimingEncoded {
	values := make([]RSPZ82TimingEncoded, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPZ82TimingEncoded(input.Index(i))
	}
	return values
}

// NewSRRS10PersonnelResource creates an implementation of SRRS10PersonnelResource
func NewSRRS10PersonnelResource(input hl7.HL7Type) SRRS10PersonnelResource {
	v := SRRS10PersonnelResource{}
	v.AppointmentInformationPersonnelResource = NewAIP(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SRRS10PersonnelResource struct {
	AppointmentInformationPersonnelResource AIP
	NotesAndComments                        []NTE
}

// NewSRRS10PersonnelResourceSlice will construct a slice of type SRRS10PersonnelResource
func NewSRRS10PersonnelResourceSlice(input hl7.HL7Type) []SRRS10PersonnelResource {
	values := make([]SRRS10PersonnelResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS10PersonnelResource(input.Index(i))
	}
	return values
}

// NewOMGO19PatientVisitPrior creates an implementation of OMGO19PatientVisitPrior
func NewOMGO19PatientVisitPrior(input hl7.HL7Type) OMGO19PatientVisitPrior {
	v := OMGO19PatientVisitPrior{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	return v
}

type OMGO19PatientVisitPrior struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ParticipationInformation          []PRT
}

// NewOMGO19PatientVisitPriorSlice will construct a slice of type OMGO19PatientVisitPrior
func NewOMGO19PatientVisitPriorSlice(input hl7.HL7Type) []OMGO19PatientVisitPrior {
	values := make([]OMGO19PatientVisitPrior, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMGO19PatientVisitPrior(input.Index(i))
	}
	return values
}

// NewREFI12ResultsNotes creates an implementation of REFI12ResultsNotes
func NewREFI12ResultsNotes(input hl7.HL7Type) REFI12ResultsNotes {
	v := REFI12ResultsNotes{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type REFI12ResultsNotes struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewREFI12ResultsNotesSlice will construct a slice of type REFI12ResultsNotes
func NewREFI12ResultsNotesSlice(input hl7.HL7Type) []REFI12ResultsNotes {
	values := make([]REFI12ResultsNotes, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewREFI12ResultsNotes(input.Index(i))
	}
	return values
}

// NewPPPPCCProblemObservation creates an implementation of PPPPCCProblemObservation
func NewPPPPCCProblemObservation(input hl7.HL7Type) PPPPCCProblemObservation {
	v := PPPPCCProblemObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type PPPPCCProblemObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewPPPPCCProblemObservationSlice will construct a slice of type PPPPCCProblemObservation
func NewPPPPCCProblemObservationSlice(input hl7.HL7Type) []PPPPCCProblemObservation {
	values := make([]PPPPCCProblemObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPPPCCProblemObservation(input.Index(i))
	}
	return values
}

// NewVXUV04Insurance creates an implementation of VXUV04Insurance
func NewVXUV04Insurance(input hl7.HL7Type) VXUV04Insurance {
	v := VXUV04Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3(input.Index(2))
	return v
}

type VXUV04Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification IN3
}

// NewVXUV04InsuranceSlice will construct a slice of type VXUV04Insurance
func NewVXUV04InsuranceSlice(input hl7.HL7Type) []VXUV04Insurance {
	values := make([]VXUV04Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewVXUV04Insurance(input.Index(i))
	}
	return values
}

// NewREFI14PatientVisit creates an implementation of REFI14PatientVisit
func NewREFI14PatientVisit(input hl7.HL7Type) REFI14PatientVisit {
	v := REFI14PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	return v
}

type REFI14PatientVisit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
}

// NewREFI14PatientVisitSlice will construct a slice of type REFI14PatientVisit
func NewREFI14PatientVisitSlice(input hl7.HL7Type) []REFI14PatientVisit {
	values := make([]REFI14PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewREFI14PatientVisit(input.Index(i))
	}
	return values
}

// NewPGLPC8PatientVisit creates an implementation of PGLPC8PatientVisit
func NewPGLPC8PatientVisit(input hl7.HL7Type) PGLPC8PatientVisit {
	v := PGLPC8PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	return v
}

type PGLPC8PatientVisit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
}

// NewPGLPC8PatientVisitSlice will construct a slice of type PGLPC8PatientVisit
func NewPGLPC8PatientVisitSlice(input hl7.HL7Type) []PGLPC8PatientVisit {
	values := make([]PGLPC8PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPGLPC8PatientVisit(input.Index(i))
	}
	return values
}

// NewRREO12Order creates an implementation of RREO12Order
func NewRREO12Order(input hl7.HL7Type) RREO12Order {
	v := RREO12Order{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.Timing = NewRREO12TimingSlice(input.Index(2))
	v.Encoding = NewRREO12Encoding(input.Index(3))
	return v
}

type RREO12Order struct {
	CommonOrder              ORC
	ParticipationInformation []PRT
	Timing                   []RREO12Timing
	Encoding                 RREO12Encoding
}

// NewRREO12OrderSlice will construct a slice of type RREO12Order
func NewRREO12OrderSlice(input hl7.HL7Type) []RREO12Order {
	values := make([]RREO12Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRREO12Order(input.Index(i))
	}
	return values
}

// NewEHCE04ReassessmentRequestInfo creates an implementation of EHCE04ReassessmentRequestInfo
func NewEHCE04ReassessmentRequestInfo(input hl7.HL7Type) EHCE04ReassessmentRequestInfo {
	v := EHCE04ReassessmentRequestInfo{}
	v.InvoiceSegment = NewIVCSlice(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.ProductServiceSection = NewEHCE04ProductServiceSectionSlice(input.Index(2))
	return v
}

type EHCE04ReassessmentRequestInfo struct {
	InvoiceSegment        []IVC
	NotesAndComments      []NTE
	ProductServiceSection []EHCE04ProductServiceSection
}

// NewEHCE04ReassessmentRequestInfoSlice will construct a slice of type EHCE04ReassessmentRequestInfo
func NewEHCE04ReassessmentRequestInfoSlice(input hl7.HL7Type) []EHCE04ReassessmentRequestInfo {
	values := make([]EHCE04ReassessmentRequestInfo, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewEHCE04ReassessmentRequestInfo(input.Index(i))
	}
	return values
}

// NewRASO17Encoding creates an implementation of RASO17Encoding
func NewRASO17Encoding(input hl7.HL7Type) RASO17Encoding {
	v := RASO17Encoding{}
	v.PharmacyTreatmentEncodedOrder = NewRXE(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.TimingEncoded = NewRASO17TimingEncodedSlice(input.Index(3))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(4))
	v.PharmacyTreatmentComponentOrder = NewRXCSlice(input.Index(5))
	v.CumulativeDosage = NewCDOSlice(input.Index(6))
	return v
}

type RASO17Encoding struct {
	PharmacyTreatmentEncodedOrder   RXE
	ParticipationInformation        []PRT
	NotesAndComments                []NTE
	TimingEncoded                   []RASO17TimingEncoded
	PharmacyTreatmentRoute          []RXR
	PharmacyTreatmentComponentOrder []RXC
	CumulativeDosage                []CDO
}

// NewRASO17EncodingSlice will construct a slice of type RASO17Encoding
func NewRASO17EncodingSlice(input hl7.HL7Type) []RASO17Encoding {
	values := make([]RASO17Encoding, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRASO17Encoding(input.Index(i))
	}
	return values
}

// NewORLO36Specimen creates an implementation of ORLO36Specimen
func NewORLO36Specimen(input hl7.HL7Type) ORLO36Specimen {
	v := ORLO36Specimen{}
	v.Specimen = NewSPM(input.Index(0))
	v.SpecimenObservation = NewORLO36SpecimenObservationSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.SpecimenContainer = NewORLO36SpecimenContainerSlice(input.Index(3))
	return v
}

type ORLO36Specimen struct {
	Specimen            SPM
	SpecimenObservation []ORLO36SpecimenObservation
	NotesAndComments    []NTE
	SpecimenContainer   []ORLO36SpecimenContainer
}

// NewORLO36SpecimenSlice will construct a slice of type ORLO36Specimen
func NewORLO36SpecimenSlice(input hl7.HL7Type) []ORLO36Specimen {
	values := make([]ORLO36Specimen, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORLO36Specimen(input.Index(i))
	}
	return values
}

// NewPGLPC7OrderObservation creates an implementation of PGLPC7OrderObservation
func NewPGLPC7OrderObservation(input hl7.HL7Type) PGLPC7OrderObservation {
	v := PGLPC7OrderObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.Variance = NewVARSlice(input.Index(3))
	return v
}

type PGLPC7OrderObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
	Variance                 []VAR
}

// NewPGLPC7OrderObservationSlice will construct a slice of type PGLPC7OrderObservation
func NewPGLPC7OrderObservationSlice(input hl7.HL7Type) []PGLPC7OrderObservation {
	values := make([]PGLPC7OrderObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPGLPC7OrderObservation(input.Index(i))
	}
	return values
}

// NewRREO26Encoding creates an implementation of RREO26Encoding
func NewRREO26Encoding(input hl7.HL7Type) RREO26Encoding {
	v := RREO26Encoding{}
	v.PharmacyTreatmentEncodedOrder = NewRXE(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.TimingEncoded = NewRREO26TimingEncodedSlice(input.Index(2))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(3))
	v.PharmacyTreatmentComponentOrder = NewRXCSlice(input.Index(4))
	return v
}

type RREO26Encoding struct {
	PharmacyTreatmentEncodedOrder   RXE
	NotesAndComments                []NTE
	TimingEncoded                   []RREO26TimingEncoded
	PharmacyTreatmentRoute          []RXR
	PharmacyTreatmentComponentOrder []RXC
}

// NewRREO26EncodingSlice will construct a slice of type RREO26Encoding
func NewRREO26EncodingSlice(input hl7.HL7Type) []RREO26Encoding {
	values := make([]RREO26Encoding, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRREO26Encoding(input.Index(i))
	}
	return values
}

// NewOULR22PatientObservation creates an implementation of OULR22PatientObservation
func NewOULR22PatientObservation(input hl7.HL7Type) OULR22PatientObservation {
	v := OULR22PatientObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type OULR22PatientObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewOULR22PatientObservationSlice will construct a slice of type OULR22PatientObservation
func NewOULR22PatientObservationSlice(input hl7.HL7Type) []OULR22PatientObservation {
	values := make([]OULR22PatientObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOULR22PatientObservation(input.Index(i))
	}
	return values
}

// NewOMLO21Order creates an implementation of OMLO21Order
func NewOMLO21Order(input hl7.HL7Type) OMLO21Order {
	v := OMLO21Order{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.Timing = NewOMLO21TimingSlice(input.Index(2))
	v.ObservationRequest = NewOMLO21ObservationRequest(input.Index(3))
	v.FinancialTransaction = NewFT1Slice(input.Index(4))
	v.ClinicalTrialIdentification = NewCTISlice(input.Index(5))
	v.Billing = NewBLG(input.Index(6))
	return v
}

type OMLO21Order struct {
	CommonOrder                 ORC
	ParticipationInformation    []PRT
	Timing                      []OMLO21Timing
	ObservationRequest          OMLO21ObservationRequest
	FinancialTransaction        []FT1
	ClinicalTrialIdentification []CTI
	Billing                     BLG
}

// NewOMLO21OrderSlice will construct a slice of type OMLO21Order
func NewOMLO21OrderSlice(input hl7.HL7Type) []OMLO21Order {
	values := make([]OMLO21Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO21Order(input.Index(i))
	}
	return values
}

// NewCQUI19ResourceDetail creates an implementation of CQUI19ResourceDetail
func NewCQUI19ResourceDetail(input hl7.HL7Type) CQUI19ResourceDetail {
	v := CQUI19ResourceDetail{}
	v.ResourceObject = NewCQUI19ResourceObject(input.Index(0))
	v.ResourceObservation = NewCQUI19ResourceObservationSlice(input.Index(1))
	return v
}

type CQUI19ResourceDetail struct {
	ResourceObject      CQUI19ResourceObject
	ResourceObservation []CQUI19ResourceObservation
}

// NewCQUI19ResourceDetailSlice will construct a slice of type CQUI19ResourceDetail
func NewCQUI19ResourceDetailSlice(input hl7.HL7Type) []CQUI19ResourceDetail {
	values := make([]CQUI19ResourceDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCQUI19ResourceDetail(input.Index(i))
	}
	return values
}

// NewRRGO16Patient creates an implementation of RRGO16Patient
func NewRRGO16Patient(input hl7.HL7Type) RRGO16Patient {
	v := RRGO16Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type RRGO16Patient struct {
	PatientIdentification PID
	NotesAndComments      []NTE
}

// NewRRGO16PatientSlice will construct a slice of type RRGO16Patient
func NewRRGO16PatientSlice(input hl7.HL7Type) []RRGO16Patient {
	values := make([]RRGO16Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRRGO16Patient(input.Index(i))
	}
	return values
}

// NewEHCE01Procedure creates an implementation of EHCE01Procedure
func NewEHCE01Procedure(input hl7.HL7Type) EHCE01Procedure {
	v := EHCE01Procedure{}
	v.Procedures = NewPR1(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.Role = NewROLSlice(input.Index(3))
	return v
}

type EHCE01Procedure struct {
	Procedures               PR1
	NotesAndComments         []NTE
	ParticipationInformation []PRT
	Role                     []ROL
}

// NewEHCE01ProcedureSlice will construct a slice of type EHCE01Procedure
func NewEHCE01ProcedureSlice(input hl7.HL7Type) []EHCE01Procedure {
	values := make([]EHCE01Procedure, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewEHCE01Procedure(input.Index(i))
	}
	return values
}

// NewORDO04TimingDiet creates an implementation of ORDO04TimingDiet
func NewORDO04TimingDiet(input hl7.HL7Type) ORDO04TimingDiet {
	v := ORDO04TimingDiet{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type ORDO04TimingDiet struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewORDO04TimingDietSlice will construct a slice of type ORDO04TimingDiet
func NewORDO04TimingDietSlice(input hl7.HL7Type) []ORDO04TimingDiet {
	values := make([]ORDO04TimingDiet, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORDO04TimingDiet(input.Index(i))
	}
	return values
}

// NewRSPZ86QueryResponse creates an implementation of RSPZ86QueryResponse
func NewRSPZ86QueryResponse(input hl7.HL7Type) RSPZ86QueryResponse {
	v := RSPZ86QueryResponse{}
	v.Patient = NewRSPZ86Patient(input.Index(0))
	v.CommonOrder = NewRSPZ86CommonOrderSlice(input.Index(1))
	return v
}

type RSPZ86QueryResponse struct {
	Patient     RSPZ86Patient
	CommonOrder []RSPZ86CommonOrder
}

// NewRSPZ86QueryResponseSlice will construct a slice of type RSPZ86QueryResponse
func NewRSPZ86QueryResponseSlice(input hl7.HL7Type) []RSPZ86QueryResponse {
	values := make([]RSPZ86QueryResponse, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPZ86QueryResponse(input.Index(i))
	}
	return values
}

// NewCCMI21PatientVisits creates an implementation of CCMI21PatientVisits
func NewCCMI21PatientVisits(input hl7.HL7Type) CCMI21PatientVisits {
	v := CCMI21PatientVisits{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	return v
}

type CCMI21PatientVisits struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
}

// NewCCMI21PatientVisitsSlice will construct a slice of type CCMI21PatientVisits
func NewCCMI21PatientVisitsSlice(input hl7.HL7Type) []CCMI21PatientVisits {
	values := make([]CCMI21PatientVisits, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCMI21PatientVisits(input.Index(i))
	}
	return values
}

// NewORUR01Patient creates an implementation of ORUR01Patient
func NewORUR01Patient(input hl7.HL7Type) ORUR01Patient {
	v := ORUR01Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	v.NextOfKinAssociatedParties = NewNK1Slice(input.Index(4))
	v.AccessRestriction = NewARVSlice(input.Index(5))
	v.PatientObservation = NewORUR01PatientObservationSlice(input.Index(6))
	v.Visit = NewORUR01Visit(input.Index(7))
	return v
}

type ORUR01Patient struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	ParticipationInformation     []PRT
	NotesAndComments             []NTE
	NextOfKinAssociatedParties   []NK1
	AccessRestriction            []ARV
	PatientObservation           []ORUR01PatientObservation
	Visit                        ORUR01Visit
}

// NewORUR01PatientSlice will construct a slice of type ORUR01Patient
func NewORUR01PatientSlice(input hl7.HL7Type) []ORUR01Patient {
	values := make([]ORUR01Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORUR01Patient(input.Index(i))
	}
	return values
}

// NewOMLO39Insurance creates an implementation of OMLO39Insurance
func NewOMLO39Insurance(input hl7.HL7Type) OMLO39Insurance {
	v := OMLO39Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3(input.Index(2))
	return v
}

type OMLO39Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification IN3
}

// NewOMLO39InsuranceSlice will construct a slice of type OMLO39Insurance
func NewOMLO39InsuranceSlice(input hl7.HL7Type) []OMLO39Insurance {
	values := make([]OMLO39Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO39Insurance(input.Index(i))
	}
	return values
}

// NewOMGO19Container creates an implementation of OMGO19Container
func NewOMGO19Container(input hl7.HL7Type) OMGO19Container {
	v := OMGO19Container{}
	v.SpecimenContainerDetail = NewSAC(input.Index(0))
	v.ContainerObservation = NewOMGO19ContainerObservationSlice(input.Index(1))
	return v
}

type OMGO19Container struct {
	SpecimenContainerDetail SAC
	ContainerObservation    []OMGO19ContainerObservation
}

// NewOMGO19ContainerSlice will construct a slice of type OMGO19Container
func NewOMGO19ContainerSlice(input hl7.HL7Type) []OMGO19Container {
	values := make([]OMGO19Container, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMGO19Container(input.Index(i))
	}
	return values
}

// NewCCRI16RoleGoalObject creates an implementation of CCRI16RoleGoalObject
func NewCCRI16RoleGoalObject(input hl7.HL7Type) CCRI16RoleGoalObject {
	v := CCRI16RoleGoalObject{}
	v.Role = NewROL(input.Index(0))
	v.ProviderData = NewPRD(input.Index(1))
	return v
}

type CCRI16RoleGoalObject struct {
	Role         ROL
	ProviderData PRD
}

// NewCCRI16RoleGoalObjectSlice will construct a slice of type CCRI16RoleGoalObject
func NewCCRI16RoleGoalObjectSlice(input hl7.HL7Type) []CCRI16RoleGoalObject {
	values := make([]CCRI16RoleGoalObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI16RoleGoalObject(input.Index(i))
	}
	return values
}

// NewREFI13Insurance creates an implementation of REFI13Insurance
func NewREFI13Insurance(input hl7.HL7Type) REFI13Insurance {
	v := REFI13Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3(input.Index(2))
	return v
}

type REFI13Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification IN3
}

// NewREFI13InsuranceSlice will construct a slice of type REFI13Insurance
func NewREFI13InsuranceSlice(input hl7.HL7Type) []REFI13Insurance {
	values := make([]REFI13Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewREFI13Insurance(input.Index(i))
	}
	return values
}

// NewCCMI21ProblemObservation creates an implementation of CCMI21ProblemObservation
func NewCCMI21ProblemObservation(input hl7.HL7Type) CCMI21ProblemObservation {
	v := CCMI21ProblemObservation{}
	v.ObservationResult = NewOBXSlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CCMI21ProblemObservation struct {
	ObservationResult        []OBX
	ParticipationInformation []PRT
}

// NewCCMI21ProblemObservationSlice will construct a slice of type CCMI21ProblemObservation
func NewCCMI21ProblemObservationSlice(input hl7.HL7Type) []CCMI21ProblemObservation {
	values := make([]CCMI21ProblemObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCMI21ProblemObservation(input.Index(i))
	}
	return values
}

// NewCCUI20MedicationOrderObservation creates an implementation of CCUI20MedicationOrderObservation
func NewCCUI20MedicationOrderObservation(input hl7.HL7Type) CCUI20MedicationOrderObservation {
	v := CCUI20MedicationOrderObservation{}
	v.ObservationResult = NewOBXSlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CCUI20MedicationOrderObservation struct {
	ObservationResult        []OBX
	ParticipationInformation []PRT
}

// NewCCUI20MedicationOrderObservationSlice will construct a slice of type CCUI20MedicationOrderObservation
func NewCCUI20MedicationOrderObservationSlice(input hl7.HL7Type) []CCUI20MedicationOrderObservation {
	values := make([]CCUI20MedicationOrderObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCUI20MedicationOrderObservation(input.Index(i))
	}
	return values
}

// NewSIUS14Patient creates an implementation of SIUS14Patient
func NewSIUS14Patient(input hl7.HL7Type) SIUS14Patient {
	v := SIUS14Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.PatientVisit = NewPV1(input.Index(2))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(3))
	v.ObservationResult = NewOBXSlice(input.Index(4))
	v.Diagnosis = NewDG1Slice(input.Index(5))
	return v
}

type SIUS14Patient struct {
	PatientIdentification             PID
	PatientAdditionalDemographic      PD1
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ObservationResult                 []OBX
	Diagnosis                         []DG1
}

// NewSIUS14PatientSlice will construct a slice of type SIUS14Patient
func NewSIUS14PatientSlice(input hl7.HL7Type) []SIUS14Patient {
	values := make([]SIUS14Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS14Patient(input.Index(i))
	}
	return values
}

// NewOSMR26SubjectPopulationLocationIdentification creates an implementation of OSMR26SubjectPopulationLocationIdentification
func NewOSMR26SubjectPopulationLocationIdentification(input hl7.HL7Type) OSMR26SubjectPopulationLocationIdentification {
	v := OSMR26SubjectPopulationLocationIdentification{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.PatientVisitObservation = NewOSMR26PatientVisitObservationSlice(input.Index(2))
	v.PatientIdentification = NewPID(input.Index(3))
	v.AdditionalParticipationInformation = NewPRTSlice(input.Index(4))
	v.NextOfKinAssociatedParties = NewNK1Slice(input.Index(5))
	return v
}

type OSMR26SubjectPopulationLocationIdentification struct {
	PatientVisit                       PV1
	ParticipationInformation           []PRT
	PatientVisitObservation            []OSMR26PatientVisitObservation
	PatientIdentification              PID
	AdditionalParticipationInformation []PRT
	NextOfKinAssociatedParties         []NK1
}

// NewOSMR26SubjectPopulationLocationIdentificationSlice will construct a slice of type OSMR26SubjectPopulationLocationIdentification
func NewOSMR26SubjectPopulationLocationIdentificationSlice(input hl7.HL7Type) []OSMR26SubjectPopulationLocationIdentification {
	values := make([]OSMR26SubjectPopulationLocationIdentification, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOSMR26SubjectPopulationLocationIdentification(input.Index(i))
	}
	return values
}

// NewOULR22Visit creates an implementation of OULR22Visit
func NewOULR22Visit(input hl7.HL7Type) OULR22Visit {
	v := OULR22Visit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	return v
}

type OULR22Visit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ParticipationInformation          []PRT
}

// NewOULR22VisitSlice will construct a slice of type OULR22Visit
func NewOULR22VisitSlice(input hl7.HL7Type) []OULR22Visit {
	values := make([]OULR22Visit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOULR22Visit(input.Index(i))
	}
	return values
}

// NewCQUI19RolePathwayObject creates an implementation of CQUI19RolePathwayObject
func NewCQUI19RolePathwayObject(input hl7.HL7Type) CQUI19RolePathwayObject {
	v := CQUI19RolePathwayObject{}
	v.Role = NewROL(input.Index(0))
	v.ProviderData = NewPRD(input.Index(1))
	return v
}

type CQUI19RolePathwayObject struct {
	Role         ROL
	ProviderData PRD
}

// NewCQUI19RolePathwayObjectSlice will construct a slice of type CQUI19RolePathwayObject
func NewCQUI19RolePathwayObjectSlice(input hl7.HL7Type) []CQUI19RolePathwayObject {
	values := make([]CQUI19RolePathwayObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCQUI19RolePathwayObject(input.Index(i))
	}
	return values
}

// NewMFNM09MfTestCategorical creates an implementation of MFNM09MfTestCategorical
func NewMFNM09MfTestCategorical(input hl7.HL7Type) MFNM09MfTestCategorical {
	v := MFNM09MfTestCategorical{}
	v.MasterFileEntry = NewMFE(input.Index(0))
	v.GeneralSegment = NewOM1(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.MfTestCatDetail = NewMFNM09MfTestCatDetail(input.Index(3))
	return v
}

type MFNM09MfTestCategorical struct {
	MasterFileEntry          MFE
	GeneralSegment           OM1
	ParticipationInformation []PRT
	MfTestCatDetail          MFNM09MfTestCatDetail
}

// NewMFNM09MfTestCategoricalSlice will construct a slice of type MFNM09MfTestCategorical
func NewMFNM09MfTestCategoricalSlice(input hl7.HL7Type) []MFNM09MfTestCategorical {
	values := make([]MFNM09MfTestCategorical, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMFNM09MfTestCategorical(input.Index(i))
	}
	return values
}

// NewREFI13Observation creates an implementation of REFI13Observation
func NewREFI13Observation(input hl7.HL7Type) REFI13Observation {
	v := REFI13Observation{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.ResultsNotes = NewREFI13ResultsNotesSlice(input.Index(2))
	return v
}

type REFI13Observation struct {
	ObservationRequest OBR
	NotesAndComments   []NTE
	ResultsNotes       []REFI13ResultsNotes
}

// NewREFI13ObservationSlice will construct a slice of type REFI13Observation
func NewREFI13ObservationSlice(input hl7.HL7Type) []REFI13Observation {
	values := make([]REFI13Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewREFI13Observation(input.Index(i))
	}
	return values
}

// NewOMBO27Observation creates an implementation of OMBO27Observation
func NewOMBO27Observation(input hl7.HL7Type) OMBO27Observation {
	v := OMBO27Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type OMBO27Observation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewOMBO27ObservationSlice will construct a slice of type OMBO27Observation
func NewOMBO27ObservationSlice(input hl7.HL7Type) []OMBO27Observation {
	values := make([]OMBO27Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMBO27Observation(input.Index(i))
	}
	return values
}

// NewSRRS02GeneralResource creates an implementation of SRRS02GeneralResource
func NewSRRS02GeneralResource(input hl7.HL7Type) SRRS02GeneralResource {
	v := SRRS02GeneralResource{}
	v.AppointmentInformationGeneralResource = NewAIG(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SRRS02GeneralResource struct {
	AppointmentInformationGeneralResource AIG
	NotesAndComments                      []NTE
}

// NewSRRS02GeneralResourceSlice will construct a slice of type SRRS02GeneralResource
func NewSRRS02GeneralResourceSlice(input hl7.HL7Type) []SRRS02GeneralResource {
	values := make([]SRRS02GeneralResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS02GeneralResource(input.Index(i))
	}
	return values
}

// NewRASO17OrderDetailSupplement creates an implementation of RASO17OrderDetailSupplement
func NewRASO17OrderDetailSupplement(input hl7.HL7Type) RASO17OrderDetailSupplement {
	v := RASO17OrderDetailSupplement{}
	v.NotesAndComments = NewNTESlice(input.Index(0))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(1))
	v.Components = NewRASO17ComponentsSlice(input.Index(2))
	return v
}

type RASO17OrderDetailSupplement struct {
	NotesAndComments       []NTE
	PharmacyTreatmentRoute []RXR
	Components             []RASO17Components
}

// NewRASO17OrderDetailSupplementSlice will construct a slice of type RASO17OrderDetailSupplement
func NewRASO17OrderDetailSupplementSlice(input hl7.HL7Type) []RASO17OrderDetailSupplement {
	values := make([]RASO17OrderDetailSupplement, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRASO17OrderDetailSupplement(input.Index(i))
	}
	return values
}

// NewSRRS04Resources creates an implementation of SRRS04Resources
func NewSRRS04Resources(input hl7.HL7Type) SRRS04Resources {
	v := SRRS04Resources{}
	v.ResourceGroup = NewRGS(input.Index(0))
	v.Service = NewSRRS04ServiceSlice(input.Index(1))
	v.GeneralResource = NewSRRS04GeneralResourceSlice(input.Index(2))
	v.LocationResource = NewSRRS04LocationResourceSlice(input.Index(3))
	v.PersonnelResource = NewSRRS04PersonnelResourceSlice(input.Index(4))
	return v
}

type SRRS04Resources struct {
	ResourceGroup     RGS
	Service           []SRRS04Service
	GeneralResource   []SRRS04GeneralResource
	LocationResource  []SRRS04LocationResource
	PersonnelResource []SRRS04PersonnelResource
}

// NewSRRS04ResourcesSlice will construct a slice of type SRRS04Resources
func NewSRRS04ResourcesSlice(input hl7.HL7Type) []SRRS04Resources {
	values := make([]SRRS04Resources, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS04Resources(input.Index(i))
	}
	return values
}

// NewEHCE01InvoiceInformationSubmit creates an implementation of EHCE01InvoiceInformationSubmit
func NewEHCE01InvoiceInformationSubmit(input hl7.HL7Type) EHCE01InvoiceInformationSubmit {
	v := EHCE01InvoiceInformationSubmit{}
	v.InvoiceSegment = NewIVC(input.Index(0))
	v.PayeeInformation = NewPYE(input.Index(1))
	v.ContactData = NewCTDSlice(input.Index(2))
	v.AuthorizationInformation = NewAUT(input.Index(3))
	v.LocationIdentification = NewLOCSlice(input.Index(4))
	v.ParticipationInformation = NewPRTSlice(input.Index(5))
	v.Role = NewROLSlice(input.Index(6))
	v.ProductServiceSection = NewEHCE01ProductServiceSectionSlice(input.Index(7))
	return v
}

type EHCE01InvoiceInformationSubmit struct {
	InvoiceSegment           IVC
	PayeeInformation         PYE
	ContactData              []CTD
	AuthorizationInformation AUT
	LocationIdentification   []LOC
	ParticipationInformation []PRT
	Role                     []ROL
	ProductServiceSection    []EHCE01ProductServiceSection
}

// NewEHCE01InvoiceInformationSubmitSlice will construct a slice of type EHCE01InvoiceInformationSubmit
func NewEHCE01InvoiceInformationSubmitSlice(input hl7.HL7Type) []EHCE01InvoiceInformationSubmit {
	values := make([]EHCE01InvoiceInformationSubmit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewEHCE01InvoiceInformationSubmit(input.Index(i))
	}
	return values
}

// NewCCRI16ClinicalHistoryObject creates an implementation of CCRI16ClinicalHistoryObject
func NewCCRI16ClinicalHistoryObject(input hl7.HL7Type) CCRI16ClinicalHistoryObject {
	v := CCRI16ClinicalHistoryObject{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.DietaryOrdersSupplementsAndPreferences = NewODS(input.Index(1))
	v.Procedures = NewPR1(input.Index(2))
	v.ReferralInformation = NewRF1(input.Index(3))
	v.PatientAllergyInformation = NewAL1(input.Index(4))
	v.PatientAdverseReactionInformation = NewIAM(input.Index(5))
	v.Accident = NewACC(input.Index(6))
	v.RiskManagementIncident = NewRMI(input.Index(7))
	v.Disability = NewDB1(input.Index(8))
	v.Diagnosis = NewDG1(input.Index(9))
	v.DiagnosisRelatedGroup = NewDRG(input.Index(10))
	return v
}

type CCRI16ClinicalHistoryObject struct {
	ObservationRequest                     OBR
	DietaryOrdersSupplementsAndPreferences ODS
	Procedures                             PR1
	ReferralInformation                    RF1
	PatientAllergyInformation              AL1
	PatientAdverseReactionInformation      IAM
	Accident                               ACC
	RiskManagementIncident                 RMI
	Disability                             DB1
	Diagnosis                              DG1
	DiagnosisRelatedGroup                  DRG
}

// NewCCRI16ClinicalHistoryObjectSlice will construct a slice of type CCRI16ClinicalHistoryObject
func NewCCRI16ClinicalHistoryObjectSlice(input hl7.HL7Type) []CCRI16ClinicalHistoryObject {
	values := make([]CCRI16ClinicalHistoryObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI16ClinicalHistoryObject(input.Index(i))
	}
	return values
}

// NewRDEO11InfusionOrder creates an implementation of RDEO11InfusionOrder
func NewRDEO11InfusionOrder(input hl7.HL7Type) RDEO11InfusionOrder {
	v := RDEO11InfusionOrder{}
	v.PharmacyTreatmentInfusion = NewRXV(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.TimingEncoded = NewRDEO11TimingEncodedSlice(input.Index(3))
	return v
}

type RDEO11InfusionOrder struct {
	PharmacyTreatmentInfusion RXV
	ParticipationInformation  []PRT
	NotesAndComments          []NTE
	TimingEncoded             []RDEO11TimingEncoded
}

// NewRDEO11InfusionOrderSlice will construct a slice of type RDEO11InfusionOrder
func NewRDEO11InfusionOrderSlice(input hl7.HL7Type) []RDEO11InfusionOrder {
	values := make([]RDEO11InfusionOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRDEO11InfusionOrder(input.Index(i))
	}
	return values
}

// NewRDEO11Observation creates an implementation of RDEO11Observation
func NewRDEO11Observation(input hl7.HL7Type) RDEO11Observation {
	v := RDEO11Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type RDEO11Observation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewRDEO11ObservationSlice will construct a slice of type RDEO11Observation
func NewRDEO11ObservationSlice(input hl7.HL7Type) []RDEO11Observation {
	values := make([]RDEO11Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRDEO11Observation(input.Index(i))
	}
	return values
}

// NewPPRPC1ProblemObservation creates an implementation of PPRPC1ProblemObservation
func NewPPRPC1ProblemObservation(input hl7.HL7Type) PPRPC1ProblemObservation {
	v := PPRPC1ProblemObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type PPRPC1ProblemObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewPPRPC1ProblemObservationSlice will construct a slice of type PPRPC1ProblemObservation
func NewPPRPC1ProblemObservationSlice(input hl7.HL7Type) []PPRPC1ProblemObservation {
	values := make([]PPRPC1ProblemObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPRPC1ProblemObservation(input.Index(i))
	}
	return values
}

// NewPPGPCJProblemObservation creates an implementation of PPGPCJProblemObservation
func NewPPGPCJProblemObservation(input hl7.HL7Type) PPGPCJProblemObservation {
	v := PPGPCJProblemObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type PPGPCJProblemObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewPPGPCJProblemObservationSlice will construct a slice of type PPGPCJProblemObservation
func NewPPGPCJProblemObservationSlice(input hl7.HL7Type) []PPGPCJProblemObservation {
	values := make([]PPGPCJProblemObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPGPCJProblemObservation(input.Index(i))
	}
	return values
}

// NewSRMS06LocationResource creates an implementation of SRMS06LocationResource
func NewSRMS06LocationResource(input hl7.HL7Type) SRMS06LocationResource {
	v := SRMS06LocationResource{}
	v.AppointmentInformationLocationResource = NewAIL(input.Index(0))
	v.AppointmentPreferences = NewAPR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type SRMS06LocationResource struct {
	AppointmentInformationLocationResource AIL
	AppointmentPreferences                 APR
	NotesAndComments                       []NTE
}

// NewSRMS06LocationResourceSlice will construct a slice of type SRMS06LocationResource
func NewSRMS06LocationResourceSlice(input hl7.HL7Type) []SRMS06LocationResource {
	values := make([]SRMS06LocationResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS06LocationResource(input.Index(i))
	}
	return values
}

// NewOMPO09Order creates an implementation of OMPO09Order
func NewOMPO09Order(input hl7.HL7Type) OMPO09Order {
	v := OMPO09Order{}
	v.CommonOrder = NewORC(input.Index(0))
	v.Timing = NewOMPO09TimingSlice(input.Index(1))
	v.PharmacyTreatmentOrder = NewRXO(input.Index(2))
	v.ParticipationInformation = NewPRTSlice(input.Index(3))
	v.NotesAndComments = NewNTESlice(input.Index(4))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(5))
	v.Component = NewOMPO09ComponentSlice(input.Index(6))
	v.CumulativeDosage = NewCDOSlice(input.Index(7))
	v.Observation = NewOMPO09ObservationSlice(input.Index(8))
	v.FinancialTransaction = NewFT1Slice(input.Index(9))
	v.Billing = NewBLG(input.Index(10))
	return v
}

type OMPO09Order struct {
	CommonOrder              ORC
	Timing                   []OMPO09Timing
	PharmacyTreatmentOrder   RXO
	ParticipationInformation []PRT
	NotesAndComments         []NTE
	PharmacyTreatmentRoute   []RXR
	Component                []OMPO09Component
	CumulativeDosage         []CDO
	Observation              []OMPO09Observation
	FinancialTransaction     []FT1
	Billing                  BLG
}

// NewOMPO09OrderSlice will construct a slice of type OMPO09Order
func NewOMPO09OrderSlice(input hl7.HL7Type) []OMPO09Order {
	values := make([]OMPO09Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMPO09Order(input.Index(i))
	}
	return values
}

// NewOMQO42PatientVisit creates an implementation of OMQO42PatientVisit
func NewOMQO42PatientVisit(input hl7.HL7Type) OMQO42PatientVisit {
	v := OMQO42PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	return v
}

type OMQO42PatientVisit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ParticipationInformation          []PRT
}

// NewOMQO42PatientVisitSlice will construct a slice of type OMQO42PatientVisit
func NewOMQO42PatientVisitSlice(input hl7.HL7Type) []OMQO42PatientVisit {
	values := make([]OMQO42PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMQO42PatientVisit(input.Index(i))
	}
	return values
}

// NewCCRI17ClinicalOrder creates an implementation of CCRI17ClinicalOrder
func NewCCRI17ClinicalOrder(input hl7.HL7Type) CCRI17ClinicalOrder {
	v := CCRI17ClinicalOrder{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ClinicalOrderTiming = NewCCRI17ClinicalOrderTimingSlice(input.Index(1))
	v.ClinicalOrderDetail = NewCCRI17ClinicalOrderDetailSlice(input.Index(2))
	v.ClinicalTrialIdentification = NewCTISlice(input.Index(3))
	return v
}

type CCRI17ClinicalOrder struct {
	CommonOrder                 ORC
	ClinicalOrderTiming         []CCRI17ClinicalOrderTiming
	ClinicalOrderDetail         []CCRI17ClinicalOrderDetail
	ClinicalTrialIdentification []CTI
}

// NewCCRI17ClinicalOrderSlice will construct a slice of type CCRI17ClinicalOrder
func NewCCRI17ClinicalOrderSlice(input hl7.HL7Type) []CCRI17ClinicalOrder {
	values := make([]CCRI17ClinicalOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI17ClinicalOrder(input.Index(i))
	}
	return values
}

// NewCCRI18RolePathway creates an implementation of CCRI18RolePathway
func NewCCRI18RolePathway(input hl7.HL7Type) CCRI18RolePathway {
	v := CCRI18RolePathway{}
	v.RolePathwayObject = NewCCRI18RolePathwayObject(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type CCRI18RolePathway struct {
	RolePathwayObject CCRI18RolePathwayObject
	Variance          []VAR
}

// NewCCRI18RolePathwaySlice will construct a slice of type CCRI18RolePathway
func NewCCRI18RolePathwaySlice(input hl7.HL7Type) []CCRI18RolePathway {
	values := make([]CCRI18RolePathway, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI18RolePathway(input.Index(i))
	}
	return values
}

// NewSRRS01LocationResource creates an implementation of SRRS01LocationResource
func NewSRRS01LocationResource(input hl7.HL7Type) SRRS01LocationResource {
	v := SRRS01LocationResource{}
	v.AppointmentInformationLocationResource = NewAIL(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SRRS01LocationResource struct {
	AppointmentInformationLocationResource AIL
	NotesAndComments                       []NTE
}

// NewSRRS01LocationResourceSlice will construct a slice of type SRRS01LocationResource
func NewSRRS01LocationResourceSlice(input hl7.HL7Type) []SRRS01LocationResource {
	values := make([]SRRS01LocationResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS01LocationResource(input.Index(i))
	}
	return values
}

// NewPPPPCBOrder creates an implementation of PPPPCBOrder
func NewPPPPCBOrder(input hl7.HL7Type) PPPPCBOrder {
	v := PPPPCBOrder{}
	v.CommonOrder = NewORC(input.Index(0))
	v.OrderDetail = NewPPPPCBOrderDetail(input.Index(1))
	return v
}

type PPPPCBOrder struct {
	CommonOrder ORC
	OrderDetail PPPPCBOrderDetail
}

// NewPPPPCBOrderSlice will construct a slice of type PPPPCBOrder
func NewPPPPCBOrderSlice(input hl7.HL7Type) []PPPPCBOrder {
	values := make([]PPPPCBOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPPPCBOrder(input.Index(i))
	}
	return values
}

// NewORLO36Response creates an implementation of ORLO36Response
func NewORLO36Response(input hl7.HL7Type) ORLO36Response {
	v := ORLO36Response{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.AccessRestriction = NewARVSlice(input.Index(2))
	v.Specimen = NewORLO36SpecimenSlice(input.Index(3))
	return v
}

type ORLO36Response struct {
	PatientIdentification    PID
	ParticipationInformation []PRT
	AccessRestriction        []ARV
	Specimen                 []ORLO36Specimen
}

// NewORLO36ResponseSlice will construct a slice of type ORLO36Response
func NewORLO36ResponseSlice(input hl7.HL7Type) []ORLO36Response {
	values := make([]ORLO36Response, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORLO36Response(input.Index(i))
	}
	return values
}

// NewREFI12Procedure creates an implementation of REFI12Procedure
func NewREFI12Procedure(input hl7.HL7Type) REFI12Procedure {
	v := REFI12Procedure{}
	v.Procedures = NewPR1(input.Index(0))
	v.AuthorizationContact2 = NewREFI12AuthorizationContact2(input.Index(1))
	return v
}

type REFI12Procedure struct {
	Procedures            PR1
	AuthorizationContact2 REFI12AuthorizationContact2
}

// NewREFI12ProcedureSlice will construct a slice of type REFI12Procedure
func NewREFI12ProcedureSlice(input hl7.HL7Type) []REFI12Procedure {
	values := make([]REFI12Procedure, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewREFI12Procedure(input.Index(i))
	}
	return values
}

// NewDELO46Donnor creates an implementation of DELO46Donnor
func NewDELO46Donnor(input hl7.HL7Type) DELO46Donnor {
	v := DELO46Donnor{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.ObservationResult = NewOBXSlice(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	v.PatientAllergyInformation = NewAL1Slice(input.Index(4))
	v.AccessRestriction = NewARVSlice(input.Index(5))
	v.DonorRegistration = NewDELO46DonorRegistration(input.Index(6))
	return v
}

type DELO46Donnor struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	ObservationResult            []OBX
	NotesAndComments             []NTE
	PatientAllergyInformation    []AL1
	AccessRestriction            []ARV
	DonorRegistration            DELO46DonorRegistration
}

// NewDELO46DonnorSlice will construct a slice of type DELO46Donnor
func NewDELO46DonnorSlice(input hl7.HL7Type) []DELO46Donnor {
	values := make([]DELO46Donnor, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewDELO46Donnor(input.Index(i))
	}
	return values
}

// NewCRMC05Patient creates an implementation of CRMC05Patient
func NewCRMC05Patient(input hl7.HL7Type) CRMC05Patient {
	v := CRMC05Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.PatientVisit = NewCRMC05PatientVisit(input.Index(2))
	v.ClinicalStudyRegistration = NewCSR(input.Index(3))
	v.ClinicalStudyPhase = NewCSPSlice(input.Index(4))
	return v
}

type CRMC05Patient struct {
	PatientIdentification     PID
	ParticipationInformation  []PRT
	PatientVisit              CRMC05PatientVisit
	ClinicalStudyRegistration CSR
	ClinicalStudyPhase        []CSP
}

// NewCRMC05PatientSlice will construct a slice of type CRMC05Patient
func NewCRMC05PatientSlice(input hl7.HL7Type) []CRMC05Patient {
	values := make([]CRMC05Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCRMC05Patient(input.Index(i))
	}
	return values
}

// NewCCRI16ClinicalHistory creates an implementation of CCRI16ClinicalHistory
func NewCCRI16ClinicalHistory(input hl7.HL7Type) CCRI16ClinicalHistory {
	v := CCRI16ClinicalHistory{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ClinicalHistoryDetail = NewCCRI16ClinicalHistoryDetailSlice(input.Index(1))
	v.RoleClinicalHistory = NewCCRI16RoleClinicalHistorySlice(input.Index(2))
	v.ClinicalTrialIdentification = NewCTISlice(input.Index(3))
	return v
}

type CCRI16ClinicalHistory struct {
	CommonOrder                 ORC
	ClinicalHistoryDetail       []CCRI16ClinicalHistoryDetail
	RoleClinicalHistory         []CCRI16RoleClinicalHistory
	ClinicalTrialIdentification []CTI
}

// NewCCRI16ClinicalHistorySlice will construct a slice of type CCRI16ClinicalHistory
func NewCCRI16ClinicalHistorySlice(input hl7.HL7Type) []CCRI16ClinicalHistory {
	values := make([]CCRI16ClinicalHistory, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI16ClinicalHistory(input.Index(i))
	}
	return values
}

// NewRPLI02Provider creates an implementation of RPLI02Provider
func NewRPLI02Provider(input hl7.HL7Type) RPLI02Provider {
	v := RPLI02Provider{}
	v.ProviderData = NewPRD(input.Index(0))
	v.ContactData = NewCTDSlice(input.Index(1))
	return v
}

type RPLI02Provider struct {
	ProviderData PRD
	ContactData  []CTD
}

// NewRPLI02ProviderSlice will construct a slice of type RPLI02Provider
func NewRPLI02ProviderSlice(input hl7.HL7Type) []RPLI02Provider {
	values := make([]RPLI02Provider, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRPLI02Provider(input.Index(i))
	}
	return values
}

// NewORUR31Observation creates an implementation of ORUR31Observation
func NewORUR31Observation(input hl7.HL7Type) ORUR31Observation {
	v := ORUR31Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type ORUR31Observation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewORUR31ObservationSlice will construct a slice of type ORUR31Observation
func NewORUR31ObservationSlice(input hl7.HL7Type) []ORUR31Observation {
	values := make([]ORUR31Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORUR31Observation(input.Index(i))
	}
	return values
}

// NewRGVO15TimingGive creates an implementation of RGVO15TimingGive
func NewRGVO15TimingGive(input hl7.HL7Type) RGVO15TimingGive {
	v := RGVO15TimingGive{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type RGVO15TimingGive struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewRGVO15TimingGiveSlice will construct a slice of type RGVO15TimingGive
func NewRGVO15TimingGiveSlice(input hl7.HL7Type) []RGVO15TimingGive {
	values := make([]RGVO15TimingGive, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRGVO15TimingGive(input.Index(i))
	}
	return values
}

// NewCCRI17Problem creates an implementation of CCRI17Problem
func NewCCRI17Problem(input hl7.HL7Type) CCRI17Problem {
	v := CCRI17Problem{}
	v.ProblemDetails = NewPRB(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	v.RoleProblem = NewCCRI17RoleProblemSlice(input.Index(2))
	v.ProblemObservation = NewCCRI17ProblemObservationSlice(input.Index(3))
	return v
}

type CCRI17Problem struct {
	ProblemDetails     PRB
	Variance           []VAR
	RoleProblem        []CCRI17RoleProblem
	ProblemObservation []CCRI17ProblemObservation
}

// NewCCRI17ProblemSlice will construct a slice of type CCRI17Problem
func NewCCRI17ProblemSlice(input hl7.HL7Type) []CCRI17Problem {
	values := make([]CCRI17Problem, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI17Problem(input.Index(i))
	}
	return values
}

// NewOPLO37ObservationRequest creates an implementation of OPLO37ObservationRequest
func NewOPLO37ObservationRequest(input hl7.HL7Type) OPLO37ObservationRequest {
	v := OPLO37ObservationRequest{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.ObservationRequest = NewOBR(input.Index(2))
	v.AdditionalParticipationInformation = NewPRTSlice(input.Index(3))
	v.Timing = NewOPLO37TimingSlice(input.Index(4))
	v.TestCodeDetail = NewTCD(input.Index(5))
	v.Diagnosis = NewDG1Slice(input.Index(6))
	v.OrderRelatedObservation = NewOPLO37OrderRelatedObservationSlice(input.Index(7))
	return v
}

type OPLO37ObservationRequest struct {
	CommonOrder                        ORC
	ParticipationInformation           []PRT
	ObservationRequest                 OBR
	AdditionalParticipationInformation []PRT
	Timing                             []OPLO37Timing
	TestCodeDetail                     TCD
	Diagnosis                          []DG1
	OrderRelatedObservation            []OPLO37OrderRelatedObservation
}

// NewOPLO37ObservationRequestSlice will construct a slice of type OPLO37ObservationRequest
func NewOPLO37ObservationRequestSlice(input hl7.HL7Type) []OPLO37ObservationRequest {
	values := make([]OPLO37ObservationRequest, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOPLO37ObservationRequest(input.Index(i))
	}
	return values
}

// NewOULR23Result creates an implementation of OULR23Result
func NewOULR23Result(input hl7.HL7Type) OULR23Result {
	v := OULR23Result{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.TestCodeDetail = NewTCD(input.Index(2))
	v.SubstanceIdentifier = NewSIDSlice(input.Index(3))
	v.NotesAndComments = NewNTESlice(input.Index(4))
	return v
}

type OULR23Result struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	TestCodeDetail           TCD
	SubstanceIdentifier      []SID
	NotesAndComments         []NTE
}

// NewOULR23ResultSlice will construct a slice of type OULR23Result
func NewOULR23ResultSlice(input hl7.HL7Type) []OULR23Result {
	values := make([]OULR23Result, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOULR23Result(input.Index(i))
	}
	return values
}

// NewOPUR25CommonOrder creates an implementation of OPUR25CommonOrder
func NewOPUR25CommonOrder(input hl7.HL7Type) OPUR25CommonOrder {
	v := OPUR25CommonOrder{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type OPUR25CommonOrder struct {
	CommonOrder              ORC
	ParticipationInformation []PRT
}

// NewOPUR25CommonOrderSlice will construct a slice of type OPUR25CommonOrder
func NewOPUR25CommonOrderSlice(input hl7.HL7Type) []OPUR25CommonOrder {
	values := make([]OPUR25CommonOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOPUR25CommonOrder(input.Index(i))
	}
	return values
}

// NewSRRS02PersonnelResource creates an implementation of SRRS02PersonnelResource
func NewSRRS02PersonnelResource(input hl7.HL7Type) SRRS02PersonnelResource {
	v := SRRS02PersonnelResource{}
	v.AppointmentInformationPersonnelResource = NewAIP(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SRRS02PersonnelResource struct {
	AppointmentInformationPersonnelResource AIP
	NotesAndComments                        []NTE
}

// NewSRRS02PersonnelResourceSlice will construct a slice of type SRRS02PersonnelResource
func NewSRRS02PersonnelResourceSlice(input hl7.HL7Type) []SRRS02PersonnelResource {
	values := make([]SRRS02PersonnelResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS02PersonnelResource(input.Index(i))
	}
	return values
}

// NewCCUI20RoleClinicalHistory creates an implementation of CCUI20RoleClinicalHistory
func NewCCUI20RoleClinicalHistory(input hl7.HL7Type) CCUI20RoleClinicalHistory {
	v := CCUI20RoleClinicalHistory{}
	v.RoleClinicalHistoryObject = NewCCUI20RoleClinicalHistoryObject(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type CCUI20RoleClinicalHistory struct {
	RoleClinicalHistoryObject CCUI20RoleClinicalHistoryObject
	Variance                  []VAR
}

// NewCCUI20RoleClinicalHistorySlice will construct a slice of type CCUI20RoleClinicalHistory
func NewCCUI20RoleClinicalHistorySlice(input hl7.HL7Type) []CCUI20RoleClinicalHistory {
	values := make([]CCUI20RoleClinicalHistory, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCUI20RoleClinicalHistory(input.Index(i))
	}
	return values
}

// NewPGLPC8OrderObservation creates an implementation of PGLPC8OrderObservation
func NewPGLPC8OrderObservation(input hl7.HL7Type) PGLPC8OrderObservation {
	v := PGLPC8OrderObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.Variance = NewVARSlice(input.Index(3))
	return v
}

type PGLPC8OrderObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
	Variance                 []VAR
}

// NewPGLPC8OrderObservationSlice will construct a slice of type PGLPC8OrderObservation
func NewPGLPC8OrderObservationSlice(input hl7.HL7Type) []PGLPC8OrderObservation {
	values := make([]PGLPC8OrderObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPGLPC8OrderObservation(input.Index(i))
	}
	return values
}

// NewRTBZ94RowDefinition creates an implementation of RTBZ94RowDefinition
func NewRTBZ94RowDefinition(input hl7.HL7Type) RTBZ94RowDefinition {
	v := RTBZ94RowDefinition{}
	v.TableRowDefinition = NewRDF(input.Index(0))
	v.TableRowData = NewRDTSlice(input.Index(1))
	return v
}

type RTBZ94RowDefinition struct {
	TableRowDefinition RDF
	TableRowData       []RDT
}

// NewRTBZ94RowDefinitionSlice will construct a slice of type RTBZ94RowDefinition
func NewRTBZ94RowDefinitionSlice(input hl7.HL7Type) []RTBZ94RowDefinition {
	values := make([]RTBZ94RowDefinition, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRTBZ94RowDefinition(input.Index(i))
	}
	return values
}

// NewRPII01GuarantorInsurance creates an implementation of RPII01GuarantorInsurance
func NewRPII01GuarantorInsurance(input hl7.HL7Type) RPII01GuarantorInsurance {
	v := RPII01GuarantorInsurance{}
	v.Guarantor = NewGT1Slice(input.Index(0))
	v.Insurance = NewRPII01InsuranceSlice(input.Index(1))
	return v
}

type RPII01GuarantorInsurance struct {
	Guarantor []GT1
	Insurance []RPII01Insurance
}

// NewRPII01GuarantorInsuranceSlice will construct a slice of type RPII01GuarantorInsurance
func NewRPII01GuarantorInsuranceSlice(input hl7.HL7Type) []RPII01GuarantorInsurance {
	values := make([]RPII01GuarantorInsurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRPII01GuarantorInsurance(input.Index(i))
	}
	return values
}

// NewCCII22AppointmentHistory creates an implementation of CCII22AppointmentHistory
func NewCCII22AppointmentHistory(input hl7.HL7Type) CCII22AppointmentHistory {
	v := CCII22AppointmentHistory{}
	v.SchedulingActivityInformation = NewSCH(input.Index(0))
	v.Resources = NewCCII22ResourcesSlice(input.Index(1))
	return v
}

type CCII22AppointmentHistory struct {
	SchedulingActivityInformation SCH
	Resources                     []CCII22Resources
}

// NewCCII22AppointmentHistorySlice will construct a slice of type CCII22AppointmentHistory
func NewCCII22AppointmentHistorySlice(input hl7.HL7Type) []CCII22AppointmentHistory {
	values := make([]CCII22AppointmentHistory, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCII22AppointmentHistory(input.Index(i))
	}
	return values
}

// NewRSPK31Response creates an implementation of RSPK31Response
func NewRSPK31Response(input hl7.HL7Type) RSPK31Response {
	v := RSPK31Response{}
	v.Patient = NewRSPK31Patient(input.Index(0))
	v.Order = NewRSPK31OrderSlice(input.Index(1))
	return v
}

type RSPK31Response struct {
	Patient RSPK31Patient
	Order   []RSPK31Order
}

// NewRSPK31ResponseSlice will construct a slice of type RSPK31Response
func NewRSPK31ResponseSlice(input hl7.HL7Type) []RSPK31Response {
	values := make([]RSPK31Response, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPK31Response(input.Index(i))
	}
	return values
}

// NewOMLO21OrderPrior creates an implementation of OMLO21OrderPrior
func NewOMLO21OrderPrior(input hl7.HL7Type) OMLO21OrderPrior {
	v := OMLO21OrderPrior{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.ObservationRequest = NewOBR(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	v.AdditionalParticipationInformation = NewPRTSlice(input.Index(4))
	v.TimingPrior = NewOMLO21TimingPriorSlice(input.Index(5))
	v.ObservationPrior = NewOMLO21ObservationPriorSlice(input.Index(6))
	return v
}

type OMLO21OrderPrior struct {
	CommonOrder                        ORC
	ParticipationInformation           []PRT
	ObservationRequest                 OBR
	NotesAndComments                   []NTE
	AdditionalParticipationInformation []PRT
	TimingPrior                        []OMLO21TimingPrior
	ObservationPrior                   []OMLO21ObservationPrior
}

// NewOMLO21OrderPriorSlice will construct a slice of type OMLO21OrderPrior
func NewOMLO21OrderPriorSlice(input hl7.HL7Type) []OMLO21OrderPrior {
	values := make([]OMLO21OrderPrior, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO21OrderPrior(input.Index(i))
	}
	return values
}

// NewOMDO03TimingTray creates an implementation of OMDO03TimingTray
func NewOMDO03TimingTray(input hl7.HL7Type) OMDO03TimingTray {
	v := OMDO03TimingTray{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type OMDO03TimingTray struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewOMDO03TimingTraySlice will construct a slice of type OMDO03TimingTray
func NewOMDO03TimingTraySlice(input hl7.HL7Type) []OMDO03TimingTray {
	values := make([]OMDO03TimingTray, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMDO03TimingTray(input.Index(i))
	}
	return values
}

// NewSRMS04LocationResource creates an implementation of SRMS04LocationResource
func NewSRMS04LocationResource(input hl7.HL7Type) SRMS04LocationResource {
	v := SRMS04LocationResource{}
	v.AppointmentInformationLocationResource = NewAIL(input.Index(0))
	v.AppointmentPreferences = NewAPR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type SRMS04LocationResource struct {
	AppointmentInformationLocationResource AIL
	AppointmentPreferences                 APR
	NotesAndComments                       []NTE
}

// NewSRMS04LocationResourceSlice will construct a slice of type SRMS04LocationResource
func NewSRMS04LocationResourceSlice(input hl7.HL7Type) []SRMS04LocationResource {
	values := make([]SRMS04LocationResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS04LocationResource(input.Index(i))
	}
	return values
}

// NewCCRI17RolePathway creates an implementation of CCRI17RolePathway
func NewCCRI17RolePathway(input hl7.HL7Type) CCRI17RolePathway {
	v := CCRI17RolePathway{}
	v.RolePathwayObject = NewCCRI17RolePathwayObject(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type CCRI17RolePathway struct {
	RolePathwayObject CCRI17RolePathwayObject
	Variance          []VAR
}

// NewCCRI17RolePathwaySlice will construct a slice of type CCRI17RolePathway
func NewCCRI17RolePathwaySlice(input hl7.HL7Type) []CCRI17RolePathway {
	values := make([]CCRI17RolePathway, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI17RolePathway(input.Index(i))
	}
	return values
}

// NewORUR01SpecimenObservation creates an implementation of ORUR01SpecimenObservation
func NewORUR01SpecimenObservation(input hl7.HL7Type) ORUR01SpecimenObservation {
	v := ORUR01SpecimenObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type ORUR01SpecimenObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewORUR01SpecimenObservationSlice will construct a slice of type ORUR01SpecimenObservation
func NewORUR01SpecimenObservationSlice(input hl7.HL7Type) []ORUR01SpecimenObservation {
	values := make([]ORUR01SpecimenObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORUR01SpecimenObservation(input.Index(i))
	}
	return values
}

// NewPEXP08AssociatedRxOrder creates an implementation of PEXP08AssociatedRxOrder
func NewPEXP08AssociatedRxOrder(input hl7.HL7Type) PEXP08AssociatedRxOrder {
	v := PEXP08AssociatedRxOrder{}
	v.PharmacyTreatmentEncodedOrder = NewRXE(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.Nk1TimingQty = NewPEXP08Nk1TimingQtySlice(input.Index(2))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(3))
	return v
}

type PEXP08AssociatedRxOrder struct {
	PharmacyTreatmentEncodedOrder RXE
	ParticipationInformation      []PRT
	Nk1TimingQty                  []PEXP08Nk1TimingQty
	PharmacyTreatmentRoute        []RXR
}

// NewPEXP08AssociatedRxOrderSlice will construct a slice of type PEXP08AssociatedRxOrder
func NewPEXP08AssociatedRxOrderSlice(input hl7.HL7Type) []PEXP08AssociatedRxOrder {
	values := make([]PEXP08AssociatedRxOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPEXP08AssociatedRxOrder(input.Index(i))
	}
	return values
}

// NewPPRPC1ProblemRole creates an implementation of PPRPC1ProblemRole
func NewPPRPC1ProblemRole(input hl7.HL7Type) PPRPC1ProblemRole {
	v := PPRPC1ProblemRole{}
	v.Role = NewROL(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type PPRPC1ProblemRole struct {
	Role     ROL
	Variance []VAR
}

// NewPPRPC1ProblemRoleSlice will construct a slice of type PPRPC1ProblemRole
func NewPPRPC1ProblemRoleSlice(input hl7.HL7Type) []PPRPC1ProblemRole {
	values := make([]PPRPC1ProblemRole, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPRPC1ProblemRole(input.Index(i))
	}
	return values
}

// NewCSUC12StudyPharm creates an implementation of CSUC12StudyPharm
func NewCSUC12StudyPharm(input hl7.HL7Type) CSUC12StudyPharm {
	v := CSUC12StudyPharm{}
	v.CommonOrder = NewCSUC12CommonOrder(input.Index(0))
	v.RxAdmin = NewCSUC12RxAdminSlice(input.Index(1))
	return v
}

type CSUC12StudyPharm struct {
	CommonOrder CSUC12CommonOrder
	RxAdmin     []CSUC12RxAdmin
}

// NewCSUC12StudyPharmSlice will construct a slice of type CSUC12StudyPharm
func NewCSUC12StudyPharmSlice(input hl7.HL7Type) []CSUC12StudyPharm {
	values := make([]CSUC12StudyPharm, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCSUC12StudyPharm(input.Index(i))
	}
	return values
}

// NewOSMR26Shipment creates an implementation of OSMR26Shipment
func NewOSMR26Shipment(input hl7.HL7Type) OSMR26Shipment {
	v := OSMR26Shipment{}
	v.Shipment = NewSHP(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.ShippingObservation = NewOSMR26ShippingObservationSlice(input.Index(2))
	v.Package = NewOSMR26PackageSlice(input.Index(3))
	return v
}

type OSMR26Shipment struct {
	Shipment                 SHP
	ParticipationInformation []PRT
	ShippingObservation      []OSMR26ShippingObservation
	Package                  []OSMR26Package
}

// NewOSMR26ShipmentSlice will construct a slice of type OSMR26Shipment
func NewOSMR26ShipmentSlice(input hl7.HL7Type) []OSMR26Shipment {
	values := make([]OSMR26Shipment, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOSMR26Shipment(input.Index(i))
	}
	return values
}

// NewOSMR26SpecimenObservation creates an implementation of OSMR26SpecimenObservation
func NewOSMR26SpecimenObservation(input hl7.HL7Type) OSMR26SpecimenObservation {
	v := OSMR26SpecimenObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type OSMR26SpecimenObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewOSMR26SpecimenObservationSlice will construct a slice of type OSMR26SpecimenObservation
func NewOSMR26SpecimenObservationSlice(input hl7.HL7Type) []OSMR26SpecimenObservation {
	values := make([]OSMR26SpecimenObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOSMR26SpecimenObservation(input.Index(i))
	}
	return values
}

// NewSIUS23Service creates an implementation of SIUS23Service
func NewSIUS23Service(input hl7.HL7Type) SIUS23Service {
	v := SIUS23Service{}
	v.AppointmentInformation = NewAIS(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS23Service struct {
	AppointmentInformation AIS
	NotesAndComments       []NTE
}

// NewSIUS23ServiceSlice will construct a slice of type SIUS23Service
func NewSIUS23ServiceSlice(input hl7.HL7Type) []SIUS23Service {
	values := make([]SIUS23Service, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS23Service(input.Index(i))
	}
	return values
}

// NewDEOO45DonationObservation creates an implementation of DEOO45DonationObservation
func NewDEOO45DonationObservation(input hl7.HL7Type) DEOO45DonationObservation {
	v := DEOO45DonationObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type DEOO45DonationObservation struct {
	ObservationResult OBX
	NotesAndComments  []NTE
}

// NewDEOO45DonationObservationSlice will construct a slice of type DEOO45DonationObservation
func NewDEOO45DonationObservationSlice(input hl7.HL7Type) []DEOO45DonationObservation {
	values := make([]DEOO45DonationObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewDEOO45DonationObservation(input.Index(i))
	}
	return values
}

// NewMFNM10MfTestBatteries creates an implementation of MFNM10MfTestBatteries
func NewMFNM10MfTestBatteries(input hl7.HL7Type) MFNM10MfTestBatteries {
	v := MFNM10MfTestBatteries{}
	v.MasterFileEntry = NewMFE(input.Index(0))
	v.GeneralSegment = NewOM1(input.Index(1))
	v.MfTestBattDetail = NewMFNM10MfTestBattDetail(input.Index(2))
	return v
}

type MFNM10MfTestBatteries struct {
	MasterFileEntry  MFE
	GeneralSegment   OM1
	MfTestBattDetail MFNM10MfTestBattDetail
}

// NewMFNM10MfTestBatteriesSlice will construct a slice of type MFNM10MfTestBatteries
func NewMFNM10MfTestBatteriesSlice(input hl7.HL7Type) []MFNM10MfTestBatteries {
	values := make([]MFNM10MfTestBatteries, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMFNM10MfTestBatteries(input.Index(i))
	}
	return values
}

// NewORGO20Specimen creates an implementation of ORGO20Specimen
func NewORGO20Specimen(input hl7.HL7Type) ORGO20Specimen {
	v := ORGO20Specimen{}
	v.Specimen = NewSPM(input.Index(0))
	v.SpecimenContainerDetail = NewSACSlice(input.Index(1))
	return v
}

type ORGO20Specimen struct {
	Specimen                SPM
	SpecimenContainerDetail []SAC
}

// NewORGO20SpecimenSlice will construct a slice of type ORGO20Specimen
func NewORGO20SpecimenSlice(input hl7.HL7Type) []ORGO20Specimen {
	values := make([]ORGO20Specimen, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORGO20Specimen(input.Index(i))
	}
	return values
}

// NewORLO22Response creates an implementation of ORLO22Response
func NewORLO22Response(input hl7.HL7Type) ORLO22Response {
	v := ORLO22Response{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.AccessRestriction = NewARVSlice(input.Index(2))
	v.Order = NewORLO22OrderSlice(input.Index(3))
	return v
}

type ORLO22Response struct {
	PatientIdentification    PID
	ParticipationInformation []PRT
	AccessRestriction        []ARV
	Order                    []ORLO22Order
}

// NewORLO22ResponseSlice will construct a slice of type ORLO22Response
func NewORLO22ResponseSlice(input hl7.HL7Type) []ORLO22Response {
	values := make([]ORLO22Response, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORLO22Response(input.Index(i))
	}
	return values
}

// NewPPGPCHPathwayRole creates an implementation of PPGPCHPathwayRole
func NewPPGPCHPathwayRole(input hl7.HL7Type) PPGPCHPathwayRole {
	v := PPGPCHPathwayRole{}
	v.Role = NewROL(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type PPGPCHPathwayRole struct {
	Role     ROL
	Variance []VAR
}

// NewPPGPCHPathwayRoleSlice will construct a slice of type PPGPCHPathwayRole
func NewPPGPCHPathwayRoleSlice(input hl7.HL7Type) []PPGPCHPathwayRole {
	values := make([]PPGPCHPathwayRole, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPGPCHPathwayRole(input.Index(i))
	}
	return values
}

// NewCSUC12Patient creates an implementation of CSUC12Patient
func NewCSUC12Patient(input hl7.HL7Type) CSUC12Patient {
	v := CSUC12Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.AccessRestriction = NewARVSlice(input.Index(3))
	v.NotesAndComments = NewNTESlice(input.Index(4))
	v.Visit = NewCSUC12Visit(input.Index(5))
	v.ClinicalStudyRegistration = NewCSR(input.Index(6))
	v.StudyPhase = NewCSUC12StudyPhaseSlice(input.Index(7))
	return v
}

type CSUC12Patient struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	ParticipationInformation     []PRT
	AccessRestriction            []ARV
	NotesAndComments             []NTE
	Visit                        CSUC12Visit
	ClinicalStudyRegistration    CSR
	StudyPhase                   []CSUC12StudyPhase
}

// NewCSUC12PatientSlice will construct a slice of type CSUC12Patient
func NewCSUC12PatientSlice(input hl7.HL7Type) []CSUC12Patient {
	values := make([]CSUC12Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCSUC12Patient(input.Index(i))
	}
	return values
}

// NewORUR40Visit creates an implementation of ORUR40Visit
func NewORUR40Visit(input hl7.HL7Type) ORUR40Visit {
	v := ORUR40Visit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	return v
}

type ORUR40Visit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ParticipationInformation          []PRT
}

// NewORUR40VisitSlice will construct a slice of type ORUR40Visit
func NewORUR40VisitSlice(input hl7.HL7Type) []ORUR40Visit {
	values := make([]ORUR40Visit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORUR40Visit(input.Index(i))
	}
	return values
}

// NewRPAI09Insurance creates an implementation of RPAI09Insurance
func NewRPAI09Insurance(input hl7.HL7Type) RPAI09Insurance {
	v := RPAI09Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3(input.Index(2))
	return v
}

type RPAI09Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification IN3
}

// NewRPAI09InsuranceSlice will construct a slice of type RPAI09Insurance
func NewRPAI09InsuranceSlice(input hl7.HL7Type) []RPAI09Insurance {
	values := make([]RPAI09Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRPAI09Insurance(input.Index(i))
	}
	return values
}

// NewOMLO33ObservationRequest creates an implementation of OMLO33ObservationRequest
func NewOMLO33ObservationRequest(input hl7.HL7Type) OMLO33ObservationRequest {
	v := OMLO33ObservationRequest{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.TestCodeDetail = NewTCD(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.ParticipationInformation = NewPRTSlice(input.Index(3))
	v.Diagnosis = NewDG1Slice(input.Index(4))
	v.Observation = NewOMLO33ObservationSlice(input.Index(5))
	v.PriorResult = NewOMLO33PriorResultSlice(input.Index(6))
	return v
}

type OMLO33ObservationRequest struct {
	ObservationRequest       OBR
	TestCodeDetail           TCD
	NotesAndComments         []NTE
	ParticipationInformation []PRT
	Diagnosis                []DG1
	Observation              []OMLO33Observation
	PriorResult              []OMLO33PriorResult
}

// NewOMLO33ObservationRequestSlice will construct a slice of type OMLO33ObservationRequest
func NewOMLO33ObservationRequestSlice(input hl7.HL7Type) []OMLO33ObservationRequest {
	values := make([]OMLO33ObservationRequest, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO33ObservationRequest(input.Index(i))
	}
	return values
}

// NewCCUI20ResourceObject creates an implementation of CCUI20ResourceObject
func NewCCUI20ResourceObject(input hl7.HL7Type) CCUI20ResourceObject {
	v := CCUI20ResourceObject{}
	v.AppointmentInformation = NewAIS(input.Index(0))
	v.AppointmentInformationGeneralResource = NewAIG(input.Index(1))
	v.AppointmentInformationLocationResource = NewAIL(input.Index(2))
	v.AppointmentInformationPersonnelResource = NewAIP(input.Index(3))
	return v
}

type CCUI20ResourceObject struct {
	AppointmentInformation                  AIS
	AppointmentInformationGeneralResource   AIG
	AppointmentInformationLocationResource  AIL
	AppointmentInformationPersonnelResource AIP
}

// NewCCUI20ResourceObjectSlice will construct a slice of type CCUI20ResourceObject
func NewCCUI20ResourceObjectSlice(input hl7.HL7Type) []CCUI20ResourceObject {
	values := make([]CCUI20ResourceObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCUI20ResourceObject(input.Index(i))
	}
	return values
}

// NewDERO44Donnor creates an implementation of DERO44Donnor
func NewDERO44Donnor(input hl7.HL7Type) DERO44Donnor {
	v := DERO44Donnor{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.ObservationResult = NewOBXSlice(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	v.PatientAllergyInformation = NewAL1Slice(input.Index(4))
	v.AccessRestriction = NewARVSlice(input.Index(5))
	v.DonorRegistration = NewDERO44DonorRegistration(input.Index(6))
	return v
}

type DERO44Donnor struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	ObservationResult            []OBX
	NotesAndComments             []NTE
	PatientAllergyInformation    []AL1
	AccessRestriction            []ARV
	DonorRegistration            DERO44DonorRegistration
}

// NewDERO44DonnorSlice will construct a slice of type DERO44Donnor
func NewDERO44DonnorSlice(input hl7.HL7Type) []DERO44Donnor {
	values := make([]DERO44Donnor, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewDERO44Donnor(input.Index(i))
	}
	return values
}

// NewBRPO30Timing creates an implementation of BRPO30Timing
func NewBRPO30Timing(input hl7.HL7Type) BRPO30Timing {
	v := BRPO30Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type BRPO30Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewBRPO30TimingSlice will construct a slice of type BRPO30Timing
func NewBRPO30TimingSlice(input hl7.HL7Type) []BRPO30Timing {
	values := make([]BRPO30Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewBRPO30Timing(input.Index(i))
	}
	return values
}

// NewRQAI09Authorization2 creates an implementation of RQAI09Authorization2
func NewRQAI09Authorization2(input hl7.HL7Type) RQAI09Authorization2 {
	v := RQAI09Authorization2{}
	v.AuthorizationInformation = NewAUT(input.Index(0))
	v.ContactData = NewCTD(input.Index(1))
	return v
}

type RQAI09Authorization2 struct {
	AuthorizationInformation AUT
	ContactData              CTD
}

// NewRQAI09Authorization2Slice will construct a slice of type RQAI09Authorization2
func NewRQAI09Authorization2Slice(input hl7.HL7Type) []RQAI09Authorization2 {
	values := make([]RQAI09Authorization2, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQAI09Authorization2(input.Index(i))
	}
	return values
}

// NewRASO17PatientVisit creates an implementation of RASO17PatientVisit
func NewRASO17PatientVisit(input hl7.HL7Type) RASO17PatientVisit {
	v := RASO17PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.AccessRestriction = NewARVSlice(input.Index(3))
	return v
}

type RASO17PatientVisit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ParticipationInformation          []PRT
	AccessRestriction                 []ARV
}

// NewRASO17PatientVisitSlice will construct a slice of type RASO17PatientVisit
func NewRASO17PatientVisitSlice(input hl7.HL7Type) []RASO17PatientVisit {
	values := make([]RASO17PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRASO17PatientVisit(input.Index(i))
	}
	return values
}

// NewOMLO39Package creates an implementation of OMLO39Package
func NewOMLO39Package(input hl7.HL7Type) OMLO39Package {
	v := OMLO39Package{}
	v.ShipmentPackage = NewPAC(input.Index(0))
	v.SpecimenInPackage = NewOMLO39SpecimenInPackageSlice(input.Index(1))
	return v
}

type OMLO39Package struct {
	ShipmentPackage   PAC
	SpecimenInPackage []OMLO39SpecimenInPackage
}

// NewOMLO39PackageSlice will construct a slice of type OMLO39Package
func NewOMLO39PackageSlice(input hl7.HL7Type) []OMLO39Package {
	values := make([]OMLO39Package, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO39Package(input.Index(i))
	}
	return values
}

// NewOMLO35PatientPrior creates an implementation of OMLO35PatientPrior
func NewOMLO35PatientPrior(input hl7.HL7Type) OMLO35PatientPrior {
	v := OMLO35PatientPrior{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.AccessRestriction = NewARVSlice(input.Index(3))
	return v
}

type OMLO35PatientPrior struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	ParticipationInformation     []PRT
	AccessRestriction            []ARV
}

// NewOMLO35PatientPriorSlice will construct a slice of type OMLO35PatientPrior
func NewOMLO35PatientPriorSlice(input hl7.HL7Type) []OMLO35PatientPrior {
	values := make([]OMLO35PatientPrior, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO35PatientPrior(input.Index(i))
	}
	return values
}

// NewRTBK13RowDefinition creates an implementation of RTBK13RowDefinition
func NewRTBK13RowDefinition(input hl7.HL7Type) RTBK13RowDefinition {
	v := RTBK13RowDefinition{}
	v.TableRowDefinition = NewRDF(input.Index(0))
	v.TableRowData = NewRDTSlice(input.Index(1))
	return v
}

type RTBK13RowDefinition struct {
	TableRowDefinition RDF
	TableRowData       []RDT
}

// NewRTBK13RowDefinitionSlice will construct a slice of type RTBK13RowDefinition
func NewRTBK13RowDefinitionSlice(input hl7.HL7Type) []RTBK13RowDefinition {
	values := make([]RTBK13RowDefinition, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRTBK13RowDefinition(input.Index(i))
	}
	return values
}

// NewSSUU03SpecimenContainer creates an implementation of SSUU03SpecimenContainer
func NewSSUU03SpecimenContainer(input hl7.HL7Type) SSUU03SpecimenContainer {
	v := SSUU03SpecimenContainer{}
	v.SpecimenContainerDetail = NewSAC(input.Index(0))
	v.ObservationResult = NewOBXSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.Specimen = NewSSUU03SpecimenSlice(input.Index(3))
	return v
}

type SSUU03SpecimenContainer struct {
	SpecimenContainerDetail SAC
	ObservationResult       []OBX
	NotesAndComments        []NTE
	Specimen                []SSUU03Specimen
}

// NewSSUU03SpecimenContainerSlice will construct a slice of type SSUU03SpecimenContainer
func NewSSUU03SpecimenContainerSlice(input hl7.HL7Type) []SSUU03SpecimenContainer {
	values := make([]SSUU03SpecimenContainer, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSSUU03SpecimenContainer(input.Index(i))
	}
	return values
}

// NewEHCE15AdjustmentPayee creates an implementation of EHCE15AdjustmentPayee
func NewEHCE15AdjustmentPayee(input hl7.HL7Type) EHCE15AdjustmentPayee {
	v := EHCE15AdjustmentPayee{}
	v.Adjustment = NewADJ(input.Index(0))
	v.ParticipationInformation = NewPRT(input.Index(1))
	v.Role = NewROL(input.Index(2))
	return v
}

type EHCE15AdjustmentPayee struct {
	Adjustment               ADJ
	ParticipationInformation PRT
	Role                     ROL
}

// NewEHCE15AdjustmentPayeeSlice will construct a slice of type EHCE15AdjustmentPayee
func NewEHCE15AdjustmentPayeeSlice(input hl7.HL7Type) []EHCE15AdjustmentPayee {
	values := make([]EHCE15AdjustmentPayee, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewEHCE15AdjustmentPayee(input.Index(i))
	}
	return values
}

// NewRQAI10Results creates an implementation of RQAI10Results
func NewRQAI10Results(input hl7.HL7Type) RQAI10Results {
	v := RQAI10Results{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type RQAI10Results struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewRQAI10ResultsSlice will construct a slice of type RQAI10Results
func NewRQAI10ResultsSlice(input hl7.HL7Type) []RQAI10Results {
	values := make([]RQAI10Results, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQAI10Results(input.Index(i))
	}
	return values
}

// NewSRRS09PersonnelResource creates an implementation of SRRS09PersonnelResource
func NewSRRS09PersonnelResource(input hl7.HL7Type) SRRS09PersonnelResource {
	v := SRRS09PersonnelResource{}
	v.AppointmentInformationPersonnelResource = NewAIP(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SRRS09PersonnelResource struct {
	AppointmentInformationPersonnelResource AIP
	NotesAndComments                        []NTE
}

// NewSRRS09PersonnelResourceSlice will construct a slice of type SRRS09PersonnelResource
func NewSRRS09PersonnelResourceSlice(input hl7.HL7Type) []SRRS09PersonnelResource {
	values := make([]SRRS09PersonnelResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS09PersonnelResource(input.Index(i))
	}
	return values
}

// NewORBO28Response creates an implementation of ORBO28Response
func NewORBO28Response(input hl7.HL7Type) ORBO28Response {
	v := ORBO28Response{}
	v.Patient = NewORBO28Patient(input.Index(0))
	return v
}

type ORBO28Response struct {
	Patient ORBO28Patient
}

// NewORBO28ResponseSlice will construct a slice of type ORBO28Response
func NewORBO28ResponseSlice(input hl7.HL7Type) []ORBO28Response {
	values := make([]ORBO28Response, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORBO28Response(input.Index(i))
	}
	return values
}

// NewSRRS06Service creates an implementation of SRRS06Service
func NewSRRS06Service(input hl7.HL7Type) SRRS06Service {
	v := SRRS06Service{}
	v.AppointmentInformation = NewAIS(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SRRS06Service struct {
	AppointmentInformation AIS
	NotesAndComments       []NTE
}

// NewSRRS06ServiceSlice will construct a slice of type SRRS06Service
func NewSRRS06ServiceSlice(input hl7.HL7Type) []SRRS06Service {
	values := make([]SRRS06Service, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS06Service(input.Index(i))
	}
	return values
}

// NewPPRPC3OrderDetail creates an implementation of PPRPC3OrderDetail
func NewPPRPC3OrderDetail(input hl7.HL7Type) PPRPC3OrderDetail {
	v := PPRPC3OrderDetail{}
	v.Choice = NewPPRPC3Choice(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Variance = NewVARSlice(input.Index(2))
	v.OrderObservation = NewPPRPC3OrderObservationSlice(input.Index(3))
	return v
}

type PPRPC3OrderDetail struct {
	Choice           PPRPC3Choice
	NotesAndComments []NTE
	Variance         []VAR
	OrderObservation []PPRPC3OrderObservation
}

// NewPPRPC3OrderDetailSlice will construct a slice of type PPRPC3OrderDetail
func NewPPRPC3OrderDetailSlice(input hl7.HL7Type) []PPRPC3OrderDetail {
	values := make([]PPRPC3OrderDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPRPC3OrderDetail(input.Index(i))
	}
	return values
}

// NewOMLO35PriorResult creates an implementation of OMLO35PriorResult
func NewOMLO35PriorResult(input hl7.HL7Type) OMLO35PriorResult {
	v := OMLO35PriorResult{}
	v.PatientPrior = NewOMLO35PatientPrior(input.Index(0))
	v.PatientVisitPrior = NewOMLO35PatientVisitPrior(input.Index(1))
	v.PatientAllergyInformation = NewAL1Slice(input.Index(2))
	v.OrderPrior = NewOMLO35OrderPriorSlice(input.Index(3))
	return v
}

type OMLO35PriorResult struct {
	PatientPrior              OMLO35PatientPrior
	PatientVisitPrior         OMLO35PatientVisitPrior
	PatientAllergyInformation []AL1
	OrderPrior                []OMLO35OrderPrior
}

// NewOMLO35PriorResultSlice will construct a slice of type OMLO35PriorResult
func NewOMLO35PriorResultSlice(input hl7.HL7Type) []OMLO35PriorResult {
	values := make([]OMLO35PriorResult, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO35PriorResult(input.Index(i))
	}
	return values
}

// NewCSUC09CommonOrder creates an implementation of CSUC09CommonOrder
func NewCSUC09CommonOrder(input hl7.HL7Type) CSUC09CommonOrder {
	v := CSUC09CommonOrder{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CSUC09CommonOrder struct {
	CommonOrder              ORC
	ParticipationInformation []PRT
}

// NewCSUC09CommonOrderSlice will construct a slice of type CSUC09CommonOrder
func NewCSUC09CommonOrderSlice(input hl7.HL7Type) []CSUC09CommonOrder {
	values := make([]CSUC09CommonOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCSUC09CommonOrder(input.Index(i))
	}
	return values
}

// NewPPGPCHPathway creates an implementation of PPGPCHPathway
func NewPPGPCHPathway(input hl7.HL7Type) PPGPCHPathway {
	v := PPGPCHPathway{}
	v.Pathway = NewPTH(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Variance = NewVARSlice(input.Index(2))
	v.PathwayRole = NewPPGPCHPathwayRoleSlice(input.Index(3))
	v.Goal = NewPPGPCHGoalSlice(input.Index(4))
	return v
}

type PPGPCHPathway struct {
	Pathway          PTH
	NotesAndComments []NTE
	Variance         []VAR
	PathwayRole      []PPGPCHPathwayRole
	Goal             []PPGPCHGoal
}

// NewPPGPCHPathwaySlice will construct a slice of type PPGPCHPathway
func NewPPGPCHPathwaySlice(input hl7.HL7Type) []PPGPCHPathway {
	values := make([]PPGPCHPathway, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPGPCHPathway(input.Index(i))
	}
	return values
}

// NewDFTP03CommonOrder creates an implementation of DFTP03CommonOrder
func NewDFTP03CommonOrder(input hl7.HL7Type) DFTP03CommonOrder {
	v := DFTP03CommonOrder{}
	v.CommonOrder = NewORC(input.Index(0))
	v.TimingQuantity = NewDFTP03TimingQuantitySlice(input.Index(1))
	v.Order = NewDFTP03Order(input.Index(2))
	v.Observation = NewDFTP03ObservationSlice(input.Index(3))
	return v
}

type DFTP03CommonOrder struct {
	CommonOrder    ORC
	TimingQuantity []DFTP03TimingQuantity
	Order          DFTP03Order
	Observation    []DFTP03Observation
}

// NewDFTP03CommonOrderSlice will construct a slice of type DFTP03CommonOrder
func NewDFTP03CommonOrderSlice(input hl7.HL7Type) []DFTP03CommonOrder {
	values := make([]DFTP03CommonOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewDFTP03CommonOrder(input.Index(i))
	}
	return values
}

// NewSIUS27PersonnelResource creates an implementation of SIUS27PersonnelResource
func NewSIUS27PersonnelResource(input hl7.HL7Type) SIUS27PersonnelResource {
	v := SIUS27PersonnelResource{}
	v.AppointmentInformationPersonnelResource = NewAIP(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS27PersonnelResource struct {
	AppointmentInformationPersonnelResource AIP
	NotesAndComments                        []NTE
}

// NewSIUS27PersonnelResourceSlice will construct a slice of type SIUS27PersonnelResource
func NewSIUS27PersonnelResourceSlice(input hl7.HL7Type) []SIUS27PersonnelResource {
	values := make([]SIUS27PersonnelResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS27PersonnelResource(input.Index(i))
	}
	return values
}

// NewRQAI08Observation creates an implementation of RQAI08Observation
func NewRQAI08Observation(input hl7.HL7Type) RQAI08Observation {
	v := RQAI08Observation{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Results = NewRQAI08ResultsSlice(input.Index(2))
	return v
}

type RQAI08Observation struct {
	ObservationRequest OBR
	NotesAndComments   []NTE
	Results            []RQAI08Results
}

// NewRQAI08ObservationSlice will construct a slice of type RQAI08Observation
func NewRQAI08ObservationSlice(input hl7.HL7Type) []RQAI08Observation {
	values := make([]RQAI08Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQAI08Observation(input.Index(i))
	}
	return values
}

// NewSRMS06Resources creates an implementation of SRMS06Resources
func NewSRMS06Resources(input hl7.HL7Type) SRMS06Resources {
	v := SRMS06Resources{}
	v.ResourceGroup = NewRGS(input.Index(0))
	v.Service = NewSRMS06ServiceSlice(input.Index(1))
	v.GeneralResource = NewSRMS06GeneralResourceSlice(input.Index(2))
	v.LocationResource = NewSRMS06LocationResourceSlice(input.Index(3))
	v.PersonnelResource = NewSRMS06PersonnelResourceSlice(input.Index(4))
	return v
}

type SRMS06Resources struct {
	ResourceGroup     RGS
	Service           []SRMS06Service
	GeneralResource   []SRMS06GeneralResource
	LocationResource  []SRMS06LocationResource
	PersonnelResource []SRMS06PersonnelResource
}

// NewSRMS06ResourcesSlice will construct a slice of type SRMS06Resources
func NewSRMS06ResourcesSlice(input hl7.HL7Type) []SRMS06Resources {
	values := make([]SRMS06Resources, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS06Resources(input.Index(i))
	}
	return values
}

// NewOULR22OrderDocument creates an implementation of OULR22OrderDocument
func NewOULR22OrderDocument(input hl7.HL7Type) OULR22OrderDocument {
	v := OULR22OrderDocument{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.TranscriptionDocumentHeader = NewTXA(input.Index(2))
	return v
}

type OULR22OrderDocument struct {
	ObservationResult           OBX
	ParticipationInformation    []PRT
	TranscriptionDocumentHeader TXA
}

// NewOULR22OrderDocumentSlice will construct a slice of type OULR22OrderDocument
func NewOULR22OrderDocumentSlice(input hl7.HL7Type) []OULR22OrderDocument {
	values := make([]OULR22OrderDocument, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOULR22OrderDocument(input.Index(i))
	}
	return values
}

// NewRQAI08Provider creates an implementation of RQAI08Provider
func NewRQAI08Provider(input hl7.HL7Type) RQAI08Provider {
	v := RQAI08Provider{}
	v.ProviderData = NewPRD(input.Index(0))
	v.ContactData = NewCTDSlice(input.Index(1))
	return v
}

type RQAI08Provider struct {
	ProviderData PRD
	ContactData  []CTD
}

// NewRQAI08ProviderSlice will construct a slice of type RQAI08Provider
func NewRQAI08ProviderSlice(input hl7.HL7Type) []RQAI08Provider {
	values := make([]RQAI08Provider, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQAI08Provider(input.Index(i))
	}
	return values
}

// NewSIUS26LocationResource creates an implementation of SIUS26LocationResource
func NewSIUS26LocationResource(input hl7.HL7Type) SIUS26LocationResource {
	v := SIUS26LocationResource{}
	v.AppointmentInformationLocationResource = NewAIL(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS26LocationResource struct {
	AppointmentInformationLocationResource AIL
	NotesAndComments                       []NTE
}

// NewSIUS26LocationResourceSlice will construct a slice of type SIUS26LocationResource
func NewSIUS26LocationResourceSlice(input hl7.HL7Type) []SIUS26LocationResource {
	values := make([]SIUS26LocationResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS26LocationResource(input.Index(i))
	}
	return values
}

// NewMDMT10Timing creates an implementation of MDMT10Timing
func NewMDMT10Timing(input hl7.HL7Type) MDMT10Timing {
	v := MDMT10Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type MDMT10Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewMDMT10TimingSlice will construct a slice of type MDMT10Timing
func NewMDMT10TimingSlice(input hl7.HL7Type) []MDMT10Timing {
	values := make([]MDMT10Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMDMT10Timing(input.Index(i))
	}
	return values
}

// NewPEXP08Study creates an implementation of PEXP08Study
func NewPEXP08Study(input hl7.HL7Type) PEXP08Study {
	v := PEXP08Study{}
	v.ClinicalStudyRegistration = NewCSR(input.Index(0))
	v.ClinicalStudyPhase = NewCSPSlice(input.Index(1))
	return v
}

type PEXP08Study struct {
	ClinicalStudyRegistration CSR
	ClinicalStudyPhase        []CSP
}

// NewPEXP08StudySlice will construct a slice of type PEXP08Study
func NewPEXP08StudySlice(input hl7.HL7Type) []PEXP08Study {
	values := make([]PEXP08Study, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPEXP08Study(input.Index(i))
	}
	return values
}

// NewMDMT06CommonOrder creates an implementation of MDMT06CommonOrder
func NewMDMT06CommonOrder(input hl7.HL7Type) MDMT06CommonOrder {
	v := MDMT06CommonOrder{}
	v.CommonOrder = NewORC(input.Index(0))
	v.Timing = NewMDMT06TimingSlice(input.Index(1))
	v.ObservationRequest = NewOBR(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	return v
}

type MDMT06CommonOrder struct {
	CommonOrder        ORC
	Timing             []MDMT06Timing
	ObservationRequest OBR
	NotesAndComments   []NTE
}

// NewMDMT06CommonOrderSlice will construct a slice of type MDMT06CommonOrder
func NewMDMT06CommonOrderSlice(input hl7.HL7Type) []MDMT06CommonOrder {
	values := make([]MDMT06CommonOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMDMT06CommonOrder(input.Index(i))
	}
	return values
}

// NewOULR22Container creates an implementation of OULR22Container
func NewOULR22Container(input hl7.HL7Type) OULR22Container {
	v := OULR22Container{}
	v.SpecimenContainerDetail = NewSAC(input.Index(0))
	v.InventoryDetail = NewINV(input.Index(1))
	return v
}

type OULR22Container struct {
	SpecimenContainerDetail SAC
	InventoryDetail         INV
}

// NewOULR22ContainerSlice will construct a slice of type OULR22Container
func NewOULR22ContainerSlice(input hl7.HL7Type) []OULR22Container {
	values := make([]OULR22Container, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOULR22Container(input.Index(i))
	}
	return values
}

// NewBPSO29Timing creates an implementation of BPSO29Timing
func NewBPSO29Timing(input hl7.HL7Type) BPSO29Timing {
	v := BPSO29Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type BPSO29Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewBPSO29TimingSlice will construct a slice of type BPSO29Timing
func NewBPSO29TimingSlice(input hl7.HL7Type) []BPSO29Timing {
	values := make([]BPSO29Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewBPSO29Timing(input.Index(i))
	}
	return values
}

// NewPGLPC6ProblemObservation creates an implementation of PGLPC6ProblemObservation
func NewPGLPC6ProblemObservation(input hl7.HL7Type) PGLPC6ProblemObservation {
	v := PGLPC6ProblemObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type PGLPC6ProblemObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewPGLPC6ProblemObservationSlice will construct a slice of type PGLPC6ProblemObservation
func NewPGLPC6ProblemObservationSlice(input hl7.HL7Type) []PGLPC6ProblemObservation {
	values := make([]PGLPC6ProblemObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPGLPC6ProblemObservation(input.Index(i))
	}
	return values
}

// NewRSPK31Components creates an implementation of RSPK31Components
func NewRSPK31Components(input hl7.HL7Type) RSPK31Components {
	v := RSPK31Components{}
	v.PharmacyTreatmentComponentOrder = NewRXC(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type RSPK31Components struct {
	PharmacyTreatmentComponentOrder RXC
	NotesAndComments                []NTE
}

// NewRSPK31ComponentsSlice will construct a slice of type RSPK31Components
func NewRSPK31ComponentsSlice(input hl7.HL7Type) []RSPK31Components {
	values := make([]RSPK31Components, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPK31Components(input.Index(i))
	}
	return values
}

// NewQBPZ91Qbp creates an implementation of QBPZ91Qbp
func NewQBPZ91Qbp(input hl7.HL7Type) QBPZ91Qbp {
	v := QBPZ91Qbp{}
	v.AnyHl7Segment = NewHxx(input.Index(0))
	return v
}

type QBPZ91Qbp struct {
	AnyHl7Segment Hxx
}

// NewQBPZ91QbpSlice will construct a slice of type QBPZ91Qbp
func NewQBPZ91QbpSlice(input hl7.HL7Type) []QBPZ91Qbp {
	values := make([]QBPZ91Qbp, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewQBPZ91Qbp(input.Index(i))
	}
	return values
}

// NewOMGO19TimingPrior creates an implementation of OMGO19TimingPrior
func NewOMGO19TimingPrior(input hl7.HL7Type) OMGO19TimingPrior {
	v := OMGO19TimingPrior{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type OMGO19TimingPrior struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewOMGO19TimingPriorSlice will construct a slice of type OMGO19TimingPrior
func NewOMGO19TimingPriorSlice(input hl7.HL7Type) []OMGO19TimingPrior {
	values := make([]OMGO19TimingPrior, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMGO19TimingPrior(input.Index(i))
	}
	return values
}

// NewSIUS14Service creates an implementation of SIUS14Service
func NewSIUS14Service(input hl7.HL7Type) SIUS14Service {
	v := SIUS14Service{}
	v.AppointmentInformation = NewAIS(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS14Service struct {
	AppointmentInformation AIS
	NotesAndComments       []NTE
}

// NewSIUS14ServiceSlice will construct a slice of type SIUS14Service
func NewSIUS14ServiceSlice(input hl7.HL7Type) []SIUS14Service {
	values := make([]SIUS14Service, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS14Service(input.Index(i))
	}
	return values
}

// NewRPAI08Results creates an implementation of RPAI08Results
func NewRPAI08Results(input hl7.HL7Type) RPAI08Results {
	v := RPAI08Results{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type RPAI08Results struct {
	ObservationResult OBX
	NotesAndComments  []NTE
}

// NewRPAI08ResultsSlice will construct a slice of type RPAI08Results
func NewRPAI08ResultsSlice(input hl7.HL7Type) []RPAI08Results {
	values := make([]RPAI08Results, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRPAI08Results(input.Index(i))
	}
	return values
}

// NewCQUI19MedicationOrderDetail creates an implementation of CQUI19MedicationOrderDetail
func NewCQUI19MedicationOrderDetail(input hl7.HL7Type) CQUI19MedicationOrderDetail {
	v := CQUI19MedicationOrderDetail{}
	v.PharmacyTreatmentOrder = NewRXO(input.Index(0))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(1))
	v.PharmacyTreatmentComponentOrder = NewRXCSlice(input.Index(2))
	v.MedicationOrderObservation = NewCQUI19MedicationOrderObservationSlice(input.Index(3))
	return v
}

type CQUI19MedicationOrderDetail struct {
	PharmacyTreatmentOrder          RXO
	PharmacyTreatmentRoute          []RXR
	PharmacyTreatmentComponentOrder []RXC
	MedicationOrderObservation      []CQUI19MedicationOrderObservation
}

// NewCQUI19MedicationOrderDetailSlice will construct a slice of type CQUI19MedicationOrderDetail
func NewCQUI19MedicationOrderDetailSlice(input hl7.HL7Type) []CQUI19MedicationOrderDetail {
	values := make([]CQUI19MedicationOrderDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCQUI19MedicationOrderDetail(input.Index(i))
	}
	return values
}

// NewADTA03Insurance creates an implementation of ADTA03Insurance
func NewADTA03Insurance(input hl7.HL7Type) ADTA03Insurance {
	v := ADTA03Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3Slice(input.Index(2))
	v.Role = NewROLSlice(input.Index(3))
	v.AuthorizationInformation = NewAUTSlice(input.Index(4))
	v.ReferralInformation = NewRF1Slice(input.Index(5))
	return v
}

type ADTA03Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification []IN3
	Role                                        []ROL
	AuthorizationInformation                    []AUT
	ReferralInformation                         []RF1
}

// NewADTA03InsuranceSlice will construct a slice of type ADTA03Insurance
func NewADTA03InsuranceSlice(input hl7.HL7Type) []ADTA03Insurance {
	values := make([]ADTA03Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewADTA03Insurance(input.Index(i))
	}
	return values
}

// NewCCRI17PathwayObservation creates an implementation of CCRI17PathwayObservation
func NewCCRI17PathwayObservation(input hl7.HL7Type) CCRI17PathwayObservation {
	v := CCRI17PathwayObservation{}
	v.ObservationResult = NewOBXSlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CCRI17PathwayObservation struct {
	ObservationResult        []OBX
	ParticipationInformation []PRT
}

// NewCCRI17PathwayObservationSlice will construct a slice of type CCRI17PathwayObservation
func NewCCRI17PathwayObservationSlice(input hl7.HL7Type) []CCRI17PathwayObservation {
	values := make([]CCRI17PathwayObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI17PathwayObservation(input.Index(i))
	}
	return values
}

// NewRRDO14Patient creates an implementation of RRDO14Patient
func NewRRDO14Patient(input hl7.HL7Type) RRDO14Patient {
	v := RRDO14Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type RRDO14Patient struct {
	PatientIdentification PID
	NotesAndComments      []NTE
}

// NewRRDO14PatientSlice will construct a slice of type RRDO14Patient
func NewRRDO14PatientSlice(input hl7.HL7Type) []RRDO14Patient {
	values := make([]RRDO14Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRRDO14Patient(input.Index(i))
	}
	return values
}

// NewRDSO13Timing creates an implementation of RDSO13Timing
func NewRDSO13Timing(input hl7.HL7Type) RDSO13Timing {
	v := RDSO13Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type RDSO13Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewRDSO13TimingSlice will construct a slice of type RDSO13Timing
func NewRDSO13TimingSlice(input hl7.HL7Type) []RDSO13Timing {
	values := make([]RDSO13Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRDSO13Timing(input.Index(i))
	}
	return values
}

// NewORSO06Order creates an implementation of ORSO06Order
func NewORSO06Order(input hl7.HL7Type) ORSO06Order {
	v := ORSO06Order{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.Timing = NewORSO06TimingSlice(input.Index(2))
	v.RequisitionDetail = NewRQD(input.Index(3))
	v.RequisitionDetail1 = NewRQ1(input.Index(4))
	v.NotesAndComments = NewNTESlice(input.Index(5))
	return v
}

type ORSO06Order struct {
	CommonOrder              ORC
	ParticipationInformation []PRT
	Timing                   []ORSO06Timing
	RequisitionDetail        RQD
	RequisitionDetail1       RQ1
	NotesAndComments         []NTE
}

// NewORSO06OrderSlice will construct a slice of type ORSO06Order
func NewORSO06OrderSlice(input hl7.HL7Type) []ORSO06Order {
	values := make([]ORSO06Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORSO06Order(input.Index(i))
	}
	return values
}

// NewSRMS10Resources creates an implementation of SRMS10Resources
func NewSRMS10Resources(input hl7.HL7Type) SRMS10Resources {
	v := SRMS10Resources{}
	v.ResourceGroup = NewRGS(input.Index(0))
	v.Service = NewSRMS10ServiceSlice(input.Index(1))
	v.GeneralResource = NewSRMS10GeneralResourceSlice(input.Index(2))
	v.LocationResource = NewSRMS10LocationResourceSlice(input.Index(3))
	v.PersonnelResource = NewSRMS10PersonnelResourceSlice(input.Index(4))
	return v
}

type SRMS10Resources struct {
	ResourceGroup     RGS
	Service           []SRMS10Service
	GeneralResource   []SRMS10GeneralResource
	LocationResource  []SRMS10LocationResource
	PersonnelResource []SRMS10PersonnelResource
}

// NewSRMS10ResourcesSlice will construct a slice of type SRMS10Resources
func NewSRMS10ResourcesSlice(input hl7.HL7Type) []SRMS10Resources {
	values := make([]SRMS10Resources, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS10Resources(input.Index(i))
	}
	return values
}

// NewRSPZ88Visit creates an implementation of RSPZ88Visit
func NewRSPZ88Visit(input hl7.HL7Type) RSPZ88Visit {
	v := RSPZ88Visit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	return v
}

type RSPZ88Visit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
}

// NewRSPZ88VisitSlice will construct a slice of type RSPZ88Visit
func NewRSPZ88VisitSlice(input hl7.HL7Type) []RSPZ88Visit {
	values := make([]RSPZ88Visit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPZ88Visit(input.Index(i))
	}
	return values
}

// NewOPRO38ObservationRequest creates an implementation of OPRO38ObservationRequest
func NewOPRO38ObservationRequest(input hl7.HL7Type) OPRO38ObservationRequest {
	v := OPRO38ObservationRequest{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.ObservationRequest = NewOBR(input.Index(2))
	v.AdditionalParticipationInformation = NewPRTSlice(input.Index(3))
	return v
}

type OPRO38ObservationRequest struct {
	CommonOrder                        ORC
	ParticipationInformation           []PRT
	ObservationRequest                 OBR
	AdditionalParticipationInformation []PRT
}

// NewOPRO38ObservationRequestSlice will construct a slice of type OPRO38ObservationRequest
func NewOPRO38ObservationRequestSlice(input hl7.HL7Type) []OPRO38ObservationRequest {
	values := make([]OPRO38ObservationRequest, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOPRO38ObservationRequest(input.Index(i))
	}
	return values
}

// NewCCRI16RoleClinicalHistoryObject creates an implementation of CCRI16RoleClinicalHistoryObject
func NewCCRI16RoleClinicalHistoryObject(input hl7.HL7Type) CCRI16RoleClinicalHistoryObject {
	v := CCRI16RoleClinicalHistoryObject{}
	v.Role = NewROL(input.Index(0))
	v.ProviderData = NewPRD(input.Index(1))
	return v
}

type CCRI16RoleClinicalHistoryObject struct {
	Role         ROL
	ProviderData PRD
}

// NewCCRI16RoleClinicalHistoryObjectSlice will construct a slice of type CCRI16RoleClinicalHistoryObject
func NewCCRI16RoleClinicalHistoryObjectSlice(input hl7.HL7Type) []CCRI16RoleClinicalHistoryObject {
	values := make([]CCRI16RoleClinicalHistoryObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI16RoleClinicalHistoryObject(input.Index(i))
	}
	return values
}

// NewOULR24OrderDocument creates an implementation of OULR24OrderDocument
func NewOULR24OrderDocument(input hl7.HL7Type) OULR24OrderDocument {
	v := OULR24OrderDocument{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.TranscriptionDocumentHeader = NewTXA(input.Index(2))
	return v
}

type OULR24OrderDocument struct {
	ObservationResult           OBX
	ParticipationInformation    []PRT
	TranscriptionDocumentHeader TXA
}

// NewOULR24OrderDocumentSlice will construct a slice of type OULR24OrderDocument
func NewOULR24OrderDocumentSlice(input hl7.HL7Type) []OULR24OrderDocument {
	values := make([]OULR24OrderDocument, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOULR24OrderDocument(input.Index(i))
	}
	return values
}

// NewOMQO42Order creates an implementation of OMQO42Order
func NewOMQO42Order(input hl7.HL7Type) OMQO42Order {
	v := OMQO42Order{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.ObservationResult = NewOBX(input.Index(2))
	v.AdditionalParticipationInformation = NewPRTSlice(input.Index(3))
	v.TranscriptionDocumentHeader = NewTXA(input.Index(4))
	v.ContactData = NewCTD(input.Index(5))
	v.Diagnosis = NewDG1Slice(input.Index(6))
	v.Observation = NewOMQO42ObservationSlice(input.Index(7))
	v.Specimen = NewOMQO42SpecimenSlice(input.Index(8))
	v.PriorResult = NewOMQO42PriorResultSlice(input.Index(9))
	v.FinancialTransaction = NewFT1Slice(input.Index(10))
	v.ClinicalTrialIdentification = NewCTISlice(input.Index(11))
	v.Billing = NewBLG(input.Index(12))
	return v
}

type OMQO42Order struct {
	CommonOrder                        ORC
	ParticipationInformation           []PRT
	ObservationResult                  OBX
	AdditionalParticipationInformation []PRT
	TranscriptionDocumentHeader        TXA
	ContactData                        CTD
	Diagnosis                          []DG1
	Observation                        []OMQO42Observation
	Specimen                           []OMQO42Specimen
	PriorResult                        []OMQO42PriorResult
	FinancialTransaction               []FT1
	ClinicalTrialIdentification        []CTI
	Billing                            BLG
}

// NewOMQO42OrderSlice will construct a slice of type OMQO42Order
func NewOMQO42OrderSlice(input hl7.HL7Type) []OMQO42Order {
	values := make([]OMQO42Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMQO42Order(input.Index(i))
	}
	return values
}

// NewSRMS07LocationResource creates an implementation of SRMS07LocationResource
func NewSRMS07LocationResource(input hl7.HL7Type) SRMS07LocationResource {
	v := SRMS07LocationResource{}
	v.AppointmentInformationLocationResource = NewAIL(input.Index(0))
	v.AppointmentPreferences = NewAPR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type SRMS07LocationResource struct {
	AppointmentInformationLocationResource AIL
	AppointmentPreferences                 APR
	NotesAndComments                       []NTE
}

// NewSRMS07LocationResourceSlice will construct a slice of type SRMS07LocationResource
func NewSRMS07LocationResourceSlice(input hl7.HL7Type) []SRMS07LocationResource {
	values := make([]SRMS07LocationResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS07LocationResource(input.Index(i))
	}
	return values
}

// NewOULR23Patient creates an implementation of OULR23Patient
func NewOULR23Patient(input hl7.HL7Type) OULR23Patient {
	v := OULR23Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.AccessRestriction = NewARVSlice(input.Index(3))
	v.NotesAndComments = NewNTESlice(input.Index(4))
	v.PatientObservation = NewOULR23PatientObservationSlice(input.Index(5))
	v.Visit = NewOULR23Visit(input.Index(6))
	return v
}

type OULR23Patient struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	ParticipationInformation     []PRT
	AccessRestriction            []ARV
	NotesAndComments             []NTE
	PatientObservation           []OULR23PatientObservation
	Visit                        OULR23Visit
}

// NewOULR23PatientSlice will construct a slice of type OULR23Patient
func NewOULR23PatientSlice(input hl7.HL7Type) []OULR23Patient {
	values := make([]OULR23Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOULR23Patient(input.Index(i))
	}
	return values
}

// NewSIUS14PersonnelResource creates an implementation of SIUS14PersonnelResource
func NewSIUS14PersonnelResource(input hl7.HL7Type) SIUS14PersonnelResource {
	v := SIUS14PersonnelResource{}
	v.AppointmentInformationPersonnelResource = NewAIP(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS14PersonnelResource struct {
	AppointmentInformationPersonnelResource AIP
	NotesAndComments                        []NTE
}

// NewSIUS14PersonnelResourceSlice will construct a slice of type SIUS14PersonnelResource
func NewSIUS14PersonnelResourceSlice(input hl7.HL7Type) []SIUS14PersonnelResource {
	values := make([]SIUS14PersonnelResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS14PersonnelResource(input.Index(i))
	}
	return values
}

// NewMFNM16Sterilization creates an implementation of MFNM16Sterilization
func NewMFNM16Sterilization(input hl7.HL7Type) MFNM16Sterilization {
	v := MFNM16Sterilization{}
	v.SterilizationParameter = NewSTZ(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type MFNM16Sterilization struct {
	SterilizationParameter STZ
	NotesAndComments       []NTE
}

// NewMFNM16SterilizationSlice will construct a slice of type MFNM16Sterilization
func NewMFNM16SterilizationSlice(input hl7.HL7Type) []MFNM16Sterilization {
	values := make([]MFNM16Sterilization, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMFNM16Sterilization(input.Index(i))
	}
	return values
}

// NewRSPZ86Observation creates an implementation of RSPZ86Observation
func NewRSPZ86Observation(input hl7.HL7Type) RSPZ86Observation {
	v := RSPZ86Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type RSPZ86Observation struct {
	ObservationResult OBX
	NotesAndComments  []NTE
}

// NewRSPZ86ObservationSlice will construct a slice of type RSPZ86Observation
func NewRSPZ86ObservationSlice(input hl7.HL7Type) []RSPZ86Observation {
	values := make([]RSPZ86Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPZ86Observation(input.Index(i))
	}
	return values
}

// NewRDRRDRPatient creates an implementation of RDRRDRPatient
func NewRDRRDRPatient(input hl7.HL7Type) RDRRDRPatient {
	v := RDRRDRPatient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type RDRRDRPatient struct {
	PatientIdentification PID
	NotesAndComments      []NTE
}

// NewRDRRDRPatientSlice will construct a slice of type RDRRDRPatient
func NewRDRRDRPatientSlice(input hl7.HL7Type) []RDRRDRPatient {
	values := make([]RDRRDRPatient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRDRRDRPatient(input.Index(i))
	}
	return values
}

// NewRPAI11Authorization2 creates an implementation of RPAI11Authorization2
func NewRPAI11Authorization2(input hl7.HL7Type) RPAI11Authorization2 {
	v := RPAI11Authorization2{}
	v.AuthorizationInformation = NewAUT(input.Index(0))
	v.ContactData = NewCTD(input.Index(1))
	return v
}

type RPAI11Authorization2 struct {
	AuthorizationInformation AUT
	ContactData              CTD
}

// NewRPAI11Authorization2Slice will construct a slice of type RPAI11Authorization2
func NewRPAI11Authorization2Slice(input hl7.HL7Type) []RPAI11Authorization2 {
	values := make([]RPAI11Authorization2, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRPAI11Authorization2(input.Index(i))
	}
	return values
}

// NewRSPK23QueryResponse creates an implementation of RSPK23QueryResponse
func NewRSPK23QueryResponse(input hl7.HL7Type) RSPK23QueryResponse {
	v := RSPK23QueryResponse{}
	v.PatientIdentification = NewPID(input.Index(0))
	return v
}

type RSPK23QueryResponse struct {
	PatientIdentification PID
}

// NewRSPK23QueryResponseSlice will construct a slice of type RSPK23QueryResponse
func NewRSPK23QueryResponseSlice(input hl7.HL7Type) []RSPK23QueryResponse {
	values := make([]RSPK23QueryResponse, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPK23QueryResponse(input.Index(i))
	}
	return values
}

// NewRASO17Administration creates an implementation of RASO17Administration
func NewRASO17Administration(input hl7.HL7Type) RASO17Administration {
	v := RASO17Administration{}
	v.PharmacyTreatmentAdministration = NewRXASlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.PharmacyTreatmentRoute = NewRXR(input.Index(2))
	v.Observation = NewRASO17ObservationSlice(input.Index(3))
	return v
}

type RASO17Administration struct {
	PharmacyTreatmentAdministration []RXA
	ParticipationInformation        []PRT
	PharmacyTreatmentRoute          RXR
	Observation                     []RASO17Observation
}

// NewRASO17AdministrationSlice will construct a slice of type RASO17Administration
func NewRASO17AdministrationSlice(input hl7.HL7Type) []RASO17Administration {
	values := make([]RASO17Administration, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRASO17Administration(input.Index(i))
	}
	return values
}

// NewSRRS03LocationResource creates an implementation of SRRS03LocationResource
func NewSRRS03LocationResource(input hl7.HL7Type) SRRS03LocationResource {
	v := SRRS03LocationResource{}
	v.AppointmentInformationLocationResource = NewAIL(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SRRS03LocationResource struct {
	AppointmentInformationLocationResource AIL
	NotesAndComments                       []NTE
}

// NewSRRS03LocationResourceSlice will construct a slice of type SRRS03LocationResource
func NewSRRS03LocationResourceSlice(input hl7.HL7Type) []SRRS03LocationResource {
	values := make([]SRRS03LocationResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS03LocationResource(input.Index(i))
	}
	return values
}

// NewCCRI18ClinicalOrderObservation creates an implementation of CCRI18ClinicalOrderObservation
func NewCCRI18ClinicalOrderObservation(input hl7.HL7Type) CCRI18ClinicalOrderObservation {
	v := CCRI18ClinicalOrderObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CCRI18ClinicalOrderObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewCCRI18ClinicalOrderObservationSlice will construct a slice of type CCRI18ClinicalOrderObservation
func NewCCRI18ClinicalOrderObservationSlice(input hl7.HL7Type) []CCRI18ClinicalOrderObservation {
	values := make([]CCRI18ClinicalOrderObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI18ClinicalOrderObservation(input.Index(i))
	}
	return values
}

// NewORUR31Visit creates an implementation of ORUR31Visit
func NewORUR31Visit(input hl7.HL7Type) ORUR31Visit {
	v := ORUR31Visit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	return v
}

type ORUR31Visit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ParticipationInformation          []PRT
}

// NewORUR31VisitSlice will construct a slice of type ORUR31Visit
func NewORUR31VisitSlice(input hl7.HL7Type) []ORUR31Visit {
	values := make([]ORUR31Visit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORUR31Visit(input.Index(i))
	}
	return values
}

// NewADTA05Procedure creates an implementation of ADTA05Procedure
func NewADTA05Procedure(input hl7.HL7Type) ADTA05Procedure {
	v := ADTA05Procedure{}
	v.Procedures = NewPR1(input.Index(0))
	v.Role = NewROLSlice(input.Index(1))
	return v
}

type ADTA05Procedure struct {
	Procedures PR1
	Role       []ROL
}

// NewADTA05ProcedureSlice will construct a slice of type ADTA05Procedure
func NewADTA05ProcedureSlice(input hl7.HL7Type) []ADTA05Procedure {
	values := make([]ADTA05Procedure, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewADTA05Procedure(input.Index(i))
	}
	return values
}

// NewCCII22Insurance creates an implementation of CCII22Insurance
func NewCCII22Insurance(input hl7.HL7Type) CCII22Insurance {
	v := CCII22Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3(input.Index(2))
	return v
}

type CCII22Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification IN3
}

// NewCCII22InsuranceSlice will construct a slice of type CCII22Insurance
func NewCCII22InsuranceSlice(input hl7.HL7Type) []CCII22Insurance {
	values := make([]CCII22Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCII22Insurance(input.Index(i))
	}
	return values
}

// NewOMLO33Observation creates an implementation of OMLO33Observation
func NewOMLO33Observation(input hl7.HL7Type) OMLO33Observation {
	v := OMLO33Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.TestCodeDetail = NewTCD(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	return v
}

type OMLO33Observation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	TestCodeDetail           TCD
	NotesAndComments         []NTE
}

// NewOMLO33ObservationSlice will construct a slice of type OMLO33Observation
func NewOMLO33ObservationSlice(input hl7.HL7Type) []OMLO33Observation {
	values := make([]OMLO33Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO33Observation(input.Index(i))
	}
	return values
}

// NewSIUS15Patient creates an implementation of SIUS15Patient
func NewSIUS15Patient(input hl7.HL7Type) SIUS15Patient {
	v := SIUS15Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.PatientVisit = NewPV1(input.Index(2))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(3))
	v.ObservationResult = NewOBXSlice(input.Index(4))
	v.Diagnosis = NewDG1Slice(input.Index(5))
	return v
}

type SIUS15Patient struct {
	PatientIdentification             PID
	PatientAdditionalDemographic      PD1
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ObservationResult                 []OBX
	Diagnosis                         []DG1
}

// NewSIUS15PatientSlice will construct a slice of type SIUS15Patient
func NewSIUS15PatientSlice(input hl7.HL7Type) []SIUS15Patient {
	values := make([]SIUS15Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS15Patient(input.Index(i))
	}
	return values
}

// NewREFI12AuthorizationContact creates an implementation of REFI12AuthorizationContact
func NewREFI12AuthorizationContact(input hl7.HL7Type) REFI12AuthorizationContact {
	v := REFI12AuthorizationContact{}
	v.AuthorizationInformation = NewAUT(input.Index(0))
	v.ContactData = NewCTD(input.Index(1))
	return v
}

type REFI12AuthorizationContact struct {
	AuthorizationInformation AUT
	ContactData              CTD
}

// NewREFI12AuthorizationContactSlice will construct a slice of type REFI12AuthorizationContact
func NewREFI12AuthorizationContactSlice(input hl7.HL7Type) []REFI12AuthorizationContact {
	values := make([]REFI12AuthorizationContact, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewREFI12AuthorizationContact(input.Index(i))
	}
	return values
}

// NewSRRS06LocationResource creates an implementation of SRRS06LocationResource
func NewSRRS06LocationResource(input hl7.HL7Type) SRRS06LocationResource {
	v := SRRS06LocationResource{}
	v.AppointmentInformationLocationResource = NewAIL(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SRRS06LocationResource struct {
	AppointmentInformationLocationResource AIL
	NotesAndComments                       []NTE
}

// NewSRRS06LocationResourceSlice will construct a slice of type SRRS06LocationResource
func NewSRRS06LocationResourceSlice(input hl7.HL7Type) []SRRS06LocationResource {
	values := make([]SRRS06LocationResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS06LocationResource(input.Index(i))
	}
	return values
}

// NewRSPZ86TimingEncoded creates an implementation of RSPZ86TimingEncoded
func NewRSPZ86TimingEncoded(input hl7.HL7Type) RSPZ86TimingEncoded {
	v := RSPZ86TimingEncoded{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type RSPZ86TimingEncoded struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewRSPZ86TimingEncodedSlice will construct a slice of type RSPZ86TimingEncoded
func NewRSPZ86TimingEncodedSlice(input hl7.HL7Type) []RSPZ86TimingEncoded {
	values := make([]RSPZ86TimingEncoded, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPZ86TimingEncoded(input.Index(i))
	}
	return values
}

// NewPGLPC6Goal creates an implementation of PGLPC6Goal
func NewPGLPC6Goal(input hl7.HL7Type) PGLPC6Goal {
	v := PGLPC6Goal{}
	v.GoalDetail = NewGOL(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Variance = NewVARSlice(input.Index(2))
	v.GoalRole = NewPGLPC6GoalRoleSlice(input.Index(3))
	v.Pathway = NewPGLPC6PathwaySlice(input.Index(4))
	v.Observation = NewPGLPC6ObservationSlice(input.Index(5))
	v.Problem = NewPGLPC6ProblemSlice(input.Index(6))
	v.Order = NewPGLPC6OrderSlice(input.Index(7))
	return v
}

type PGLPC6Goal struct {
	GoalDetail       GOL
	NotesAndComments []NTE
	Variance         []VAR
	GoalRole         []PGLPC6GoalRole
	Pathway          []PGLPC6Pathway
	Observation      []PGLPC6Observation
	Problem          []PGLPC6Problem
	Order            []PGLPC6Order
}

// NewPGLPC6GoalSlice will construct a slice of type PGLPC6Goal
func NewPGLPC6GoalSlice(input hl7.HL7Type) []PGLPC6Goal {
	values := make([]PGLPC6Goal, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPGLPC6Goal(input.Index(i))
	}
	return values
}

// NewSIUS26PersonnelResource creates an implementation of SIUS26PersonnelResource
func NewSIUS26PersonnelResource(input hl7.HL7Type) SIUS26PersonnelResource {
	v := SIUS26PersonnelResource{}
	v.AppointmentInformationPersonnelResource = NewAIP(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS26PersonnelResource struct {
	AppointmentInformationPersonnelResource AIP
	NotesAndComments                        []NTE
}

// NewSIUS26PersonnelResourceSlice will construct a slice of type SIUS26PersonnelResource
func NewSIUS26PersonnelResourceSlice(input hl7.HL7Type) []SIUS26PersonnelResource {
	values := make([]SIUS26PersonnelResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS26PersonnelResource(input.Index(i))
	}
	return values
}

// NewOMLO33OrderPrior creates an implementation of OMLO33OrderPrior
func NewOMLO33OrderPrior(input hl7.HL7Type) OMLO33OrderPrior {
	v := OMLO33OrderPrior{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ObservationRequest = NewOBR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.ParticipationInformation = NewPRTSlice(input.Index(3))
	v.TimingPrior = NewOMLO33TimingPriorSlice(input.Index(4))
	v.ObservationPrior = NewOMLO33ObservationPriorSlice(input.Index(5))
	return v
}

type OMLO33OrderPrior struct {
	CommonOrder              ORC
	ObservationRequest       OBR
	NotesAndComments         []NTE
	ParticipationInformation []PRT
	TimingPrior              []OMLO33TimingPrior
	ObservationPrior         []OMLO33ObservationPrior
}

// NewOMLO33OrderPriorSlice will construct a slice of type OMLO33OrderPrior
func NewOMLO33OrderPriorSlice(input hl7.HL7Type) []OMLO33OrderPrior {
	values := make([]OMLO33OrderPrior, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO33OrderPrior(input.Index(i))
	}
	return values
}

// NewRQAI10Provider creates an implementation of RQAI10Provider
func NewRQAI10Provider(input hl7.HL7Type) RQAI10Provider {
	v := RQAI10Provider{}
	v.ProviderData = NewPRD(input.Index(0))
	v.ContactData = NewCTDSlice(input.Index(1))
	return v
}

type RQAI10Provider struct {
	ProviderData PRD
	ContactData  []CTD
}

// NewRQAI10ProviderSlice will construct a slice of type RQAI10Provider
func NewRQAI10ProviderSlice(input hl7.HL7Type) []RQAI10Provider {
	values := make([]RQAI10Provider, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQAI10Provider(input.Index(i))
	}
	return values
}

// NewRQAI11Observation creates an implementation of RQAI11Observation
func NewRQAI11Observation(input hl7.HL7Type) RQAI11Observation {
	v := RQAI11Observation{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Results = NewRQAI11ResultsSlice(input.Index(2))
	return v
}

type RQAI11Observation struct {
	ObservationRequest OBR
	NotesAndComments   []NTE
	Results            []RQAI11Results
}

// NewRQAI11ObservationSlice will construct a slice of type RQAI11Observation
func NewRQAI11ObservationSlice(input hl7.HL7Type) []RQAI11Observation {
	values := make([]RQAI11Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQAI11Observation(input.Index(i))
	}
	return values
}

// NewBARP06Patient creates an implementation of BARP06Patient
func NewBARP06Patient(input hl7.HL7Type) BARP06Patient {
	v := BARP06Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientVisit = NewPV1(input.Index(1))
	return v
}

type BARP06Patient struct {
	PatientIdentification PID
	PatientVisit          PV1
}

// NewBARP06PatientSlice will construct a slice of type BARP06Patient
func NewBARP06PatientSlice(input hl7.HL7Type) []BARP06Patient {
	values := make([]BARP06Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewBARP06Patient(input.Index(i))
	}
	return values
}

// NewMDMT03Timing creates an implementation of MDMT03Timing
func NewMDMT03Timing(input hl7.HL7Type) MDMT03Timing {
	v := MDMT03Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type MDMT03Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewMDMT03TimingSlice will construct a slice of type MDMT03Timing
func NewMDMT03TimingSlice(input hl7.HL7Type) []MDMT03Timing {
	values := make([]MDMT03Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMDMT03Timing(input.Index(i))
	}
	return values
}

// NewOMLO39Timing creates an implementation of OMLO39Timing
func NewOMLO39Timing(input hl7.HL7Type) OMLO39Timing {
	v := OMLO39Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type OMLO39Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewOMLO39TimingSlice will construct a slice of type OMLO39Timing
func NewOMLO39TimingSlice(input hl7.HL7Type) []OMLO39Timing {
	values := make([]OMLO39Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO39Timing(input.Index(i))
	}
	return values
}

// NewPEXP07AssociatedObservation creates an implementation of PEXP07AssociatedObservation
func NewPEXP07AssociatedObservation(input hl7.HL7Type) PEXP07AssociatedObservation {
	v := PEXP07AssociatedObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type PEXP07AssociatedObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewPEXP07AssociatedObservationSlice will construct a slice of type PEXP07AssociatedObservation
func NewPEXP07AssociatedObservationSlice(input hl7.HL7Type) []PEXP07AssociatedObservation {
	values := make([]PEXP07AssociatedObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPEXP07AssociatedObservation(input.Index(i))
	}
	return values
}

// NewSRRS11LocationResource creates an implementation of SRRS11LocationResource
func NewSRRS11LocationResource(input hl7.HL7Type) SRRS11LocationResource {
	v := SRRS11LocationResource{}
	v.AppointmentInformationLocationResource = NewAIL(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SRRS11LocationResource struct {
	AppointmentInformationLocationResource AIL
	NotesAndComments                       []NTE
}

// NewSRRS11LocationResourceSlice will construct a slice of type SRRS11LocationResource
func NewSRRS11LocationResourceSlice(input hl7.HL7Type) []SRRS11LocationResource {
	values := make([]SRRS11LocationResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS11LocationResource(input.Index(i))
	}
	return values
}

// NewCCUI20MedicationHistory creates an implementation of CCUI20MedicationHistory
func NewCCUI20MedicationHistory(input hl7.HL7Type) CCUI20MedicationHistory {
	v := CCUI20MedicationHistory{}
	v.CommonOrder = NewORC(input.Index(0))
	v.MedicationOrderDetail = NewCCUI20MedicationOrderDetail(input.Index(1))
	v.MedicationEncodingDetail = NewCCUI20MedicationEncodingDetail(input.Index(2))
	v.MedicationAdministrationDetail = NewCCUI20MedicationAdministrationDetailSlice(input.Index(3))
	v.ClinicalTrialIdentification = NewCTISlice(input.Index(4))
	return v
}

type CCUI20MedicationHistory struct {
	CommonOrder                    ORC
	MedicationOrderDetail          CCUI20MedicationOrderDetail
	MedicationEncodingDetail       CCUI20MedicationEncodingDetail
	MedicationAdministrationDetail []CCUI20MedicationAdministrationDetail
	ClinicalTrialIdentification    []CTI
}

// NewCCUI20MedicationHistorySlice will construct a slice of type CCUI20MedicationHistory
func NewCCUI20MedicationHistorySlice(input hl7.HL7Type) []CCUI20MedicationHistory {
	values := make([]CCUI20MedicationHistory, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCUI20MedicationHistory(input.Index(i))
	}
	return values
}

// NewSRMS07Patient creates an implementation of SRMS07Patient
func NewSRMS07Patient(input hl7.HL7Type) SRMS07Patient {
	v := SRMS07Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientVisit = NewPV1(input.Index(1))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(2))
	v.Observation = NewSRMS07ObservationSlice(input.Index(3))
	v.Diagnosis = NewDG1Slice(input.Index(4))
	return v
}

type SRMS07Patient struct {
	PatientIdentification             PID
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	Observation                       []SRMS07Observation
	Diagnosis                         []DG1
}

// NewSRMS07PatientSlice will construct a slice of type SRMS07Patient
func NewSRMS07PatientSlice(input hl7.HL7Type) []SRMS07Patient {
	values := make([]SRMS07Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS07Patient(input.Index(i))
	}
	return values
}

// NewCCRI16RolePathway creates an implementation of CCRI16RolePathway
func NewCCRI16RolePathway(input hl7.HL7Type) CCRI16RolePathway {
	v := CCRI16RolePathway{}
	v.RolePathwayObject = NewCCRI16RolePathwayObject(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type CCRI16RolePathway struct {
	RolePathwayObject CCRI16RolePathwayObject
	Variance          []VAR
}

// NewCCRI16RolePathwaySlice will construct a slice of type CCRI16RolePathway
func NewCCRI16RolePathwaySlice(input hl7.HL7Type) []CCRI16RolePathway {
	values := make([]CCRI16RolePathway, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI16RolePathway(input.Index(i))
	}
	return values
}

// NewSRMS01PersonnelResource creates an implementation of SRMS01PersonnelResource
func NewSRMS01PersonnelResource(input hl7.HL7Type) SRMS01PersonnelResource {
	v := SRMS01PersonnelResource{}
	v.AppointmentInformationPersonnelResource = NewAIP(input.Index(0))
	v.AppointmentPreferences = NewAPR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type SRMS01PersonnelResource struct {
	AppointmentInformationPersonnelResource AIP
	AppointmentPreferences                  APR
	NotesAndComments                        []NTE
}

// NewSRMS01PersonnelResourceSlice will construct a slice of type SRMS01PersonnelResource
func NewSRMS01PersonnelResourceSlice(input hl7.HL7Type) []SRMS01PersonnelResource {
	values := make([]SRMS01PersonnelResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS01PersonnelResource(input.Index(i))
	}
	return values
}

// NewSRRS02Patient creates an implementation of SRRS02Patient
func NewSRRS02Patient(input hl7.HL7Type) SRRS02Patient {
	v := SRRS02Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientVisit = NewPV1(input.Index(1))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(2))
	v.Diagnosis = NewDG1Slice(input.Index(3))
	return v
}

type SRRS02Patient struct {
	PatientIdentification             PID
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	Diagnosis                         []DG1
}

// NewSRRS02PatientSlice will construct a slice of type SRRS02Patient
func NewSRRS02PatientSlice(input hl7.HL7Type) []SRRS02Patient {
	values := make([]SRRS02Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS02Patient(input.Index(i))
	}
	return values
}

// NewPGLPC8Observation creates an implementation of PGLPC8Observation
func NewPGLPC8Observation(input hl7.HL7Type) PGLPC8Observation {
	v := PGLPC8Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type PGLPC8Observation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewPGLPC8ObservationSlice will construct a slice of type PGLPC8Observation
func NewPGLPC8ObservationSlice(input hl7.HL7Type) []PGLPC8Observation {
	values := make([]PGLPC8Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPGLPC8Observation(input.Index(i))
	}
	return values
}

// NewPPGPCHChoice creates an implementation of PPGPCHChoice
func NewPPGPCHChoice(input hl7.HL7Type) PPGPCHChoice {
	v := PPGPCHChoice{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.AnyHl7Segment = NewHxx(input.Index(1))
	return v
}

type PPGPCHChoice struct {
	ObservationRequest OBR
	AnyHl7Segment      Hxx
}

// NewPPGPCHChoiceSlice will construct a slice of type PPGPCHChoice
func NewPPGPCHChoiceSlice(input hl7.HL7Type) []PPGPCHChoice {
	values := make([]PPGPCHChoice, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPGPCHChoice(input.Index(i))
	}
	return values
}

// NewCCII22MedicationOrderDetail creates an implementation of CCII22MedicationOrderDetail
func NewCCII22MedicationOrderDetail(input hl7.HL7Type) CCII22MedicationOrderDetail {
	v := CCII22MedicationOrderDetail{}
	v.PharmacyTreatmentOrder = NewRXO(input.Index(0))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(1))
	v.PharmacyTreatmentComponentOrder = NewRXCSlice(input.Index(2))
	v.ObservationResult = NewOBXSlice(input.Index(3))
	return v
}

type CCII22MedicationOrderDetail struct {
	PharmacyTreatmentOrder          RXO
	PharmacyTreatmentRoute          []RXR
	PharmacyTreatmentComponentOrder []RXC
	ObservationResult               []OBX
}

// NewCCII22MedicationOrderDetailSlice will construct a slice of type CCII22MedicationOrderDetail
func NewCCII22MedicationOrderDetailSlice(input hl7.HL7Type) []CCII22MedicationOrderDetail {
	values := make([]CCII22MedicationOrderDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCII22MedicationOrderDetail(input.Index(i))
	}
	return values
}

// NewSIUS16Patient creates an implementation of SIUS16Patient
func NewSIUS16Patient(input hl7.HL7Type) SIUS16Patient {
	v := SIUS16Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.PatientVisit = NewPV1(input.Index(2))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(3))
	v.ObservationResult = NewOBXSlice(input.Index(4))
	v.Diagnosis = NewDG1Slice(input.Index(5))
	return v
}

type SIUS16Patient struct {
	PatientIdentification             PID
	PatientAdditionalDemographic      PD1
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ObservationResult                 []OBX
	Diagnosis                         []DG1
}

// NewSIUS16PatientSlice will construct a slice of type SIUS16Patient
func NewSIUS16PatientSlice(input hl7.HL7Type) []SIUS16Patient {
	values := make([]SIUS16Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS16Patient(input.Index(i))
	}
	return values
}

// NewRPAI08Procedure creates an implementation of RPAI08Procedure
func NewRPAI08Procedure(input hl7.HL7Type) RPAI08Procedure {
	v := RPAI08Procedure{}
	v.Procedures = NewPR1(input.Index(0))
	v.Authorization2 = NewRPAI08Authorization2(input.Index(1))
	return v
}

type RPAI08Procedure struct {
	Procedures     PR1
	Authorization2 RPAI08Authorization2
}

// NewRPAI08ProcedureSlice will construct a slice of type RPAI08Procedure
func NewRPAI08ProcedureSlice(input hl7.HL7Type) []RPAI08Procedure {
	values := make([]RPAI08Procedure, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRPAI08Procedure(input.Index(i))
	}
	return values
}

// NewOULR24Order creates an implementation of OULR24Order
func NewOULR24Order(input hl7.HL7Type) OULR24Order {
	v := OULR24Order{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.CommonOrder = NewOULR24CommonOrder(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	v.AdditionalParticipationInformation = NewPRTSlice(input.Index(4))
	v.TimingQty = NewOULR24TimingQtySlice(input.Index(5))
	v.Specimen = NewOULR24SpecimenSlice(input.Index(6))
	v.Result = NewOULR24ResultSlice(input.Index(7))
	v.ClinicalTrialIdentification = NewCTISlice(input.Index(8))
	v.ContinuationPointer = NewDSC(input.Index(9))
	return v
}

type OULR24Order struct {
	ObservationRequest                 OBR
	ParticipationInformation           []PRT
	CommonOrder                        OULR24CommonOrder
	NotesAndComments                   []NTE
	AdditionalParticipationInformation []PRT
	TimingQty                          []OULR24TimingQty
	Specimen                           []OULR24Specimen
	Result                             []OULR24Result
	ClinicalTrialIdentification        []CTI
	ContinuationPointer                DSC
}

// NewOULR24OrderSlice will construct a slice of type OULR24Order
func NewOULR24OrderSlice(input hl7.HL7Type) []OULR24Order {
	values := make([]OULR24Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOULR24Order(input.Index(i))
	}
	return values
}

// NewDERO44DonorRegistration creates an implementation of DERO44DonorRegistration
func NewDERO44DonorRegistration(input hl7.HL7Type) DERO44DonorRegistration {
	v := DERO44DonorRegistration{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type DERO44DonorRegistration struct {
	PatientVisit     PV1
	NotesAndComments []NTE
}

// NewDERO44DonorRegistrationSlice will construct a slice of type DERO44DonorRegistration
func NewDERO44DonorRegistrationSlice(input hl7.HL7Type) []DERO44DonorRegistration {
	values := make([]DERO44DonorRegistration, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewDERO44DonorRegistration(input.Index(i))
	}
	return values
}

// NewCSUC11Patient creates an implementation of CSUC11Patient
func NewCSUC11Patient(input hl7.HL7Type) CSUC11Patient {
	v := CSUC11Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.AccessRestriction = NewARVSlice(input.Index(3))
	v.NotesAndComments = NewNTESlice(input.Index(4))
	v.Visit = NewCSUC11Visit(input.Index(5))
	v.ClinicalStudyRegistration = NewCSR(input.Index(6))
	v.StudyPhase = NewCSUC11StudyPhaseSlice(input.Index(7))
	return v
}

type CSUC11Patient struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	ParticipationInformation     []PRT
	AccessRestriction            []ARV
	NotesAndComments             []NTE
	Visit                        CSUC11Visit
	ClinicalStudyRegistration    CSR
	StudyPhase                   []CSUC11StudyPhase
}

// NewCSUC11PatientSlice will construct a slice of type CSUC11Patient
func NewCSUC11PatientSlice(input hl7.HL7Type) []CSUC11Patient {
	values := make([]CSUC11Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCSUC11Patient(input.Index(i))
	}
	return values
}

// NewRQAI11GuarantorInsurance creates an implementation of RQAI11GuarantorInsurance
func NewRQAI11GuarantorInsurance(input hl7.HL7Type) RQAI11GuarantorInsurance {
	v := RQAI11GuarantorInsurance{}
	v.Guarantor = NewGT1Slice(input.Index(0))
	v.Insurance = NewRQAI11InsuranceSlice(input.Index(1))
	return v
}

type RQAI11GuarantorInsurance struct {
	Guarantor []GT1
	Insurance []RQAI11Insurance
}

// NewRQAI11GuarantorInsuranceSlice will construct a slice of type RQAI11GuarantorInsurance
func NewRQAI11GuarantorInsuranceSlice(input hl7.HL7Type) []RQAI11GuarantorInsurance {
	values := make([]RQAI11GuarantorInsurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQAI11GuarantorInsurance(input.Index(i))
	}
	return values
}

// NewEHCE01Insurance creates an implementation of EHCE01Insurance
func NewEHCE01Insurance(input hl7.HL7Type) EHCE01Insurance {
	v := EHCE01Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	return v
}

type EHCE01Insurance struct {
	Insurance                      IN1
	InsuranceAdditionalInformation IN2
}

// NewEHCE01InsuranceSlice will construct a slice of type EHCE01Insurance
func NewEHCE01InsuranceSlice(input hl7.HL7Type) []EHCE01Insurance {
	values := make([]EHCE01Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewEHCE01Insurance(input.Index(i))
	}
	return values
}

// NewOULR24Patient creates an implementation of OULR24Patient
func NewOULR24Patient(input hl7.HL7Type) OULR24Patient {
	v := OULR24Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.AccessRestriction = NewARVSlice(input.Index(3))
	v.NotesAndComments = NewNTESlice(input.Index(4))
	v.PatientObservation = NewOULR24PatientObservationSlice(input.Index(5))
	v.Visit = NewOULR24Visit(input.Index(6))
	return v
}

type OULR24Patient struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	ParticipationInformation     []PRT
	AccessRestriction            []ARV
	NotesAndComments             []NTE
	PatientObservation           []OULR24PatientObservation
	Visit                        OULR24Visit
}

// NewOULR24PatientSlice will construct a slice of type OULR24Patient
func NewOULR24PatientSlice(input hl7.HL7Type) []OULR24Patient {
	values := make([]OULR24Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOULR24Patient(input.Index(i))
	}
	return values
}

// NewCCRI17MedicationOrderDetail creates an implementation of CCRI17MedicationOrderDetail
func NewCCRI17MedicationOrderDetail(input hl7.HL7Type) CCRI17MedicationOrderDetail {
	v := CCRI17MedicationOrderDetail{}
	v.PharmacyTreatmentOrder = NewRXO(input.Index(0))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(1))
	v.PharmacyTreatmentComponentOrder = NewRXCSlice(input.Index(2))
	v.MedicationOrderObservation = NewCCRI17MedicationOrderObservationSlice(input.Index(3))
	return v
}

type CCRI17MedicationOrderDetail struct {
	PharmacyTreatmentOrder          RXO
	PharmacyTreatmentRoute          []RXR
	PharmacyTreatmentComponentOrder []RXC
	MedicationOrderObservation      []CCRI17MedicationOrderObservation
}

// NewCCRI17MedicationOrderDetailSlice will construct a slice of type CCRI17MedicationOrderDetail
func NewCCRI17MedicationOrderDetailSlice(input hl7.HL7Type) []CCRI17MedicationOrderDetail {
	values := make([]CCRI17MedicationOrderDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI17MedicationOrderDetail(input.Index(i))
	}
	return values
}

// NewPGLPC7Observation creates an implementation of PGLPC7Observation
func NewPGLPC7Observation(input hl7.HL7Type) PGLPC7Observation {
	v := PGLPC7Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type PGLPC7Observation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewPGLPC7ObservationSlice will construct a slice of type PGLPC7Observation
func NewPGLPC7ObservationSlice(input hl7.HL7Type) []PGLPC7Observation {
	values := make([]PGLPC7Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPGLPC7Observation(input.Index(i))
	}
	return values
}

// NewPPPPCDPatientVisit creates an implementation of PPPPCDPatientVisit
func NewPPPPCDPatientVisit(input hl7.HL7Type) PPPPCDPatientVisit {
	v := PPPPCDPatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	return v
}

type PPPPCDPatientVisit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
}

// NewPPPPCDPatientVisitSlice will construct a slice of type PPPPCDPatientVisit
func NewPPPPCDPatientVisitSlice(input hl7.HL7Type) []PPPPCDPatientVisit {
	values := make([]PPPPCDPatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPPPCDPatientVisit(input.Index(i))
	}
	return values
}

// NewCSUC12StudyObservation creates an implementation of CSUC12StudyObservation
func NewCSUC12StudyObservation(input hl7.HL7Type) CSUC12StudyObservation {
	v := CSUC12StudyObservation{}
	v.CommonOrder = NewCSUC12CommonOrder(input.Index(0))
	v.ObservationRequest = NewOBR(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.TimingQty = NewCSUC12TimingQtySlice(input.Index(3))
	v.ObservationResult = NewOBX(input.Index(4))
	v.AdditionalParticipationInformation = NewPRTSlice(input.Index(5))
	return v
}

type CSUC12StudyObservation struct {
	CommonOrder                        CSUC12CommonOrder
	ObservationRequest                 OBR
	ParticipationInformation           []PRT
	TimingQty                          []CSUC12TimingQty
	ObservationResult                  OBX
	AdditionalParticipationInformation []PRT
}

// NewCSUC12StudyObservationSlice will construct a slice of type CSUC12StudyObservation
func NewCSUC12StudyObservationSlice(input hl7.HL7Type) []CSUC12StudyObservation {
	values := make([]CSUC12StudyObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCSUC12StudyObservation(input.Index(i))
	}
	return values
}

// NewRDRRDRTimingEncoded creates an implementation of RDRRDRTimingEncoded
func NewRDRRDRTimingEncoded(input hl7.HL7Type) RDRRDRTimingEncoded {
	v := RDRRDRTimingEncoded{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type RDRRDRTimingEncoded struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewRDRRDRTimingEncodedSlice will construct a slice of type RDRRDRTimingEncoded
func NewRDRRDRTimingEncodedSlice(input hl7.HL7Type) []RDRRDRTimingEncoded {
	values := make([]RDRRDRTimingEncoded, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRDRRDRTimingEncoded(input.Index(i))
	}
	return values
}

// NewOMQO42Observation creates an implementation of OMQO42Observation
func NewOMQO42Observation(input hl7.HL7Type) OMQO42Observation {
	v := OMQO42Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type OMQO42Observation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewOMQO42ObservationSlice will construct a slice of type OMQO42Observation
func NewOMQO42ObservationSlice(input hl7.HL7Type) []OMQO42Observation {
	values := make([]OMQO42Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMQO42Observation(input.Index(i))
	}
	return values
}

// NewSIUS19LocationResource creates an implementation of SIUS19LocationResource
func NewSIUS19LocationResource(input hl7.HL7Type) SIUS19LocationResource {
	v := SIUS19LocationResource{}
	v.AppointmentInformationLocationResource = NewAIL(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS19LocationResource struct {
	AppointmentInformationLocationResource AIL
	NotesAndComments                       []NTE
}

// NewSIUS19LocationResourceSlice will construct a slice of type SIUS19LocationResource
func NewSIUS19LocationResourceSlice(input hl7.HL7Type) []SIUS19LocationResource {
	values := make([]SIUS19LocationResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS19LocationResource(input.Index(i))
	}
	return values
}

// NewPEXP07Visit creates an implementation of PEXP07Visit
func NewPEXP07Visit(input hl7.HL7Type) PEXP07Visit {
	v := PEXP07Visit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	return v
}

type PEXP07Visit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ParticipationInformation          []PRT
}

// NewPEXP07VisitSlice will construct a slice of type PEXP07Visit
func NewPEXP07VisitSlice(input hl7.HL7Type) []PEXP07Visit {
	values := make([]PEXP07Visit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPEXP07Visit(input.Index(i))
	}
	return values
}

// NewCCII22RoleClinicalHistory creates an implementation of CCII22RoleClinicalHistory
func NewCCII22RoleClinicalHistory(input hl7.HL7Type) CCII22RoleClinicalHistory {
	v := CCII22RoleClinicalHistory{}
	v.RoleClinicalHistoryObject = NewCCII22RoleClinicalHistoryObject(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type CCII22RoleClinicalHistory struct {
	RoleClinicalHistoryObject CCII22RoleClinicalHistoryObject
	Variance                  []VAR
}

// NewCCII22RoleClinicalHistorySlice will construct a slice of type CCII22RoleClinicalHistory
func NewCCII22RoleClinicalHistorySlice(input hl7.HL7Type) []CCII22RoleClinicalHistory {
	values := make([]CCII22RoleClinicalHistory, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCII22RoleClinicalHistory(input.Index(i))
	}
	return values
}

// NewSRMS08Patient creates an implementation of SRMS08Patient
func NewSRMS08Patient(input hl7.HL7Type) SRMS08Patient {
	v := SRMS08Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientVisit = NewPV1(input.Index(1))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(2))
	v.Observation = NewSRMS08ObservationSlice(input.Index(3))
	v.Diagnosis = NewDG1Slice(input.Index(4))
	return v
}

type SRMS08Patient struct {
	PatientIdentification             PID
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	Observation                       []SRMS08Observation
	Diagnosis                         []DG1
}

// NewSRMS08PatientSlice will construct a slice of type SRMS08Patient
func NewSRMS08PatientSlice(input hl7.HL7Type) []SRMS08Patient {
	values := make([]SRMS08Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS08Patient(input.Index(i))
	}
	return values
}

// NewCCRI16MedicationEncodingObservation creates an implementation of CCRI16MedicationEncodingObservation
func NewCCRI16MedicationEncodingObservation(input hl7.HL7Type) CCRI16MedicationEncodingObservation {
	v := CCRI16MedicationEncodingObservation{}
	v.ObservationResult = NewOBXSlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CCRI16MedicationEncodingObservation struct {
	ObservationResult        []OBX
	ParticipationInformation []PRT
}

// NewCCRI16MedicationEncodingObservationSlice will construct a slice of type CCRI16MedicationEncodingObservation
func NewCCRI16MedicationEncodingObservationSlice(input hl7.HL7Type) []CCRI16MedicationEncodingObservation {
	values := make([]CCRI16MedicationEncodingObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI16MedicationEncodingObservation(input.Index(i))
	}
	return values
}

// NewCCRI17MedicationAdministrationObservation creates an implementation of CCRI17MedicationAdministrationObservation
func NewCCRI17MedicationAdministrationObservation(input hl7.HL7Type) CCRI17MedicationAdministrationObservation {
	v := CCRI17MedicationAdministrationObservation{}
	v.ObservationResult = NewOBXSlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CCRI17MedicationAdministrationObservation struct {
	ObservationResult        []OBX
	ParticipationInformation []PRT
}

// NewCCRI17MedicationAdministrationObservationSlice will construct a slice of type CCRI17MedicationAdministrationObservation
func NewCCRI17MedicationAdministrationObservationSlice(input hl7.HL7Type) []CCRI17MedicationAdministrationObservation {
	values := make([]CCRI17MedicationAdministrationObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI17MedicationAdministrationObservation(input.Index(i))
	}
	return values
}

// NewPPGPCGPathwayRole creates an implementation of PPGPCGPathwayRole
func NewPPGPCGPathwayRole(input hl7.HL7Type) PPGPCGPathwayRole {
	v := PPGPCGPathwayRole{}
	v.Role = NewROL(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type PPGPCGPathwayRole struct {
	Role     ROL
	Variance []VAR
}

// NewPPGPCGPathwayRoleSlice will construct a slice of type PPGPCGPathwayRole
func NewPPGPCGPathwayRoleSlice(input hl7.HL7Type) []PPGPCGPathwayRole {
	values := make([]PPGPCGPathwayRole, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPGPCGPathwayRole(input.Index(i))
	}
	return values
}

// NewRDEO11OrderDetail creates an implementation of RDEO11OrderDetail
func NewRDEO11OrderDetail(input hl7.HL7Type) RDEO11OrderDetail {
	v := RDEO11OrderDetail{}
	v.PharmacyTreatmentOrder = NewRXO(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(3))
	v.Component = NewRDEO11ComponentSlice(input.Index(4))
	return v
}

type RDEO11OrderDetail struct {
	PharmacyTreatmentOrder   RXO
	ParticipationInformation []PRT
	NotesAndComments         []NTE
	PharmacyTreatmentRoute   []RXR
	Component                []RDEO11Component
}

// NewRDEO11OrderDetailSlice will construct a slice of type RDEO11OrderDetail
func NewRDEO11OrderDetailSlice(input hl7.HL7Type) []RDEO11OrderDetail {
	values := make([]RDEO11OrderDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRDEO11OrderDetail(input.Index(i))
	}
	return values
}

// NewBTSO31Timing creates an implementation of BTSO31Timing
func NewBTSO31Timing(input hl7.HL7Type) BTSO31Timing {
	v := BTSO31Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type BTSO31Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewBTSO31TimingSlice will construct a slice of type BTSO31Timing
func NewBTSO31TimingSlice(input hl7.HL7Type) []BTSO31Timing {
	values := make([]BTSO31Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewBTSO31Timing(input.Index(i))
	}
	return values
}

// NewRDEO25OrderDetail creates an implementation of RDEO25OrderDetail
func NewRDEO25OrderDetail(input hl7.HL7Type) RDEO25OrderDetail {
	v := RDEO25OrderDetail{}
	v.PharmacyTreatmentOrder = NewRXO(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(2))
	v.Component = NewRDEO25ComponentSlice(input.Index(3))
	return v
}

type RDEO25OrderDetail struct {
	PharmacyTreatmentOrder RXO
	NotesAndComments       []NTE
	PharmacyTreatmentRoute []RXR
	Component              []RDEO25Component
}

// NewRDEO25OrderDetailSlice will construct a slice of type RDEO25OrderDetail
func NewRDEO25OrderDetailSlice(input hl7.HL7Type) []RDEO25OrderDetail {
	values := make([]RDEO25OrderDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRDEO25OrderDetail(input.Index(i))
	}
	return values
}

// NewCCUI20ClinicalHistoryObservation creates an implementation of CCUI20ClinicalHistoryObservation
func NewCCUI20ClinicalHistoryObservation(input hl7.HL7Type) CCUI20ClinicalHistoryObservation {
	v := CCUI20ClinicalHistoryObservation{}
	v.ObservationResult = NewOBXSlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CCUI20ClinicalHistoryObservation struct {
	ObservationResult        []OBX
	ParticipationInformation []PRT
}

// NewCCUI20ClinicalHistoryObservationSlice will construct a slice of type CCUI20ClinicalHistoryObservation
func NewCCUI20ClinicalHistoryObservationSlice(input hl7.HL7Type) []CCUI20ClinicalHistoryObservation {
	values := make([]CCUI20ClinicalHistoryObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCUI20ClinicalHistoryObservation(input.Index(i))
	}
	return values
}

// NewRGVO15OrderDetail creates an implementation of RGVO15OrderDetail
func NewRGVO15OrderDetail(input hl7.HL7Type) RGVO15OrderDetail {
	v := RGVO15OrderDetail{}
	v.PharmacyTreatmentOrder = NewRXO(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.OrderDetailSupplement = NewRGVO15OrderDetailSupplement(input.Index(2))
	return v
}

type RGVO15OrderDetail struct {
	PharmacyTreatmentOrder   RXO
	ParticipationInformation []PRT
	OrderDetailSupplement    RGVO15OrderDetailSupplement
}

// NewRGVO15OrderDetailSlice will construct a slice of type RGVO15OrderDetail
func NewRGVO15OrderDetailSlice(input hl7.HL7Type) []RGVO15OrderDetail {
	values := make([]RGVO15OrderDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRGVO15OrderDetail(input.Index(i))
	}
	return values
}

// NewSIUS20GeneralResource creates an implementation of SIUS20GeneralResource
func NewSIUS20GeneralResource(input hl7.HL7Type) SIUS20GeneralResource {
	v := SIUS20GeneralResource{}
	v.AppointmentInformationGeneralResource = NewAIG(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS20GeneralResource struct {
	AppointmentInformationGeneralResource AIG
	NotesAndComments                      []NTE
}

// NewSIUS20GeneralResourceSlice will construct a slice of type SIUS20GeneralResource
func NewSIUS20GeneralResourceSlice(input hl7.HL7Type) []SIUS20GeneralResource {
	values := make([]SIUS20GeneralResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS20GeneralResource(input.Index(i))
	}
	return values
}

// NewRPII04Insurance creates an implementation of RPII04Insurance
func NewRPII04Insurance(input hl7.HL7Type) RPII04Insurance {
	v := RPII04Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3(input.Index(2))
	return v
}

type RPII04Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification IN3
}

// NewRPII04InsuranceSlice will construct a slice of type RPII04Insurance
func NewRPII04InsuranceSlice(input hl7.HL7Type) []RPII04Insurance {
	values := make([]RPII04Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRPII04Insurance(input.Index(i))
	}
	return values
}

// NewRSPZ90Specimen creates an implementation of RSPZ90Specimen
func NewRSPZ90Specimen(input hl7.HL7Type) RSPZ90Specimen {
	v := RSPZ90Specimen{}
	v.Specimen = NewSPM(input.Index(0))
	v.ObservationResult = NewOBXSlice(input.Index(1))
	return v
}

type RSPZ90Specimen struct {
	Specimen          SPM
	ObservationResult []OBX
}

// NewRSPZ90SpecimenSlice will construct a slice of type RSPZ90Specimen
func NewRSPZ90SpecimenSlice(input hl7.HL7Type) []RSPZ90Specimen {
	values := make([]RSPZ90Specimen, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPZ90Specimen(input.Index(i))
	}
	return values
}

// NewCRMC04Patient creates an implementation of CRMC04Patient
func NewCRMC04Patient(input hl7.HL7Type) CRMC04Patient {
	v := CRMC04Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.AccessRestriction = NewARVSlice(input.Index(2))
	v.PatientVisit = NewCRMC04PatientVisit(input.Index(3))
	v.ClinicalStudyRegistration = NewCSR(input.Index(4))
	v.ClinicalStudyPhase = NewCSPSlice(input.Index(5))
	return v
}

type CRMC04Patient struct {
	PatientIdentification     PID
	ParticipationInformation  []PRT
	AccessRestriction         []ARV
	PatientVisit              CRMC04PatientVisit
	ClinicalStudyRegistration CSR
	ClinicalStudyPhase        []CSP
}

// NewCRMC04PatientSlice will construct a slice of type CRMC04Patient
func NewCRMC04PatientSlice(input hl7.HL7Type) []CRMC04Patient {
	values := make([]CRMC04Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCRMC04Patient(input.Index(i))
	}
	return values
}

// NewSRRS09LocationResource creates an implementation of SRRS09LocationResource
func NewSRRS09LocationResource(input hl7.HL7Type) SRRS09LocationResource {
	v := SRRS09LocationResource{}
	v.AppointmentInformationLocationResource = NewAIL(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SRRS09LocationResource struct {
	AppointmentInformationLocationResource AIL
	NotesAndComments                       []NTE
}

// NewSRRS09LocationResourceSlice will construct a slice of type SRRS09LocationResource
func NewSRRS09LocationResourceSlice(input hl7.HL7Type) []SRRS09LocationResource {
	values := make([]SRRS09LocationResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS09LocationResource(input.Index(i))
	}
	return values
}

// NewCCMI21ResourceDetail creates an implementation of CCMI21ResourceDetail
func NewCCMI21ResourceDetail(input hl7.HL7Type) CCMI21ResourceDetail {
	v := CCMI21ResourceDetail{}
	v.ResourceObject = NewCCMI21ResourceObject(input.Index(0))
	v.ResourceObservation = NewCCMI21ResourceObservationSlice(input.Index(1))
	return v
}

type CCMI21ResourceDetail struct {
	ResourceObject      CCMI21ResourceObject
	ResourceObservation []CCMI21ResourceObservation
}

// NewCCMI21ResourceDetailSlice will construct a slice of type CCMI21ResourceDetail
func NewCCMI21ResourceDetailSlice(input hl7.HL7Type) []CCMI21ResourceDetail {
	values := make([]CCMI21ResourceDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCMI21ResourceDetail(input.Index(i))
	}
	return values
}

// NewCCUI20RoleProblem creates an implementation of CCUI20RoleProblem
func NewCCUI20RoleProblem(input hl7.HL7Type) CCUI20RoleProblem {
	v := CCUI20RoleProblem{}
	v.RoleProblemObject = NewCCUI20RoleProblemObject(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type CCUI20RoleProblem struct {
	RoleProblemObject CCUI20RoleProblemObject
	Variance          []VAR
}

// NewCCUI20RoleProblemSlice will construct a slice of type CCUI20RoleProblem
func NewCCUI20RoleProblemSlice(input hl7.HL7Type) []CCUI20RoleProblem {
	values := make([]CCUI20RoleProblem, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCUI20RoleProblem(input.Index(i))
	}
	return values
}

// NewRRGO16Response creates an implementation of RRGO16Response
func NewRRGO16Response(input hl7.HL7Type) RRGO16Response {
	v := RRGO16Response{}
	v.Patient = NewRRGO16Patient(input.Index(0))
	v.Order = NewRRGO16OrderSlice(input.Index(1))
	return v
}

type RRGO16Response struct {
	Patient RRGO16Patient
	Order   []RRGO16Order
}

// NewRRGO16ResponseSlice will construct a slice of type RRGO16Response
func NewRRGO16ResponseSlice(input hl7.HL7Type) []RRGO16Response {
	values := make([]RRGO16Response, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRRGO16Response(input.Index(i))
	}
	return values
}

// NewORLO40Order creates an implementation of ORLO40Order
func NewORLO40Order(input hl7.HL7Type) ORLO40Order {
	v := ORLO40Order{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.Timing = NewORLO40TimingSlice(input.Index(2))
	v.ObservationRequest = NewORLO40ObservationRequest(input.Index(3))
	return v
}

type ORLO40Order struct {
	CommonOrder              ORC
	ParticipationInformation []PRT
	Timing                   []ORLO40Timing
	ObservationRequest       ORLO40ObservationRequest
}

// NewORLO40OrderSlice will construct a slice of type ORLO40Order
func NewORLO40OrderSlice(input hl7.HL7Type) []ORLO40Order {
	values := make([]ORLO40Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORLO40Order(input.Index(i))
	}
	return values
}

// NewOPUR25AccessionDetail creates an implementation of OPUR25AccessionDetail
func NewOPUR25AccessionDetail(input hl7.HL7Type) OPUR25AccessionDetail {
	v := OPUR25AccessionDetail{}
	v.NextOfKinAssociatedParties = NewNK1Slice(input.Index(0))
	v.Patient = NewOPUR25Patient(input.Index(1))
	v.Specimen = NewOPUR25SpecimenSlice(input.Index(2))
	return v
}

type OPUR25AccessionDetail struct {
	NextOfKinAssociatedParties []NK1
	Patient                    OPUR25Patient
	Specimen                   []OPUR25Specimen
}

// NewOPUR25AccessionDetailSlice will construct a slice of type OPUR25AccessionDetail
func NewOPUR25AccessionDetailSlice(input hl7.HL7Type) []OPUR25AccessionDetail {
	values := make([]OPUR25AccessionDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOPUR25AccessionDetail(input.Index(i))
	}
	return values
}

// NewPPPPCCOrder creates an implementation of PPPPCCOrder
func NewPPPPCCOrder(input hl7.HL7Type) PPPPCCOrder {
	v := PPPPCCOrder{}
	v.CommonOrder = NewORC(input.Index(0))
	v.OrderDetail = NewPPPPCCOrderDetail(input.Index(1))
	return v
}

type PPPPCCOrder struct {
	CommonOrder ORC
	OrderDetail PPPPCCOrderDetail
}

// NewPPPPCCOrderSlice will construct a slice of type PPPPCCOrder
func NewPPPPCCOrderSlice(input hl7.HL7Type) []PPPPCCOrder {
	values := make([]PPPPCCOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPPPCCOrder(input.Index(i))
	}
	return values
}

// NewRSPZ86Timing creates an implementation of RSPZ86Timing
func NewRSPZ86Timing(input hl7.HL7Type) RSPZ86Timing {
	v := RSPZ86Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type RSPZ86Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewRSPZ86TimingSlice will construct a slice of type RSPZ86Timing
func NewRSPZ86TimingSlice(input hl7.HL7Type) []RSPZ86Timing {
	values := make([]RSPZ86Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPZ86Timing(input.Index(i))
	}
	return values
}

// NewRRII15PatientVisit creates an implementation of RRII15PatientVisit
func NewRRII15PatientVisit(input hl7.HL7Type) RRII15PatientVisit {
	v := RRII15PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	return v
}

type RRII15PatientVisit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
}

// NewRRII15PatientVisitSlice will construct a slice of type RRII15PatientVisit
func NewRRII15PatientVisitSlice(input hl7.HL7Type) []RRII15PatientVisit {
	values := make([]RRII15PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRRII15PatientVisit(input.Index(i))
	}
	return values
}

// NewCCMI21MedicationHistory creates an implementation of CCMI21MedicationHistory
func NewCCMI21MedicationHistory(input hl7.HL7Type) CCMI21MedicationHistory {
	v := CCMI21MedicationHistory{}
	v.CommonOrder = NewORC(input.Index(0))
	v.MedicationOrderDetail = NewCCMI21MedicationOrderDetail(input.Index(1))
	v.MedicationEncodingDetail = NewCCMI21MedicationEncodingDetail(input.Index(2))
	v.MedicationAdministrationDetail = NewCCMI21MedicationAdministrationDetailSlice(input.Index(3))
	v.ClinicalTrialIdentification = NewCTISlice(input.Index(4))
	return v
}

type CCMI21MedicationHistory struct {
	CommonOrder                    ORC
	MedicationOrderDetail          CCMI21MedicationOrderDetail
	MedicationEncodingDetail       CCMI21MedicationEncodingDetail
	MedicationAdministrationDetail []CCMI21MedicationAdministrationDetail
	ClinicalTrialIdentification    []CTI
}

// NewCCMI21MedicationHistorySlice will construct a slice of type CCMI21MedicationHistory
func NewCCMI21MedicationHistorySlice(input hl7.HL7Type) []CCMI21MedicationHistory {
	values := make([]CCMI21MedicationHistory, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCMI21MedicationHistory(input.Index(i))
	}
	return values
}

// NewDFTP11FinancialObservation creates an implementation of DFTP11FinancialObservation
func NewDFTP11FinancialObservation(input hl7.HL7Type) DFTP11FinancialObservation {
	v := DFTP11FinancialObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type DFTP11FinancialObservation struct {
	ObservationResult OBX
	NotesAndComments  []NTE
}

// NewDFTP11FinancialObservationSlice will construct a slice of type DFTP11FinancialObservation
func NewDFTP11FinancialObservationSlice(input hl7.HL7Type) []DFTP11FinancialObservation {
	values := make([]DFTP11FinancialObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewDFTP11FinancialObservation(input.Index(i))
	}
	return values
}

// NewMDMT06Observation creates an implementation of MDMT06Observation
func NewMDMT06Observation(input hl7.HL7Type) MDMT06Observation {
	v := MDMT06Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type MDMT06Observation struct {
	ObservationResult OBX
	NotesAndComments  []NTE
}

// NewMDMT06ObservationSlice will construct a slice of type MDMT06Observation
func NewMDMT06ObservationSlice(input hl7.HL7Type) []MDMT06Observation {
	values := make([]MDMT06Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMDMT06Observation(input.Index(i))
	}
	return values
}

// NewMDMT07CommonOrder creates an implementation of MDMT07CommonOrder
func NewMDMT07CommonOrder(input hl7.HL7Type) MDMT07CommonOrder {
	v := MDMT07CommonOrder{}
	v.CommonOrder = NewORC(input.Index(0))
	v.Timing = NewMDMT07TimingSlice(input.Index(1))
	v.ObservationRequest = NewOBR(input.Index(2))
	v.NotesAndComments = NewNTESlice(input.Index(3))
	return v
}

type MDMT07CommonOrder struct {
	CommonOrder        ORC
	Timing             []MDMT07Timing
	ObservationRequest OBR
	NotesAndComments   []NTE
}

// NewMDMT07CommonOrderSlice will construct a slice of type MDMT07CommonOrder
func NewMDMT07CommonOrderSlice(input hl7.HL7Type) []MDMT07CommonOrder {
	values := make([]MDMT07CommonOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMDMT07CommonOrder(input.Index(i))
	}
	return values
}

// NewORUR30PatientObservation creates an implementation of ORUR30PatientObservation
func NewORUR30PatientObservation(input hl7.HL7Type) ORUR30PatientObservation {
	v := ORUR30PatientObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type ORUR30PatientObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewORUR30PatientObservationSlice will construct a slice of type ORUR30PatientObservation
func NewORUR30PatientObservationSlice(input hl7.HL7Type) []ORUR30PatientObservation {
	values := make([]ORUR30PatientObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORUR30PatientObservation(input.Index(i))
	}
	return values
}

// NewPPRPC1GoalRole creates an implementation of PPRPC1GoalRole
func NewPPRPC1GoalRole(input hl7.HL7Type) PPRPC1GoalRole {
	v := PPRPC1GoalRole{}
	v.Role = NewROL(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type PPRPC1GoalRole struct {
	Role     ROL
	Variance []VAR
}

// NewPPRPC1GoalRoleSlice will construct a slice of type PPRPC1GoalRole
func NewPPRPC1GoalRoleSlice(input hl7.HL7Type) []PPRPC1GoalRole {
	values := make([]PPRPC1GoalRole, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPRPC1GoalRole(input.Index(i))
	}
	return values
}

// NewADTA42Patient creates an implementation of ADTA42Patient
func NewADTA42Patient(input hl7.HL7Type) ADTA42Patient {
	v := ADTA42Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.MergePatientInformation = NewMRG(input.Index(2))
	v.PatientVisit = NewPV1(input.Index(3))
	return v
}

type ADTA42Patient struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	MergePatientInformation      MRG
	PatientVisit                 PV1
}

// NewADTA42PatientSlice will construct a slice of type ADTA42Patient
func NewADTA42PatientSlice(input hl7.HL7Type) []ADTA42Patient {
	values := make([]ADTA42Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewADTA42Patient(input.Index(i))
	}
	return values
}

// NewSIUS15Service creates an implementation of SIUS15Service
func NewSIUS15Service(input hl7.HL7Type) SIUS15Service {
	v := SIUS15Service{}
	v.AppointmentInformation = NewAIS(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS15Service struct {
	AppointmentInformation AIS
	NotesAndComments       []NTE
}

// NewSIUS15ServiceSlice will construct a slice of type SIUS15Service
func NewSIUS15ServiceSlice(input hl7.HL7Type) []SIUS15Service {
	values := make([]SIUS15Service, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS15Service(input.Index(i))
	}
	return values
}

// NewCQUI19RoleProblemObject creates an implementation of CQUI19RoleProblemObject
func NewCQUI19RoleProblemObject(input hl7.HL7Type) CQUI19RoleProblemObject {
	v := CQUI19RoleProblemObject{}
	v.Role = NewROL(input.Index(0))
	v.ProviderData = NewPRD(input.Index(1))
	return v
}

type CQUI19RoleProblemObject struct {
	Role         ROL
	ProviderData PRD
}

// NewCQUI19RoleProblemObjectSlice will construct a slice of type CQUI19RoleProblemObject
func NewCQUI19RoleProblemObjectSlice(input hl7.HL7Type) []CQUI19RoleProblemObject {
	values := make([]CQUI19RoleProblemObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCQUI19RoleProblemObject(input.Index(i))
	}
	return values
}

// NewSRRS04Patient creates an implementation of SRRS04Patient
func NewSRRS04Patient(input hl7.HL7Type) SRRS04Patient {
	v := SRRS04Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientVisit = NewPV1(input.Index(1))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(2))
	v.Diagnosis = NewDG1Slice(input.Index(3))
	return v
}

type SRRS04Patient struct {
	PatientIdentification             PID
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	Diagnosis                         []DG1
}

// NewSRRS04PatientSlice will construct a slice of type SRRS04Patient
func NewSRRS04PatientSlice(input hl7.HL7Type) []SRRS04Patient {
	values := make([]SRRS04Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS04Patient(input.Index(i))
	}
	return values
}

// NewRGVO15Give creates an implementation of RGVO15Give
func NewRGVO15Give(input hl7.HL7Type) RGVO15Give {
	v := RGVO15Give{}
	v.PharmacyTreatmentGive = NewRXG(input.Index(0))
	v.TimingGive = NewRGVO15TimingGiveSlice(input.Index(1))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(2))
	v.PharmacyTreatmentComponentOrder = NewRXCSlice(input.Index(3))
	v.CumulativeDosage = NewCDO(input.Index(4))
	v.Observation = NewRGVO15ObservationSlice(input.Index(5))
	return v
}

type RGVO15Give struct {
	PharmacyTreatmentGive           RXG
	TimingGive                      []RGVO15TimingGive
	PharmacyTreatmentRoute          []RXR
	PharmacyTreatmentComponentOrder []RXC
	CumulativeDosage                CDO
	Observation                     []RGVO15Observation
}

// NewRGVO15GiveSlice will construct a slice of type RGVO15Give
func NewRGVO15GiveSlice(input hl7.HL7Type) []RGVO15Give {
	values := make([]RGVO15Give, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRGVO15Give(input.Index(i))
	}
	return values
}

// NewRASO17Observation creates an implementation of RASO17Observation
func NewRASO17Observation(input hl7.HL7Type) RASO17Observation {
	v := RASO17Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type RASO17Observation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewRASO17ObservationSlice will construct a slice of type RASO17Observation
func NewRASO17ObservationSlice(input hl7.HL7Type) []RASO17Observation {
	values := make([]RASO17Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRASO17Observation(input.Index(i))
	}
	return values
}

// NewOPUR25PatientObservation creates an implementation of OPUR25PatientObservation
func NewOPUR25PatientObservation(input hl7.HL7Type) OPUR25PatientObservation {
	v := OPUR25PatientObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type OPUR25PatientObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewOPUR25PatientObservationSlice will construct a slice of type OPUR25PatientObservation
func NewOPUR25PatientObservationSlice(input hl7.HL7Type) []OPUR25PatientObservation {
	values := make([]OPUR25PatientObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOPUR25PatientObservation(input.Index(i))
	}
	return values
}

// NewRRII14ResultsNotes creates an implementation of RRII14ResultsNotes
func NewRRII14ResultsNotes(input hl7.HL7Type) RRII14ResultsNotes {
	v := RRII14ResultsNotes{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type RRII14ResultsNotes struct {
	ObservationResult OBX
	NotesAndComments  []NTE
}

// NewRRII14ResultsNotesSlice will construct a slice of type RRII14ResultsNotes
func NewRRII14ResultsNotesSlice(input hl7.HL7Type) []RRII14ResultsNotes {
	values := make([]RRII14ResultsNotes, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRRII14ResultsNotes(input.Index(i))
	}
	return values
}

// NewSRRS11Resources creates an implementation of SRRS11Resources
func NewSRRS11Resources(input hl7.HL7Type) SRRS11Resources {
	v := SRRS11Resources{}
	v.ResourceGroup = NewRGS(input.Index(0))
	v.Service = NewSRRS11ServiceSlice(input.Index(1))
	v.GeneralResource = NewSRRS11GeneralResourceSlice(input.Index(2))
	v.LocationResource = NewSRRS11LocationResourceSlice(input.Index(3))
	v.PersonnelResource = NewSRRS11PersonnelResourceSlice(input.Index(4))
	return v
}

type SRRS11Resources struct {
	ResourceGroup     RGS
	Service           []SRRS11Service
	GeneralResource   []SRRS11GeneralResource
	LocationResource  []SRRS11LocationResource
	PersonnelResource []SRRS11PersonnelResource
}

// NewSRRS11ResourcesSlice will construct a slice of type SRRS11Resources
func NewSRRS11ResourcesSlice(input hl7.HL7Type) []SRRS11Resources {
	values := make([]SRRS11Resources, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS11Resources(input.Index(i))
	}
	return values
}

// NewREFI15AuthorizationContact2 creates an implementation of REFI15AuthorizationContact2
func NewREFI15AuthorizationContact2(input hl7.HL7Type) REFI15AuthorizationContact2 {
	v := REFI15AuthorizationContact2{}
	v.AuthorizationInformation = NewAUT(input.Index(0))
	v.ContactData = NewCTD(input.Index(1))
	return v
}

type REFI15AuthorizationContact2 struct {
	AuthorizationInformation AUT
	ContactData              CTD
}

// NewREFI15AuthorizationContact2Slice will construct a slice of type REFI15AuthorizationContact2
func NewREFI15AuthorizationContact2Slice(input hl7.HL7Type) []REFI15AuthorizationContact2 {
	values := make([]REFI15AuthorizationContact2, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewREFI15AuthorizationContact2(input.Index(i))
	}
	return values
}

// NewRSPZ88Component creates an implementation of RSPZ88Component
func NewRSPZ88Component(input hl7.HL7Type) RSPZ88Component {
	v := RSPZ88Component{}
	v.PharmacyTreatmentComponentOrder = NewRXCSlice(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type RSPZ88Component struct {
	PharmacyTreatmentComponentOrder []RXC
	NotesAndComments                []NTE
}

// NewRSPZ88ComponentSlice will construct a slice of type RSPZ88Component
func NewRSPZ88ComponentSlice(input hl7.HL7Type) []RSPZ88Component {
	values := make([]RSPZ88Component, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPZ88Component(input.Index(i))
	}
	return values
}

// NewRQAI11Procedure creates an implementation of RQAI11Procedure
func NewRQAI11Procedure(input hl7.HL7Type) RQAI11Procedure {
	v := RQAI11Procedure{}
	v.Procedures = NewPR1(input.Index(0))
	v.Authorization2 = NewRQAI11Authorization2(input.Index(1))
	return v
}

type RQAI11Procedure struct {
	Procedures     PR1
	Authorization2 RQAI11Authorization2
}

// NewRQAI11ProcedureSlice will construct a slice of type RQAI11Procedure
func NewRQAI11ProcedureSlice(input hl7.HL7Type) []RQAI11Procedure {
	values := make([]RQAI11Procedure, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQAI11Procedure(input.Index(i))
	}
	return values
}

// NewRRII13Procedure creates an implementation of RRII13Procedure
func NewRRII13Procedure(input hl7.HL7Type) RRII13Procedure {
	v := RRII13Procedure{}
	v.Procedures = NewPR1(input.Index(0))
	v.AuthorizationContact = NewRRII13AuthorizationContact(input.Index(1))
	return v
}

type RRII13Procedure struct {
	Procedures           PR1
	AuthorizationContact RRII13AuthorizationContact
}

// NewRRII13ProcedureSlice will construct a slice of type RRII13Procedure
func NewRRII13ProcedureSlice(input hl7.HL7Type) []RRII13Procedure {
	values := make([]RRII13Procedure, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRRII13Procedure(input.Index(i))
	}
	return values
}

// NewRSPZ82OrderDetail creates an implementation of RSPZ82OrderDetail
func NewRSPZ82OrderDetail(input hl7.HL7Type) RSPZ82OrderDetail {
	v := RSPZ82OrderDetail{}
	v.PharmacyTreatmentOrder = NewRXO(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(2))
	v.Treatment = NewRSPZ82Treatment(input.Index(3))
	return v
}

type RSPZ82OrderDetail struct {
	PharmacyTreatmentOrder RXO
	NotesAndComments       []NTE
	PharmacyTreatmentRoute []RXR
	Treatment              RSPZ82Treatment
}

// NewRSPZ82OrderDetailSlice will construct a slice of type RSPZ82OrderDetail
func NewRSPZ82OrderDetailSlice(input hl7.HL7Type) []RSPZ82OrderDetail {
	values := make([]RSPZ82OrderDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPZ82OrderDetail(input.Index(i))
	}
	return values
}

// NewRPAI09Results creates an implementation of RPAI09Results
func NewRPAI09Results(input hl7.HL7Type) RPAI09Results {
	v := RPAI09Results{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type RPAI09Results struct {
	ObservationResult OBX
	NotesAndComments  []NTE
}

// NewRPAI09ResultsSlice will construct a slice of type RPAI09Results
func NewRPAI09ResultsSlice(input hl7.HL7Type) []RPAI09Results {
	values := make([]RPAI09Results, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRPAI09Results(input.Index(i))
	}
	return values
}

// NewSIUS19Service creates an implementation of SIUS19Service
func NewSIUS19Service(input hl7.HL7Type) SIUS19Service {
	v := SIUS19Service{}
	v.AppointmentInformation = NewAIS(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS19Service struct {
	AppointmentInformation AIS
	NotesAndComments       []NTE
}

// NewSIUS19ServiceSlice will construct a slice of type SIUS19Service
func NewSIUS19ServiceSlice(input hl7.HL7Type) []SIUS19Service {
	values := make([]SIUS19Service, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS19Service(input.Index(i))
	}
	return values
}

// NewSIUS12LocationResource creates an implementation of SIUS12LocationResource
func NewSIUS12LocationResource(input hl7.HL7Type) SIUS12LocationResource {
	v := SIUS12LocationResource{}
	v.AppointmentInformationLocationResource = NewAIL(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS12LocationResource struct {
	AppointmentInformationLocationResource AIL
	NotesAndComments                       []NTE
}

// NewSIUS12LocationResourceSlice will construct a slice of type SIUS12LocationResource
func NewSIUS12LocationResourceSlice(input hl7.HL7Type) []SIUS12LocationResource {
	values := make([]SIUS12LocationResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS12LocationResource(input.Index(i))
	}
	return values
}

// NewCCMI21RolePathwayObject creates an implementation of CCMI21RolePathwayObject
func NewCCMI21RolePathwayObject(input hl7.HL7Type) CCMI21RolePathwayObject {
	v := CCMI21RolePathwayObject{}
	v.Role = NewROL(input.Index(0))
	v.ProviderData = NewPRD(input.Index(1))
	return v
}

type CCMI21RolePathwayObject struct {
	Role         ROL
	ProviderData PRD
}

// NewCCMI21RolePathwayObjectSlice will construct a slice of type CCMI21RolePathwayObject
func NewCCMI21RolePathwayObjectSlice(input hl7.HL7Type) []CCMI21RolePathwayObject {
	values := make([]CCMI21RolePathwayObject, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCMI21RolePathwayObject(input.Index(i))
	}
	return values
}

// NewCCRI18PatientVisits creates an implementation of CCRI18PatientVisits
func NewCCRI18PatientVisits(input hl7.HL7Type) CCRI18PatientVisits {
	v := CCRI18PatientVisits{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	return v
}

type CCRI18PatientVisits struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
}

// NewCCRI18PatientVisitsSlice will construct a slice of type CCRI18PatientVisits
func NewCCRI18PatientVisitsSlice(input hl7.HL7Type) []CCRI18PatientVisits {
	values := make([]CCRI18PatientVisits, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI18PatientVisits(input.Index(i))
	}
	return values
}

// NewSRRS02LocationResource creates an implementation of SRRS02LocationResource
func NewSRRS02LocationResource(input hl7.HL7Type) SRRS02LocationResource {
	v := SRRS02LocationResource{}
	v.AppointmentInformationLocationResource = NewAIL(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SRRS02LocationResource struct {
	AppointmentInformationLocationResource AIL
	NotesAndComments                       []NTE
}

// NewSRRS02LocationResourceSlice will construct a slice of type SRRS02LocationResource
func NewSRRS02LocationResourceSlice(input hl7.HL7Type) []SRRS02LocationResource {
	values := make([]SRRS02LocationResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS02LocationResource(input.Index(i))
	}
	return values
}

// NewREFI14Observation creates an implementation of REFI14Observation
func NewREFI14Observation(input hl7.HL7Type) REFI14Observation {
	v := REFI14Observation{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.ResultsNotes = NewREFI14ResultsNotesSlice(input.Index(2))
	return v
}

type REFI14Observation struct {
	ObservationRequest OBR
	NotesAndComments   []NTE
	ResultsNotes       []REFI14ResultsNotes
}

// NewREFI14ObservationSlice will construct a slice of type REFI14Observation
func NewREFI14ObservationSlice(input hl7.HL7Type) []REFI14Observation {
	values := make([]REFI14Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewREFI14Observation(input.Index(i))
	}
	return values
}

// NewSRRS06Schedule creates an implementation of SRRS06Schedule
func NewSRRS06Schedule(input hl7.HL7Type) SRRS06Schedule {
	v := SRRS06Schedule{}
	v.SchedulingActivityInformation = NewSCH(input.Index(0))
	v.TimingQuantity = NewTQ1Slice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.Patient = NewSRRS06PatientSlice(input.Index(3))
	v.Resources = NewSRRS06ResourcesSlice(input.Index(4))
	return v
}

type SRRS06Schedule struct {
	SchedulingActivityInformation SCH
	TimingQuantity                []TQ1
	NotesAndComments              []NTE
	Patient                       []SRRS06Patient
	Resources                     []SRRS06Resources
}

// NewSRRS06ScheduleSlice will construct a slice of type SRRS06Schedule
func NewSRRS06ScheduleSlice(input hl7.HL7Type) []SRRS06Schedule {
	values := make([]SRRS06Schedule, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS06Schedule(input.Index(i))
	}
	return values
}

// NewRQII02Provider creates an implementation of RQII02Provider
func NewRQII02Provider(input hl7.HL7Type) RQII02Provider {
	v := RQII02Provider{}
	v.ProviderData = NewPRD(input.Index(0))
	v.ContactData = NewCTDSlice(input.Index(1))
	return v
}

type RQII02Provider struct {
	ProviderData PRD
	ContactData  []CTD
}

// NewRQII02ProviderSlice will construct a slice of type RQII02Provider
func NewRQII02ProviderSlice(input hl7.HL7Type) []RQII02Provider {
	values := make([]RQII02Provider, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQII02Provider(input.Index(i))
	}
	return values
}

// NewOMLO21ObservationRequest creates an implementation of OMLO21ObservationRequest
func NewOMLO21ObservationRequest(input hl7.HL7Type) OMLO21ObservationRequest {
	v := OMLO21ObservationRequest{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.TestCodeDetail = NewTCD(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.ParticipationInformation = NewPRTSlice(input.Index(3))
	v.ContactData = NewCTD(input.Index(4))
	v.Diagnosis = NewDG1Slice(input.Index(5))
	v.Observation = NewOMLO21ObservationSlice(input.Index(6))
	v.Specimen = NewOMLO21SpecimenSlice(input.Index(7))
	v.PriorResult = NewOMLO21PriorResultSlice(input.Index(8))
	return v
}

type OMLO21ObservationRequest struct {
	ObservationRequest       OBR
	TestCodeDetail           TCD
	NotesAndComments         []NTE
	ParticipationInformation []PRT
	ContactData              CTD
	Diagnosis                []DG1
	Observation              []OMLO21Observation
	Specimen                 []OMLO21Specimen
	PriorResult              []OMLO21PriorResult
}

// NewOMLO21ObservationRequestSlice will construct a slice of type OMLO21ObservationRequest
func NewOMLO21ObservationRequestSlice(input hl7.HL7Type) []OMLO21ObservationRequest {
	values := make([]OMLO21ObservationRequest, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMLO21ObservationRequest(input.Index(i))
	}
	return values
}

// NewREFI12AuthorizationContact2 creates an implementation of REFI12AuthorizationContact2
func NewREFI12AuthorizationContact2(input hl7.HL7Type) REFI12AuthorizationContact2 {
	v := REFI12AuthorizationContact2{}
	v.AuthorizationInformation = NewAUT(input.Index(0))
	v.ContactData = NewCTD(input.Index(1))
	return v
}

type REFI12AuthorizationContact2 struct {
	AuthorizationInformation AUT
	ContactData              CTD
}

// NewREFI12AuthorizationContact2Slice will construct a slice of type REFI12AuthorizationContact2
func NewREFI12AuthorizationContact2Slice(input hl7.HL7Type) []REFI12AuthorizationContact2 {
	values := make([]REFI12AuthorizationContact2, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewREFI12AuthorizationContact2(input.Index(i))
	}
	return values
}

// NewPPPPCBOrderDetail creates an implementation of PPPPCBOrderDetail
func NewPPPPCBOrderDetail(input hl7.HL7Type) PPPPCBOrderDetail {
	v := PPPPCBOrderDetail{}
	v.Choice = NewPPPPCBChoice(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Variance = NewVARSlice(input.Index(2))
	v.OrderObservation = NewPPPPCBOrderObservationSlice(input.Index(3))
	return v
}

type PPPPCBOrderDetail struct {
	Choice           PPPPCBChoice
	NotesAndComments []NTE
	Variance         []VAR
	OrderObservation []PPPPCBOrderObservation
}

// NewPPPPCBOrderDetailSlice will construct a slice of type PPPPCBOrderDetail
func NewPPPPCBOrderDetailSlice(input hl7.HL7Type) []PPPPCBOrderDetail {
	values := make([]PPPPCBOrderDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPPPCBOrderDetail(input.Index(i))
	}
	return values
}

// NewRTBZ96RowDefinition creates an implementation of RTBZ96RowDefinition
func NewRTBZ96RowDefinition(input hl7.HL7Type) RTBZ96RowDefinition {
	v := RTBZ96RowDefinition{}
	v.TableRowDefinition = NewRDF(input.Index(0))
	v.TableRowData = NewRDTSlice(input.Index(1))
	return v
}

type RTBZ96RowDefinition struct {
	TableRowDefinition RDF
	TableRowData       []RDT
}

// NewRTBZ96RowDefinitionSlice will construct a slice of type RTBZ96RowDefinition
func NewRTBZ96RowDefinitionSlice(input hl7.HL7Type) []RTBZ96RowDefinition {
	values := make([]RTBZ96RowDefinition, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRTBZ96RowDefinition(input.Index(i))
	}
	return values
}

// NewCSUC11StudyPhase creates an implementation of CSUC11StudyPhase
func NewCSUC11StudyPhase(input hl7.HL7Type) CSUC11StudyPhase {
	v := CSUC11StudyPhase{}
	v.ClinicalStudyPhase = NewCSP(input.Index(0))
	v.StudySchedule = NewCSUC11StudyScheduleSlice(input.Index(1))
	return v
}

type CSUC11StudyPhase struct {
	ClinicalStudyPhase CSP
	StudySchedule      []CSUC11StudySchedule
}

// NewCSUC11StudyPhaseSlice will construct a slice of type CSUC11StudyPhase
func NewCSUC11StudyPhaseSlice(input hl7.HL7Type) []CSUC11StudyPhase {
	values := make([]CSUC11StudyPhase, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCSUC11StudyPhase(input.Index(i))
	}
	return values
}

// NewCQUI19Problem creates an implementation of CQUI19Problem
func NewCQUI19Problem(input hl7.HL7Type) CQUI19Problem {
	v := CQUI19Problem{}
	v.ProblemDetails = NewPRB(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	v.RoleProblem = NewCQUI19RoleProblemSlice(input.Index(2))
	v.ProblemObservation = NewCQUI19ProblemObservationSlice(input.Index(3))
	return v
}

type CQUI19Problem struct {
	ProblemDetails     PRB
	Variance           []VAR
	RoleProblem        []CQUI19RoleProblem
	ProblemObservation []CQUI19ProblemObservation
}

// NewCQUI19ProblemSlice will construct a slice of type CQUI19Problem
func NewCQUI19ProblemSlice(input hl7.HL7Type) []CQUI19Problem {
	values := make([]CQUI19Problem, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCQUI19Problem(input.Index(i))
	}
	return values
}

// NewSRMS05Resources creates an implementation of SRMS05Resources
func NewSRMS05Resources(input hl7.HL7Type) SRMS05Resources {
	v := SRMS05Resources{}
	v.ResourceGroup = NewRGS(input.Index(0))
	v.Service = NewSRMS05ServiceSlice(input.Index(1))
	v.GeneralResource = NewSRMS05GeneralResourceSlice(input.Index(2))
	v.LocationResource = NewSRMS05LocationResourceSlice(input.Index(3))
	v.PersonnelResource = NewSRMS05PersonnelResourceSlice(input.Index(4))
	return v
}

type SRMS05Resources struct {
	ResourceGroup     RGS
	Service           []SRMS05Service
	GeneralResource   []SRMS05GeneralResource
	LocationResource  []SRMS05LocationResource
	PersonnelResource []SRMS05PersonnelResource
}

// NewSRMS05ResourcesSlice will construct a slice of type SRMS05Resources
func NewSRMS05ResourcesSlice(input hl7.HL7Type) []SRMS05Resources {
	values := make([]SRMS05Resources, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS05Resources(input.Index(i))
	}
	return values
}

// NewMFNM16Packaging creates an implementation of MFNM16Packaging
func NewMFNM16Packaging(input hl7.HL7Type) MFNM16Packaging {
	v := MFNM16Packaging{}
	v.ItemPackaging = NewPKG(input.Index(0))
	v.PatientChargeCostCenterExceptions = NewPCESlice(input.Index(1))
	return v
}

type MFNM16Packaging struct {
	ItemPackaging                     PKG
	PatientChargeCostCenterExceptions []PCE
}

// NewMFNM16PackagingSlice will construct a slice of type MFNM16Packaging
func NewMFNM16PackagingSlice(input hl7.HL7Type) []MFNM16Packaging {
	values := make([]MFNM16Packaging, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewMFNM16Packaging(input.Index(i))
	}
	return values
}

// NewSIUS18Service creates an implementation of SIUS18Service
func NewSIUS18Service(input hl7.HL7Type) SIUS18Service {
	v := SIUS18Service{}
	v.AppointmentInformation = NewAIS(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS18Service struct {
	AppointmentInformation AIS
	NotesAndComments       []NTE
}

// NewSIUS18ServiceSlice will construct a slice of type SIUS18Service
func NewSIUS18ServiceSlice(input hl7.HL7Type) []SIUS18Service {
	values := make([]SIUS18Service, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS18Service(input.Index(i))
	}
	return values
}

// NewORGO20ObservationGroup creates an implementation of ORGO20ObservationGroup
func NewORGO20ObservationGroup(input hl7.HL7Type) ORGO20ObservationGroup {
	v := ORGO20ObservationGroup{}
	v.ObservationRequest = NewOBR(input.Index(0))
	return v
}

type ORGO20ObservationGroup struct {
	ObservationRequest OBR
}

// NewORGO20ObservationGroupSlice will construct a slice of type ORGO20ObservationGroup
func NewORGO20ObservationGroupSlice(input hl7.HL7Type) []ORGO20ObservationGroup {
	values := make([]ORGO20ObservationGroup, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORGO20ObservationGroup(input.Index(i))
	}
	return values
}

// NewOMSO05PatientVisit creates an implementation of OMSO05PatientVisit
func NewOMSO05PatientVisit(input hl7.HL7Type) OMSO05PatientVisit {
	v := OMSO05PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	return v
}

type OMSO05PatientVisit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ParticipationInformation          []PRT
}

// NewOMSO05PatientVisitSlice will construct a slice of type OMSO05PatientVisit
func NewOMSO05PatientVisitSlice(input hl7.HL7Type) []OMSO05PatientVisit {
	values := make([]OMSO05PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMSO05PatientVisit(input.Index(i))
	}
	return values
}

// NewORLO40Timing creates an implementation of ORLO40Timing
func NewORLO40Timing(input hl7.HL7Type) ORLO40Timing {
	v := ORLO40Timing{}
	v.TimingQuantity = NewTQ1(input.Index(0))
	v.TimingQuantityRelationship = NewTQ2Slice(input.Index(1))
	return v
}

type ORLO40Timing struct {
	TimingQuantity             TQ1
	TimingQuantityRelationship []TQ2
}

// NewORLO40TimingSlice will construct a slice of type ORLO40Timing
func NewORLO40TimingSlice(input hl7.HL7Type) []ORLO40Timing {
	values := make([]ORLO40Timing, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORLO40Timing(input.Index(i))
	}
	return values
}

// NewRASO17OrderDetail creates an implementation of RASO17OrderDetail
func NewRASO17OrderDetail(input hl7.HL7Type) RASO17OrderDetail {
	v := RASO17OrderDetail{}
	v.PharmacyTreatmentOrder = NewRXO(input.Index(0))
	v.OrderDetailSupplement = NewRASO17OrderDetailSupplement(input.Index(1))
	return v
}

type RASO17OrderDetail struct {
	PharmacyTreatmentOrder RXO
	OrderDetailSupplement  RASO17OrderDetailSupplement
}

// NewRASO17OrderDetailSlice will construct a slice of type RASO17OrderDetail
func NewRASO17OrderDetailSlice(input hl7.HL7Type) []RASO17OrderDetail {
	values := make([]RASO17OrderDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRASO17OrderDetail(input.Index(i))
	}
	return values
}

// NewPGLPC8Choice creates an implementation of PGLPC8Choice
func NewPGLPC8Choice(input hl7.HL7Type) PGLPC8Choice {
	v := PGLPC8Choice{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.AnyHl7Segment = NewHxx(input.Index(1))
	return v
}

type PGLPC8Choice struct {
	ObservationRequest OBR
	AnyHl7Segment      Hxx
}

// NewPGLPC8ChoiceSlice will construct a slice of type PGLPC8Choice
func NewPGLPC8ChoiceSlice(input hl7.HL7Type) []PGLPC8Choice {
	values := make([]PGLPC8Choice, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPGLPC8Choice(input.Index(i))
	}
	return values
}

// NewCCII22MedicationHistory creates an implementation of CCII22MedicationHistory
func NewCCII22MedicationHistory(input hl7.HL7Type) CCII22MedicationHistory {
	v := CCII22MedicationHistory{}
	v.CommonOrder = NewORC(input.Index(0))
	v.MedicationOrderDetail = NewCCII22MedicationOrderDetail(input.Index(1))
	v.MedicationEncodingDetail = NewCCII22MedicationEncodingDetail(input.Index(2))
	v.MedicationAdministrationDetail = NewCCII22MedicationAdministrationDetailSlice(input.Index(3))
	v.ClinicalTrialIdentification = NewCTISlice(input.Index(4))
	return v
}

type CCII22MedicationHistory struct {
	CommonOrder                    ORC
	MedicationOrderDetail          CCII22MedicationOrderDetail
	MedicationEncodingDetail       CCII22MedicationEncodingDetail
	MedicationAdministrationDetail []CCII22MedicationAdministrationDetail
	ClinicalTrialIdentification    []CTI
}

// NewCCII22MedicationHistorySlice will construct a slice of type CCII22MedicationHistory
func NewCCII22MedicationHistorySlice(input hl7.HL7Type) []CCII22MedicationHistory {
	values := make([]CCII22MedicationHistory, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCII22MedicationHistory(input.Index(i))
	}
	return values
}

// NewTCRU11TestConfiguration creates an implementation of TCRU11TestConfiguration
func NewTCRU11TestConfiguration(input hl7.HL7Type) TCRU11TestConfiguration {
	v := TCRU11TestConfiguration{}
	v.Specimen = NewSPM(input.Index(0))
	v.TestCodeConfiguration = NewTCCSlice(input.Index(1))
	return v
}

type TCRU11TestConfiguration struct {
	Specimen              SPM
	TestCodeConfiguration []TCC
}

// NewTCRU11TestConfigurationSlice will construct a slice of type TCRU11TestConfiguration
func NewTCRU11TestConfigurationSlice(input hl7.HL7Type) []TCRU11TestConfiguration {
	values := make([]TCRU11TestConfiguration, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewTCRU11TestConfiguration(input.Index(i))
	}
	return values
}

// NewRSPZ86Patient creates an implementation of RSPZ86Patient
func NewRSPZ86Patient(input hl7.HL7Type) RSPZ86Patient {
	v := RSPZ86Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.PatientAllergyInformation = NewAL1Slice(input.Index(3))
	return v
}

type RSPZ86Patient struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	NotesAndComments             []NTE
	PatientAllergyInformation    []AL1
}

// NewRSPZ86PatientSlice will construct a slice of type RSPZ86Patient
func NewRSPZ86PatientSlice(input hl7.HL7Type) []RSPZ86Patient {
	values := make([]RSPZ86Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPZ86Patient(input.Index(i))
	}
	return values
}

// NewRTBZ92RowDefinition creates an implementation of RTBZ92RowDefinition
func NewRTBZ92RowDefinition(input hl7.HL7Type) RTBZ92RowDefinition {
	v := RTBZ92RowDefinition{}
	v.TableRowDefinition = NewRDF(input.Index(0))
	v.TableRowData = NewRDTSlice(input.Index(1))
	return v
}

type RTBZ92RowDefinition struct {
	TableRowDefinition RDF
	TableRowData       []RDT
}

// NewRTBZ92RowDefinitionSlice will construct a slice of type RTBZ92RowDefinition
func NewRTBZ92RowDefinitionSlice(input hl7.HL7Type) []RTBZ92RowDefinition {
	values := make([]RTBZ92RowDefinition, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRTBZ92RowDefinition(input.Index(i))
	}
	return values
}

// NewOPLO37Container creates an implementation of OPLO37Container
func NewOPLO37Container(input hl7.HL7Type) OPLO37Container {
	v := OPLO37Container{}
	v.SpecimenContainerDetail = NewSAC(input.Index(0))
	v.ContainerObservation = NewOPLO37ContainerObservationSlice(input.Index(1))
	return v
}

type OPLO37Container struct {
	SpecimenContainerDetail SAC
	ContainerObservation    []OPLO37ContainerObservation
}

// NewOPLO37ContainerSlice will construct a slice of type OPLO37Container
func NewOPLO37ContainerSlice(input hl7.HL7Type) []OPLO37Container {
	values := make([]OPLO37Container, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOPLO37Container(input.Index(i))
	}
	return values
}

// NewRSPK31OrderDetail creates an implementation of RSPK31OrderDetail
func NewRSPK31OrderDetail(input hl7.HL7Type) RSPK31OrderDetail {
	v := RSPK31OrderDetail{}
	v.PharmacyTreatmentOrder = NewRXO(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(2))
	v.Components = NewRSPK31ComponentsSlice(input.Index(3))
	return v
}

type RSPK31OrderDetail struct {
	PharmacyTreatmentOrder RXO
	NotesAndComments       []NTE
	PharmacyTreatmentRoute []RXR
	Components             []RSPK31Components
}

// NewRSPK31OrderDetailSlice will construct a slice of type RSPK31OrderDetail
func NewRSPK31OrderDetailSlice(input hl7.HL7Type) []RSPK31OrderDetail {
	values := make([]RSPK31OrderDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPK31OrderDetail(input.Index(i))
	}
	return values
}

// NewSRRS11Patient creates an implementation of SRRS11Patient
func NewSRRS11Patient(input hl7.HL7Type) SRRS11Patient {
	v := SRRS11Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientVisit = NewPV1(input.Index(1))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(2))
	v.Diagnosis = NewDG1Slice(input.Index(3))
	return v
}

type SRRS11Patient struct {
	PatientIdentification             PID
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	Diagnosis                         []DG1
}

// NewSRRS11PatientSlice will construct a slice of type SRRS11Patient
func NewSRRS11PatientSlice(input hl7.HL7Type) []SRRS11Patient {
	values := make([]SRRS11Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS11Patient(input.Index(i))
	}
	return values
}

// NewPPPPCDOrder creates an implementation of PPPPCDOrder
func NewPPPPCDOrder(input hl7.HL7Type) PPPPCDOrder {
	v := PPPPCDOrder{}
	v.CommonOrder = NewORC(input.Index(0))
	v.OrderDetail = NewPPPPCDOrderDetail(input.Index(1))
	return v
}

type PPPPCDOrder struct {
	CommonOrder ORC
	OrderDetail PPPPCDOrderDetail
}

// NewPPPPCDOrderSlice will construct a slice of type PPPPCDOrder
func NewPPPPCDOrderSlice(input hl7.HL7Type) []PPPPCDOrder {
	values := make([]PPPPCDOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPPPCDOrder(input.Index(i))
	}
	return values
}

// NewRREO26Order creates an implementation of RREO26Order
func NewRREO26Order(input hl7.HL7Type) RREO26Order {
	v := RREO26Order{}
	v.CommonOrder = NewORC(input.Index(0))
	v.Timing = NewRREO26TimingSlice(input.Index(1))
	v.Encoding = NewRREO26Encoding(input.Index(2))
	v.ParticipationInformation = NewPRTSlice(input.Index(3))
	return v
}

type RREO26Order struct {
	CommonOrder              ORC
	Timing                   []RREO26Timing
	Encoding                 RREO26Encoding
	ParticipationInformation []PRT
}

// NewRREO26OrderSlice will construct a slice of type RREO26Order
func NewRREO26OrderSlice(input hl7.HL7Type) []RREO26Order {
	values := make([]RREO26Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRREO26Order(input.Index(i))
	}
	return values
}

// NewRRII14Observation creates an implementation of RRII14Observation
func NewRRII14Observation(input hl7.HL7Type) RRII14Observation {
	v := RRII14Observation{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.ResultsNotes = NewRRII14ResultsNotesSlice(input.Index(2))
	return v
}

type RRII14Observation struct {
	ObservationRequest OBR
	NotesAndComments   []NTE
	ResultsNotes       []RRII14ResultsNotes
}

// NewRRII14ObservationSlice will construct a slice of type RRII14Observation
func NewRRII14ObservationSlice(input hl7.HL7Type) []RRII14Observation {
	values := make([]RRII14Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRRII14Observation(input.Index(i))
	}
	return values
}

// NewPPRPC3GoalObservation creates an implementation of PPRPC3GoalObservation
func NewPPRPC3GoalObservation(input hl7.HL7Type) PPRPC3GoalObservation {
	v := PPRPC3GoalObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type PPRPC3GoalObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewPPRPC3GoalObservationSlice will construct a slice of type PPRPC3GoalObservation
func NewPPRPC3GoalObservationSlice(input hl7.HL7Type) []PPRPC3GoalObservation {
	values := make([]PPRPC3GoalObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPRPC3GoalObservation(input.Index(i))
	}
	return values
}

// NewRPAI11Visit creates an implementation of RPAI11Visit
func NewRPAI11Visit(input hl7.HL7Type) RPAI11Visit {
	v := RPAI11Visit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	return v
}

type RPAI11Visit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
}

// NewRPAI11VisitSlice will construct a slice of type RPAI11Visit
func NewRPAI11VisitSlice(input hl7.HL7Type) []RPAI11Visit {
	values := make([]RPAI11Visit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRPAI11Visit(input.Index(i))
	}
	return values
}

// NewORLO34Response creates an implementation of ORLO34Response
func NewORLO34Response(input hl7.HL7Type) ORLO34Response {
	v := ORLO34Response{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.AccessRestriction = NewARV(input.Index(2))
	v.Specimen = NewORLO34SpecimenSlice(input.Index(3))
	return v
}

type ORLO34Response struct {
	PatientIdentification    PID
	ParticipationInformation []PRT
	AccessRestriction        ARV
	Specimen                 []ORLO34Specimen
}

// NewORLO34ResponseSlice will construct a slice of type ORLO34Response
func NewORLO34ResponseSlice(input hl7.HL7Type) []ORLO34Response {
	values := make([]ORLO34Response, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORLO34Response(input.Index(i))
	}
	return values
}

// NewDFTP11Observation creates an implementation of DFTP11Observation
func NewDFTP11Observation(input hl7.HL7Type) DFTP11Observation {
	v := DFTP11Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type DFTP11Observation struct {
	ObservationResult OBX
	NotesAndComments  []NTE
}

// NewDFTP11ObservationSlice will construct a slice of type DFTP11Observation
func NewDFTP11ObservationSlice(input hl7.HL7Type) []DFTP11Observation {
	values := make([]DFTP11Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewDFTP11Observation(input.Index(i))
	}
	return values
}

// NewOPLO37OrderPrior creates an implementation of OPLO37OrderPrior
func NewOPLO37OrderPrior(input hl7.HL7Type) OPLO37OrderPrior {
	v := OPLO37OrderPrior{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.CommonOrder = NewORC(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.Timing2 = NewOPLO37Timing2(input.Index(3))
	v.ObservationResultGroup = NewOPLO37ObservationResultGroupSlice(input.Index(4))
	return v
}

type OPLO37OrderPrior struct {
	ObservationRequest       OBR
	CommonOrder              ORC
	ParticipationInformation []PRT
	Timing2                  OPLO37Timing2
	ObservationResultGroup   []OPLO37ObservationResultGroup
}

// NewOPLO37OrderPriorSlice will construct a slice of type OPLO37OrderPrior
func NewOPLO37OrderPriorSlice(input hl7.HL7Type) []OPLO37OrderPrior {
	values := make([]OPLO37OrderPrior, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOPLO37OrderPrior(input.Index(i))
	}
	return values
}

// NewRDSO13OrderDetailSupplement creates an implementation of RDSO13OrderDetailSupplement
func NewRDSO13OrderDetailSupplement(input hl7.HL7Type) RDSO13OrderDetailSupplement {
	v := RDSO13OrderDetailSupplement{}
	v.NotesAndComments = NewNTESlice(input.Index(0))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(1))
	v.Component = NewRDSO13ComponentSlice(input.Index(2))
	return v
}

type RDSO13OrderDetailSupplement struct {
	NotesAndComments       []NTE
	PharmacyTreatmentRoute []RXR
	Component              []RDSO13Component
}

// NewRDSO13OrderDetailSupplementSlice will construct a slice of type RDSO13OrderDetailSupplement
func NewRDSO13OrderDetailSupplementSlice(input hl7.HL7Type) []RDSO13OrderDetailSupplement {
	values := make([]RDSO13OrderDetailSupplement, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRDSO13OrderDetailSupplement(input.Index(i))
	}
	return values
}

// NewCSUC10Visit creates an implementation of CSUC10Visit
func NewCSUC10Visit(input hl7.HL7Type) CSUC10Visit {
	v := CSUC10Visit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	return v
}

type CSUC10Visit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ParticipationInformation          []PRT
}

// NewCSUC10VisitSlice will construct a slice of type CSUC10Visit
func NewCSUC10VisitSlice(input hl7.HL7Type) []CSUC10Visit {
	values := make([]CSUC10Visit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCSUC10Visit(input.Index(i))
	}
	return values
}

// NewRPAI10Insurance creates an implementation of RPAI10Insurance
func NewRPAI10Insurance(input hl7.HL7Type) RPAI10Insurance {
	v := RPAI10Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3(input.Index(2))
	return v
}

type RPAI10Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification IN3
}

// NewRPAI10InsuranceSlice will construct a slice of type RPAI10Insurance
func NewRPAI10InsuranceSlice(input hl7.HL7Type) []RPAI10Insurance {
	values := make([]RPAI10Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRPAI10Insurance(input.Index(i))
	}
	return values
}

// NewCRMC06Patient creates an implementation of CRMC06Patient
func NewCRMC06Patient(input hl7.HL7Type) CRMC06Patient {
	v := CRMC06Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.AccessRestriction = NewARVSlice(input.Index(2))
	v.PatientVisit = NewCRMC06PatientVisit(input.Index(3))
	v.ClinicalStudyRegistration = NewCSR(input.Index(4))
	v.ClinicalStudyPhase = NewCSPSlice(input.Index(5))
	return v
}

type CRMC06Patient struct {
	PatientIdentification     PID
	ParticipationInformation  []PRT
	AccessRestriction         []ARV
	PatientVisit              CRMC06PatientVisit
	ClinicalStudyRegistration CSR
	ClinicalStudyPhase        []CSP
}

// NewCRMC06PatientSlice will construct a slice of type CRMC06Patient
func NewCRMC06PatientSlice(input hl7.HL7Type) []CRMC06Patient {
	values := make([]CRMC06Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCRMC06Patient(input.Index(i))
	}
	return values
}

// NewCCRI17MedicationEncodingDetail creates an implementation of CCRI17MedicationEncodingDetail
func NewCCRI17MedicationEncodingDetail(input hl7.HL7Type) CCRI17MedicationEncodingDetail {
	v := CCRI17MedicationEncodingDetail{}
	v.PharmacyTreatmentEncodedOrder = NewRXE(input.Index(0))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(1))
	v.PharmacyTreatmentComponentOrder = NewRXCSlice(input.Index(2))
	v.MedicationEncodingObservation = NewCCRI17MedicationEncodingObservationSlice(input.Index(3))
	return v
}

type CCRI17MedicationEncodingDetail struct {
	PharmacyTreatmentEncodedOrder   RXE
	PharmacyTreatmentRoute          []RXR
	PharmacyTreatmentComponentOrder []RXC
	MedicationEncodingObservation   []CCRI17MedicationEncodingObservation
}

// NewCCRI17MedicationEncodingDetailSlice will construct a slice of type CCRI17MedicationEncodingDetail
func NewCCRI17MedicationEncodingDetailSlice(input hl7.HL7Type) []CCRI17MedicationEncodingDetail {
	values := make([]CCRI17MedicationEncodingDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI17MedicationEncodingDetail(input.Index(i))
	}
	return values
}

// NewRSPK31AdditionalDemographics creates an implementation of RSPK31AdditionalDemographics
func NewRSPK31AdditionalDemographics(input hl7.HL7Type) RSPK31AdditionalDemographics {
	v := RSPK31AdditionalDemographics{}
	v.PatientAdditionalDemographic = NewPD1(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type RSPK31AdditionalDemographics struct {
	PatientAdditionalDemographic PD1
	ParticipationInformation     []PRT
}

// NewRSPK31AdditionalDemographicsSlice will construct a slice of type RSPK31AdditionalDemographics
func NewRSPK31AdditionalDemographicsSlice(input hl7.HL7Type) []RSPK31AdditionalDemographics {
	values := make([]RSPK31AdditionalDemographics, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPK31AdditionalDemographics(input.Index(i))
	}
	return values
}

// NewSRMS04Service creates an implementation of SRMS04Service
func NewSRMS04Service(input hl7.HL7Type) SRMS04Service {
	v := SRMS04Service{}
	v.AppointmentInformation = NewAIS(input.Index(0))
	v.AppointmentPreferences = NewAPR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type SRMS04Service struct {
	AppointmentInformation AIS
	AppointmentPreferences APR
	NotesAndComments       []NTE
}

// NewSRMS04ServiceSlice will construct a slice of type SRMS04Service
func NewSRMS04ServiceSlice(input hl7.HL7Type) []SRMS04Service {
	values := make([]SRMS04Service, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS04Service(input.Index(i))
	}
	return values
}

// NewADTA06Procedure creates an implementation of ADTA06Procedure
func NewADTA06Procedure(input hl7.HL7Type) ADTA06Procedure {
	v := ADTA06Procedure{}
	v.Procedures = NewPR1(input.Index(0))
	v.Role = NewROLSlice(input.Index(1))
	return v
}

type ADTA06Procedure struct {
	Procedures PR1
	Role       []ROL
}

// NewADTA06ProcedureSlice will construct a slice of type ADTA06Procedure
func NewADTA06ProcedureSlice(input hl7.HL7Type) []ADTA06Procedure {
	values := make([]ADTA06Procedure, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewADTA06Procedure(input.Index(i))
	}
	return values
}

// NewSRRS04PersonnelResource creates an implementation of SRRS04PersonnelResource
func NewSRRS04PersonnelResource(input hl7.HL7Type) SRRS04PersonnelResource {
	v := SRRS04PersonnelResource{}
	v.AppointmentInformationPersonnelResource = NewAIP(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SRRS04PersonnelResource struct {
	AppointmentInformationPersonnelResource AIP
	NotesAndComments                        []NTE
}

// NewSRRS04PersonnelResourceSlice will construct a slice of type SRRS04PersonnelResource
func NewSRRS04PersonnelResourceSlice(input hl7.HL7Type) []SRRS04PersonnelResource {
	values := make([]SRRS04PersonnelResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS04PersonnelResource(input.Index(i))
	}
	return values
}

// NewCCII22Goal creates an implementation of CCII22Goal
func NewCCII22Goal(input hl7.HL7Type) CCII22Goal {
	v := CCII22Goal{}
	v.GoalDetail = NewGOL(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	v.RoleGoal = NewCCII22RoleGoalSlice(input.Index(2))
	v.ObservationResult = NewOBXSlice(input.Index(3))
	return v
}

type CCII22Goal struct {
	GoalDetail        GOL
	Variance          []VAR
	RoleGoal          []CCII22RoleGoal
	ObservationResult []OBX
}

// NewCCII22GoalSlice will construct a slice of type CCII22Goal
func NewCCII22GoalSlice(input hl7.HL7Type) []CCII22Goal {
	values := make([]CCII22Goal, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCII22Goal(input.Index(i))
	}
	return values
}

// NewSRRS03Schedule creates an implementation of SRRS03Schedule
func NewSRRS03Schedule(input hl7.HL7Type) SRRS03Schedule {
	v := SRRS03Schedule{}
	v.SchedulingActivityInformation = NewSCH(input.Index(0))
	v.TimingQuantity = NewTQ1Slice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.Patient = NewSRRS03PatientSlice(input.Index(3))
	v.Resources = NewSRRS03ResourcesSlice(input.Index(4))
	return v
}

type SRRS03Schedule struct {
	SchedulingActivityInformation SCH
	TimingQuantity                []TQ1
	NotesAndComments              []NTE
	Patient                       []SRRS03Patient
	Resources                     []SRRS03Resources
}

// NewSRRS03ScheduleSlice will construct a slice of type SRRS03Schedule
func NewSRRS03ScheduleSlice(input hl7.HL7Type) []SRRS03Schedule {
	values := make([]SRRS03Schedule, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS03Schedule(input.Index(i))
	}
	return values
}

// NewREFI12Insurance creates an implementation of REFI12Insurance
func NewREFI12Insurance(input hl7.HL7Type) REFI12Insurance {
	v := REFI12Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3(input.Index(2))
	return v
}

type REFI12Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification IN3
}

// NewREFI12InsuranceSlice will construct a slice of type REFI12Insurance
func NewREFI12InsuranceSlice(input hl7.HL7Type) []REFI12Insurance {
	values := make([]REFI12Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewREFI12Insurance(input.Index(i))
	}
	return values
}

// NewCCII22PatientVisit creates an implementation of CCII22PatientVisit
func NewCCII22PatientVisit(input hl7.HL7Type) CCII22PatientVisit {
	v := CCII22PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	return v
}

type CCII22PatientVisit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
}

// NewCCII22PatientVisitSlice will construct a slice of type CCII22PatientVisit
func NewCCII22PatientVisitSlice(input hl7.HL7Type) []CCII22PatientVisit {
	values := make([]CCII22PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCII22PatientVisit(input.Index(i))
	}
	return values
}

// NewPPGPCHGoal creates an implementation of PPGPCHGoal
func NewPPGPCHGoal(input hl7.HL7Type) PPGPCHGoal {
	v := PPGPCHGoal{}
	v.GoalDetail = NewGOL(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Variance = NewVARSlice(input.Index(2))
	v.GoalRole = NewPPGPCHGoalRoleSlice(input.Index(3))
	v.GoalObservation = NewPPGPCHGoalObservationSlice(input.Index(4))
	v.Problem = NewPPGPCHProblemSlice(input.Index(5))
	v.Order = NewPPGPCHOrderSlice(input.Index(6))
	return v
}

type PPGPCHGoal struct {
	GoalDetail       GOL
	NotesAndComments []NTE
	Variance         []VAR
	GoalRole         []PPGPCHGoalRole
	GoalObservation  []PPGPCHGoalObservation
	Problem          []PPGPCHProblem
	Order            []PPGPCHOrder
}

// NewPPGPCHGoalSlice will construct a slice of type PPGPCHGoal
func NewPPGPCHGoalSlice(input hl7.HL7Type) []PPGPCHGoal {
	values := make([]PPGPCHGoal, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPGPCHGoal(input.Index(i))
	}
	return values
}

// NewORLO34SpecimenObservation creates an implementation of ORLO34SpecimenObservation
func NewORLO34SpecimenObservation(input hl7.HL7Type) ORLO34SpecimenObservation {
	v := ORLO34SpecimenObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type ORLO34SpecimenObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewORLO34SpecimenObservationSlice will construct a slice of type ORLO34SpecimenObservation
func NewORLO34SpecimenObservationSlice(input hl7.HL7Type) []ORLO34SpecimenObservation {
	values := make([]ORLO34SpecimenObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORLO34SpecimenObservation(input.Index(i))
	}
	return values
}

// NewSRMS02Observation creates an implementation of SRMS02Observation
func NewSRMS02Observation(input hl7.HL7Type) SRMS02Observation {
	v := SRMS02Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type SRMS02Observation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewSRMS02ObservationSlice will construct a slice of type SRMS02Observation
func NewSRMS02ObservationSlice(input hl7.HL7Type) []SRMS02Observation {
	values := make([]SRMS02Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS02Observation(input.Index(i))
	}
	return values
}

// NewORUR32Visit creates an implementation of ORUR32Visit
func NewORUR32Visit(input hl7.HL7Type) ORUR32Visit {
	v := ORUR32Visit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	return v
}

type ORUR32Visit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ParticipationInformation          []PRT
}

// NewORUR32VisitSlice will construct a slice of type ORUR32Visit
func NewORUR32VisitSlice(input hl7.HL7Type) []ORUR32Visit {
	values := make([]ORUR32Visit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORUR32Visit(input.Index(i))
	}
	return values
}

// NewSRRS07Resources creates an implementation of SRRS07Resources
func NewSRRS07Resources(input hl7.HL7Type) SRRS07Resources {
	v := SRRS07Resources{}
	v.ResourceGroup = NewRGS(input.Index(0))
	v.Service = NewSRRS07ServiceSlice(input.Index(1))
	v.GeneralResource = NewSRRS07GeneralResourceSlice(input.Index(2))
	v.LocationResource = NewSRRS07LocationResourceSlice(input.Index(3))
	v.PersonnelResource = NewSRRS07PersonnelResourceSlice(input.Index(4))
	return v
}

type SRRS07Resources struct {
	ResourceGroup     RGS
	Service           []SRRS07Service
	GeneralResource   []SRRS07GeneralResource
	LocationResource  []SRRS07LocationResource
	PersonnelResource []SRRS07PersonnelResource
}

// NewSRRS07ResourcesSlice will construct a slice of type SRRS07Resources
func NewSRRS07ResourcesSlice(input hl7.HL7Type) []SRRS07Resources {
	values := make([]SRRS07Resources, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS07Resources(input.Index(i))
	}
	return values
}

// NewORUR01OrderObservation creates an implementation of ORUR01OrderObservation
func NewORUR01OrderObservation(input hl7.HL7Type) ORUR01OrderObservation {
	v := ORUR01OrderObservation{}
	v.CommonOrder = NewORUR01CommonOrder(input.Index(0))
	v.ObservationRequest = NewOBR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.ParticipationInformation = NewPRTSlice(input.Index(3))
	v.TimingQty = NewORUR01TimingQtySlice(input.Index(4))
	v.ContactData = NewCTD(input.Index(5))
	v.Observation = NewORUR01ObservationSlice(input.Index(6))
	v.FinancialTransaction = NewFT1Slice(input.Index(7))
	v.ClinicalTrialIdentification = NewCTISlice(input.Index(8))
	v.Specimen = NewORUR01SpecimenSlice(input.Index(9))
	return v
}

type ORUR01OrderObservation struct {
	CommonOrder                 ORUR01CommonOrder
	ObservationRequest          OBR
	NotesAndComments            []NTE
	ParticipationInformation    []PRT
	TimingQty                   []ORUR01TimingQty
	ContactData                 CTD
	Observation                 []ORUR01Observation
	FinancialTransaction        []FT1
	ClinicalTrialIdentification []CTI
	Specimen                    []ORUR01Specimen
}

// NewORUR01OrderObservationSlice will construct a slice of type ORUR01OrderObservation
func NewORUR01OrderObservationSlice(input hl7.HL7Type) []ORUR01OrderObservation {
	values := make([]ORUR01OrderObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORUR01OrderObservation(input.Index(i))
	}
	return values
}

// NewPGLPC7Order creates an implementation of PGLPC7Order
func NewPGLPC7Order(input hl7.HL7Type) PGLPC7Order {
	v := PGLPC7Order{}
	v.CommonOrder = NewORC(input.Index(0))
	v.OrderDetail = NewPGLPC7OrderDetail(input.Index(1))
	return v
}

type PGLPC7Order struct {
	CommonOrder ORC
	OrderDetail PGLPC7OrderDetail
}

// NewPGLPC7OrderSlice will construct a slice of type PGLPC7Order
func NewPGLPC7OrderSlice(input hl7.HL7Type) []PGLPC7Order {
	values := make([]PGLPC7Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPGLPC7Order(input.Index(i))
	}
	return values
}

// NewADTA49Patient creates an implementation of ADTA49Patient
func NewADTA49Patient(input hl7.HL7Type) ADTA49Patient {
	v := ADTA49Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.MergePatientInformation = NewMRG(input.Index(2))
	return v
}

type ADTA49Patient struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	MergePatientInformation      MRG
}

// NewADTA49PatientSlice will construct a slice of type ADTA49Patient
func NewADTA49PatientSlice(input hl7.HL7Type) []ADTA49Patient {
	values := make([]ADTA49Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewADTA49Patient(input.Index(i))
	}
	return values
}

// NewSRMS09Service creates an implementation of SRMS09Service
func NewSRMS09Service(input hl7.HL7Type) SRMS09Service {
	v := SRMS09Service{}
	v.AppointmentInformation = NewAIS(input.Index(0))
	v.AppointmentPreferences = NewAPR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type SRMS09Service struct {
	AppointmentInformation AIS
	AppointmentPreferences APR
	NotesAndComments       []NTE
}

// NewSRMS09ServiceSlice will construct a slice of type SRMS09Service
func NewSRMS09ServiceSlice(input hl7.HL7Type) []SRMS09Service {
	values := make([]SRMS09Service, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS09Service(input.Index(i))
	}
	return values
}

// NewRQAI10Procedure creates an implementation of RQAI10Procedure
func NewRQAI10Procedure(input hl7.HL7Type) RQAI10Procedure {
	v := RQAI10Procedure{}
	v.Procedures = NewPR1(input.Index(0))
	v.Authorization2 = NewRQAI10Authorization2(input.Index(1))
	return v
}

type RQAI10Procedure struct {
	Procedures     PR1
	Authorization2 RQAI10Authorization2
}

// NewRQAI10ProcedureSlice will construct a slice of type RQAI10Procedure
func NewRQAI10ProcedureSlice(input hl7.HL7Type) []RQAI10Procedure {
	values := make([]RQAI10Procedure, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQAI10Procedure(input.Index(i))
	}
	return values
}

// NewPPRPC3GoalRole creates an implementation of PPRPC3GoalRole
func NewPPRPC3GoalRole(input hl7.HL7Type) PPRPC3GoalRole {
	v := PPRPC3GoalRole{}
	v.Role = NewROL(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type PPRPC3GoalRole struct {
	Role     ROL
	Variance []VAR
}

// NewPPRPC3GoalRoleSlice will construct a slice of type PPRPC3GoalRole
func NewPPRPC3GoalRoleSlice(input hl7.HL7Type) []PPRPC3GoalRole {
	values := make([]PPRPC3GoalRole, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPRPC3GoalRole(input.Index(i))
	}
	return values
}

// NewDFTP11FinancialProcedure creates an implementation of DFTP11FinancialProcedure
func NewDFTP11FinancialProcedure(input hl7.HL7Type) DFTP11FinancialProcedure {
	v := DFTP11FinancialProcedure{}
	v.Procedures = NewPR1(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.Role = NewROLSlice(input.Index(2))
	return v
}

type DFTP11FinancialProcedure struct {
	Procedures               PR1
	ParticipationInformation []PRT
	Role                     []ROL
}

// NewDFTP11FinancialProcedureSlice will construct a slice of type DFTP11FinancialProcedure
func NewDFTP11FinancialProcedureSlice(input hl7.HL7Type) []DFTP11FinancialProcedure {
	values := make([]DFTP11FinancialProcedure, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewDFTP11FinancialProcedure(input.Index(i))
	}
	return values
}

// NewORPO10Component creates an implementation of ORPO10Component
func NewORPO10Component(input hl7.HL7Type) ORPO10Component {
	v := ORPO10Component{}
	v.PharmacyTreatmentComponentOrder = NewRXC(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type ORPO10Component struct {
	PharmacyTreatmentComponentOrder RXC
	NotesAndComments                []NTE
}

// NewORPO10ComponentSlice will construct a slice of type ORPO10Component
func NewORPO10ComponentSlice(input hl7.HL7Type) []ORPO10Component {
	values := make([]ORPO10Component, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORPO10Component(input.Index(i))
	}
	return values
}

// NewRRII14AuthorizationContact creates an implementation of RRII14AuthorizationContact
func NewRRII14AuthorizationContact(input hl7.HL7Type) RRII14AuthorizationContact {
	v := RRII14AuthorizationContact{}
	v.AuthorizationInformation = NewAUT(input.Index(0))
	v.ContactData = NewCTD(input.Index(1))
	return v
}

type RRII14AuthorizationContact struct {
	AuthorizationInformation AUT
	ContactData              CTD
}

// NewRRII14AuthorizationContactSlice will construct a slice of type RRII14AuthorizationContact
func NewRRII14AuthorizationContactSlice(input hl7.HL7Type) []RRII14AuthorizationContact {
	values := make([]RRII14AuthorizationContact, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRRII14AuthorizationContact(input.Index(i))
	}
	return values
}

// NewCCRI16ClinicalOrder creates an implementation of CCRI16ClinicalOrder
func NewCCRI16ClinicalOrder(input hl7.HL7Type) CCRI16ClinicalOrder {
	v := CCRI16ClinicalOrder{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ClinicalOrderTiming = NewCCRI16ClinicalOrderTimingSlice(input.Index(1))
	v.ClinicalOrderDetail = NewCCRI16ClinicalOrderDetailSlice(input.Index(2))
	v.ClinicalTrialIdentification = NewCTISlice(input.Index(3))
	return v
}

type CCRI16ClinicalOrder struct {
	CommonOrder                 ORC
	ClinicalOrderTiming         []CCRI16ClinicalOrderTiming
	ClinicalOrderDetail         []CCRI16ClinicalOrderDetail
	ClinicalTrialIdentification []CTI
}

// NewCCRI16ClinicalOrderSlice will construct a slice of type CCRI16ClinicalOrder
func NewCCRI16ClinicalOrderSlice(input hl7.HL7Type) []CCRI16ClinicalOrder {
	values := make([]CCRI16ClinicalOrder, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI16ClinicalOrder(input.Index(i))
	}
	return values
}

// NewREFI13Procedure creates an implementation of REFI13Procedure
func NewREFI13Procedure(input hl7.HL7Type) REFI13Procedure {
	v := REFI13Procedure{}
	v.Procedures = NewPR1(input.Index(0))
	v.AuthorizationContact2 = NewREFI13AuthorizationContact2(input.Index(1))
	return v
}

type REFI13Procedure struct {
	Procedures            PR1
	AuthorizationContact2 REFI13AuthorizationContact2
}

// NewREFI13ProcedureSlice will construct a slice of type REFI13Procedure
func NewREFI13ProcedureSlice(input hl7.HL7Type) []REFI13Procedure {
	values := make([]REFI13Procedure, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewREFI13Procedure(input.Index(i))
	}
	return values
}

// NewRDEO25Observation creates an implementation of RDEO25Observation
func NewRDEO25Observation(input hl7.HL7Type) RDEO25Observation {
	v := RDEO25Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type RDEO25Observation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewRDEO25ObservationSlice will construct a slice of type RDEO25Observation
func NewRDEO25ObservationSlice(input hl7.HL7Type) []RDEO25Observation {
	values := make([]RDEO25Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRDEO25Observation(input.Index(i))
	}
	return values
}

// NewPPGPCJProblem creates an implementation of PPGPCJProblem
func NewPPGPCJProblem(input hl7.HL7Type) PPGPCJProblem {
	v := PPGPCJProblem{}
	v.ProblemDetails = NewPRB(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Variance = NewVARSlice(input.Index(2))
	v.ProblemRole = NewPPGPCJProblemRoleSlice(input.Index(3))
	v.ProblemObservation = NewPPGPCJProblemObservationSlice(input.Index(4))
	return v
}

type PPGPCJProblem struct {
	ProblemDetails     PRB
	NotesAndComments   []NTE
	Variance           []VAR
	ProblemRole        []PPGPCJProblemRole
	ProblemObservation []PPGPCJProblemObservation
}

// NewPPGPCJProblemSlice will construct a slice of type PPGPCJProblem
func NewPPGPCJProblemSlice(input hl7.HL7Type) []PPGPCJProblem {
	values := make([]PPGPCJProblem, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPGPCJProblem(input.Index(i))
	}
	return values
}

// NewRPAI08Visit creates an implementation of RPAI08Visit
func NewRPAI08Visit(input hl7.HL7Type) RPAI08Visit {
	v := RPAI08Visit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	return v
}

type RPAI08Visit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
}

// NewRPAI08VisitSlice will construct a slice of type RPAI08Visit
func NewRPAI08VisitSlice(input hl7.HL7Type) []RPAI08Visit {
	values := make([]RPAI08Visit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRPAI08Visit(input.Index(i))
	}
	return values
}

// NewPEXP07AssociatedRxAdmin creates an implementation of PEXP07AssociatedRxAdmin
func NewPEXP07AssociatedRxAdmin(input hl7.HL7Type) PEXP07AssociatedRxAdmin {
	v := PEXP07AssociatedRxAdmin{}
	v.PharmacyTreatmentAdministration = NewRXA(input.Index(0))
	v.PharmacyTreatmentRoute = NewRXR(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	return v
}

type PEXP07AssociatedRxAdmin struct {
	PharmacyTreatmentAdministration RXA
	PharmacyTreatmentRoute          RXR
	ParticipationInformation        []PRT
}

// NewPEXP07AssociatedRxAdminSlice will construct a slice of type PEXP07AssociatedRxAdmin
func NewPEXP07AssociatedRxAdminSlice(input hl7.HL7Type) []PEXP07AssociatedRxAdmin {
	values := make([]PEXP07AssociatedRxAdmin, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPEXP07AssociatedRxAdmin(input.Index(i))
	}
	return values
}

// NewRREO12Patient creates an implementation of RREO12Patient
func NewRREO12Patient(input hl7.HL7Type) RREO12Patient {
	v := RREO12Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type RREO12Patient struct {
	PatientIdentification PID
	NotesAndComments      []NTE
}

// NewRREO12PatientSlice will construct a slice of type RREO12Patient
func NewRREO12PatientSlice(input hl7.HL7Type) []RREO12Patient {
	values := make([]RREO12Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRREO12Patient(input.Index(i))
	}
	return values
}

// NewREFI13ResultsNotes creates an implementation of REFI13ResultsNotes
func NewREFI13ResultsNotes(input hl7.HL7Type) REFI13ResultsNotes {
	v := REFI13ResultsNotes{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type REFI13ResultsNotes struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewREFI13ResultsNotesSlice will construct a slice of type REFI13ResultsNotes
func NewREFI13ResultsNotesSlice(input hl7.HL7Type) []REFI13ResultsNotes {
	values := make([]REFI13ResultsNotes, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewREFI13ResultsNotes(input.Index(i))
	}
	return values
}

// NewPPPPCDOrderDetail creates an implementation of PPPPCDOrderDetail
func NewPPPPCDOrderDetail(input hl7.HL7Type) PPPPCDOrderDetail {
	v := PPPPCDOrderDetail{}
	v.Choice = NewPPPPCDChoice(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Variance = NewVARSlice(input.Index(2))
	v.OrderObservation = NewPPPPCDOrderObservationSlice(input.Index(3))
	return v
}

type PPPPCDOrderDetail struct {
	Choice           PPPPCDChoice
	NotesAndComments []NTE
	Variance         []VAR
	OrderObservation []PPPPCDOrderObservation
}

// NewPPPPCDOrderDetailSlice will construct a slice of type PPPPCDOrderDetail
func NewPPPPCDOrderDetailSlice(input hl7.HL7Type) []PPPPCDOrderDetail {
	values := make([]PPPPCDOrderDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPPPCDOrderDetail(input.Index(i))
	}
	return values
}

// NewSIUS22Service creates an implementation of SIUS22Service
func NewSIUS22Service(input hl7.HL7Type) SIUS22Service {
	v := SIUS22Service{}
	v.AppointmentInformation = NewAIS(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS22Service struct {
	AppointmentInformation AIS
	NotesAndComments       []NTE
}

// NewSIUS22ServiceSlice will construct a slice of type SIUS22Service
func NewSIUS22ServiceSlice(input hl7.HL7Type) []SIUS22Service {
	values := make([]SIUS22Service, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS22Service(input.Index(i))
	}
	return values
}

// NewRPAI10Authorization2 creates an implementation of RPAI10Authorization2
func NewRPAI10Authorization2(input hl7.HL7Type) RPAI10Authorization2 {
	v := RPAI10Authorization2{}
	v.AuthorizationInformation = NewAUT(input.Index(0))
	v.ContactData = NewCTD(input.Index(1))
	return v
}

type RPAI10Authorization2 struct {
	AuthorizationInformation AUT
	ContactData              CTD
}

// NewRPAI10Authorization2Slice will construct a slice of type RPAI10Authorization2
func NewRPAI10Authorization2Slice(input hl7.HL7Type) []RPAI10Authorization2 {
	values := make([]RPAI10Authorization2, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRPAI10Authorization2(input.Index(i))
	}
	return values
}

// NewBARP02Patient creates an implementation of BARP02Patient
func NewBARP02Patient(input hl7.HL7Type) BARP02Patient {
	v := BARP02Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.PatientVisit = NewPV1(input.Index(2))
	v.Disability = NewDB1Slice(input.Index(3))
	return v
}

type BARP02Patient struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	PatientVisit                 PV1
	Disability                   []DB1
}

// NewBARP02PatientSlice will construct a slice of type BARP02Patient
func NewBARP02PatientSlice(input hl7.HL7Type) []BARP02Patient {
	values := make([]BARP02Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewBARP02Patient(input.Index(i))
	}
	return values
}

// NewSRRS09GeneralResource creates an implementation of SRRS09GeneralResource
func NewSRRS09GeneralResource(input hl7.HL7Type) SRRS09GeneralResource {
	v := SRRS09GeneralResource{}
	v.AppointmentInformationGeneralResource = NewAIG(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SRRS09GeneralResource struct {
	AppointmentInformationGeneralResource AIG
	NotesAndComments                      []NTE
}

// NewSRRS09GeneralResourceSlice will construct a slice of type SRRS09GeneralResource
func NewSRRS09GeneralResourceSlice(input hl7.HL7Type) []SRRS09GeneralResource {
	values := make([]SRRS09GeneralResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS09GeneralResource(input.Index(i))
	}
	return values
}

// NewRQII02GuarantorInsurance creates an implementation of RQII02GuarantorInsurance
func NewRQII02GuarantorInsurance(input hl7.HL7Type) RQII02GuarantorInsurance {
	v := RQII02GuarantorInsurance{}
	v.Guarantor = NewGT1Slice(input.Index(0))
	v.Insurance = NewRQII02InsuranceSlice(input.Index(1))
	return v
}

type RQII02GuarantorInsurance struct {
	Guarantor []GT1
	Insurance []RQII02Insurance
}

// NewRQII02GuarantorInsuranceSlice will construct a slice of type RQII02GuarantorInsurance
func NewRQII02GuarantorInsuranceSlice(input hl7.HL7Type) []RQII02GuarantorInsurance {
	values := make([]RQII02GuarantorInsurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQII02GuarantorInsurance(input.Index(i))
	}
	return values
}

// NewREFI13AuthorizationContact creates an implementation of REFI13AuthorizationContact
func NewREFI13AuthorizationContact(input hl7.HL7Type) REFI13AuthorizationContact {
	v := REFI13AuthorizationContact{}
	v.AuthorizationInformation = NewAUT(input.Index(0))
	v.ContactData = NewCTD(input.Index(1))
	return v
}

type REFI13AuthorizationContact struct {
	AuthorizationInformation AUT
	ContactData              CTD
}

// NewREFI13AuthorizationContactSlice will construct a slice of type REFI13AuthorizationContact
func NewREFI13AuthorizationContactSlice(input hl7.HL7Type) []REFI13AuthorizationContact {
	values := make([]REFI13AuthorizationContact, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewREFI13AuthorizationContact(input.Index(i))
	}
	return values
}

// NewPPRPC2Goal creates an implementation of PPRPC2Goal
func NewPPRPC2Goal(input hl7.HL7Type) PPRPC2Goal {
	v := PPRPC2Goal{}
	v.GoalDetail = NewGOL(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Variance = NewVARSlice(input.Index(2))
	v.GoalRole = NewPPRPC2GoalRoleSlice(input.Index(3))
	v.GoalObservation = NewPPRPC2GoalObservationSlice(input.Index(4))
	return v
}

type PPRPC2Goal struct {
	GoalDetail       GOL
	NotesAndComments []NTE
	Variance         []VAR
	GoalRole         []PPRPC2GoalRole
	GoalObservation  []PPRPC2GoalObservation
}

// NewPPRPC2GoalSlice will construct a slice of type PPRPC2Goal
func NewPPRPC2GoalSlice(input hl7.HL7Type) []PPRPC2Goal {
	values := make([]PPRPC2Goal, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPRPC2Goal(input.Index(i))
	}
	return values
}

// NewCQUI19Patient creates an implementation of CQUI19Patient
func NewCQUI19Patient(input hl7.HL7Type) CQUI19Patient {
	v := CQUI19Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	return v
}

type CQUI19Patient struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
}

// NewCQUI19PatientSlice will construct a slice of type CQUI19Patient
func NewCQUI19PatientSlice(input hl7.HL7Type) []CQUI19Patient {
	values := make([]CQUI19Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCQUI19Patient(input.Index(i))
	}
	return values
}

// NewRDSO13Patient creates an implementation of RDSO13Patient
func NewRDSO13Patient(input hl7.HL7Type) RDSO13Patient {
	v := RDSO13Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.AdditionalDemographics = NewRDSO13AdditionalDemographics(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.PatientAllergyInformation = NewAL1Slice(input.Index(3))
	v.PatientVisit = NewRDSO13PatientVisit(input.Index(4))
	return v
}

type RDSO13Patient struct {
	PatientIdentification     PID
	AdditionalDemographics    RDSO13AdditionalDemographics
	NotesAndComments          []NTE
	PatientAllergyInformation []AL1
	PatientVisit              RDSO13PatientVisit
}

// NewRDSO13PatientSlice will construct a slice of type RDSO13Patient
func NewRDSO13PatientSlice(input hl7.HL7Type) []RDSO13Patient {
	values := make([]RDSO13Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRDSO13Patient(input.Index(i))
	}
	return values
}

// NewCCII22MedicationAdministrationDetail creates an implementation of CCII22MedicationAdministrationDetail
func NewCCII22MedicationAdministrationDetail(input hl7.HL7Type) CCII22MedicationAdministrationDetail {
	v := CCII22MedicationAdministrationDetail{}
	v.PharmacyTreatmentAdministration = NewRXASlice(input.Index(0))
	v.PharmacyTreatmentRoute = NewRXR(input.Index(1))
	v.ObservationResult = NewOBXSlice(input.Index(2))
	return v
}

type CCII22MedicationAdministrationDetail struct {
	PharmacyTreatmentAdministration []RXA
	PharmacyTreatmentRoute          RXR
	ObservationResult               []OBX
}

// NewCCII22MedicationAdministrationDetailSlice will construct a slice of type CCII22MedicationAdministrationDetail
func NewCCII22MedicationAdministrationDetailSlice(input hl7.HL7Type) []CCII22MedicationAdministrationDetail {
	values := make([]CCII22MedicationAdministrationDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCII22MedicationAdministrationDetail(input.Index(i))
	}
	return values
}

// NewBRPO30Order creates an implementation of BRPO30Order
func NewBRPO30Order(input hl7.HL7Type) BRPO30Order {
	v := BRPO30Order{}
	v.CommonOrder = NewORC(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.Timing = NewBRPO30TimingSlice(input.Index(2))
	v.BloodProductOrder = NewBPO(input.Index(3))
	v.BloodProductDispenseStatus = NewBPXSlice(input.Index(4))
	return v
}

type BRPO30Order struct {
	CommonOrder                ORC
	ParticipationInformation   []PRT
	Timing                     []BRPO30Timing
	BloodProductOrder          BPO
	BloodProductDispenseStatus []BPX
}

// NewBRPO30OrderSlice will construct a slice of type BRPO30Order
func NewBRPO30OrderSlice(input hl7.HL7Type) []BRPO30Order {
	values := make([]BRPO30Order, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewBRPO30Order(input.Index(i))
	}
	return values
}

// NewOMNO07Patient creates an implementation of OMNO07Patient
func NewOMNO07Patient(input hl7.HL7Type) OMNO07Patient {
	v := OMNO07Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.AccessRestriction = NewARVSlice(input.Index(3))
	v.NotesAndComments = NewNTESlice(input.Index(4))
	v.PatientVisit = NewOMNO07PatientVisit(input.Index(5))
	v.Insurance = NewOMNO07InsuranceSlice(input.Index(6))
	v.Guarantor = NewGT1(input.Index(7))
	v.PatientAllergyInformation = NewAL1Slice(input.Index(8))
	return v
}

type OMNO07Patient struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	ParticipationInformation     []PRT
	AccessRestriction            []ARV
	NotesAndComments             []NTE
	PatientVisit                 OMNO07PatientVisit
	Insurance                    []OMNO07Insurance
	Guarantor                    GT1
	PatientAllergyInformation    []AL1
}

// NewOMNO07PatientSlice will construct a slice of type OMNO07Patient
func NewOMNO07PatientSlice(input hl7.HL7Type) []OMNO07Patient {
	values := make([]OMNO07Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMNO07Patient(input.Index(i))
	}
	return values
}

// NewSRRS06GeneralResource creates an implementation of SRRS06GeneralResource
func NewSRRS06GeneralResource(input hl7.HL7Type) SRRS06GeneralResource {
	v := SRRS06GeneralResource{}
	v.AppointmentInformationGeneralResource = NewAIG(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SRRS06GeneralResource struct {
	AppointmentInformationGeneralResource AIG
	NotesAndComments                      []NTE
}

// NewSRRS06GeneralResourceSlice will construct a slice of type SRRS06GeneralResource
func NewSRRS06GeneralResourceSlice(input hl7.HL7Type) []SRRS06GeneralResource {
	values := make([]SRRS06GeneralResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRRS06GeneralResource(input.Index(i))
	}
	return values
}

// NewADTA31Procedure creates an implementation of ADTA31Procedure
func NewADTA31Procedure(input hl7.HL7Type) ADTA31Procedure {
	v := ADTA31Procedure{}
	v.Procedures = NewPR1(input.Index(0))
	v.Role = NewROLSlice(input.Index(1))
	return v
}

type ADTA31Procedure struct {
	Procedures PR1
	Role       []ROL
}

// NewADTA31ProcedureSlice will construct a slice of type ADTA31Procedure
func NewADTA31ProcedureSlice(input hl7.HL7Type) []ADTA31Procedure {
	values := make([]ADTA31Procedure, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewADTA31Procedure(input.Index(i))
	}
	return values
}

// NewCCRI17MedicationOrderObservation creates an implementation of CCRI17MedicationOrderObservation
func NewCCRI17MedicationOrderObservation(input hl7.HL7Type) CCRI17MedicationOrderObservation {
	v := CCRI17MedicationOrderObservation{}
	v.ObservationResult = NewOBXSlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CCRI17MedicationOrderObservation struct {
	ObservationResult        []OBX
	ParticipationInformation []PRT
}

// NewCCRI17MedicationOrderObservationSlice will construct a slice of type CCRI17MedicationOrderObservation
func NewCCRI17MedicationOrderObservationSlice(input hl7.HL7Type) []CCRI17MedicationOrderObservation {
	values := make([]CCRI17MedicationOrderObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI17MedicationOrderObservation(input.Index(i))
	}
	return values
}

// NewSIUS24PersonnelResource creates an implementation of SIUS24PersonnelResource
func NewSIUS24PersonnelResource(input hl7.HL7Type) SIUS24PersonnelResource {
	v := SIUS24PersonnelResource{}
	v.AppointmentInformationPersonnelResource = NewAIP(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	return v
}

type SIUS24PersonnelResource struct {
	AppointmentInformationPersonnelResource AIP
	NotesAndComments                        []NTE
}

// NewSIUS24PersonnelResourceSlice will construct a slice of type SIUS24PersonnelResource
func NewSIUS24PersonnelResourceSlice(input hl7.HL7Type) []SIUS24PersonnelResource {
	values := make([]SIUS24PersonnelResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSIUS24PersonnelResource(input.Index(i))
	}
	return values
}

// NewOMGO19Insurance creates an implementation of OMGO19Insurance
func NewOMGO19Insurance(input hl7.HL7Type) OMGO19Insurance {
	v := OMGO19Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3(input.Index(2))
	return v
}

type OMGO19Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification IN3
}

// NewOMGO19InsuranceSlice will construct a slice of type OMGO19Insurance
func NewOMGO19InsuranceSlice(input hl7.HL7Type) []OMGO19Insurance {
	values := make([]OMGO19Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMGO19Insurance(input.Index(i))
	}
	return values
}

// NewBARP10Procedure creates an implementation of BARP10Procedure
func NewBARP10Procedure(input hl7.HL7Type) BARP10Procedure {
	v := BARP10Procedure{}
	v.Procedures = NewPR1(input.Index(0))
	v.GroupingReimbursementProcedureLineItem = NewGP2(input.Index(1))
	return v
}

type BARP10Procedure struct {
	Procedures                             PR1
	GroupingReimbursementProcedureLineItem GP2
}

// NewBARP10ProcedureSlice will construct a slice of type BARP10Procedure
func NewBARP10ProcedureSlice(input hl7.HL7Type) []BARP10Procedure {
	values := make([]BARP10Procedure, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewBARP10Procedure(input.Index(i))
	}
	return values
}

// NewCCRI16PathwayObservation creates an implementation of CCRI16PathwayObservation
func NewCCRI16PathwayObservation(input hl7.HL7Type) CCRI16PathwayObservation {
	v := CCRI16PathwayObservation{}
	v.ObservationResult = NewOBXSlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CCRI16PathwayObservation struct {
	ObservationResult        []OBX
	ParticipationInformation []PRT
}

// NewCCRI16PathwayObservationSlice will construct a slice of type CCRI16PathwayObservation
func NewCCRI16PathwayObservationSlice(input hl7.HL7Type) []CCRI16PathwayObservation {
	values := make([]CCRI16PathwayObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI16PathwayObservation(input.Index(i))
	}
	return values
}

// NewOULR24SpecimenObservation creates an implementation of OULR24SpecimenObservation
func NewOULR24SpecimenObservation(input hl7.HL7Type) OULR24SpecimenObservation {
	v := OULR24SpecimenObservation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type OULR24SpecimenObservation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
}

// NewOULR24SpecimenObservationSlice will construct a slice of type OULR24SpecimenObservation
func NewOULR24SpecimenObservationSlice(input hl7.HL7Type) []OULR24SpecimenObservation {
	values := make([]OULR24SpecimenObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOULR24SpecimenObservation(input.Index(i))
	}
	return values
}

// NewRPAI09Observation creates an implementation of RPAI09Observation
func NewRPAI09Observation(input hl7.HL7Type) RPAI09Observation {
	v := RPAI09Observation{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Results = NewRPAI09ResultsSlice(input.Index(2))
	return v
}

type RPAI09Observation struct {
	ObservationRequest OBR
	NotesAndComments   []NTE
	Results            []RPAI09Results
}

// NewRPAI09ObservationSlice will construct a slice of type RPAI09Observation
func NewRPAI09ObservationSlice(input hl7.HL7Type) []RPAI09Observation {
	values := make([]RPAI09Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRPAI09Observation(input.Index(i))
	}
	return values
}

// NewOMSO05Patient creates an implementation of OMSO05Patient
func NewOMSO05Patient(input hl7.HL7Type) OMSO05Patient {
	v := OMSO05Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.AccessRestriction = NewARVSlice(input.Index(3))
	v.NotesAndComments = NewNTESlice(input.Index(4))
	v.PatientVisit = NewOMSO05PatientVisit(input.Index(5))
	v.Insurance = NewOMSO05InsuranceSlice(input.Index(6))
	v.Guarantor = NewGT1(input.Index(7))
	v.PatientAllergyInformation = NewAL1Slice(input.Index(8))
	return v
}

type OMSO05Patient struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	ParticipationInformation     []PRT
	AccessRestriction            []ARV
	NotesAndComments             []NTE
	PatientVisit                 OMSO05PatientVisit
	Insurance                    []OMSO05Insurance
	Guarantor                    GT1
	PatientAllergyInformation    []AL1
}

// NewOMSO05PatientSlice will construct a slice of type OMSO05Patient
func NewOMSO05PatientSlice(input hl7.HL7Type) []OMSO05Patient {
	values := make([]OMSO05Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMSO05Patient(input.Index(i))
	}
	return values
}

// NewPPGPCHGoalRole creates an implementation of PPGPCHGoalRole
func NewPPGPCHGoalRole(input hl7.HL7Type) PPGPCHGoalRole {
	v := PPGPCHGoalRole{}
	v.Role = NewROL(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type PPGPCHGoalRole struct {
	Role     ROL
	Variance []VAR
}

// NewPPGPCHGoalRoleSlice will construct a slice of type PPGPCHGoalRole
func NewPPGPCHGoalRoleSlice(input hl7.HL7Type) []PPGPCHGoalRole {
	values := make([]PPGPCHGoalRole, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPGPCHGoalRole(input.Index(i))
	}
	return values
}

// NewOMDO03PatientVisit creates an implementation of OMDO03PatientVisit
func NewOMDO03PatientVisit(input hl7.HL7Type) OMDO03PatientVisit {
	v := OMDO03PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	return v
}

type OMDO03PatientVisit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ParticipationInformation          []PRT
}

// NewOMDO03PatientVisitSlice will construct a slice of type OMDO03PatientVisit
func NewOMDO03PatientVisitSlice(input hl7.HL7Type) []OMDO03PatientVisit {
	values := make([]OMDO03PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMDO03PatientVisit(input.Index(i))
	}
	return values
}

// NewEHCE01ProductServiceLineItem creates an implementation of EHCE01ProductServiceLineItem
func NewEHCE01ProductServiceLineItem(input hl7.HL7Type) EHCE01ProductServiceLineItem {
	v := EHCE01ProductServiceLineItem{}
	v.ProductServiceLineItem = NewPSL(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Adjustment = NewADJSlice(input.Index(2))
	v.AuthorizationInformation = NewAUTSlice(input.Index(3))
	v.LocationIdentification = NewLOCSlice(input.Index(4))
	v.ParticipationInformation = NewPRTSlice(input.Index(5))
	v.Role = NewROLSlice(input.Index(6))
	return v
}

type EHCE01ProductServiceLineItem struct {
	ProductServiceLineItem   PSL
	NotesAndComments         []NTE
	Adjustment               []ADJ
	AuthorizationInformation []AUT
	LocationIdentification   []LOC
	ParticipationInformation []PRT
	Role                     []ROL
}

// NewEHCE01ProductServiceLineItemSlice will construct a slice of type EHCE01ProductServiceLineItem
func NewEHCE01ProductServiceLineItemSlice(input hl7.HL7Type) []EHCE01ProductServiceLineItem {
	values := make([]EHCE01ProductServiceLineItem, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewEHCE01ProductServiceLineItem(input.Index(i))
	}
	return values
}

// NewORLO34Specimen creates an implementation of ORLO34Specimen
func NewORLO34Specimen(input hl7.HL7Type) ORLO34Specimen {
	v := ORLO34Specimen{}
	v.Specimen = NewSPM(input.Index(0))
	v.SpecimenObservation = NewORLO34SpecimenObservationSlice(input.Index(1))
	v.SpecimenContainerDetail = NewSACSlice(input.Index(2))
	v.Order = NewORLO34OrderSlice(input.Index(3))
	return v
}

type ORLO34Specimen struct {
	Specimen                SPM
	SpecimenObservation     []ORLO34SpecimenObservation
	SpecimenContainerDetail []SAC
	Order                   []ORLO34Order
}

// NewORLO34SpecimenSlice will construct a slice of type ORLO34Specimen
func NewORLO34SpecimenSlice(input hl7.HL7Type) []ORLO34Specimen {
	values := make([]ORLO34Specimen, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewORLO34Specimen(input.Index(i))
	}
	return values
}

// NewADTA16Procedure creates an implementation of ADTA16Procedure
func NewADTA16Procedure(input hl7.HL7Type) ADTA16Procedure {
	v := ADTA16Procedure{}
	v.Procedures = NewPR1(input.Index(0))
	v.Role = NewROLSlice(input.Index(1))
	return v
}

type ADTA16Procedure struct {
	Procedures PR1
	Role       []ROL
}

// NewADTA16ProcedureSlice will construct a slice of type ADTA16Procedure
func NewADTA16ProcedureSlice(input hl7.HL7Type) []ADTA16Procedure {
	values := make([]ADTA16Procedure, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewADTA16Procedure(input.Index(i))
	}
	return values
}

// NewCRMC06PatientVisit creates an implementation of CRMC06PatientVisit
func NewCRMC06PatientVisit(input hl7.HL7Type) CRMC06PatientVisit {
	v := CRMC06PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CRMC06PatientVisit struct {
	PatientVisit             PV1
	ParticipationInformation []PRT
}

// NewCRMC06PatientVisitSlice will construct a slice of type CRMC06PatientVisit
func NewCRMC06PatientVisitSlice(input hl7.HL7Type) []CRMC06PatientVisit {
	values := make([]CRMC06PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCRMC06PatientVisit(input.Index(i))
	}
	return values
}

// NewRQAI08Results creates an implementation of RQAI08Results
func NewRQAI08Results(input hl7.HL7Type) RQAI08Results {
	v := RQAI08Results{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type RQAI08Results struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewRQAI08ResultsSlice will construct a slice of type RQAI08Results
func NewRQAI08ResultsSlice(input hl7.HL7Type) []RQAI08Results {
	values := make([]RQAI08Results, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQAI08Results(input.Index(i))
	}
	return values
}

// NewCQUI19ResourceObservation creates an implementation of CQUI19ResourceObservation
func NewCQUI19ResourceObservation(input hl7.HL7Type) CQUI19ResourceObservation {
	v := CQUI19ResourceObservation{}
	v.ObservationResult = NewOBXSlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CQUI19ResourceObservation struct {
	ObservationResult        []OBX
	ParticipationInformation []PRT
}

// NewCQUI19ResourceObservationSlice will construct a slice of type CQUI19ResourceObservation
func NewCQUI19ResourceObservationSlice(input hl7.HL7Type) []CQUI19ResourceObservation {
	values := make([]CQUI19ResourceObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCQUI19ResourceObservation(input.Index(i))
	}
	return values
}

// NewOMPO09AdditionalDemographics creates an implementation of OMPO09AdditionalDemographics
func NewOMPO09AdditionalDemographics(input hl7.HL7Type) OMPO09AdditionalDemographics {
	v := OMPO09AdditionalDemographics{}
	v.PatientAdditionalDemographic = NewPD1(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type OMPO09AdditionalDemographics struct {
	PatientAdditionalDemographic PD1
	ParticipationInformation     []PRT
}

// NewOMPO09AdditionalDemographicsSlice will construct a slice of type OMPO09AdditionalDemographics
func NewOMPO09AdditionalDemographicsSlice(input hl7.HL7Type) []OMPO09AdditionalDemographics {
	values := make([]OMPO09AdditionalDemographics, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewOMPO09AdditionalDemographics(input.Index(i))
	}
	return values
}

// NewPPPPCCProblem creates an implementation of PPPPCCProblem
func NewPPPPCCProblem(input hl7.HL7Type) PPPPCCProblem {
	v := PPPPCCProblem{}
	v.ProblemDetails = NewPRB(input.Index(0))
	v.NotesAndComments = NewNTESlice(input.Index(1))
	v.Variance = NewVARSlice(input.Index(2))
	v.ProblemRole = NewPPPPCCProblemRoleSlice(input.Index(3))
	v.ProblemObservation = NewPPPPCCProblemObservationSlice(input.Index(4))
	v.Goal = NewPPPPCCGoalSlice(input.Index(5))
	v.Order = NewPPPPCCOrderSlice(input.Index(6))
	return v
}

type PPPPCCProblem struct {
	ProblemDetails     PRB
	NotesAndComments   []NTE
	Variance           []VAR
	ProblemRole        []PPPPCCProblemRole
	ProblemObservation []PPPPCCProblemObservation
	Goal               []PPPPCCGoal
	Order              []PPPPCCOrder
}

// NewPPPPCCProblemSlice will construct a slice of type PPPPCCProblem
func NewPPPPCCProblemSlice(input hl7.HL7Type) []PPPPCCProblem {
	values := make([]PPPPCCProblem, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPPPCCProblem(input.Index(i))
	}
	return values
}

// NewRDSO13PatientVisit creates an implementation of RDSO13PatientVisit
func NewRDSO13PatientVisit(input hl7.HL7Type) RDSO13PatientVisit {
	v := RDSO13PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.AccessRestriction = NewARVSlice(input.Index(3))
	return v
}

type RDSO13PatientVisit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ParticipationInformation          []PRT
	AccessRestriction                 []ARV
}

// NewRDSO13PatientVisitSlice will construct a slice of type RDSO13PatientVisit
func NewRDSO13PatientVisitSlice(input hl7.HL7Type) []RDSO13PatientVisit {
	values := make([]RDSO13PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRDSO13PatientVisit(input.Index(i))
	}
	return values
}

// NewCQUI19Insurance creates an implementation of CQUI19Insurance
func NewCQUI19Insurance(input hl7.HL7Type) CQUI19Insurance {
	v := CQUI19Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3(input.Index(2))
	return v
}

type CQUI19Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification IN3
}

// NewCQUI19InsuranceSlice will construct a slice of type CQUI19Insurance
func NewCQUI19InsuranceSlice(input hl7.HL7Type) []CQUI19Insurance {
	values := make([]CQUI19Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCQUI19Insurance(input.Index(i))
	}
	return values
}

// NewRRII14Procedure creates an implementation of RRII14Procedure
func NewRRII14Procedure(input hl7.HL7Type) RRII14Procedure {
	v := RRII14Procedure{}
	v.Procedures = NewPR1(input.Index(0))
	v.AuthorizationContact = NewRRII14AuthorizationContact(input.Index(1))
	return v
}

type RRII14Procedure struct {
	Procedures           PR1
	AuthorizationContact RRII14AuthorizationContact
}

// NewRRII14ProcedureSlice will construct a slice of type RRII14Procedure
func NewRRII14ProcedureSlice(input hl7.HL7Type) []RRII14Procedure {
	values := make([]RRII14Procedure, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRRII14Procedure(input.Index(i))
	}
	return values
}

// NewRSPE22PslItemInfo creates an implementation of RSPE22PslItemInfo
func NewRSPE22PslItemInfo(input hl7.HL7Type) RSPE22PslItemInfo {
	v := RSPE22PslItemInfo{}
	v.ProductServiceLineItem = NewPSL(input.Index(0))
	return v
}

type RSPE22PslItemInfo struct {
	ProductServiceLineItem PSL
}

// NewRSPE22PslItemInfoSlice will construct a slice of type RSPE22PslItemInfo
func NewRSPE22PslItemInfoSlice(input hl7.HL7Type) []RSPE22PslItemInfo {
	values := make([]RSPE22PslItemInfo, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPE22PslItemInfo(input.Index(i))
	}
	return values
}

// NewCCUI20ProviderContact creates an implementation of CCUI20ProviderContact
func NewCCUI20ProviderContact(input hl7.HL7Type) CCUI20ProviderContact {
	v := CCUI20ProviderContact{}
	v.ProviderData = NewPRD(input.Index(0))
	v.ContactData = NewCTDSlice(input.Index(1))
	return v
}

type CCUI20ProviderContact struct {
	ProviderData PRD
	ContactData  []CTD
}

// NewCCUI20ProviderContactSlice will construct a slice of type CCUI20ProviderContact
func NewCCUI20ProviderContactSlice(input hl7.HL7Type) []CCUI20ProviderContact {
	values := make([]CCUI20ProviderContact, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCUI20ProviderContact(input.Index(i))
	}
	return values
}

// NewREFI14AuthorizationContact creates an implementation of REFI14AuthorizationContact
func NewREFI14AuthorizationContact(input hl7.HL7Type) REFI14AuthorizationContact {
	v := REFI14AuthorizationContact{}
	v.AuthorizationInformation = NewAUT(input.Index(0))
	v.ContactData = NewCTD(input.Index(1))
	return v
}

type REFI14AuthorizationContact struct {
	AuthorizationInformation AUT
	ContactData              CTD
}

// NewREFI14AuthorizationContactSlice will construct a slice of type REFI14AuthorizationContact
func NewREFI14AuthorizationContactSlice(input hl7.HL7Type) []REFI14AuthorizationContact {
	values := make([]REFI14AuthorizationContact, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewREFI14AuthorizationContact(input.Index(i))
	}
	return values
}

// NewPPPPCCProblemRole creates an implementation of PPPPCCProblemRole
func NewPPPPCCProblemRole(input hl7.HL7Type) PPPPCCProblemRole {
	v := PPPPCCProblemRole{}
	v.Role = NewROL(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type PPPPCCProblemRole struct {
	Role     ROL
	Variance []VAR
}

// NewPPPPCCProblemRoleSlice will construct a slice of type PPPPCCProblemRole
func NewPPPPCCProblemRoleSlice(input hl7.HL7Type) []PPPPCCProblemRole {
	values := make([]PPPPCCProblemRole, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPPPCCProblemRole(input.Index(i))
	}
	return values
}

// NewCRMC02PatientVisit creates an implementation of CRMC02PatientVisit
func NewCRMC02PatientVisit(input hl7.HL7Type) CRMC02PatientVisit {
	v := CRMC02PatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CRMC02PatientVisit struct {
	PatientVisit             PV1
	ParticipationInformation []PRT
}

// NewCRMC02PatientVisitSlice will construct a slice of type CRMC02PatientVisit
func NewCRMC02PatientVisitSlice(input hl7.HL7Type) []CRMC02PatientVisit {
	values := make([]CRMC02PatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCRMC02PatientVisit(input.Index(i))
	}
	return values
}

// NewADTA44Patient creates an implementation of ADTA44Patient
func NewADTA44Patient(input hl7.HL7Type) ADTA44Patient {
	v := ADTA44Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.AccessRestriction = NewARVSlice(input.Index(2))
	v.MergePatientInformation = NewMRG(input.Index(3))
	return v
}

type ADTA44Patient struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	AccessRestriction            []ARV
	MergePatientInformation      MRG
}

// NewADTA44PatientSlice will construct a slice of type ADTA44Patient
func NewADTA44PatientSlice(input hl7.HL7Type) []ADTA44Patient {
	values := make([]ADTA44Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewADTA44Patient(input.Index(i))
	}
	return values
}

// NewCCRI16Problem creates an implementation of CCRI16Problem
func NewCCRI16Problem(input hl7.HL7Type) CCRI16Problem {
	v := CCRI16Problem{}
	v.ProblemDetails = NewPRB(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	v.RoleProblem = NewCCRI16RoleProblemSlice(input.Index(2))
	v.ProblemObservation = NewCCRI16ProblemObservationSlice(input.Index(3))
	return v
}

type CCRI16Problem struct {
	ProblemDetails     PRB
	Variance           []VAR
	RoleProblem        []CCRI16RoleProblem
	ProblemObservation []CCRI16ProblemObservation
}

// NewCCRI16ProblemSlice will construct a slice of type CCRI16Problem
func NewCCRI16ProblemSlice(input hl7.HL7Type) []CCRI16Problem {
	values := make([]CCRI16Problem, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI16Problem(input.Index(i))
	}
	return values
}

// NewBARP01Visit creates an implementation of BARP01Visit
func NewBARP01Visit(input hl7.HL7Type) BARP01Visit {
	v := BARP01Visit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	v.ParticipationInformation = NewPRTSlice(input.Index(2))
	v.Role = NewROLSlice(input.Index(3))
	v.Disability = NewDB1Slice(input.Index(4))
	v.ObservationResult = NewOBXSlice(input.Index(5))
	v.PatientAllergyInformation = NewAL1Slice(input.Index(6))
	v.Diagnosis = NewDG1Slice(input.Index(7))
	v.DiagnosisRelatedGroup = NewDRG(input.Index(8))
	v.Procedure = NewBARP01ProcedureSlice(input.Index(9))
	v.Guarantor = NewGT1Slice(input.Index(10))
	v.NextOfKinAssociatedParties = NewNK1Slice(input.Index(11))
	v.Insurance = NewBARP01InsuranceSlice(input.Index(12))
	v.Accident = NewACC(input.Index(13))
	v.Ub82 = NewUB1(input.Index(14))
	v.UniformBillingData = NewUB2(input.Index(15))
	return v
}

type BARP01Visit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
	ParticipationInformation          []PRT
	Role                              []ROL
	Disability                        []DB1
	ObservationResult                 []OBX
	PatientAllergyInformation         []AL1
	Diagnosis                         []DG1
	DiagnosisRelatedGroup             DRG
	Procedure                         []BARP01Procedure
	Guarantor                         []GT1
	NextOfKinAssociatedParties        []NK1
	Insurance                         []BARP01Insurance
	Accident                          ACC
	Ub82                              UB1
	UniformBillingData                UB2
}

// NewBARP01VisitSlice will construct a slice of type BARP01Visit
func NewBARP01VisitSlice(input hl7.HL7Type) []BARP01Visit {
	values := make([]BARP01Visit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewBARP01Visit(input.Index(i))
	}
	return values
}

// NewCCRI18GoalObservation creates an implementation of CCRI18GoalObservation
func NewCCRI18GoalObservation(input hl7.HL7Type) CCRI18GoalObservation {
	v := CCRI18GoalObservation{}
	v.ObservationResult = NewOBXSlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CCRI18GoalObservation struct {
	ObservationResult        []OBX
	ParticipationInformation []PRT
}

// NewCCRI18GoalObservationSlice will construct a slice of type CCRI18GoalObservation
func NewCCRI18GoalObservationSlice(input hl7.HL7Type) []CCRI18GoalObservation {
	values := make([]CCRI18GoalObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI18GoalObservation(input.Index(i))
	}
	return values
}

// NewPINI07Insurance creates an implementation of PINI07Insurance
func NewPINI07Insurance(input hl7.HL7Type) PINI07Insurance {
	v := PINI07Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3(input.Index(2))
	return v
}

type PINI07Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification IN3
}

// NewPINI07InsuranceSlice will construct a slice of type PINI07Insurance
func NewPINI07InsuranceSlice(input hl7.HL7Type) []PINI07Insurance {
	values := make([]PINI07Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPINI07Insurance(input.Index(i))
	}
	return values
}

// NewRQII03Insurance creates an implementation of RQII03Insurance
func NewRQII03Insurance(input hl7.HL7Type) RQII03Insurance {
	v := RQII03Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3(input.Index(2))
	return v
}

type RQII03Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification IN3
}

// NewRQII03InsuranceSlice will construct a slice of type RQII03Insurance
func NewRQII03InsuranceSlice(input hl7.HL7Type) []RQII03Insurance {
	values := make([]RQII03Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQII03Insurance(input.Index(i))
	}
	return values
}

// NewSRMS06GeneralResource creates an implementation of SRMS06GeneralResource
func NewSRMS06GeneralResource(input hl7.HL7Type) SRMS06GeneralResource {
	v := SRMS06GeneralResource{}
	v.AppointmentInformationGeneralResource = NewAIG(input.Index(0))
	v.AppointmentPreferences = NewAPR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type SRMS06GeneralResource struct {
	AppointmentInformationGeneralResource AIG
	AppointmentPreferences                APR
	NotesAndComments                      []NTE
}

// NewSRMS06GeneralResourceSlice will construct a slice of type SRMS06GeneralResource
func NewSRMS06GeneralResourceSlice(input hl7.HL7Type) []SRMS06GeneralResource {
	values := make([]SRMS06GeneralResource, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS06GeneralResource(input.Index(i))
	}
	return values
}

// NewPPRPC2GoalRole creates an implementation of PPRPC2GoalRole
func NewPPRPC2GoalRole(input hl7.HL7Type) PPRPC2GoalRole {
	v := PPRPC2GoalRole{}
	v.Role = NewROL(input.Index(0))
	v.Variance = NewVARSlice(input.Index(1))
	return v
}

type PPRPC2GoalRole struct {
	Role     ROL
	Variance []VAR
}

// NewPPRPC2GoalRoleSlice will construct a slice of type PPRPC2GoalRole
func NewPPRPC2GoalRoleSlice(input hl7.HL7Type) []PPRPC2GoalRole {
	values := make([]PPRPC2GoalRole, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPRPC2GoalRole(input.Index(i))
	}
	return values
}

// NewPPPPCCChoice creates an implementation of PPPPCCChoice
func NewPPPPCCChoice(input hl7.HL7Type) PPPPCCChoice {
	v := PPPPCCChoice{}
	v.ObservationRequest = NewOBR(input.Index(0))
	v.AnyHl7Segment = NewHxx(input.Index(1))
	return v
}

type PPPPCCChoice struct {
	ObservationRequest OBR
	AnyHl7Segment      Hxx
}

// NewPPPPCCChoiceSlice will construct a slice of type PPPPCCChoice
func NewPPPPCCChoiceSlice(input hl7.HL7Type) []PPPPCCChoice {
	values := make([]PPPPCCChoice, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPPPCCChoice(input.Index(i))
	}
	return values
}

// NewRDRRDRDefinition creates an implementation of RDRRDRDefinition
func NewRDRRDRDefinition(input hl7.HL7Type) RDRRDRDefinition {
	v := RDRRDRDefinition{}
	v.Withdrawn = NewQRD(input.Index(0))
	v.SecondWithdrawn = NewQRF(input.Index(1))
	v.Patient = NewRDRRDRPatient(input.Index(2))
	v.Order = NewRDRRDROrderSlice(input.Index(3))
	return v
}

type RDRRDRDefinition struct {
	Withdrawn       QRD
	SecondWithdrawn QRF
	Patient         RDRRDRPatient
	Order           []RDRRDROrder
}

// NewRDRRDRDefinitionSlice will construct a slice of type RDRRDRDefinition
func NewRDRRDRDefinitionSlice(input hl7.HL7Type) []RDRRDRDefinition {
	values := make([]RDRRDRDefinition, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRDRRDRDefinition(input.Index(i))
	}
	return values
}

// NewRDEO11Insurance creates an implementation of RDEO11Insurance
func NewRDEO11Insurance(input hl7.HL7Type) RDEO11Insurance {
	v := RDEO11Insurance{}
	v.Insurance = NewIN1(input.Index(0))
	v.InsuranceAdditionalInformation = NewIN2(input.Index(1))
	v.InsuranceAdditionalInformationCertification = NewIN3(input.Index(2))
	return v
}

type RDEO11Insurance struct {
	Insurance                                   IN1
	InsuranceAdditionalInformation              IN2
	InsuranceAdditionalInformationCertification IN3
}

// NewRDEO11InsuranceSlice will construct a slice of type RDEO11Insurance
func NewRDEO11InsuranceSlice(input hl7.HL7Type) []RDEO11Insurance {
	values := make([]RDEO11Insurance, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRDEO11Insurance(input.Index(i))
	}
	return values
}

// NewPEXP08Experience creates an implementation of PEXP08Experience
func NewPEXP08Experience(input hl7.HL7Type) PEXP08Experience {
	v := PEXP08Experience{}
	v.ProductExperienceSender = NewPES(input.Index(0))
	v.PexObservation = NewPEXP08PexObservationSlice(input.Index(1))
	return v
}

type PEXP08Experience struct {
	ProductExperienceSender PES
	PexObservation          []PEXP08PexObservation
}

// NewPEXP08ExperienceSlice will construct a slice of type PEXP08Experience
func NewPEXP08ExperienceSlice(input hl7.HL7Type) []PEXP08Experience {
	values := make([]PEXP08Experience, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPEXP08Experience(input.Index(i))
	}
	return values
}

// NewPPPPCCPatientVisit creates an implementation of PPPPCCPatientVisit
func NewPPPPCCPatientVisit(input hl7.HL7Type) PPPPCCPatientVisit {
	v := PPPPCCPatientVisit{}
	v.PatientVisit = NewPV1(input.Index(0))
	v.PatientVisitAdditionalInformation = NewPV2(input.Index(1))
	return v
}

type PPPPCCPatientVisit struct {
	PatientVisit                      PV1
	PatientVisitAdditionalInformation PV2
}

// NewPPPPCCPatientVisitSlice will construct a slice of type PPPPCCPatientVisit
func NewPPPPCCPatientVisitSlice(input hl7.HL7Type) []PPPPCCPatientVisit {
	values := make([]PPPPCCPatientVisit, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewPPPPCCPatientVisit(input.Index(i))
	}
	return values
}

// NewRQAI09Procedure creates an implementation of RQAI09Procedure
func NewRQAI09Procedure(input hl7.HL7Type) RQAI09Procedure {
	v := RQAI09Procedure{}
	v.Procedures = NewPR1(input.Index(0))
	v.Authorization2 = NewRQAI09Authorization2(input.Index(1))
	return v
}

type RQAI09Procedure struct {
	Procedures     PR1
	Authorization2 RQAI09Authorization2
}

// NewRQAI09ProcedureSlice will construct a slice of type RQAI09Procedure
func NewRQAI09ProcedureSlice(input hl7.HL7Type) []RQAI09Procedure {
	values := make([]RQAI09Procedure, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRQAI09Procedure(input.Index(i))
	}
	return values
}

// NewRDRRDREncoding creates an implementation of RDRRDREncoding
func NewRDRRDREncoding(input hl7.HL7Type) RDRRDREncoding {
	v := RDRRDREncoding{}
	v.PharmacyTreatmentEncodedOrder = NewRXE(input.Index(0))
	v.TimingEncoded = NewRDRRDRTimingEncodedSlice(input.Index(1))
	v.PharmacyTreatmentRoute = NewRXRSlice(input.Index(2))
	v.PharmacyTreatmentComponentOrder = NewRXCSlice(input.Index(3))
	return v
}

type RDRRDREncoding struct {
	PharmacyTreatmentEncodedOrder   RXE
	TimingEncoded                   []RDRRDRTimingEncoded
	PharmacyTreatmentRoute          []RXR
	PharmacyTreatmentComponentOrder []RXC
}

// NewRDRRDREncodingSlice will construct a slice of type RDRRDREncoding
func NewRDRRDREncodingSlice(input hl7.HL7Type) []RDRRDREncoding {
	values := make([]RDRRDREncoding, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRDRRDREncoding(input.Index(i))
	}
	return values
}

// NewRSPZ88Patient creates an implementation of RSPZ88Patient
func NewRSPZ88Patient(input hl7.HL7Type) RSPZ88Patient {
	v := RSPZ88Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.Allergy = NewRSPZ88Allergy(input.Index(3))
	return v
}

type RSPZ88Patient struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	NotesAndComments             []NTE
	Allergy                      RSPZ88Allergy
}

// NewRSPZ88PatientSlice will construct a slice of type RSPZ88Patient
func NewRSPZ88PatientSlice(input hl7.HL7Type) []RSPZ88Patient {
	values := make([]RSPZ88Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPZ88Patient(input.Index(i))
	}
	return values
}

// NewCCRI16ClinicalOrderDetail creates an implementation of CCRI16ClinicalOrderDetail
func NewCCRI16ClinicalOrderDetail(input hl7.HL7Type) CCRI16ClinicalOrderDetail {
	v := CCRI16ClinicalOrderDetail{}
	v.ClinicalOrderObject = NewCCRI16ClinicalOrderObject(input.Index(0))
	v.ClinicalOrderObservation = NewCCRI16ClinicalOrderObservationSlice(input.Index(1))
	return v
}

type CCRI16ClinicalOrderDetail struct {
	ClinicalOrderObject      CCRI16ClinicalOrderObject
	ClinicalOrderObservation []CCRI16ClinicalOrderObservation
}

// NewCCRI16ClinicalOrderDetailSlice will construct a slice of type CCRI16ClinicalOrderDetail
func NewCCRI16ClinicalOrderDetailSlice(input hl7.HL7Type) []CCRI16ClinicalOrderDetail {
	values := make([]CCRI16ClinicalOrderDetail, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCRI16ClinicalOrderDetail(input.Index(i))
	}
	return values
}

// NewSRMS01Service creates an implementation of SRMS01Service
func NewSRMS01Service(input hl7.HL7Type) SRMS01Service {
	v := SRMS01Service{}
	v.AppointmentInformation = NewAIS(input.Index(0))
	v.AppointmentPreferences = NewAPR(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type SRMS01Service struct {
	AppointmentInformation AIS
	AppointmentPreferences APR
	NotesAndComments       []NTE
}

// NewSRMS01ServiceSlice will construct a slice of type SRMS01Service
func NewSRMS01ServiceSlice(input hl7.HL7Type) []SRMS01Service {
	values := make([]SRMS01Service, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewSRMS01Service(input.Index(i))
	}
	return values
}

// NewRSPZ82Patient creates an implementation of RSPZ82Patient
func NewRSPZ82Patient(input hl7.HL7Type) RSPZ82Patient {
	v := RSPZ82Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.PatientAdditionalDemographic = NewPD1(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	v.Visit = NewRSPZ82Visit(input.Index(3))
	return v
}

type RSPZ82Patient struct {
	PatientIdentification        PID
	PatientAdditionalDemographic PD1
	NotesAndComments             []NTE
	Visit                        RSPZ82Visit
}

// NewRSPZ82PatientSlice will construct a slice of type RSPZ82Patient
func NewRSPZ82PatientSlice(input hl7.HL7Type) []RSPZ82Patient {
	values := make([]RSPZ82Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRSPZ82Patient(input.Index(i))
	}
	return values
}

// NewCRMC08Patient creates an implementation of CRMC08Patient
func NewCRMC08Patient(input hl7.HL7Type) CRMC08Patient {
	v := CRMC08Patient{}
	v.PatientIdentification = NewPID(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.AccessRestriction = NewARVSlice(input.Index(2))
	v.PatientVisit = NewCRMC08PatientVisit(input.Index(3))
	v.ClinicalStudyRegistration = NewCSR(input.Index(4))
	v.ClinicalStudyPhase = NewCSPSlice(input.Index(5))
	return v
}

type CRMC08Patient struct {
	PatientIdentification     PID
	ParticipationInformation  []PRT
	AccessRestriction         []ARV
	PatientVisit              CRMC08PatientVisit
	ClinicalStudyRegistration CSR
	ClinicalStudyPhase        []CSP
}

// NewCRMC08PatientSlice will construct a slice of type CRMC08Patient
func NewCRMC08PatientSlice(input hl7.HL7Type) []CRMC08Patient {
	values := make([]CRMC08Patient, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCRMC08Patient(input.Index(i))
	}
	return values
}

// NewCCMI21ResourceObservation creates an implementation of CCMI21ResourceObservation
func NewCCMI21ResourceObservation(input hl7.HL7Type) CCMI21ResourceObservation {
	v := CCMI21ResourceObservation{}
	v.ObservationResult = NewOBXSlice(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	return v
}

type CCMI21ResourceObservation struct {
	ObservationResult        []OBX
	ParticipationInformation []PRT
}

// NewCCMI21ResourceObservationSlice will construct a slice of type CCMI21ResourceObservation
func NewCCMI21ResourceObservationSlice(input hl7.HL7Type) []CCMI21ResourceObservation {
	values := make([]CCMI21ResourceObservation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewCCMI21ResourceObservation(input.Index(i))
	}
	return values
}

// NewRDSO13Observation creates an implementation of RDSO13Observation
func NewRDSO13Observation(input hl7.HL7Type) RDSO13Observation {
	v := RDSO13Observation{}
	v.ObservationResult = NewOBX(input.Index(0))
	v.ParticipationInformation = NewPRTSlice(input.Index(1))
	v.NotesAndComments = NewNTESlice(input.Index(2))
	return v
}

type RDSO13Observation struct {
	ObservationResult        OBX
	ParticipationInformation []PRT
	NotesAndComments         []NTE
}

// NewRDSO13ObservationSlice will construct a slice of type RDSO13Observation
func NewRDSO13ObservationSlice(input hl7.HL7Type) []RDSO13Observation {
	values := make([]RDSO13Observation, input.Len())
	for i := 0; i < input.Len(); i++ {
		values[i] = NewRDSO13Observation(input.Index(i))
	}
	return values
}
